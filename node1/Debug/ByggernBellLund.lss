
ByggernBellLund.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00000eec  00000f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800196  00800196  00001016  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001016  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001074  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002020  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  000032e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7d  00000000  00000000  00003e1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005ec  00000000  00000000  00004898  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059d  00000000  00000000  00004e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001895  00000000  00000000  00005421  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  00006cb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 b6 01 	jmp	0x36c	; 0x36c <__vector_14>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec ee       	ldi	r30, 0xEC	; 236
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 39       	cpi	r26, 0x96	; 150
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e9       	ldi	r26, 0x96	; 150
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 3a       	cpi	r26, 0xA0	; 160
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 20 02 	call	0x440	; 0x440 <main>
  a6:	0c 94 74 07 	jmp	0xee8	; 0xee8 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
  ae:	0e 94 e5 00 	call	0x1ca	; 0x1ca <MCP_init>
	//Enter config mode
	MCP_reset();
  b2:	0e 94 cb 00 	call	0x196	; 0x196 <MCP_reset>
	//set loopback mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	60 ee       	ldi	r22, 0xE0	; 224
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
  c0:	4f ef       	ldi	r20, 0xFF	; 255
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	8b e2       	ldi	r24, 0x2B	; 43
  c6:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
  d0:	80 7e       	andi	r24, 0xE0	; 224
  d2:	59 f0       	breq	.+22     	; 0xea <CAN_init+0x3c>
		printf("System not in normal mode. Abandon ship.");
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	9f 93       	push	r25
  da:	8f 93       	push	r24
  dc:	0e 94 56 04 	call	0x8ac	; 0x8ac <printf>
		return 1;
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	08 95       	ret
	}
	return 0;
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	90 e0       	ldi	r25, 0x00	; 0
}
  ee:	08 95       	ret

000000f0 <CAN_transmit>:

void CAN_transmit(Message *m){
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	8c 01       	movw	r16, r24
	//Write id to register
	MCP_write(MCP_TXB0SIDL,m->id);
  f8:	fc 01       	movw	r30, r24
  fa:	60 81       	ld	r22, Z
  fc:	82 e3       	ldi	r24, 0x32	; 50
  fe:	0e 94 01 01 	call	0x202	; 0x202 <MCP_write>
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
 102:	f8 01       	movw	r30, r16
 104:	61 81       	ldd	r22, Z+1	; 0x01
 106:	85 e3       	ldi	r24, 0x35	; 53
 108:	0e 94 01 01 	call	0x202	; 0x202 <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
 10c:	f8 01       	movw	r30, r16
 10e:	81 81       	ldd	r24, Z+1	; 0x01
 110:	88 23       	and	r24, r24
 112:	71 f0       	breq	.+28     	; 0x130 <CAN_transmit+0x40>
 114:	c0 e0       	ldi	r28, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
 116:	f8 01       	movw	r30, r16
 118:	ec 0f       	add	r30, r28
 11a:	f1 1d       	adc	r31, r1
 11c:	62 81       	ldd	r22, Z+2	; 0x02
 11e:	86 e3       	ldi	r24, 0x36	; 54
 120:	8c 0f       	add	r24, r28
 122:	0e 94 01 01 	call	0x202	; 0x202 <MCP_write>
	//Write id to register
	MCP_write(MCP_TXB0SIDL,m->id);
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	f8 01       	movw	r30, r16
 12a:	81 81       	ldd	r24, Z+1	; 0x01
 12c:	c8 17       	cp	r28, r24
 12e:	98 f3       	brcs	.-26     	; 0x116 <CAN_transmit+0x26>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 15 01 	call	0x22a	; 0x22a <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <CAN_receive>:

int CAN_receive(Message *m){
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	8c 01       	movw	r16, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
 146:	8c e2       	ldi	r24, 0x2C	; 44
 148:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCP_read>
 14c:	80 ff       	sbrs	r24, 0
 14e:	1d c0       	rjmp	.+58     	; 0x18a <CAN_receive+0x4c>
		m->length = MCP_read(MCP_RBB0DLC);
 150:	85 e6       	ldi	r24, 0x65	; 101
 152:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCP_read>
 156:	f8 01       	movw	r30, r16
 158:	81 83       	std	Z+1, r24	; 0x01
		for(uint8_t i = 0; i < m->length; i++){
 15a:	88 23       	and	r24, r24
 15c:	71 f0       	breq	.+28     	; 0x17a <CAN_receive+0x3c>
 15e:	c0 e0       	ldi	r28, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
 160:	86 e6       	ldi	r24, 0x66	; 102
 162:	8c 0f       	add	r24, r28
 164:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCP_read>
 168:	f8 01       	movw	r30, r16
 16a:	ec 0f       	add	r30, r28
 16c:	f1 1d       	adc	r31, r1
 16e:	82 83       	std	Z+2, r24	; 0x02

int CAN_receive(Message *m){
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		for(uint8_t i = 0; i < m->length; i++){
 170:	cf 5f       	subi	r28, 0xFF	; 255
 172:	f8 01       	movw	r30, r16
 174:	81 81       	ldd	r24, Z+1	; 0x01
 176:	c8 17       	cp	r28, r24
 178:	98 f3       	brcs	.-26     	; 0x160 <CAN_receive+0x22>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	8c e2       	ldi	r24, 0x2C	; 44
 180:	0e 94 36 01 	call	0x26c	; 0x26c <MCP_bit_modify>
		return 0;
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <CAN_receive+0x50>
	}
	return 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 196:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
 19a:	80 ec       	ldi	r24, 0xC0	; 192
 19c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 1a0:	0e 94 ef 01 	call	0x3de	; 0x3de <SPI_ss_high>
 1a4:	08 95       	ret

000001a6 <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 1aa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
 1ae:	83 e0       	ldi	r24, 0x03	; 3
 1b0:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	SPI_send(address);
 1b4:	8c 2f       	mov	r24, r28
 1b6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	uint8_t data = SPI_receive();
 1ba:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <SPI_receive>
 1be:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 1c0:	0e 94 ef 01 	call	0x3de	; 0x3de <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
 1c4:	8c 2f       	mov	r24, r28
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
 1ca:	80 e8       	ldi	r24, 0x80	; 128
 1cc:	95 e2       	ldi	r25, 0x25	; 37
 1ce:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uartInit>
	
	//Start SPI driver
	SPI_init();
 1d2:	0e 94 de 01 	call	0x3bc	; 0x3bc <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
 1d6:	0e 94 cb 00 	call	0x196	; 0x196 <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
 1da:	8e e0       	ldi	r24, 0x0E	; 14
 1dc:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
 1e0:	80 7e       	andi	r24, 0xE0	; 224
 1e2:	80 38       	cpi	r24, 0x80	; 128
 1e4:	59 f0       	breq	.+22     	; 0x1fc <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
 1e6:	8f e2       	ldi	r24, 0x2F	; 47
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	9f 93       	push	r25
 1ec:	8f 93       	push	r24
 1ee:	0e 94 56 04 	call	0x8ac	; 0x8ac <printf>
		return 1;
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	08 95       	ret
	}
	return 0;
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
}
 200:	08 95       	ret

00000202 <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	d8 2f       	mov	r29, r24
 208:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 20a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	SPI_send(address);
 214:	8d 2f       	mov	r24, r29
 216:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	SPI_send(data);
 21a:	8c 2f       	mov	r24, r28
 21c:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 220:	0e 94 ef 01 	call	0x3de	; 0x3de <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 22e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
 232:	8c 2f       	mov	r24, r28
 234:	83 70       	andi	r24, 0x03	; 3
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	51 f0       	breq	.+20     	; 0x24e <MCP_rts+0x24>
 23a:	28 f0       	brcs	.+10     	; 0x246 <MCP_rts+0x1c>
 23c:	82 30       	cpi	r24, 0x02	; 2
 23e:	59 f0       	breq	.+22     	; 0x256 <MCP_rts+0x2c>
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	69 f0       	breq	.+26     	; 0x25e <MCP_rts+0x34>
 244:	0f c0       	rjmp	.+30     	; 0x264 <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
 246:	81 e8       	ldi	r24, 0x81	; 129
 248:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
			break;
 24c:	0b c0       	rjmp	.+22     	; 0x264 <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
 24e:	82 e8       	ldi	r24, 0x82	; 130
 250:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
			break;
 254:	07 c0       	rjmp	.+14     	; 0x264 <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
 256:	84 e8       	ldi	r24, 0x84	; 132
 258:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
			break;
 25c:	03 c0       	rjmp	.+6      	; 0x264 <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
 25e:	87 e8       	ldi	r24, 0x87	; 135
 260:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 264:	0e 94 ef 01 	call	0x3de	; 0x3de <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	18 2f       	mov	r17, r24
 274:	d6 2f       	mov	r29, r22
 276:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 278:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
 27c:	85 e0       	ldi	r24, 0x05	; 5
 27e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	SPI_send(address);
 282:	81 2f       	mov	r24, r17
 284:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	SPI_send(mask);
 288:	8d 2f       	mov	r24, r29
 28a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	SPI_send(data);
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 294:	0e 94 ef 01 	call	0x3de	; 0x3de <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	08 95       	ret

000002a0 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 2a0:	e0 e0       	ldi	r30, 0x00	; 0
 2a2:	f0 e1       	ldi	r31, 0x10	; 16
 2a4:	8e ea       	ldi	r24, 0xAE	; 174
 2a6:	80 83       	st	Z, r24
 2a8:	81 ea       	ldi	r24, 0xA1	; 161
 2aa:	80 83       	st	Z, r24
 2ac:	8a ed       	ldi	r24, 0xDA	; 218
 2ae:	80 83       	st	Z, r24
 2b0:	82 e1       	ldi	r24, 0x12	; 18
 2b2:	80 83       	st	Z, r24
 2b4:	88 ec       	ldi	r24, 0xC8	; 200
 2b6:	80 83       	st	Z, r24
 2b8:	88 ea       	ldi	r24, 0xA8	; 168
 2ba:	80 83       	st	Z, r24
 2bc:	8f e3       	ldi	r24, 0x3F	; 63
 2be:	80 83       	st	Z, r24
 2c0:	85 ed       	ldi	r24, 0xD5	; 213
 2c2:	80 83       	st	Z, r24
 2c4:	80 e8       	ldi	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24
 2c8:	81 e8       	ldi	r24, 0x81	; 129
 2ca:	80 83       	st	Z, r24
 2cc:	80 e5       	ldi	r24, 0x50	; 80
 2ce:	80 83       	st	Z, r24
 2d0:	89 ed       	ldi	r24, 0xD9	; 217
 2d2:	80 83       	st	Z, r24
 2d4:	81 e2       	ldi	r24, 0x21	; 33
 2d6:	80 83       	st	Z, r24
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	80 83       	st	Z, r24
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	80 83       	st	Z, r24
 2e0:	8b ed       	ldi	r24, 0xDB	; 219
 2e2:	80 83       	st	Z, r24
 2e4:	80 e3       	ldi	r24, 0x30	; 48
 2e6:	80 83       	st	Z, r24
 2e8:	8d ea       	ldi	r24, 0xAD	; 173
 2ea:	80 83       	st	Z, r24
 2ec:	10 82       	st	Z, r1
 2ee:	84 ea       	ldi	r24, 0xA4	; 164
 2f0:	80 83       	st	Z, r24
 2f2:	86 ea       	ldi	r24, 0xA6	; 166
 2f4:	80 83       	st	Z, r24
 2f6:	8f ea       	ldi	r24, 0xAF	; 175
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret

000002fc <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
 2fc:	af 92       	push	r10
 2fe:	bf 92       	push	r11
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	7c 01       	movw	r14, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
 312:	c0 e0       	ldi	r28, 0x00	; 0
 314:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
 316:	c1 2c       	mov	r12, r1
 318:	d1 2c       	mov	r13, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 31a:	a1 2c       	mov	r10, r1
 31c:	68 94       	set
 31e:	bb 24       	eor	r11, r11
 320:	b4 f8       	bld	r11, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
 322:	00 e0       	ldi	r16, 0x00	; 0
 324:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
 326:	ce 01       	movw	r24, r28
 328:	9e 01       	movw	r18, r28
 32a:	2f 77       	andi	r18, 0x7F	; 127
 32c:	33 27       	eor	r19, r19
 32e:	23 2b       	or	r18, r19
 330:	39 f4       	brne	.+14     	; 0x340 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
 332:	20 eb       	ldi	r18, 0xB0	; 176
 334:	2c 0d       	add	r18, r12
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 336:	f5 01       	movw	r30, r10
 338:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
 33a:	ff ef       	ldi	r31, 0xFF	; 255
 33c:	cf 1a       	sub	r12, r31
 33e:	df 0a       	sbc	r13, r31
		}
		write_data(getSRAM(i + start));
 340:	8e 0d       	add	r24, r14
 342:	9f 1d       	adc	r25, r15
 344:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
 348:	f8 01       	movw	r30, r16
 34a:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
 34c:	21 96       	adiw	r28, 0x01	; 1
 34e:	c1 15       	cp	r28, r1
 350:	f4 e0       	ldi	r31, 0x04	; 4
 352:	df 07       	cpc	r29, r31
 354:	41 f7       	brne	.-48     	; 0x326 <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	bf 90       	pop	r11
 368:	af 90       	pop	r10
 36a:	08 95       	ret

0000036c <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
 36c:	1f 92       	push	r1
 36e:	0f 92       	push	r0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	0f 92       	push	r0
 374:	11 24       	eor	r1, r1
 376:	2f 93       	push	r18
 378:	3f 93       	push	r19
 37a:	4f 93       	push	r20
 37c:	5f 93       	push	r21
 37e:	6f 93       	push	r22
 380:	7f 93       	push	r23
 382:	8f 93       	push	r24
 384:	9f 93       	push	r25
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
	oled_sram_flush(0);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 7e 01 	call	0x2fc	; 0x2fc <oled_sram_flush>
	TCNT1 = 0;
 396:	1d bc       	out	0x2d, r1	; 45
 398:	1c bc       	out	0x2c, r1	; 44
}
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
 3bc:	80 eb       	ldi	r24, 0xB0	; 176
 3be:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 3c0:	81 e5       	ldi	r24, 0x51	; 81
 3c2:	8d b9       	out	0x0d, r24	; 13
 3c4:	08 95       	ret

000003c6 <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
 3c6:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
 3c8:	77 9b       	sbis	0x0e, 7	; 14
 3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <SPI_transmit+0x2>
	//Return answer
	return SPDR;
 3cc:	8f b1       	in	r24, 0x0f	; 15
}
 3ce:	08 95       	ret

000003d0 <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
 3d0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SPI_transmit>
 3d4:	08 95       	ret

000003d6 <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
 3d6:	8c ec       	ldi	r24, 0xCC	; 204
 3d8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <SPI_transmit>
}
 3dc:	08 95       	ret

000003de <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
 3de:	c4 9a       	sbi	0x18, 4	; 24
 3e0:	08 95       	ret

000003e2 <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
 3e2:	c4 98       	cbi	0x18, 4	; 24
 3e4:	08 95       	ret

000003e6 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
 3e6:	fc 01       	movw	r30, r24
 3e8:	f8 5e       	subi	r31, 0xE8	; 232
 3ea:	80 81       	ld	r24, Z
}
 3ec:	08 95       	ret

000003ee <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 3ee:	5d 9b       	sbis	0x0b, 5	; 11
 3f0:	fe cf       	rjmp	.-4      	; 0x3ee <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
 3f2:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	08 95       	ret

000003fa <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
 3fa:	9c 01       	movw	r18, r24
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	50 e0       	ldi	r21, 0x00	; 0
 400:	60 e0       	ldi	r22, 0x00	; 0
 402:	70 eb       	ldi	r23, 0xB0	; 176
 404:	84 e0       	ldi	r24, 0x04	; 4
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 9d 02 	call	0x53a	; 0x53a <__divmodsi4>
 40c:	21 50       	subi	r18, 0x01	; 1
 40e:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 410:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
 412:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 414:	8a b1       	in	r24, 0x0a	; 10
 416:	88 61       	ori	r24, 0x18	; 24
 418:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
 41a:	80 b5       	in	r24, 0x20	; 32
 41c:	86 68       	ori	r24, 0x86	; 134
 41e:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	87 ef       	ldi	r24, 0xF7	; 247
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	0e 94 0b 04 	call	0x816	; 0x816 <fdevopen>
	
	return 0;
}
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	08 95       	ret

00000432 <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
 432:	80 b7       	in	r24, 0x30	; 48
 434:	80 62       	ori	r24, 0x20	; 32
 436:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
 438:	85 b7       	in	r24, 0x35	; 53
 43a:	80 68       	ori	r24, 0x80	; 128
 43c:	85 bf       	out	0x35, r24	; 53
 43e:	08 95       	ret

00000440 <main>:
#include "Driver_files/CAN_driver.h"
#include "Driver_files/MCP_driver.h"
#include <string.h>

int main(void)
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	cd b7       	in	r28, 0x3d	; 61
 446:	de b7       	in	r29, 0x3e	; 62
 448:	64 97       	sbiw	r28, 0x14	; 20
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	f8 94       	cli
 44e:	de bf       	out	0x3e, r29	; 62
 450:	0f be       	out	0x3f, r0	; 63
 452:	cd bf       	out	0x3d, r28	; 61
	//DDRA = 0xFF;
	uartInit(9600);
 454:	80 e8       	ldi	r24, 0x80	; 128
 456:	95 e2       	ldi	r25, 0x25	; 37
 458:	0e 94 fd 01 	call	0x3fa	; 0x3fa <uartInit>
	bus_init();
 45c:	0e 94 19 02 	call	0x432	; 0x432 <bus_init>
	oled_init();
 460:	0e 94 50 01 	call	0x2a0	; 0x2a0 <oled_init>
	//oled_sram_init();
	CAN_init();
 464:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	char c = 'a';
 468:	0f 2e       	mov	r0, r31
 46a:	f1 e6       	ldi	r31, 0x61	; 97
 46c:	5f 2e       	mov	r5, r31
 46e:	f0 2d       	mov	r31, r0
		//oled_print("Hello");
		//oled_sram_write_string(0, "Hello", 4);
		//flush_sram(0);
		//_delay_ms(1000);

		printf("Hello \n\r");
 470:	0f 2e       	mov	r0, r31
 472:	f3 e6       	ldi	r31, 0x63	; 99
 474:	8f 2e       	mov	r8, r31
 476:	f1 e0       	ldi	r31, 0x01	; 1
 478:	9f 2e       	mov	r9, r31
 47a:	f0 2d       	mov	r31, r0
		Message m;
		m.id = 1;
 47c:	22 24       	eor	r2, r2
 47e:	23 94       	inc	r2
		m.data[0] = c;
		m.data[1] = 'e';
 480:	0f 2e       	mov	r0, r31
 482:	f5 e6       	ldi	r31, 0x65	; 101
 484:	3f 2e       	mov	r3, r31
 486:	f0 2d       	mov	r31, r0
		m.data[2] = 'i';
 488:	0f 2e       	mov	r0, r31
 48a:	f9 e6       	ldi	r31, 0x69	; 105
 48c:	4f 2e       	mov	r4, r31
 48e:	f0 2d       	mov	r31, r0
		m.data[3] = '!';
		m.length = 4;
		
		CAN_transmit(&m);
		printf("message: %s \n\r", m.data);
 490:	5e 01       	movw	r10, r28
 492:	2d e0       	ldi	r18, 0x0D	; 13
 494:	a2 0e       	add	r10, r18
 496:	b1 1c       	adc	r11, r1
 498:	0f 2e       	mov	r0, r31
 49a:	fc e6       	ldi	r31, 0x6C	; 108
 49c:	cf 2e       	mov	r12, r31
 49e:	f1 e0       	ldi	r31, 0x01	; 1
 4a0:	df 2e       	mov	r13, r31
 4a2:	f0 2d       	mov	r31, r0
		
		
		Message answer;
		memset(&answer, 0, sizeof(Message));
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	7c 01       	movw	r14, r24
		if (CAN_receive(&answer)){
			printf("err: no msg\n");
		}
		printf("answer: %s \n\r", answer.data);
 4aa:	8e 01       	movw	r16, r28
 4ac:	0d 5f       	subi	r16, 0xFD	; 253
 4ae:	1f 4f       	sbci	r17, 0xFF	; 255
 4b0:	0f 2e       	mov	r0, r31
 4b2:	f7 e8       	ldi	r31, 0x87	; 135
 4b4:	6f 2e       	mov	r6, r31
 4b6:	f1 e0       	ldi	r31, 0x01	; 1
 4b8:	7f 2e       	mov	r7, r31
 4ba:	f0 2d       	mov	r31, r0
	
	char c = 'a';
	
    while(1)
    {
		c++;
 4bc:	53 94       	inc	r5
		//oled_print("Hello");
		//oled_sram_write_string(0, "Hello", 4);
		//flush_sram(0);
		//_delay_ms(1000);

		printf("Hello \n\r");
 4be:	9f 92       	push	r9
 4c0:	8f 92       	push	r8
 4c2:	0e 94 56 04 	call	0x8ac	; 0x8ac <printf>
		Message m;
		m.id = 1;
 4c6:	2b 86       	std	Y+11, r2	; 0x0b
		m.data[0] = c;
 4c8:	5d 86       	std	Y+13, r5	; 0x0d
		m.data[1] = 'e';
 4ca:	3e 86       	std	Y+14, r3	; 0x0e
		m.data[2] = 'i';
 4cc:	4f 86       	std	Y+15, r4	; 0x0f
		m.data[3] = '!';
 4ce:	91 e2       	ldi	r25, 0x21	; 33
 4d0:	98 8b       	std	Y+16, r25	; 0x10
		m.length = 4;
 4d2:	e4 e0       	ldi	r30, 0x04	; 4
 4d4:	ec 87       	std	Y+12, r30	; 0x0c
		
		CAN_transmit(&m);
 4d6:	ce 01       	movw	r24, r28
 4d8:	0b 96       	adiw	r24, 0x0b	; 11
 4da:	0e 94 78 00 	call	0xf0	; 0xf0 <CAN_transmit>
		printf("message: %s \n\r", m.data);
 4de:	bf 92       	push	r11
 4e0:	af 92       	push	r10
 4e2:	df 92       	push	r13
 4e4:	cf 92       	push	r12
 4e6:	0e 94 56 04 	call	0x8ac	; 0x8ac <printf>
		
		
		Message answer;
		memset(&answer, 0, sizeof(Message));
 4ea:	f7 01       	movw	r30, r14
 4ec:	2a e0       	ldi	r18, 0x0A	; 10
 4ee:	11 92       	st	Z+, r1
 4f0:	2a 95       	dec	r18
 4f2:	e9 f7       	brne	.-6      	; 0x4ee <main+0xae>
		if (CAN_receive(&answer)){
 4f4:	c7 01       	movw	r24, r14
 4f6:	0e 94 9f 00 	call	0x13e	; 0x13e <CAN_receive>
 4fa:	0f 90       	pop	r0
 4fc:	0f 90       	pop	r0
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	89 2b       	or	r24, r25
 508:	21 f0       	breq	.+8      	; 0x512 <__stack+0x13>
			printf("err: no msg\n");
 50a:	8b e7       	ldi	r24, 0x7B	; 123
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <puts>
		}
		printf("answer: %s \n\r", answer.data);
 512:	1f 93       	push	r17
 514:	0f 93       	push	r16
 516:	7f 92       	push	r7
 518:	6f 92       	push	r6
 51a:	0e 94 56 04 	call	0x8ac	; 0x8ac <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	9f e7       	ldi	r25, 0x7F	; 127
 522:	e6 e1       	ldi	r30, 0x16	; 22
 524:	81 50       	subi	r24, 0x01	; 1
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e0 40       	sbci	r30, 0x00	; 0
 52a:	e1 f7       	brne	.-8      	; 0x524 <__stack+0x25>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <__stack+0x2f>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <__stack+0x31>
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	0f 90       	pop	r0
		
		_delay_ms(1500);
    }
 538:	c1 cf       	rjmp	.-126    	; 0x4bc <main+0x7c>

0000053a <__divmodsi4>:
 53a:	05 2e       	mov	r0, r21
 53c:	97 fb       	bst	r25, 7
 53e:	1e f4       	brtc	.+6      	; 0x546 <__divmodsi4+0xc>
 540:	00 94       	com	r0
 542:	0e 94 b4 02 	call	0x568	; 0x568 <__negsi2>
 546:	57 fd       	sbrc	r21, 7
 548:	07 d0       	rcall	.+14     	; 0x558 <__divmodsi4_neg2>
 54a:	0e 94 bc 02 	call	0x578	; 0x578 <__udivmodsi4>
 54e:	07 fc       	sbrc	r0, 7
 550:	03 d0       	rcall	.+6      	; 0x558 <__divmodsi4_neg2>
 552:	4e f4       	brtc	.+18     	; 0x566 <__divmodsi4_exit>
 554:	0c 94 b4 02 	jmp	0x568	; 0x568 <__negsi2>

00000558 <__divmodsi4_neg2>:
 558:	50 95       	com	r21
 55a:	40 95       	com	r20
 55c:	30 95       	com	r19
 55e:	21 95       	neg	r18
 560:	3f 4f       	sbci	r19, 0xFF	; 255
 562:	4f 4f       	sbci	r20, 0xFF	; 255
 564:	5f 4f       	sbci	r21, 0xFF	; 255

00000566 <__divmodsi4_exit>:
 566:	08 95       	ret

00000568 <__negsi2>:
 568:	90 95       	com	r25
 56a:	80 95       	com	r24
 56c:	70 95       	com	r23
 56e:	61 95       	neg	r22
 570:	7f 4f       	sbci	r23, 0xFF	; 255
 572:	8f 4f       	sbci	r24, 0xFF	; 255
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	08 95       	ret

00000578 <__udivmodsi4>:
 578:	a1 e2       	ldi	r26, 0x21	; 33
 57a:	1a 2e       	mov	r1, r26
 57c:	aa 1b       	sub	r26, r26
 57e:	bb 1b       	sub	r27, r27
 580:	fd 01       	movw	r30, r26
 582:	0d c0       	rjmp	.+26     	; 0x59e <__udivmodsi4_ep>

00000584 <__udivmodsi4_loop>:
 584:	aa 1f       	adc	r26, r26
 586:	bb 1f       	adc	r27, r27
 588:	ee 1f       	adc	r30, r30
 58a:	ff 1f       	adc	r31, r31
 58c:	a2 17       	cp	r26, r18
 58e:	b3 07       	cpc	r27, r19
 590:	e4 07       	cpc	r30, r20
 592:	f5 07       	cpc	r31, r21
 594:	20 f0       	brcs	.+8      	; 0x59e <__udivmodsi4_ep>
 596:	a2 1b       	sub	r26, r18
 598:	b3 0b       	sbc	r27, r19
 59a:	e4 0b       	sbc	r30, r20
 59c:	f5 0b       	sbc	r31, r21

0000059e <__udivmodsi4_ep>:
 59e:	66 1f       	adc	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	1a 94       	dec	r1
 5a8:	69 f7       	brne	.-38     	; 0x584 <__udivmodsi4_loop>
 5aa:	60 95       	com	r22
 5ac:	70 95       	com	r23
 5ae:	80 95       	com	r24
 5b0:	90 95       	com	r25
 5b2:	9b 01       	movw	r18, r22
 5b4:	ac 01       	movw	r20, r24
 5b6:	bd 01       	movw	r22, r26
 5b8:	cf 01       	movw	r24, r30
 5ba:	08 95       	ret

000005bc <malloc>:
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	91 05       	cpc	r25, r1
 5c4:	10 f4       	brcc	.+4      	; 0x5ca <malloc+0xe>
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	e0 91 98 01 	lds	r30, 0x0198
 5ce:	f0 91 99 01 	lds	r31, 0x0199
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	c0 e0       	ldi	r28, 0x00	; 0
 5d8:	d0 e0       	ldi	r29, 0x00	; 0
 5da:	30 97       	sbiw	r30, 0x00	; 0
 5dc:	11 f1       	breq	.+68     	; 0x622 <malloc+0x66>
 5de:	40 81       	ld	r20, Z
 5e0:	51 81       	ldd	r21, Z+1	; 0x01
 5e2:	48 17       	cp	r20, r24
 5e4:	59 07       	cpc	r21, r25
 5e6:	c0 f0       	brcs	.+48     	; 0x618 <malloc+0x5c>
 5e8:	48 17       	cp	r20, r24
 5ea:	59 07       	cpc	r21, r25
 5ec:	61 f4       	brne	.+24     	; 0x606 <malloc+0x4a>
 5ee:	82 81       	ldd	r24, Z+2	; 0x02
 5f0:	93 81       	ldd	r25, Z+3	; 0x03
 5f2:	20 97       	sbiw	r28, 0x00	; 0
 5f4:	19 f0       	breq	.+6      	; 0x5fc <malloc+0x40>
 5f6:	9b 83       	std	Y+3, r25	; 0x03
 5f8:	8a 83       	std	Y+2, r24	; 0x02
 5fa:	2b c0       	rjmp	.+86     	; 0x652 <malloc+0x96>
 5fc:	90 93 99 01 	sts	0x0199, r25
 600:	80 93 98 01 	sts	0x0198, r24
 604:	26 c0       	rjmp	.+76     	; 0x652 <malloc+0x96>
 606:	21 15       	cp	r18, r1
 608:	31 05       	cpc	r19, r1
 60a:	19 f0       	breq	.+6      	; 0x612 <malloc+0x56>
 60c:	42 17       	cp	r20, r18
 60e:	53 07       	cpc	r21, r19
 610:	18 f4       	brcc	.+6      	; 0x618 <malloc+0x5c>
 612:	9a 01       	movw	r18, r20
 614:	be 01       	movw	r22, r28
 616:	df 01       	movw	r26, r30
 618:	ef 01       	movw	r28, r30
 61a:	02 80       	ldd	r0, Z+2	; 0x02
 61c:	f3 81       	ldd	r31, Z+3	; 0x03
 61e:	e0 2d       	mov	r30, r0
 620:	dc cf       	rjmp	.-72     	; 0x5da <malloc+0x1e>
 622:	21 15       	cp	r18, r1
 624:	31 05       	cpc	r19, r1
 626:	09 f1       	breq	.+66     	; 0x66a <malloc+0xae>
 628:	28 1b       	sub	r18, r24
 62a:	39 0b       	sbc	r19, r25
 62c:	24 30       	cpi	r18, 0x04	; 4
 62e:	31 05       	cpc	r19, r1
 630:	90 f4       	brcc	.+36     	; 0x656 <malloc+0x9a>
 632:	12 96       	adiw	r26, 0x02	; 2
 634:	8d 91       	ld	r24, X+
 636:	9c 91       	ld	r25, X
 638:	13 97       	sbiw	r26, 0x03	; 3
 63a:	61 15       	cp	r22, r1
 63c:	71 05       	cpc	r23, r1
 63e:	21 f0       	breq	.+8      	; 0x648 <malloc+0x8c>
 640:	fb 01       	movw	r30, r22
 642:	93 83       	std	Z+3, r25	; 0x03
 644:	82 83       	std	Z+2, r24	; 0x02
 646:	04 c0       	rjmp	.+8      	; 0x650 <malloc+0x94>
 648:	90 93 99 01 	sts	0x0199, r25
 64c:	80 93 98 01 	sts	0x0198, r24
 650:	fd 01       	movw	r30, r26
 652:	32 96       	adiw	r30, 0x02	; 2
 654:	44 c0       	rjmp	.+136    	; 0x6de <malloc+0x122>
 656:	fd 01       	movw	r30, r26
 658:	e2 0f       	add	r30, r18
 65a:	f3 1f       	adc	r31, r19
 65c:	81 93       	st	Z+, r24
 65e:	91 93       	st	Z+, r25
 660:	22 50       	subi	r18, 0x02	; 2
 662:	31 09       	sbc	r19, r1
 664:	2d 93       	st	X+, r18
 666:	3c 93       	st	X, r19
 668:	3a c0       	rjmp	.+116    	; 0x6de <malloc+0x122>
 66a:	20 91 96 01 	lds	r18, 0x0196
 66e:	30 91 97 01 	lds	r19, 0x0197
 672:	23 2b       	or	r18, r19
 674:	41 f4       	brne	.+16     	; 0x686 <malloc+0xca>
 676:	20 91 02 01 	lds	r18, 0x0102
 67a:	30 91 03 01 	lds	r19, 0x0103
 67e:	30 93 97 01 	sts	0x0197, r19
 682:	20 93 96 01 	sts	0x0196, r18
 686:	20 91 00 01 	lds	r18, 0x0100
 68a:	30 91 01 01 	lds	r19, 0x0101
 68e:	21 15       	cp	r18, r1
 690:	31 05       	cpc	r19, r1
 692:	41 f4       	brne	.+16     	; 0x6a4 <malloc+0xe8>
 694:	2d b7       	in	r18, 0x3d	; 61
 696:	3e b7       	in	r19, 0x3e	; 62
 698:	40 91 04 01 	lds	r20, 0x0104
 69c:	50 91 05 01 	lds	r21, 0x0105
 6a0:	24 1b       	sub	r18, r20
 6a2:	35 0b       	sbc	r19, r21
 6a4:	e0 91 96 01 	lds	r30, 0x0196
 6a8:	f0 91 97 01 	lds	r31, 0x0197
 6ac:	e2 17       	cp	r30, r18
 6ae:	f3 07       	cpc	r31, r19
 6b0:	a0 f4       	brcc	.+40     	; 0x6da <malloc+0x11e>
 6b2:	2e 1b       	sub	r18, r30
 6b4:	3f 0b       	sbc	r19, r31
 6b6:	28 17       	cp	r18, r24
 6b8:	39 07       	cpc	r19, r25
 6ba:	78 f0       	brcs	.+30     	; 0x6da <malloc+0x11e>
 6bc:	ac 01       	movw	r20, r24
 6be:	4e 5f       	subi	r20, 0xFE	; 254
 6c0:	5f 4f       	sbci	r21, 0xFF	; 255
 6c2:	24 17       	cp	r18, r20
 6c4:	35 07       	cpc	r19, r21
 6c6:	48 f0       	brcs	.+18     	; 0x6da <malloc+0x11e>
 6c8:	4e 0f       	add	r20, r30
 6ca:	5f 1f       	adc	r21, r31
 6cc:	50 93 97 01 	sts	0x0197, r21
 6d0:	40 93 96 01 	sts	0x0196, r20
 6d4:	81 93       	st	Z+, r24
 6d6:	91 93       	st	Z+, r25
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <malloc+0x122>
 6da:	e0 e0       	ldi	r30, 0x00	; 0
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	cf 01       	movw	r24, r30
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <free>:
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	09 f4       	brne	.+2      	; 0x6f4 <free+0xe>
 6f2:	8c c0       	rjmp	.+280    	; 0x80c <free+0x126>
 6f4:	fc 01       	movw	r30, r24
 6f6:	32 97       	sbiw	r30, 0x02	; 2
 6f8:	13 82       	std	Z+3, r1	; 0x03
 6fa:	12 82       	std	Z+2, r1	; 0x02
 6fc:	00 91 98 01 	lds	r16, 0x0198
 700:	10 91 99 01 	lds	r17, 0x0199
 704:	01 15       	cp	r16, r1
 706:	11 05       	cpc	r17, r1
 708:	81 f4       	brne	.+32     	; 0x72a <free+0x44>
 70a:	20 81       	ld	r18, Z
 70c:	31 81       	ldd	r19, Z+1	; 0x01
 70e:	82 0f       	add	r24, r18
 710:	93 1f       	adc	r25, r19
 712:	20 91 96 01 	lds	r18, 0x0196
 716:	30 91 97 01 	lds	r19, 0x0197
 71a:	28 17       	cp	r18, r24
 71c:	39 07       	cpc	r19, r25
 71e:	79 f5       	brne	.+94     	; 0x77e <free+0x98>
 720:	f0 93 97 01 	sts	0x0197, r31
 724:	e0 93 96 01 	sts	0x0196, r30
 728:	71 c0       	rjmp	.+226    	; 0x80c <free+0x126>
 72a:	d8 01       	movw	r26, r16
 72c:	40 e0       	ldi	r20, 0x00	; 0
 72e:	50 e0       	ldi	r21, 0x00	; 0
 730:	ae 17       	cp	r26, r30
 732:	bf 07       	cpc	r27, r31
 734:	50 f4       	brcc	.+20     	; 0x74a <free+0x64>
 736:	12 96       	adiw	r26, 0x02	; 2
 738:	2d 91       	ld	r18, X+
 73a:	3c 91       	ld	r19, X
 73c:	13 97       	sbiw	r26, 0x03	; 3
 73e:	ad 01       	movw	r20, r26
 740:	21 15       	cp	r18, r1
 742:	31 05       	cpc	r19, r1
 744:	09 f1       	breq	.+66     	; 0x788 <free+0xa2>
 746:	d9 01       	movw	r26, r18
 748:	f3 cf       	rjmp	.-26     	; 0x730 <free+0x4a>
 74a:	9d 01       	movw	r18, r26
 74c:	da 01       	movw	r26, r20
 74e:	33 83       	std	Z+3, r19	; 0x03
 750:	22 83       	std	Z+2, r18	; 0x02
 752:	60 81       	ld	r22, Z
 754:	71 81       	ldd	r23, Z+1	; 0x01
 756:	86 0f       	add	r24, r22
 758:	97 1f       	adc	r25, r23
 75a:	82 17       	cp	r24, r18
 75c:	93 07       	cpc	r25, r19
 75e:	69 f4       	brne	.+26     	; 0x77a <free+0x94>
 760:	ec 01       	movw	r28, r24
 762:	28 81       	ld	r18, Y
 764:	39 81       	ldd	r19, Y+1	; 0x01
 766:	26 0f       	add	r18, r22
 768:	37 1f       	adc	r19, r23
 76a:	2e 5f       	subi	r18, 0xFE	; 254
 76c:	3f 4f       	sbci	r19, 0xFF	; 255
 76e:	31 83       	std	Z+1, r19	; 0x01
 770:	20 83       	st	Z, r18
 772:	8a 81       	ldd	r24, Y+2	; 0x02
 774:	9b 81       	ldd	r25, Y+3	; 0x03
 776:	93 83       	std	Z+3, r25	; 0x03
 778:	82 83       	std	Z+2, r24	; 0x02
 77a:	45 2b       	or	r20, r21
 77c:	29 f4       	brne	.+10     	; 0x788 <free+0xa2>
 77e:	f0 93 99 01 	sts	0x0199, r31
 782:	e0 93 98 01 	sts	0x0198, r30
 786:	42 c0       	rjmp	.+132    	; 0x80c <free+0x126>
 788:	13 96       	adiw	r26, 0x03	; 3
 78a:	fc 93       	st	X, r31
 78c:	ee 93       	st	-X, r30
 78e:	12 97       	sbiw	r26, 0x02	; 2
 790:	ed 01       	movw	r28, r26
 792:	49 91       	ld	r20, Y+
 794:	59 91       	ld	r21, Y+
 796:	9e 01       	movw	r18, r28
 798:	24 0f       	add	r18, r20
 79a:	35 1f       	adc	r19, r21
 79c:	e2 17       	cp	r30, r18
 79e:	f3 07       	cpc	r31, r19
 7a0:	71 f4       	brne	.+28     	; 0x7be <free+0xd8>
 7a2:	80 81       	ld	r24, Z
 7a4:	91 81       	ldd	r25, Z+1	; 0x01
 7a6:	84 0f       	add	r24, r20
 7a8:	95 1f       	adc	r25, r21
 7aa:	02 96       	adiw	r24, 0x02	; 2
 7ac:	11 96       	adiw	r26, 0x01	; 1
 7ae:	9c 93       	st	X, r25
 7b0:	8e 93       	st	-X, r24
 7b2:	82 81       	ldd	r24, Z+2	; 0x02
 7b4:	93 81       	ldd	r25, Z+3	; 0x03
 7b6:	13 96       	adiw	r26, 0x03	; 3
 7b8:	9c 93       	st	X, r25
 7ba:	8e 93       	st	-X, r24
 7bc:	12 97       	sbiw	r26, 0x02	; 2
 7be:	e0 e0       	ldi	r30, 0x00	; 0
 7c0:	f0 e0       	ldi	r31, 0x00	; 0
 7c2:	d8 01       	movw	r26, r16
 7c4:	12 96       	adiw	r26, 0x02	; 2
 7c6:	8d 91       	ld	r24, X+
 7c8:	9c 91       	ld	r25, X
 7ca:	13 97       	sbiw	r26, 0x03	; 3
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	19 f0       	breq	.+6      	; 0x7d6 <free+0xf0>
 7d0:	f8 01       	movw	r30, r16
 7d2:	8c 01       	movw	r16, r24
 7d4:	f6 cf       	rjmp	.-20     	; 0x7c2 <free+0xdc>
 7d6:	8d 91       	ld	r24, X+
 7d8:	9c 91       	ld	r25, X
 7da:	98 01       	movw	r18, r16
 7dc:	2e 5f       	subi	r18, 0xFE	; 254
 7de:	3f 4f       	sbci	r19, 0xFF	; 255
 7e0:	82 0f       	add	r24, r18
 7e2:	93 1f       	adc	r25, r19
 7e4:	20 91 96 01 	lds	r18, 0x0196
 7e8:	30 91 97 01 	lds	r19, 0x0197
 7ec:	28 17       	cp	r18, r24
 7ee:	39 07       	cpc	r19, r25
 7f0:	69 f4       	brne	.+26     	; 0x80c <free+0x126>
 7f2:	30 97       	sbiw	r30, 0x00	; 0
 7f4:	29 f4       	brne	.+10     	; 0x800 <free+0x11a>
 7f6:	10 92 99 01 	sts	0x0199, r1
 7fa:	10 92 98 01 	sts	0x0198, r1
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <free+0x11e>
 800:	13 82       	std	Z+3, r1	; 0x03
 802:	12 82       	std	Z+2, r1	; 0x02
 804:	10 93 97 01 	sts	0x0197, r17
 808:	00 93 96 01 	sts	0x0196, r16
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	08 95       	ret

00000816 <fdevopen>:
 816:	0f 93       	push	r16
 818:	1f 93       	push	r17
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	31 f4       	brne	.+12     	; 0x82e <fdevopen+0x18>
 822:	61 15       	cp	r22, r1
 824:	71 05       	cpc	r23, r1
 826:	19 f4       	brne	.+6      	; 0x82e <fdevopen+0x18>
 828:	80 e0       	ldi	r24, 0x00	; 0
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	3a c0       	rjmp	.+116    	; 0x8a2 <fdevopen+0x8c>
 82e:	8b 01       	movw	r16, r22
 830:	ec 01       	movw	r28, r24
 832:	6e e0       	ldi	r22, 0x0E	; 14
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 6e 06 	call	0xcdc	; 0xcdc <calloc>
 83e:	fc 01       	movw	r30, r24
 840:	89 2b       	or	r24, r25
 842:	91 f3       	breq	.-28     	; 0x828 <fdevopen+0x12>
 844:	80 e8       	ldi	r24, 0x80	; 128
 846:	83 83       	std	Z+3, r24	; 0x03
 848:	01 15       	cp	r16, r1
 84a:	11 05       	cpc	r17, r1
 84c:	71 f0       	breq	.+28     	; 0x86a <fdevopen+0x54>
 84e:	13 87       	std	Z+11, r17	; 0x0b
 850:	02 87       	std	Z+10, r16	; 0x0a
 852:	81 e8       	ldi	r24, 0x81	; 129
 854:	83 83       	std	Z+3, r24	; 0x03
 856:	80 91 9a 01 	lds	r24, 0x019A
 85a:	90 91 9b 01 	lds	r25, 0x019B
 85e:	89 2b       	or	r24, r25
 860:	21 f4       	brne	.+8      	; 0x86a <fdevopen+0x54>
 862:	f0 93 9b 01 	sts	0x019B, r31
 866:	e0 93 9a 01 	sts	0x019A, r30
 86a:	20 97       	sbiw	r28, 0x00	; 0
 86c:	c9 f0       	breq	.+50     	; 0x8a0 <fdevopen+0x8a>
 86e:	d1 87       	std	Z+9, r29	; 0x09
 870:	c0 87       	std	Z+8, r28	; 0x08
 872:	83 81       	ldd	r24, Z+3	; 0x03
 874:	82 60       	ori	r24, 0x02	; 2
 876:	83 83       	std	Z+3, r24	; 0x03
 878:	80 91 9c 01 	lds	r24, 0x019C
 87c:	90 91 9d 01 	lds	r25, 0x019D
 880:	89 2b       	or	r24, r25
 882:	71 f4       	brne	.+28     	; 0x8a0 <fdevopen+0x8a>
 884:	f0 93 9d 01 	sts	0x019D, r31
 888:	e0 93 9c 01 	sts	0x019C, r30
 88c:	80 91 9e 01 	lds	r24, 0x019E
 890:	90 91 9f 01 	lds	r25, 0x019F
 894:	89 2b       	or	r24, r25
 896:	21 f4       	brne	.+8      	; 0x8a0 <fdevopen+0x8a>
 898:	f0 93 9f 01 	sts	0x019F, r31
 89c:	e0 93 9e 01 	sts	0x019E, r30
 8a0:	cf 01       	movw	r24, r30
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	08 95       	ret

000008ac <printf>:
 8ac:	a0 e0       	ldi	r26, 0x00	; 0
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	ec e5       	ldi	r30, 0x5C	; 92
 8b2:	f4 e0       	ldi	r31, 0x04	; 4
 8b4:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__prologue_saves__+0x20>
 8b8:	ae 01       	movw	r20, r28
 8ba:	4b 5f       	subi	r20, 0xFB	; 251
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255
 8be:	fa 01       	movw	r30, r20
 8c0:	61 91       	ld	r22, Z+
 8c2:	71 91       	ld	r23, Z+
 8c4:	af 01       	movw	r20, r30
 8c6:	80 91 9c 01 	lds	r24, 0x019C
 8ca:	90 91 9d 01 	lds	r25, 0x019D
 8ce:	0e 94 9c 04 	call	0x938	; 0x938 <vfprintf>
 8d2:	e2 e0       	ldi	r30, 0x02	; 2
 8d4:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__epilogue_restores__+0x20>

000008d8 <puts>:
 8d8:	0f 93       	push	r16
 8da:	1f 93       	push	r17
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	e0 91 9c 01 	lds	r30, 0x019C
 8e4:	f0 91 9d 01 	lds	r31, 0x019D
 8e8:	23 81       	ldd	r18, Z+3	; 0x03
 8ea:	21 ff       	sbrs	r18, 1
 8ec:	1b c0       	rjmp	.+54     	; 0x924 <puts+0x4c>
 8ee:	8c 01       	movw	r16, r24
 8f0:	d0 e0       	ldi	r29, 0x00	; 0
 8f2:	c0 e0       	ldi	r28, 0x00	; 0
 8f4:	f8 01       	movw	r30, r16
 8f6:	81 91       	ld	r24, Z+
 8f8:	8f 01       	movw	r16, r30
 8fa:	60 91 9c 01 	lds	r22, 0x019C
 8fe:	70 91 9d 01 	lds	r23, 0x019D
 902:	db 01       	movw	r26, r22
 904:	18 96       	adiw	r26, 0x08	; 8
 906:	ed 91       	ld	r30, X+
 908:	fc 91       	ld	r31, X
 90a:	19 97       	sbiw	r26, 0x09	; 9
 90c:	88 23       	and	r24, r24
 90e:	31 f0       	breq	.+12     	; 0x91c <puts+0x44>
 910:	09 95       	icall
 912:	89 2b       	or	r24, r25
 914:	79 f3       	breq	.-34     	; 0x8f4 <puts+0x1c>
 916:	df ef       	ldi	r29, 0xFF	; 255
 918:	cf ef       	ldi	r28, 0xFF	; 255
 91a:	ec cf       	rjmp	.-40     	; 0x8f4 <puts+0x1c>
 91c:	8a e0       	ldi	r24, 0x0A	; 10
 91e:	09 95       	icall
 920:	89 2b       	or	r24, r25
 922:	19 f0       	breq	.+6      	; 0x92a <puts+0x52>
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	02 c0       	rjmp	.+4      	; 0x92e <puts+0x56>
 92a:	8d 2f       	mov	r24, r29
 92c:	9c 2f       	mov	r25, r28
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	08 95       	ret

00000938 <vfprintf>:
 938:	ac e0       	ldi	r26, 0x0C	; 12
 93a:	b0 e0       	ldi	r27, 0x00	; 0
 93c:	e2 ea       	ldi	r30, 0xA2	; 162
 93e:	f4 e0       	ldi	r31, 0x04	; 4
 940:	0c 94 3d 07 	jmp	0xe7a	; 0xe7a <__prologue_saves__>
 944:	7c 01       	movw	r14, r24
 946:	6b 01       	movw	r12, r22
 948:	8a 01       	movw	r16, r20
 94a:	fc 01       	movw	r30, r24
 94c:	17 82       	std	Z+7, r1	; 0x07
 94e:	16 82       	std	Z+6, r1	; 0x06
 950:	83 81       	ldd	r24, Z+3	; 0x03
 952:	81 ff       	sbrs	r24, 1
 954:	bd c1       	rjmp	.+890    	; 0xcd0 <vfprintf+0x398>
 956:	ce 01       	movw	r24, r28
 958:	01 96       	adiw	r24, 0x01	; 1
 95a:	4c 01       	movw	r8, r24
 95c:	f7 01       	movw	r30, r14
 95e:	93 81       	ldd	r25, Z+3	; 0x03
 960:	f6 01       	movw	r30, r12
 962:	93 fd       	sbrc	r25, 3
 964:	85 91       	lpm	r24, Z+
 966:	93 ff       	sbrs	r25, 3
 968:	81 91       	ld	r24, Z+
 96a:	6f 01       	movw	r12, r30
 96c:	88 23       	and	r24, r24
 96e:	09 f4       	brne	.+2      	; 0x972 <vfprintf+0x3a>
 970:	ab c1       	rjmp	.+854    	; 0xcc8 <vfprintf+0x390>
 972:	85 32       	cpi	r24, 0x25	; 37
 974:	39 f4       	brne	.+14     	; 0x984 <vfprintf+0x4c>
 976:	93 fd       	sbrc	r25, 3
 978:	85 91       	lpm	r24, Z+
 97a:	93 ff       	sbrs	r25, 3
 97c:	81 91       	ld	r24, Z+
 97e:	6f 01       	movw	r12, r30
 980:	85 32       	cpi	r24, 0x25	; 37
 982:	29 f4       	brne	.+10     	; 0x98e <vfprintf+0x56>
 984:	b7 01       	movw	r22, r14
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 98c:	e7 cf       	rjmp	.-50     	; 0x95c <vfprintf+0x24>
 98e:	51 2c       	mov	r5, r1
 990:	31 2c       	mov	r3, r1
 992:	20 e0       	ldi	r18, 0x00	; 0
 994:	20 32       	cpi	r18, 0x20	; 32
 996:	a0 f4       	brcc	.+40     	; 0x9c0 <vfprintf+0x88>
 998:	8b 32       	cpi	r24, 0x2B	; 43
 99a:	69 f0       	breq	.+26     	; 0x9b6 <vfprintf+0x7e>
 99c:	30 f4       	brcc	.+12     	; 0x9aa <vfprintf+0x72>
 99e:	80 32       	cpi	r24, 0x20	; 32
 9a0:	59 f0       	breq	.+22     	; 0x9b8 <vfprintf+0x80>
 9a2:	83 32       	cpi	r24, 0x23	; 35
 9a4:	69 f4       	brne	.+26     	; 0x9c0 <vfprintf+0x88>
 9a6:	20 61       	ori	r18, 0x10	; 16
 9a8:	2c c0       	rjmp	.+88     	; 0xa02 <vfprintf+0xca>
 9aa:	8d 32       	cpi	r24, 0x2D	; 45
 9ac:	39 f0       	breq	.+14     	; 0x9bc <vfprintf+0x84>
 9ae:	80 33       	cpi	r24, 0x30	; 48
 9b0:	39 f4       	brne	.+14     	; 0x9c0 <vfprintf+0x88>
 9b2:	21 60       	ori	r18, 0x01	; 1
 9b4:	26 c0       	rjmp	.+76     	; 0xa02 <vfprintf+0xca>
 9b6:	22 60       	ori	r18, 0x02	; 2
 9b8:	24 60       	ori	r18, 0x04	; 4
 9ba:	23 c0       	rjmp	.+70     	; 0xa02 <vfprintf+0xca>
 9bc:	28 60       	ori	r18, 0x08	; 8
 9be:	21 c0       	rjmp	.+66     	; 0xa02 <vfprintf+0xca>
 9c0:	27 fd       	sbrc	r18, 7
 9c2:	27 c0       	rjmp	.+78     	; 0xa12 <vfprintf+0xda>
 9c4:	30 ed       	ldi	r19, 0xD0	; 208
 9c6:	38 0f       	add	r19, r24
 9c8:	3a 30       	cpi	r19, 0x0A	; 10
 9ca:	78 f4       	brcc	.+30     	; 0x9ea <vfprintf+0xb2>
 9cc:	26 ff       	sbrs	r18, 6
 9ce:	06 c0       	rjmp	.+12     	; 0x9dc <vfprintf+0xa4>
 9d0:	fa e0       	ldi	r31, 0x0A	; 10
 9d2:	5f 9e       	mul	r5, r31
 9d4:	30 0d       	add	r19, r0
 9d6:	11 24       	eor	r1, r1
 9d8:	53 2e       	mov	r5, r19
 9da:	13 c0       	rjmp	.+38     	; 0xa02 <vfprintf+0xca>
 9dc:	8a e0       	ldi	r24, 0x0A	; 10
 9de:	38 9e       	mul	r3, r24
 9e0:	30 0d       	add	r19, r0
 9e2:	11 24       	eor	r1, r1
 9e4:	33 2e       	mov	r3, r19
 9e6:	20 62       	ori	r18, 0x20	; 32
 9e8:	0c c0       	rjmp	.+24     	; 0xa02 <vfprintf+0xca>
 9ea:	8e 32       	cpi	r24, 0x2E	; 46
 9ec:	21 f4       	brne	.+8      	; 0x9f6 <vfprintf+0xbe>
 9ee:	26 fd       	sbrc	r18, 6
 9f0:	6b c1       	rjmp	.+726    	; 0xcc8 <vfprintf+0x390>
 9f2:	20 64       	ori	r18, 0x40	; 64
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <vfprintf+0xca>
 9f6:	8c 36       	cpi	r24, 0x6C	; 108
 9f8:	11 f4       	brne	.+4      	; 0x9fe <vfprintf+0xc6>
 9fa:	20 68       	ori	r18, 0x80	; 128
 9fc:	02 c0       	rjmp	.+4      	; 0xa02 <vfprintf+0xca>
 9fe:	88 36       	cpi	r24, 0x68	; 104
 a00:	41 f4       	brne	.+16     	; 0xa12 <vfprintf+0xda>
 a02:	f6 01       	movw	r30, r12
 a04:	93 fd       	sbrc	r25, 3
 a06:	85 91       	lpm	r24, Z+
 a08:	93 ff       	sbrs	r25, 3
 a0a:	81 91       	ld	r24, Z+
 a0c:	6f 01       	movw	r12, r30
 a0e:	81 11       	cpse	r24, r1
 a10:	c1 cf       	rjmp	.-126    	; 0x994 <vfprintf+0x5c>
 a12:	98 2f       	mov	r25, r24
 a14:	9f 7d       	andi	r25, 0xDF	; 223
 a16:	95 54       	subi	r25, 0x45	; 69
 a18:	93 30       	cpi	r25, 0x03	; 3
 a1a:	28 f4       	brcc	.+10     	; 0xa26 <vfprintf+0xee>
 a1c:	0c 5f       	subi	r16, 0xFC	; 252
 a1e:	1f 4f       	sbci	r17, 0xFF	; 255
 a20:	ff e3       	ldi	r31, 0x3F	; 63
 a22:	f9 83       	std	Y+1, r31	; 0x01
 a24:	0d c0       	rjmp	.+26     	; 0xa40 <vfprintf+0x108>
 a26:	83 36       	cpi	r24, 0x63	; 99
 a28:	31 f0       	breq	.+12     	; 0xa36 <vfprintf+0xfe>
 a2a:	83 37       	cpi	r24, 0x73	; 115
 a2c:	71 f0       	breq	.+28     	; 0xa4a <vfprintf+0x112>
 a2e:	83 35       	cpi	r24, 0x53	; 83
 a30:	09 f0       	breq	.+2      	; 0xa34 <vfprintf+0xfc>
 a32:	5b c0       	rjmp	.+182    	; 0xaea <vfprintf+0x1b2>
 a34:	22 c0       	rjmp	.+68     	; 0xa7a <vfprintf+0x142>
 a36:	f8 01       	movw	r30, r16
 a38:	80 81       	ld	r24, Z
 a3a:	89 83       	std	Y+1, r24	; 0x01
 a3c:	0e 5f       	subi	r16, 0xFE	; 254
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	44 24       	eor	r4, r4
 a42:	43 94       	inc	r4
 a44:	51 2c       	mov	r5, r1
 a46:	54 01       	movw	r10, r8
 a48:	15 c0       	rjmp	.+42     	; 0xa74 <vfprintf+0x13c>
 a4a:	38 01       	movw	r6, r16
 a4c:	f2 e0       	ldi	r31, 0x02	; 2
 a4e:	6f 0e       	add	r6, r31
 a50:	71 1c       	adc	r7, r1
 a52:	f8 01       	movw	r30, r16
 a54:	a0 80       	ld	r10, Z
 a56:	b1 80       	ldd	r11, Z+1	; 0x01
 a58:	26 ff       	sbrs	r18, 6
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <vfprintf+0x12a>
 a5c:	65 2d       	mov	r22, r5
 a5e:	70 e0       	ldi	r23, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <vfprintf+0x12e>
 a62:	6f ef       	ldi	r22, 0xFF	; 255
 a64:	7f ef       	ldi	r23, 0xFF	; 255
 a66:	c5 01       	movw	r24, r10
 a68:	2c 87       	std	Y+12, r18	; 0x0c
 a6a:	0e 94 9c 06 	call	0xd38	; 0xd38 <strnlen>
 a6e:	2c 01       	movw	r4, r24
 a70:	83 01       	movw	r16, r6
 a72:	2c 85       	ldd	r18, Y+12	; 0x0c
 a74:	2f 77       	andi	r18, 0x7F	; 127
 a76:	22 2e       	mov	r2, r18
 a78:	17 c0       	rjmp	.+46     	; 0xaa8 <vfprintf+0x170>
 a7a:	38 01       	movw	r6, r16
 a7c:	f2 e0       	ldi	r31, 0x02	; 2
 a7e:	6f 0e       	add	r6, r31
 a80:	71 1c       	adc	r7, r1
 a82:	f8 01       	movw	r30, r16
 a84:	a0 80       	ld	r10, Z
 a86:	b1 80       	ldd	r11, Z+1	; 0x01
 a88:	26 ff       	sbrs	r18, 6
 a8a:	03 c0       	rjmp	.+6      	; 0xa92 <vfprintf+0x15a>
 a8c:	65 2d       	mov	r22, r5
 a8e:	70 e0       	ldi	r23, 0x00	; 0
 a90:	02 c0       	rjmp	.+4      	; 0xa96 <vfprintf+0x15e>
 a92:	6f ef       	ldi	r22, 0xFF	; 255
 a94:	7f ef       	ldi	r23, 0xFF	; 255
 a96:	c5 01       	movw	r24, r10
 a98:	2c 87       	std	Y+12, r18	; 0x0c
 a9a:	0e 94 8a 06 	call	0xd14	; 0xd14 <strnlen_P>
 a9e:	2c 01       	movw	r4, r24
 aa0:	2c 85       	ldd	r18, Y+12	; 0x0c
 aa2:	20 68       	ori	r18, 0x80	; 128
 aa4:	22 2e       	mov	r2, r18
 aa6:	83 01       	movw	r16, r6
 aa8:	23 fc       	sbrc	r2, 3
 aaa:	1b c0       	rjmp	.+54     	; 0xae2 <vfprintf+0x1aa>
 aac:	83 2d       	mov	r24, r3
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	48 16       	cp	r4, r24
 ab2:	59 06       	cpc	r5, r25
 ab4:	b0 f4       	brcc	.+44     	; 0xae2 <vfprintf+0x1aa>
 ab6:	b7 01       	movw	r22, r14
 ab8:	80 e2       	ldi	r24, 0x20	; 32
 aba:	90 e0       	ldi	r25, 0x00	; 0
 abc:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 ac0:	3a 94       	dec	r3
 ac2:	f4 cf       	rjmp	.-24     	; 0xaac <vfprintf+0x174>
 ac4:	f5 01       	movw	r30, r10
 ac6:	27 fc       	sbrc	r2, 7
 ac8:	85 91       	lpm	r24, Z+
 aca:	27 fe       	sbrs	r2, 7
 acc:	81 91       	ld	r24, Z+
 ace:	5f 01       	movw	r10, r30
 ad0:	b7 01       	movw	r22, r14
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 ad8:	31 10       	cpse	r3, r1
 ada:	3a 94       	dec	r3
 adc:	f1 e0       	ldi	r31, 0x01	; 1
 ade:	4f 1a       	sub	r4, r31
 ae0:	51 08       	sbc	r5, r1
 ae2:	41 14       	cp	r4, r1
 ae4:	51 04       	cpc	r5, r1
 ae6:	71 f7       	brne	.-36     	; 0xac4 <vfprintf+0x18c>
 ae8:	e5 c0       	rjmp	.+458    	; 0xcb4 <vfprintf+0x37c>
 aea:	84 36       	cpi	r24, 0x64	; 100
 aec:	11 f0       	breq	.+4      	; 0xaf2 <vfprintf+0x1ba>
 aee:	89 36       	cpi	r24, 0x69	; 105
 af0:	39 f5       	brne	.+78     	; 0xb40 <vfprintf+0x208>
 af2:	f8 01       	movw	r30, r16
 af4:	27 ff       	sbrs	r18, 7
 af6:	07 c0       	rjmp	.+14     	; 0xb06 <vfprintf+0x1ce>
 af8:	60 81       	ld	r22, Z
 afa:	71 81       	ldd	r23, Z+1	; 0x01
 afc:	82 81       	ldd	r24, Z+2	; 0x02
 afe:	93 81       	ldd	r25, Z+3	; 0x03
 b00:	0c 5f       	subi	r16, 0xFC	; 252
 b02:	1f 4f       	sbci	r17, 0xFF	; 255
 b04:	08 c0       	rjmp	.+16     	; 0xb16 <vfprintf+0x1de>
 b06:	60 81       	ld	r22, Z
 b08:	71 81       	ldd	r23, Z+1	; 0x01
 b0a:	07 2e       	mov	r0, r23
 b0c:	00 0c       	add	r0, r0
 b0e:	88 0b       	sbc	r24, r24
 b10:	99 0b       	sbc	r25, r25
 b12:	0e 5f       	subi	r16, 0xFE	; 254
 b14:	1f 4f       	sbci	r17, 0xFF	; 255
 b16:	2f 76       	andi	r18, 0x6F	; 111
 b18:	72 2e       	mov	r7, r18
 b1a:	97 ff       	sbrs	r25, 7
 b1c:	09 c0       	rjmp	.+18     	; 0xb30 <vfprintf+0x1f8>
 b1e:	90 95       	com	r25
 b20:	80 95       	com	r24
 b22:	70 95       	com	r23
 b24:	61 95       	neg	r22
 b26:	7f 4f       	sbci	r23, 0xFF	; 255
 b28:	8f 4f       	sbci	r24, 0xFF	; 255
 b2a:	9f 4f       	sbci	r25, 0xFF	; 255
 b2c:	20 68       	ori	r18, 0x80	; 128
 b2e:	72 2e       	mov	r7, r18
 b30:	2a e0       	ldi	r18, 0x0A	; 10
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	a4 01       	movw	r20, r8
 b36:	0e 94 df 06 	call	0xdbe	; 0xdbe <__ultoa_invert>
 b3a:	a8 2e       	mov	r10, r24
 b3c:	a8 18       	sub	r10, r8
 b3e:	44 c0       	rjmp	.+136    	; 0xbc8 <vfprintf+0x290>
 b40:	85 37       	cpi	r24, 0x75	; 117
 b42:	29 f4       	brne	.+10     	; 0xb4e <vfprintf+0x216>
 b44:	2f 7e       	andi	r18, 0xEF	; 239
 b46:	b2 2e       	mov	r11, r18
 b48:	2a e0       	ldi	r18, 0x0A	; 10
 b4a:	30 e0       	ldi	r19, 0x00	; 0
 b4c:	25 c0       	rjmp	.+74     	; 0xb98 <vfprintf+0x260>
 b4e:	f2 2f       	mov	r31, r18
 b50:	f9 7f       	andi	r31, 0xF9	; 249
 b52:	bf 2e       	mov	r11, r31
 b54:	8f 36       	cpi	r24, 0x6F	; 111
 b56:	c1 f0       	breq	.+48     	; 0xb88 <vfprintf+0x250>
 b58:	18 f4       	brcc	.+6      	; 0xb60 <vfprintf+0x228>
 b5a:	88 35       	cpi	r24, 0x58	; 88
 b5c:	79 f0       	breq	.+30     	; 0xb7c <vfprintf+0x244>
 b5e:	b4 c0       	rjmp	.+360    	; 0xcc8 <vfprintf+0x390>
 b60:	80 37       	cpi	r24, 0x70	; 112
 b62:	19 f0       	breq	.+6      	; 0xb6a <vfprintf+0x232>
 b64:	88 37       	cpi	r24, 0x78	; 120
 b66:	21 f0       	breq	.+8      	; 0xb70 <vfprintf+0x238>
 b68:	af c0       	rjmp	.+350    	; 0xcc8 <vfprintf+0x390>
 b6a:	2f 2f       	mov	r18, r31
 b6c:	20 61       	ori	r18, 0x10	; 16
 b6e:	b2 2e       	mov	r11, r18
 b70:	b4 fe       	sbrs	r11, 4
 b72:	0d c0       	rjmp	.+26     	; 0xb8e <vfprintf+0x256>
 b74:	8b 2d       	mov	r24, r11
 b76:	84 60       	ori	r24, 0x04	; 4
 b78:	b8 2e       	mov	r11, r24
 b7a:	09 c0       	rjmp	.+18     	; 0xb8e <vfprintf+0x256>
 b7c:	24 ff       	sbrs	r18, 4
 b7e:	0a c0       	rjmp	.+20     	; 0xb94 <vfprintf+0x25c>
 b80:	9f 2f       	mov	r25, r31
 b82:	96 60       	ori	r25, 0x06	; 6
 b84:	b9 2e       	mov	r11, r25
 b86:	06 c0       	rjmp	.+12     	; 0xb94 <vfprintf+0x25c>
 b88:	28 e0       	ldi	r18, 0x08	; 8
 b8a:	30 e0       	ldi	r19, 0x00	; 0
 b8c:	05 c0       	rjmp	.+10     	; 0xb98 <vfprintf+0x260>
 b8e:	20 e1       	ldi	r18, 0x10	; 16
 b90:	30 e0       	ldi	r19, 0x00	; 0
 b92:	02 c0       	rjmp	.+4      	; 0xb98 <vfprintf+0x260>
 b94:	20 e1       	ldi	r18, 0x10	; 16
 b96:	32 e0       	ldi	r19, 0x02	; 2
 b98:	f8 01       	movw	r30, r16
 b9a:	b7 fe       	sbrs	r11, 7
 b9c:	07 c0       	rjmp	.+14     	; 0xbac <vfprintf+0x274>
 b9e:	60 81       	ld	r22, Z
 ba0:	71 81       	ldd	r23, Z+1	; 0x01
 ba2:	82 81       	ldd	r24, Z+2	; 0x02
 ba4:	93 81       	ldd	r25, Z+3	; 0x03
 ba6:	0c 5f       	subi	r16, 0xFC	; 252
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	06 c0       	rjmp	.+12     	; 0xbb8 <vfprintf+0x280>
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	80 e0       	ldi	r24, 0x00	; 0
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	0e 5f       	subi	r16, 0xFE	; 254
 bb6:	1f 4f       	sbci	r17, 0xFF	; 255
 bb8:	a4 01       	movw	r20, r8
 bba:	0e 94 df 06 	call	0xdbe	; 0xdbe <__ultoa_invert>
 bbe:	a8 2e       	mov	r10, r24
 bc0:	a8 18       	sub	r10, r8
 bc2:	fb 2d       	mov	r31, r11
 bc4:	ff 77       	andi	r31, 0x7F	; 127
 bc6:	7f 2e       	mov	r7, r31
 bc8:	76 fe       	sbrs	r7, 6
 bca:	0b c0       	rjmp	.+22     	; 0xbe2 <vfprintf+0x2aa>
 bcc:	37 2d       	mov	r19, r7
 bce:	3e 7f       	andi	r19, 0xFE	; 254
 bd0:	a5 14       	cp	r10, r5
 bd2:	50 f4       	brcc	.+20     	; 0xbe8 <vfprintf+0x2b0>
 bd4:	74 fe       	sbrs	r7, 4
 bd6:	0a c0       	rjmp	.+20     	; 0xbec <vfprintf+0x2b4>
 bd8:	72 fc       	sbrc	r7, 2
 bda:	08 c0       	rjmp	.+16     	; 0xbec <vfprintf+0x2b4>
 bdc:	37 2d       	mov	r19, r7
 bde:	3e 7e       	andi	r19, 0xEE	; 238
 be0:	05 c0       	rjmp	.+10     	; 0xbec <vfprintf+0x2b4>
 be2:	ba 2c       	mov	r11, r10
 be4:	37 2d       	mov	r19, r7
 be6:	03 c0       	rjmp	.+6      	; 0xbee <vfprintf+0x2b6>
 be8:	ba 2c       	mov	r11, r10
 bea:	01 c0       	rjmp	.+2      	; 0xbee <vfprintf+0x2b6>
 bec:	b5 2c       	mov	r11, r5
 bee:	34 ff       	sbrs	r19, 4
 bf0:	0d c0       	rjmp	.+26     	; 0xc0c <vfprintf+0x2d4>
 bf2:	fe 01       	movw	r30, r28
 bf4:	ea 0d       	add	r30, r10
 bf6:	f1 1d       	adc	r31, r1
 bf8:	80 81       	ld	r24, Z
 bfa:	80 33       	cpi	r24, 0x30	; 48
 bfc:	11 f4       	brne	.+4      	; 0xc02 <vfprintf+0x2ca>
 bfe:	39 7e       	andi	r19, 0xE9	; 233
 c00:	09 c0       	rjmp	.+18     	; 0xc14 <vfprintf+0x2dc>
 c02:	32 ff       	sbrs	r19, 2
 c04:	06 c0       	rjmp	.+12     	; 0xc12 <vfprintf+0x2da>
 c06:	b3 94       	inc	r11
 c08:	b3 94       	inc	r11
 c0a:	04 c0       	rjmp	.+8      	; 0xc14 <vfprintf+0x2dc>
 c0c:	83 2f       	mov	r24, r19
 c0e:	86 78       	andi	r24, 0x86	; 134
 c10:	09 f0       	breq	.+2      	; 0xc14 <vfprintf+0x2dc>
 c12:	b3 94       	inc	r11
 c14:	33 fd       	sbrc	r19, 3
 c16:	13 c0       	rjmp	.+38     	; 0xc3e <vfprintf+0x306>
 c18:	30 ff       	sbrs	r19, 0
 c1a:	06 c0       	rjmp	.+12     	; 0xc28 <vfprintf+0x2f0>
 c1c:	5a 2c       	mov	r5, r10
 c1e:	b3 14       	cp	r11, r3
 c20:	18 f4       	brcc	.+6      	; 0xc28 <vfprintf+0x2f0>
 c22:	53 0c       	add	r5, r3
 c24:	5b 18       	sub	r5, r11
 c26:	b3 2c       	mov	r11, r3
 c28:	b3 14       	cp	r11, r3
 c2a:	68 f4       	brcc	.+26     	; 0xc46 <vfprintf+0x30e>
 c2c:	b7 01       	movw	r22, r14
 c2e:	80 e2       	ldi	r24, 0x20	; 32
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	3c 87       	std	Y+12, r19	; 0x0c
 c34:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c38:	b3 94       	inc	r11
 c3a:	3c 85       	ldd	r19, Y+12	; 0x0c
 c3c:	f5 cf       	rjmp	.-22     	; 0xc28 <vfprintf+0x2f0>
 c3e:	b3 14       	cp	r11, r3
 c40:	10 f4       	brcc	.+4      	; 0xc46 <vfprintf+0x30e>
 c42:	3b 18       	sub	r3, r11
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <vfprintf+0x310>
 c46:	31 2c       	mov	r3, r1
 c48:	34 ff       	sbrs	r19, 4
 c4a:	12 c0       	rjmp	.+36     	; 0xc70 <vfprintf+0x338>
 c4c:	b7 01       	movw	r22, r14
 c4e:	80 e3       	ldi	r24, 0x30	; 48
 c50:	90 e0       	ldi	r25, 0x00	; 0
 c52:	3c 87       	std	Y+12, r19	; 0x0c
 c54:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c58:	3c 85       	ldd	r19, Y+12	; 0x0c
 c5a:	32 ff       	sbrs	r19, 2
 c5c:	17 c0       	rjmp	.+46     	; 0xc8c <vfprintf+0x354>
 c5e:	31 fd       	sbrc	r19, 1
 c60:	03 c0       	rjmp	.+6      	; 0xc68 <vfprintf+0x330>
 c62:	88 e7       	ldi	r24, 0x78	; 120
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x334>
 c68:	88 e5       	ldi	r24, 0x58	; 88
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	b7 01       	movw	r22, r14
 c6e:	0c c0       	rjmp	.+24     	; 0xc88 <vfprintf+0x350>
 c70:	83 2f       	mov	r24, r19
 c72:	86 78       	andi	r24, 0x86	; 134
 c74:	59 f0       	breq	.+22     	; 0xc8c <vfprintf+0x354>
 c76:	31 ff       	sbrs	r19, 1
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <vfprintf+0x346>
 c7a:	8b e2       	ldi	r24, 0x2B	; 43
 c7c:	01 c0       	rjmp	.+2      	; 0xc80 <vfprintf+0x348>
 c7e:	80 e2       	ldi	r24, 0x20	; 32
 c80:	37 fd       	sbrc	r19, 7
 c82:	8d e2       	ldi	r24, 0x2D	; 45
 c84:	b7 01       	movw	r22, r14
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c8c:	a5 14       	cp	r10, r5
 c8e:	38 f4       	brcc	.+14     	; 0xc9e <vfprintf+0x366>
 c90:	b7 01       	movw	r22, r14
 c92:	80 e3       	ldi	r24, 0x30	; 48
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 c9a:	5a 94       	dec	r5
 c9c:	f7 cf       	rjmp	.-18     	; 0xc8c <vfprintf+0x354>
 c9e:	aa 94       	dec	r10
 ca0:	f4 01       	movw	r30, r8
 ca2:	ea 0d       	add	r30, r10
 ca4:	f1 1d       	adc	r31, r1
 ca6:	80 81       	ld	r24, Z
 ca8:	b7 01       	movw	r22, r14
 caa:	90 e0       	ldi	r25, 0x00	; 0
 cac:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 cb0:	a1 10       	cpse	r10, r1
 cb2:	f5 cf       	rjmp	.-22     	; 0xc9e <vfprintf+0x366>
 cb4:	33 20       	and	r3, r3
 cb6:	09 f4       	brne	.+2      	; 0xcba <vfprintf+0x382>
 cb8:	51 ce       	rjmp	.-862    	; 0x95c <vfprintf+0x24>
 cba:	b7 01       	movw	r22, r14
 cbc:	80 e2       	ldi	r24, 0x20	; 32
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 a7 06 	call	0xd4e	; 0xd4e <fputc>
 cc4:	3a 94       	dec	r3
 cc6:	f6 cf       	rjmp	.-20     	; 0xcb4 <vfprintf+0x37c>
 cc8:	f7 01       	movw	r30, r14
 cca:	86 81       	ldd	r24, Z+6	; 0x06
 ccc:	97 81       	ldd	r25, Z+7	; 0x07
 cce:	02 c0       	rjmp	.+4      	; 0xcd4 <vfprintf+0x39c>
 cd0:	8f ef       	ldi	r24, 0xFF	; 255
 cd2:	9f ef       	ldi	r25, 0xFF	; 255
 cd4:	2c 96       	adiw	r28, 0x0c	; 12
 cd6:	e2 e1       	ldi	r30, 0x12	; 18
 cd8:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__epilogue_restores__>

00000cdc <calloc>:
 cdc:	0f 93       	push	r16
 cde:	1f 93       	push	r17
 ce0:	cf 93       	push	r28
 ce2:	df 93       	push	r29
 ce4:	86 9f       	mul	r24, r22
 ce6:	80 01       	movw	r16, r0
 ce8:	87 9f       	mul	r24, r23
 cea:	10 0d       	add	r17, r0
 cec:	96 9f       	mul	r25, r22
 cee:	10 0d       	add	r17, r0
 cf0:	11 24       	eor	r1, r1
 cf2:	c8 01       	movw	r24, r16
 cf4:	0e 94 de 02 	call	0x5bc	; 0x5bc <malloc>
 cf8:	ec 01       	movw	r28, r24
 cfa:	00 97       	sbiw	r24, 0x00	; 0
 cfc:	29 f0       	breq	.+10     	; 0xd08 <calloc+0x2c>
 cfe:	a8 01       	movw	r20, r16
 d00:	60 e0       	ldi	r22, 0x00	; 0
 d02:	70 e0       	ldi	r23, 0x00	; 0
 d04:	0e 94 95 06 	call	0xd2a	; 0xd2a <memset>
 d08:	ce 01       	movw	r24, r28
 d0a:	df 91       	pop	r29
 d0c:	cf 91       	pop	r28
 d0e:	1f 91       	pop	r17
 d10:	0f 91       	pop	r16
 d12:	08 95       	ret

00000d14 <strnlen_P>:
 d14:	fc 01       	movw	r30, r24
 d16:	05 90       	lpm	r0, Z+
 d18:	61 50       	subi	r22, 0x01	; 1
 d1a:	70 40       	sbci	r23, 0x00	; 0
 d1c:	01 10       	cpse	r0, r1
 d1e:	d8 f7       	brcc	.-10     	; 0xd16 <strnlen_P+0x2>
 d20:	80 95       	com	r24
 d22:	90 95       	com	r25
 d24:	8e 0f       	add	r24, r30
 d26:	9f 1f       	adc	r25, r31
 d28:	08 95       	ret

00000d2a <memset>:
 d2a:	dc 01       	movw	r26, r24
 d2c:	01 c0       	rjmp	.+2      	; 0xd30 <memset+0x6>
 d2e:	6d 93       	st	X+, r22
 d30:	41 50       	subi	r20, 0x01	; 1
 d32:	50 40       	sbci	r21, 0x00	; 0
 d34:	e0 f7       	brcc	.-8      	; 0xd2e <memset+0x4>
 d36:	08 95       	ret

00000d38 <strnlen>:
 d38:	fc 01       	movw	r30, r24
 d3a:	61 50       	subi	r22, 0x01	; 1
 d3c:	70 40       	sbci	r23, 0x00	; 0
 d3e:	01 90       	ld	r0, Z+
 d40:	01 10       	cpse	r0, r1
 d42:	d8 f7       	brcc	.-10     	; 0xd3a <strnlen+0x2>
 d44:	80 95       	com	r24
 d46:	90 95       	com	r25
 d48:	8e 0f       	add	r24, r30
 d4a:	9f 1f       	adc	r25, r31
 d4c:	08 95       	ret

00000d4e <fputc>:
 d4e:	0f 93       	push	r16
 d50:	1f 93       	push	r17
 d52:	cf 93       	push	r28
 d54:	df 93       	push	r29
 d56:	fb 01       	movw	r30, r22
 d58:	23 81       	ldd	r18, Z+3	; 0x03
 d5a:	21 fd       	sbrc	r18, 1
 d5c:	03 c0       	rjmp	.+6      	; 0xd64 <fputc+0x16>
 d5e:	8f ef       	ldi	r24, 0xFF	; 255
 d60:	9f ef       	ldi	r25, 0xFF	; 255
 d62:	28 c0       	rjmp	.+80     	; 0xdb4 <fputc+0x66>
 d64:	22 ff       	sbrs	r18, 2
 d66:	16 c0       	rjmp	.+44     	; 0xd94 <fputc+0x46>
 d68:	46 81       	ldd	r20, Z+6	; 0x06
 d6a:	57 81       	ldd	r21, Z+7	; 0x07
 d6c:	24 81       	ldd	r18, Z+4	; 0x04
 d6e:	35 81       	ldd	r19, Z+5	; 0x05
 d70:	42 17       	cp	r20, r18
 d72:	53 07       	cpc	r21, r19
 d74:	44 f4       	brge	.+16     	; 0xd86 <fputc+0x38>
 d76:	a0 81       	ld	r26, Z
 d78:	b1 81       	ldd	r27, Z+1	; 0x01
 d7a:	9d 01       	movw	r18, r26
 d7c:	2f 5f       	subi	r18, 0xFF	; 255
 d7e:	3f 4f       	sbci	r19, 0xFF	; 255
 d80:	31 83       	std	Z+1, r19	; 0x01
 d82:	20 83       	st	Z, r18
 d84:	8c 93       	st	X, r24
 d86:	26 81       	ldd	r18, Z+6	; 0x06
 d88:	37 81       	ldd	r19, Z+7	; 0x07
 d8a:	2f 5f       	subi	r18, 0xFF	; 255
 d8c:	3f 4f       	sbci	r19, 0xFF	; 255
 d8e:	37 83       	std	Z+7, r19	; 0x07
 d90:	26 83       	std	Z+6, r18	; 0x06
 d92:	10 c0       	rjmp	.+32     	; 0xdb4 <fputc+0x66>
 d94:	eb 01       	movw	r28, r22
 d96:	09 2f       	mov	r16, r25
 d98:	18 2f       	mov	r17, r24
 d9a:	00 84       	ldd	r0, Z+8	; 0x08
 d9c:	f1 85       	ldd	r31, Z+9	; 0x09
 d9e:	e0 2d       	mov	r30, r0
 da0:	09 95       	icall
 da2:	89 2b       	or	r24, r25
 da4:	e1 f6       	brne	.-72     	; 0xd5e <fputc+0x10>
 da6:	8e 81       	ldd	r24, Y+6	; 0x06
 da8:	9f 81       	ldd	r25, Y+7	; 0x07
 daa:	01 96       	adiw	r24, 0x01	; 1
 dac:	9f 83       	std	Y+7, r25	; 0x07
 dae:	8e 83       	std	Y+6, r24	; 0x06
 db0:	81 2f       	mov	r24, r17
 db2:	90 2f       	mov	r25, r16
 db4:	df 91       	pop	r29
 db6:	cf 91       	pop	r28
 db8:	1f 91       	pop	r17
 dba:	0f 91       	pop	r16
 dbc:	08 95       	ret

00000dbe <__ultoa_invert>:
 dbe:	fa 01       	movw	r30, r20
 dc0:	aa 27       	eor	r26, r26
 dc2:	28 30       	cpi	r18, 0x08	; 8
 dc4:	51 f1       	breq	.+84     	; 0xe1a <__ultoa_invert+0x5c>
 dc6:	20 31       	cpi	r18, 0x10	; 16
 dc8:	81 f1       	breq	.+96     	; 0xe2a <__ultoa_invert+0x6c>
 dca:	e8 94       	clt
 dcc:	6f 93       	push	r22
 dce:	6e 7f       	andi	r22, 0xFE	; 254
 dd0:	6e 5f       	subi	r22, 0xFE	; 254
 dd2:	7f 4f       	sbci	r23, 0xFF	; 255
 dd4:	8f 4f       	sbci	r24, 0xFF	; 255
 dd6:	9f 4f       	sbci	r25, 0xFF	; 255
 dd8:	af 4f       	sbci	r26, 0xFF	; 255
 dda:	b1 e0       	ldi	r27, 0x01	; 1
 ddc:	3e d0       	rcall	.+124    	; 0xe5a <__ultoa_invert+0x9c>
 dde:	b4 e0       	ldi	r27, 0x04	; 4
 de0:	3c d0       	rcall	.+120    	; 0xe5a <__ultoa_invert+0x9c>
 de2:	67 0f       	add	r22, r23
 de4:	78 1f       	adc	r23, r24
 de6:	89 1f       	adc	r24, r25
 de8:	9a 1f       	adc	r25, r26
 dea:	a1 1d       	adc	r26, r1
 dec:	68 0f       	add	r22, r24
 dee:	79 1f       	adc	r23, r25
 df0:	8a 1f       	adc	r24, r26
 df2:	91 1d       	adc	r25, r1
 df4:	a1 1d       	adc	r26, r1
 df6:	6a 0f       	add	r22, r26
 df8:	71 1d       	adc	r23, r1
 dfa:	81 1d       	adc	r24, r1
 dfc:	91 1d       	adc	r25, r1
 dfe:	a1 1d       	adc	r26, r1
 e00:	20 d0       	rcall	.+64     	; 0xe42 <__ultoa_invert+0x84>
 e02:	09 f4       	brne	.+2      	; 0xe06 <__ultoa_invert+0x48>
 e04:	68 94       	set
 e06:	3f 91       	pop	r19
 e08:	2a e0       	ldi	r18, 0x0A	; 10
 e0a:	26 9f       	mul	r18, r22
 e0c:	11 24       	eor	r1, r1
 e0e:	30 19       	sub	r19, r0
 e10:	30 5d       	subi	r19, 0xD0	; 208
 e12:	31 93       	st	Z+, r19
 e14:	de f6       	brtc	.-74     	; 0xdcc <__ultoa_invert+0xe>
 e16:	cf 01       	movw	r24, r30
 e18:	08 95       	ret
 e1a:	46 2f       	mov	r20, r22
 e1c:	47 70       	andi	r20, 0x07	; 7
 e1e:	40 5d       	subi	r20, 0xD0	; 208
 e20:	41 93       	st	Z+, r20
 e22:	b3 e0       	ldi	r27, 0x03	; 3
 e24:	0f d0       	rcall	.+30     	; 0xe44 <__ultoa_invert+0x86>
 e26:	c9 f7       	brne	.-14     	; 0xe1a <__ultoa_invert+0x5c>
 e28:	f6 cf       	rjmp	.-20     	; 0xe16 <__ultoa_invert+0x58>
 e2a:	46 2f       	mov	r20, r22
 e2c:	4f 70       	andi	r20, 0x0F	; 15
 e2e:	40 5d       	subi	r20, 0xD0	; 208
 e30:	4a 33       	cpi	r20, 0x3A	; 58
 e32:	18 f0       	brcs	.+6      	; 0xe3a <__ultoa_invert+0x7c>
 e34:	49 5d       	subi	r20, 0xD9	; 217
 e36:	31 fd       	sbrc	r19, 1
 e38:	40 52       	subi	r20, 0x20	; 32
 e3a:	41 93       	st	Z+, r20
 e3c:	02 d0       	rcall	.+4      	; 0xe42 <__ultoa_invert+0x84>
 e3e:	a9 f7       	brne	.-22     	; 0xe2a <__ultoa_invert+0x6c>
 e40:	ea cf       	rjmp	.-44     	; 0xe16 <__ultoa_invert+0x58>
 e42:	b4 e0       	ldi	r27, 0x04	; 4
 e44:	a6 95       	lsr	r26
 e46:	97 95       	ror	r25
 e48:	87 95       	ror	r24
 e4a:	77 95       	ror	r23
 e4c:	67 95       	ror	r22
 e4e:	ba 95       	dec	r27
 e50:	c9 f7       	brne	.-14     	; 0xe44 <__ultoa_invert+0x86>
 e52:	00 97       	sbiw	r24, 0x00	; 0
 e54:	61 05       	cpc	r22, r1
 e56:	71 05       	cpc	r23, r1
 e58:	08 95       	ret
 e5a:	9b 01       	movw	r18, r22
 e5c:	ac 01       	movw	r20, r24
 e5e:	0a 2e       	mov	r0, r26
 e60:	06 94       	lsr	r0
 e62:	57 95       	ror	r21
 e64:	47 95       	ror	r20
 e66:	37 95       	ror	r19
 e68:	27 95       	ror	r18
 e6a:	ba 95       	dec	r27
 e6c:	c9 f7       	brne	.-14     	; 0xe60 <__ultoa_invert+0xa2>
 e6e:	62 0f       	add	r22, r18
 e70:	73 1f       	adc	r23, r19
 e72:	84 1f       	adc	r24, r20
 e74:	95 1f       	adc	r25, r21
 e76:	a0 1d       	adc	r26, r0
 e78:	08 95       	ret

00000e7a <__prologue_saves__>:
 e7a:	2f 92       	push	r2
 e7c:	3f 92       	push	r3
 e7e:	4f 92       	push	r4
 e80:	5f 92       	push	r5
 e82:	6f 92       	push	r6
 e84:	7f 92       	push	r7
 e86:	8f 92       	push	r8
 e88:	9f 92       	push	r9
 e8a:	af 92       	push	r10
 e8c:	bf 92       	push	r11
 e8e:	cf 92       	push	r12
 e90:	df 92       	push	r13
 e92:	ef 92       	push	r14
 e94:	ff 92       	push	r15
 e96:	0f 93       	push	r16
 e98:	1f 93       	push	r17
 e9a:	cf 93       	push	r28
 e9c:	df 93       	push	r29
 e9e:	cd b7       	in	r28, 0x3d	; 61
 ea0:	de b7       	in	r29, 0x3e	; 62
 ea2:	ca 1b       	sub	r28, r26
 ea4:	db 0b       	sbc	r29, r27
 ea6:	0f b6       	in	r0, 0x3f	; 63
 ea8:	f8 94       	cli
 eaa:	de bf       	out	0x3e, r29	; 62
 eac:	0f be       	out	0x3f, r0	; 63
 eae:	cd bf       	out	0x3d, r28	; 61
 eb0:	09 94       	ijmp

00000eb2 <__epilogue_restores__>:
 eb2:	2a 88       	ldd	r2, Y+18	; 0x12
 eb4:	39 88       	ldd	r3, Y+17	; 0x11
 eb6:	48 88       	ldd	r4, Y+16	; 0x10
 eb8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eba:	6e 84       	ldd	r6, Y+14	; 0x0e
 ebc:	7d 84       	ldd	r7, Y+13	; 0x0d
 ebe:	8c 84       	ldd	r8, Y+12	; 0x0c
 ec0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ec2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ec4:	b9 84       	ldd	r11, Y+9	; 0x09
 ec6:	c8 84       	ldd	r12, Y+8	; 0x08
 ec8:	df 80       	ldd	r13, Y+7	; 0x07
 eca:	ee 80       	ldd	r14, Y+6	; 0x06
 ecc:	fd 80       	ldd	r15, Y+5	; 0x05
 ece:	0c 81       	ldd	r16, Y+4	; 0x04
 ed0:	1b 81       	ldd	r17, Y+3	; 0x03
 ed2:	aa 81       	ldd	r26, Y+2	; 0x02
 ed4:	b9 81       	ldd	r27, Y+1	; 0x01
 ed6:	ce 0f       	add	r28, r30
 ed8:	d1 1d       	adc	r29, r1
 eda:	0f b6       	in	r0, 0x3f	; 63
 edc:	f8 94       	cli
 ede:	de bf       	out	0x3e, r29	; 62
 ee0:	0f be       	out	0x3f, r0	; 63
 ee2:	cd bf       	out	0x3d, r28	; 61
 ee4:	ed 01       	movw	r28, r26
 ee6:	08 95       	ret

00000ee8 <_exit>:
 ee8:	f8 94       	cli

00000eea <__stop_program>:
 eea:	ff cf       	rjmp	.-2      	; 0xeea <__stop_program>
