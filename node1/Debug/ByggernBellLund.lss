
ByggernBellLund.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007a  00800100  00001ca8  00001d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080017a  0080017a  00001db6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001db6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  00001e12  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000219e  00000000  00000000  00001ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cb9  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c26  00000000  00000000  00004e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000618  00000000  00000000  00005a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005fa  00000000  00000000  00006088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001af4  00000000  00000000  00006682  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  00008176  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__vector_14>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <menuSystem+0x156>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 ea       	ldi	r30, 0xA8	; 168
     37c:	fc e1       	ldi	r31, 0x1C	; 28
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 37       	cpi	r26, 0x7A	; 122
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	aa e7       	ldi	r26, 0x7A	; 122
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 38       	cpi	r26, 0x84	; 132
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
     39e:	0c 94 52 0e 	jmp	0x1ca4	; 0x1ca4 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <get_adc>:
uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc
	uint16_t adc_size = 0x400;
	
	
	adc[0] = 4 + (channel%4);
     3a6:	83 70       	andi	r24, 0x03	; 3
     3a8:	90 78       	andi	r25, 0x80	; 128
     3aa:	99 23       	and	r25, r25
     3ac:	24 f4       	brge	.+8      	; 0x3b6 <get_adc+0x10>
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	8c 6f       	ori	r24, 0xFC	; 252
     3b2:	9f 6f       	ori	r25, 0xFF	; 255
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	8c 5f       	subi	r24, 0xFC	; 252
     3b8:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3bc:	82 e4       	ldi	r24, 0x42	; 66
     3be:	8a 95       	dec	r24
     3c0:	f1 f7       	brne	.-4      	; 0x3be <get_adc+0x18>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <get_adc+0x1e>
	_delay_us(200);
	return adc[0];
     3c4:	80 91 00 14 	lds	r24, 0x1400
     3c8:	08 95       	ret

000003ca <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     3ca:	80 b7       	in	r24, 0x30	; 48
     3cc:	80 62       	ori	r24, 0x20	; 32
     3ce:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     3d0:	85 b7       	in	r24, 0x35	; 53
     3d2:	80 68       	ori	r24, 0x80	; 128
     3d4:	85 bf       	out	0x35, r24	; 53
     3d6:	08 95       	ret

000003d8 <main>:
#include "draw.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
     3d8:	80 e8       	ldi	r24, 0x80	; 128
     3da:	95 e2       	ldi	r25, 0x25	; 37
     3dc:	0e 94 5e 07 	call	0xebc	; 0xebc <uartInit>
	bus_init();
     3e0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <bus_init>
	oled_init();
     3e4:	0e 94 d1 05 	call	0xba2	; 0xba2 <oled_init>
		//oled_print("Hello");
		//oled_sram_write_string(0, "Hello", 4);
		//flush_sram(0);
		//_delay_ms(1000);
		
		menuSystem();
     3e8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <menuSystem>
     3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <main+0x10>

000003ee <play_draw>:
#include "joy_driver.h"
#include "oled_driver.h"
#include "draw.h"


void play_draw(){
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <play_draw+0x6>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <play_draw+0x8>
     3f6:	1f 92       	push	r1
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
	oled_sram_clear_screen(0);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
     404:	0f 2e       	mov	r0, r31
     406:	ff e1       	ldi	r31, 0x1F	; 31
     408:	ef 2e       	mov	r14, r31
     40a:	f1 2c       	mov	r15, r1
     40c:	f0 2d       	mov	r31, r0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
     40e:	0f e3       	ldi	r16, 0x3F	; 63
     410:	10 e0       	ldi	r17, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = getJoystickPosition();
     412:	0e 94 8c 02 	call	0x518	; 0x518 <getJoystickPosition>
     416:	29 83       	std	Y+1, r18	; 0x01
     418:	3a 83       	std	Y+2, r19	; 0x02
     41a:	4b 83       	std	Y+3, r20	; 0x03
     41c:	5c 83       	std	Y+4, r21	; 0x04
     41e:	6d 83       	std	Y+5, r22	; 0x05
		switch(joy.D){
     420:	61 30       	cpi	r22, 0x01	; 1
     422:	89 f0       	breq	.+34     	; 0x446 <play_draw+0x58>
     424:	68 f0       	brcs	.+26     	; 0x440 <play_draw+0x52>
     426:	62 30       	cpi	r22, 0x02	; 2
     428:	19 f0       	breq	.+6      	; 0x430 <play_draw+0x42>
     42a:	63 30       	cpi	r22, 0x03	; 3
     42c:	29 f0       	breq	.+10     	; 0x438 <play_draw+0x4a>
     42e:	0d c0       	rjmp	.+26     	; 0x44a <play_draw+0x5c>
			case NEUTRAL:
				break;
			case UP:
				y--;
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	e8 1a       	sub	r14, r24
     434:	f1 08       	sbc	r15, r1
				break;
     436:	09 c0       	rjmp	.+18     	; 0x44a <play_draw+0x5c>
			case DOWN:
				y++;
     438:	9f ef       	ldi	r25, 0xFF	; 255
     43a:	e9 1a       	sub	r14, r25
     43c:	f9 0a       	sbc	r15, r25
				break;
     43e:	05 c0       	rjmp	.+10     	; 0x44a <play_draw+0x5c>
			case LEFT:
				x--;
     440:	01 50       	subi	r16, 0x01	; 1
     442:	11 09       	sbc	r17, r1
				break;
     444:	02 c0       	rjmp	.+4      	; 0x44a <play_draw+0x5c>
			case RIGHT:
				x++;
     446:	0f 5f       	subi	r16, 0xFF	; 255
     448:	1f 4f       	sbci	r17, 0xFF	; 255
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
     44a:	a7 01       	movw	r20, r14
     44c:	b8 01       	movw	r22, r16
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 13 07 	call	0xe26	; 0xe26 <oled_sram_write_bit>
		oled_sram_flush(0);
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_flush>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     45e:	87 ea       	ldi	r24, 0xA7	; 167
     460:	91 e6       	ldi	r25, 0x61	; 97
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <play_draw+0x74>
     466:	00 c0       	rjmp	.+0      	; 0x468 <play_draw+0x7a>
     468:	00 00       	nop
     46a:	d3 cf       	rjmp	.-90     	; 0x412 <play_draw+0x24>

0000046c <getJoystickDirection>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = getJoystickDirection(joy.X, joy.Y);
	return joy;
}

direction getJoystickDirection(int x, int y){
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	8c 01       	movw	r16, r24
     47e:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
     480:	bc 01       	movw	r22, r24
     482:	88 27       	eor	r24, r24
     484:	77 fd       	sbrc	r23, 7
     486:	80 95       	com	r24
     488:	98 2f       	mov	r25, r24
     48a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     48e:	6b 01       	movw	r12, r22
     490:	7c 01       	movw	r14, r24
     492:	e8 94       	clt
     494:	f7 f8       	bld	r15, 7
     496:	20 e0       	ldi	r18, 0x00	; 0
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	48 e4       	ldi	r20, 0x48	; 72
     49c:	52 e4       	ldi	r21, 0x42	; 66
     49e:	c7 01       	movw	r24, r14
     4a0:	b6 01       	movw	r22, r12
     4a2:	0e 94 df 07 	call	0xfbe	; 0xfbe <__cmpsf2>
     4a6:	88 23       	and	r24, r24
     4a8:	84 f4       	brge	.+32     	; 0x4ca <getJoystickDirection+0x5e>
     4aa:	be 01       	movw	r22, r28
     4ac:	88 27       	eor	r24, r24
     4ae:	77 fd       	sbrc	r23, 7
     4b0:	80 95       	com	r24
     4b2:	98 2f       	mov	r25, r24
     4b4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     4b8:	9f 77       	andi	r25, 0x7F	; 127
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	48 e4       	ldi	r20, 0x48	; 72
     4c0:	52 e4       	ldi	r21, 0x42	; 66
     4c2:	0e 94 df 07 	call	0xfbe	; 0xfbe <__cmpsf2>
     4c6:	88 23       	and	r24, r24
     4c8:	dc f0       	brlt	.+54     	; 0x500 <__stack+0x1>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
     4ca:	be 01       	movw	r22, r28
     4cc:	88 27       	eor	r24, r24
     4ce:	77 fd       	sbrc	r23, 7
     4d0:	80 95       	com	r24
     4d2:	98 2f       	mov	r25, r24
     4d4:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     4d8:	9b 01       	movw	r18, r22
     4da:	ac 01       	movw	r20, r24
     4dc:	5f 77       	andi	r21, 0x7F	; 127
     4de:	c7 01       	movw	r24, r14
     4e0:	b6 01       	movw	r22, r12
     4e2:	0e 94 df 07 	call	0xfbe	; 0xfbe <__cmpsf2>
     4e6:	88 23       	and	r24, r24
     4e8:	2c f4       	brge	.+10     	; 0x4f4 <getJoystickDirection+0x88>
		if(y > 0){
     4ea:	1c 16       	cp	r1, r28
     4ec:	1d 06       	cpc	r1, r29
     4ee:	54 f4       	brge	.+20     	; 0x504 <__stack+0x5>
			return UP;
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	09 c0       	rjmp	.+18     	; 0x506 <__stack+0x7>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	10 16       	cp	r1, r16
     4f8:	11 06       	cpc	r1, r17
     4fa:	2c f0       	brlt	.+10     	; 0x506 <__stack+0x7>
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <__stack+0x7>
}

direction getJoystickDirection(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
     500:	84 e0       	ldi	r24, 0x04	; 4
     502:	01 c0       	rjmp	.+2      	; 0x506 <__stack+0x7>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
     504:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	08 95       	ret

00000518 <getJoystickPosition>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Joystick getJoystickPosition(){
     518:	cf 92       	push	r12
     51a:	df 92       	push	r13
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	00 d0       	rcall	.+0      	; 0x52a <getJoystickPosition+0x12>
     52a:	00 d0       	rcall	.+0      	; 0x52c <getJoystickPosition+0x14>
     52c:	1f 92       	push	r1
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_adc>
     53a:	c0 90 06 01 	lds	r12, 0x0106
     53e:	d0 90 07 01 	lds	r13, 0x0107
     542:	e0 90 08 01 	lds	r14, 0x0108
     546:	f0 90 09 01 	lds	r15, 0x0109
     54a:	bc 01       	movw	r22, r24
     54c:	88 27       	eor	r24, r24
     54e:	77 fd       	sbrc	r23, 7
     550:	80 95       	com	r24
     552:	98 2f       	mov	r25, r24
     554:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     558:	a7 01       	movw	r20, r14
     55a:	96 01       	movw	r18, r12
     55c:	0e 94 7a 07 	call	0xef4	; 0xef4 <__subsf3>
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	48 ec       	ldi	r20, 0xC8	; 200
     566:	52 e4       	ldi	r21, 0x42	; 66
     568:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulsf3>
     56c:	a7 01       	movw	r20, r14
     56e:	96 01       	movw	r18, r12
     570:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__divsf3>
     574:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fixsfsi>
     578:	16 2f       	mov	r17, r22
     57a:	07 2f       	mov	r16, r23
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
     57c:	83 e0       	ldi	r24, 0x03	; 3
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_adc>
     584:	c0 90 0a 01 	lds	r12, 0x010A
     588:	d0 90 0b 01 	lds	r13, 0x010B
     58c:	e0 90 0c 01 	lds	r14, 0x010C
     590:	f0 90 0d 01 	lds	r15, 0x010D
     594:	bc 01       	movw	r22, r24
     596:	88 27       	eor	r24, r24
     598:	77 fd       	sbrc	r23, 7
     59a:	80 95       	com	r24
     59c:	98 2f       	mov	r25, r24
     59e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     5a2:	a7 01       	movw	r20, r14
     5a4:	96 01       	movw	r18, r12
     5a6:	0e 94 7a 07 	call	0xef4	; 0xef4 <__subsf3>
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	48 ec       	ldi	r20, 0xC8	; 200
     5b0:	52 e4       	ldi	r21, 0x42	; 66
     5b2:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulsf3>
     5b6:	a7 01       	movw	r20, r14
     5b8:	96 01       	movw	r18, r12
     5ba:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <__divsf3>
     5be:	0e 94 4b 08 	call	0x1096	; 0x1096 <__fixsfsi>
     5c2:	f6 2e       	mov	r15, r22
     5c4:	e7 2e       	mov	r14, r23
	joy.D = getJoystickDirection(joy.X, joy.Y);
     5c6:	61 2f       	mov	r22, r17
     5c8:	70 2f       	mov	r23, r16
     5ca:	8f 2d       	mov	r24, r15
     5cc:	9e 2d       	mov	r25, r14
     5ce:	0e 94 36 02 	call	0x46c	; 0x46c <getJoystickDirection>
	return joy;
     5d2:	4f 2d       	mov	r20, r15
     5d4:	5e 2d       	mov	r21, r14
     5d6:	5a 83       	std	Y+2, r21	; 0x02
     5d8:	49 83       	std	Y+1, r20	; 0x01
     5da:	41 2f       	mov	r20, r17
     5dc:	50 2f       	mov	r21, r16
     5de:	5c 83       	std	Y+4, r21	; 0x04
     5e0:	4b 83       	std	Y+3, r20	; 0x03
     5e2:	2f 2d       	mov	r18, r15
     5e4:	3a 81       	ldd	r19, Y+2	; 0x02
     5e6:	5c 81       	ldd	r21, Y+4	; 0x04
}
     5e8:	68 2f       	mov	r22, r24
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0f 90       	pop	r0
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	08 95       	ret

0000060c <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	1f 92       	push	r1
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
     616:	28 ee       	ldi	r18, 0xE8	; 232
     618:	33 e0       	ldi	r19, 0x03	; 3
     61a:	a9 01       	movw	r20, r18
     61c:	48 1b       	sub	r20, r24
     61e:	59 0b       	sbc	r21, r25
     620:	ca 01       	movw	r24, r20
     622:	68 ec       	ldi	r22, 0xC8	; 200
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	0e 94 91 09 	call	0x1322	; 0x1322 <__divmodhi4>
     62a:	60 5d       	subi	r22, 0xD0	; 208
     62c:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	6e e0       	ldi	r22, 0x0E	; 14
     63c:	71 e0       	ldi	r23, 0x01	; 1
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
     646:	42 e0       	ldi	r20, 0x02	; 2
     648:	50 e0       	ldi	r21, 0x00	; 0
     64a:	6c e1       	ldi	r22, 0x1C	; 28
     64c:	71 e0       	ldi	r23, 0x01	; 1
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
     656:	20 e6       	ldi	r18, 0x60	; 96
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	42 e0       	ldi	r20, 0x02	; 2
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	be 01       	movw	r22, r28
     660:	6f 5f       	subi	r22, 0xFF	; 255
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 ad 06 	call	0xd5a	; 0xd5a <oled_sram_write_char>
	oled_sram_flush(0);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_flush>
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <calibrateJoystick>:
			return LEFT;
		} 
	}
}

void calibrateJoystick(){
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     68e:	e1 2c       	mov	r14, r1
     690:	f1 2c       	mov	r15, r1

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
     692:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
     694:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
     696:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
     698:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
     69a:	0f 2e       	mov	r0, r31
     69c:	f8 ec       	ldi	r31, 0xC8	; 200
     69e:	cf 2e       	mov	r12, r31
     6a0:	d1 2c       	mov	r13, r1
     6a2:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_adc>
     6ac:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
     6b6:	bc 16       	cp	r11, r28
     6b8:	08 f4       	brcc	.+2      	; 0x6bc <calibrateJoystick+0x40>
     6ba:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
     6bc:	81 17       	cp	r24, r17
     6be:	08 f4       	brcc	.+2      	; 0x6c2 <calibrateJoystick+0x46>
     6c0:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
     6c2:	08 17       	cp	r16, r24
     6c4:	08 f4       	brcc	.+2      	; 0x6c8 <calibrateJoystick+0x4c>
     6c6:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
     6c8:	db 15       	cp	r29, r11
     6ca:	08 f4       	brcc	.+2      	; 0x6ce <calibrateJoystick+0x52>
     6cc:	db 2d       	mov	r29, r11
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	97 e1       	ldi	r25, 0x17	; 23
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <calibrateJoystick+0x56>
     6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <calibrateJoystick+0x5c>
     6d8:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
     6da:	c7 01       	movw	r24, r14
     6dc:	b6 01       	movw	r22, r12
     6de:	0e 94 91 09 	call	0x1322	; 0x1322 <__divmodhi4>
     6e2:	89 2b       	or	r24, r25
     6e4:	19 f4       	brne	.+6      	; 0x6ec <calibrateJoystick+0x70>
			calibration_visual_countdown(i);
     6e6:	c7 01       	movw	r24, r14
     6e8:	0e 94 06 03 	call	0x60c	; 0x60c <calibration_visual_countdown>
void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     6ec:	9f ef       	ldi	r25, 0xFF	; 255
     6ee:	e9 1a       	sub	r14, r25
     6f0:	f9 0a       	sbc	r15, r25
     6f2:	88 ee       	ldi	r24, 0xE8	; 232
     6f4:	e8 16       	cp	r14, r24
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	f8 06       	cpc	r15, r24
     6fa:	a1 f6       	brne	.-88     	; 0x6a4 <calibrateJoystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
     6fc:	6d 2f       	mov	r22, r29
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	6c 1b       	sub	r22, r28
     702:	71 09       	sbc	r23, r1
     704:	88 27       	eor	r24, r24
     706:	77 fd       	sbrc	r23, 7
     708:	80 95       	com	r24
     70a:	98 2f       	mov	r25, r24
     70c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	40 e0       	ldi	r20, 0x00	; 0
     716:	5f e3       	ldi	r21, 0x3F	; 63
     718:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulsf3>
     71c:	60 93 06 01 	sts	0x0106, r22
     720:	70 93 07 01 	sts	0x0107, r23
     724:	80 93 08 01 	sts	0x0108, r24
     728:	90 93 09 01 	sts	0x0109, r25
	xMean = (xMax - xMin)/2.0;
     72c:	60 2f       	mov	r22, r16
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	61 1b       	sub	r22, r17
     732:	71 09       	sbc	r23, r1
     734:	88 27       	eor	r24, r24
     736:	77 fd       	sbrc	r23, 7
     738:	80 95       	com	r24
     73a:	98 2f       	mov	r25, r24
     73c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__floatsisf>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e0       	ldi	r20, 0x00	; 0
     746:	5f e3       	ldi	r21, 0x3F	; 63
     748:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulsf3>
     74c:	60 93 0a 01 	sts	0x010A, r22
     750:	70 93 0b 01 	sts	0x010B, r23
     754:	80 93 0c 01 	sts	0x010C, r24
     758:	90 93 0d 01 	sts	0x010D, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
     75c:	1f 92       	push	r1
     75e:	0f 93       	push	r16
     760:	1f 92       	push	r1
     762:	1f 93       	push	r17
     764:	1f 92       	push	r1
     766:	df 93       	push	r29
     768:	1f 92       	push	r1
     76a:	cf 93       	push	r28
     76c:	88 e2       	ldi	r24, 0x28	; 40
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	9f 93       	push	r25
     772:	8f 93       	push	r24
     774:	0e 94 45 0a 	call	0x148a	; 0x148a <printf>
     778:	8d b7       	in	r24, 0x3d	; 61
     77a:	9e b7       	in	r25, 0x3e	; 62
     77c:	0a 96       	adiw	r24, 0x0a	; 10
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	9e bf       	out	0x3e, r25	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	8d bf       	out	0x3d, r24	; 61
}
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	0f 91       	pop	r16
     790:	ff 90       	pop	r15
     792:	ef 90       	pop	r14
     794:	df 90       	pop	r13
     796:	cf 90       	pop	r12
     798:	bf 90       	pop	r11
     79a:	08 95       	ret

0000079c <make_screen>:
	}
	
	
}

make_screen(menu* m){
     79c:	2f 92       	push	r2
     79e:	3f 92       	push	r3
     7a0:	4f 92       	push	r4
     7a2:	5f 92       	push	r5
     7a4:	6f 92       	push	r6
     7a6:	7f 92       	push	r7
     7a8:	8f 92       	push	r8
     7aa:	9f 92       	push	r9
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <make_screen+0x26>
     7c2:	1f 92       	push	r1
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 ff 06 	call	0xdfe	; 0xdfe <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
     7d2:	d7 01       	movw	r26, r14
     7d4:	6d 91       	ld	r22, X+
     7d6:	7c 91       	ld	r23, X
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	80 e0       	ldi	r24, 0x00	; 0
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
     7e4:	f7 01       	movw	r30, r14
     7e6:	84 89       	ldd	r24, Z+20	; 0x14
     7e8:	95 89       	ldd	r25, Z+21	; 0x15
     7ea:	18 16       	cp	r1, r24
     7ec:	19 06       	cpc	r1, r25
     7ee:	0c f0       	brlt	.+2      	; 0x7f2 <make_screen+0x56>
     7f0:	6d c0       	rjmp	.+218    	; 0x8cc <make_screen+0x130>
     7f2:	c7 01       	movw	r24, r14
     7f4:	04 96       	adiw	r24, 0x04	; 4
     7f6:	9b 83       	std	Y+3, r25	; 0x03
     7f8:	8a 83       	std	Y+2, r24	; 0x02
     7fa:	cc 24       	eor	r12, r12
     7fc:	c3 94       	inc	r12
     7fe:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
     800:	68 94       	set
     802:	22 24       	eor	r2, r2
     804:	23 f8       	bld	r2, 3
     806:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
     808:	aa 81       	ldd	r26, Y+2	; 0x02
     80a:	bb 81       	ldd	r27, Y+3	; 0x03
     80c:	6d 90       	ld	r6, X+
     80e:	7d 90       	ld	r7, X+
     810:	bb 83       	std	Y+3, r27	; 0x03
     812:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
     814:	d3 01       	movw	r26, r6
     816:	ed 91       	ld	r30, X+
     818:	fc 91       	ld	r31, X
     81a:	80 81       	ld	r24, Z
     81c:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
     81e:	f7 01       	movw	r30, r14
     820:	40 ad       	ldd	r20, Z+56	; 0x38
     822:	51 ad       	ldd	r21, Z+57	; 0x39
     824:	c6 01       	movw	r24, r12
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	48 17       	cp	r20, r24
     82a:	59 07       	cpc	r21, r25
     82c:	59 f4       	brne	.+22     	; 0x844 <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
     82e:	4f 5f       	subi	r20, 0xFF	; 255
     830:	5f 4f       	sbci	r21, 0xFF	; 255
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	64 e3       	ldi	r22, 0x34	; 52
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 ad 06 	call	0xd5a	; 0xd5a <oled_sram_write_char>
     842:	09 c0       	rjmp	.+18     	; 0x856 <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	a6 01       	movw	r20, r12
     84a:	66 e2       	ldi	r22, 0x26	; 38
     84c:	71 e0       	ldi	r23, 0x01	; 1
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 ad 06 	call	0xd5a	; 0xd5a <oled_sram_write_char>
		}
		while(c != '\0'){
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	88 23       	and	r24, r24
     85a:	59 f1       	breq	.+86     	; 0x8b2 <make_screen+0x116>
     85c:	68 94       	set
     85e:	aa 24       	eor	r10, r10
     860:	a3 f8       	bld	r10, 3
     862:	b1 2c       	mov	r11, r1
     864:	88 24       	eor	r8, r8
     866:	83 94       	inc	r8
     868:	91 2c       	mov	r9, r1
     86a:	1e c0       	rjmp	.+60     	; 0x8a8 <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
     86c:	24 2d       	mov	r18, r4
     86e:	35 2d       	mov	r19, r5
     870:	a6 01       	movw	r20, r12
     872:	be 01       	movw	r22, r28
     874:	6f 5f       	subi	r22, 0xFF	; 255
     876:	7f 4f       	sbci	r23, 0xFF	; 255
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 ad 06 	call	0xd5a	; 0xd5a <oled_sram_write_char>
     880:	01 50       	subi	r16, 0x01	; 1
     882:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
     884:	01 15       	cp	r16, r1
     886:	11 05       	cpc	r17, r1
     888:	89 f7       	brne	.-30     	; 0x86c <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
     88a:	d3 01       	movw	r26, r6
     88c:	ed 91       	ld	r30, X+
     88e:	fc 91       	ld	r31, X
     890:	e8 0d       	add	r30, r8
     892:	f9 1d       	adc	r31, r9
     894:	80 81       	ld	r24, Z
     896:	89 83       	std	Y+1, r24	; 0x01
     898:	bf ef       	ldi	r27, 0xFF	; 255
     89a:	8b 1a       	sub	r8, r27
     89c:	9b 0a       	sbc	r9, r27
     89e:	e8 e0       	ldi	r30, 0x08	; 8
     8a0:	ae 0e       	add	r10, r30
     8a2:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
     8a4:	88 23       	and	r24, r24
     8a6:	29 f0       	breq	.+10     	; 0x8b2 <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
     8a8:	4a 2c       	mov	r4, r10
     8aa:	5b 2c       	mov	r5, r11
     8ac:	02 2d       	mov	r16, r2
     8ae:	13 2d       	mov	r17, r3
     8b0:	dd cf       	rjmp	.-70     	; 0x86c <make_screen+0xd0>
make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
     8b2:	c6 01       	movw	r24, r12
     8b4:	ff ef       	ldi	r31, 0xFF	; 255
     8b6:	cf 1a       	sub	r12, r31
     8b8:	df 0a       	sbc	r13, r31
     8ba:	d7 01       	movw	r26, r14
     8bc:	54 96       	adiw	r26, 0x14	; 20
     8be:	2d 91       	ld	r18, X+
     8c0:	3c 91       	ld	r19, X
     8c2:	55 97       	sbiw	r26, 0x15	; 21
     8c4:	82 17       	cp	r24, r18
     8c6:	93 07       	cpc	r25, r19
     8c8:	0c f4       	brge	.+2      	; 0x8cc <make_screen+0x130>
     8ca:	9e cf       	rjmp	.-196    	; 0x808 <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
     8cc:	f7 01       	movw	r30, r14
     8ce:	86 a9       	ldd	r24, Z+54	; 0x36
     8d0:	97 a9       	ldd	r25, Z+55	; 0x37
     8d2:	18 16       	cp	r1, r24
     8d4:	19 06       	cpc	r1, r25
     8d6:	0c f0       	brlt	.+2      	; 0x8da <make_screen+0x13e>
     8d8:	6f c0       	rjmp	.+222    	; 0x9b8 <make_screen+0x21c>
     8da:	37 01       	movw	r6, r14
     8dc:	f6 e1       	ldi	r31, 0x16	; 22
     8de:	6f 0e       	add	r6, r31
     8e0:	71 1c       	adc	r7, r1
     8e2:	c1 2c       	mov	r12, r1
     8e4:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
     8e6:	68 94       	set
     8e8:	44 24       	eor	r4, r4
     8ea:	43 f8       	bld	r4, 3
     8ec:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
     8ee:	d3 01       	movw	r26, r6
     8f0:	8d 90       	ld	r8, X+
     8f2:	9d 90       	ld	r9, X+
     8f4:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
     8f6:	f4 01       	movw	r30, r8
     8f8:	80 81       	ld	r24, Z
     8fa:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
     8fc:	d7 01       	movw	r26, r14
     8fe:	d8 96       	adiw	r26, 0x38	; 56
     900:	8d 91       	ld	r24, X+
     902:	9c 91       	ld	r25, X
     904:	d9 97       	sbiw	r26, 0x39	; 57
     906:	54 96       	adiw	r26, 0x14	; 20
     908:	4d 91       	ld	r20, X+
     90a:	5c 91       	ld	r21, X
     90c:	55 97       	sbiw	r26, 0x15	; 21
     90e:	4c 0d       	add	r20, r12
     910:	5d 1d       	adc	r21, r13
     912:	84 17       	cp	r24, r20
     914:	95 07       	cpc	r25, r21
     916:	61 f4       	brne	.+24     	; 0x930 <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
     918:	ac 01       	movw	r20, r24
     91a:	4f 5f       	subi	r20, 0xFF	; 255
     91c:	5f 4f       	sbci	r21, 0xFF	; 255
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	64 e3       	ldi	r22, 0x34	; 52
     924:	71 e0       	ldi	r23, 0x01	; 1
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	0e 94 ad 06 	call	0xd5a	; 0xd5a <oled_sram_write_char>
     92e:	0a c0       	rjmp	.+20     	; 0x944 <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
     930:	4f 5f       	subi	r20, 0xFF	; 255
     932:	5f 4f       	sbci	r21, 0xFF	; 255
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	66 e2       	ldi	r22, 0x26	; 38
     93a:	71 e0       	ldi	r23, 0x01	; 1
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 ad 06 	call	0xd5a	; 0xd5a <oled_sram_write_char>
		}
		while(c != '\0'){
     944:	89 81       	ldd	r24, Y+1	; 0x01
     946:	88 23       	and	r24, r24
     948:	59 f1       	breq	.+86     	; 0x9a0 <make_screen+0x204>
     94a:	bf ef       	ldi	r27, 0xFF	; 255
     94c:	8b 1a       	sub	r8, r27
     94e:	9b 0a       	sbc	r9, r27
     950:	68 94       	set
     952:	aa 24       	eor	r10, r10
     954:	a3 f8       	bld	r10, 3
     956:	b1 2c       	mov	r11, r1
     958:	1e c0       	rjmp	.+60     	; 0x996 <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
     95a:	f7 01       	movw	r30, r14
     95c:	44 89       	ldd	r20, Z+20	; 0x14
     95e:	55 89       	ldd	r21, Z+21	; 0x15
     960:	4c 0d       	add	r20, r12
     962:	5d 1d       	adc	r21, r13
     964:	4f 5f       	subi	r20, 0xFF	; 255
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	22 2d       	mov	r18, r2
     96a:	33 2d       	mov	r19, r3
     96c:	be 01       	movw	r22, r28
     96e:	6f 5f       	subi	r22, 0xFF	; 255
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 ad 06 	call	0xd5a	; 0xd5a <oled_sram_write_char>
     97a:	01 50       	subi	r16, 0x01	; 1
     97c:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
     97e:	01 15       	cp	r16, r1
     980:	11 05       	cpc	r17, r1
     982:	59 f7       	brne	.-42     	; 0x95a <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
     984:	d4 01       	movw	r26, r8
     986:	8d 91       	ld	r24, X+
     988:	4d 01       	movw	r8, r26
     98a:	89 83       	std	Y+1, r24	; 0x01
     98c:	b8 e0       	ldi	r27, 0x08	; 8
     98e:	ab 0e       	add	r10, r27
     990:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
     992:	88 23       	and	r24, r24
     994:	29 f0       	breq	.+10     	; 0x9a0 <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
     996:	2a 2c       	mov	r2, r10
     998:	3b 2c       	mov	r3, r11
     99a:	04 2d       	mov	r16, r4
     99c:	15 2d       	mov	r17, r5
     99e:	dd cf       	rjmp	.-70     	; 0x95a <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
     9a0:	ef ef       	ldi	r30, 0xFF	; 255
     9a2:	ce 1a       	sub	r12, r30
     9a4:	de 0a       	sbc	r13, r30
     9a6:	d7 01       	movw	r26, r14
     9a8:	d6 96       	adiw	r26, 0x36	; 54
     9aa:	8d 91       	ld	r24, X+
     9ac:	9c 91       	ld	r25, X
     9ae:	d7 97       	sbiw	r26, 0x37	; 55
     9b0:	c8 16       	cp	r12, r24
     9b2:	d9 06       	cpc	r13, r25
     9b4:	0c f4       	brge	.+2      	; 0x9b8 <make_screen+0x21c>
     9b6:	9b cf       	rjmp	.-202    	; 0x8ee <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_flush>
} 
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	1f 91       	pop	r17
     9cc:	0f 91       	pop	r16
     9ce:	ff 90       	pop	r15
     9d0:	ef 90       	pop	r14
     9d2:	df 90       	pop	r13
     9d4:	cf 90       	pop	r12
     9d6:	bf 90       	pop	r11
     9d8:	af 90       	pop	r10
     9da:	9f 90       	pop	r9
     9dc:	8f 90       	pop	r8
     9de:	7f 90       	pop	r7
     9e0:	6f 90       	pop	r6
     9e2:	5f 90       	pop	r5
     9e4:	4f 90       	pop	r4
     9e6:	3f 90       	pop	r3
     9e8:	2f 90       	pop	r2
     9ea:	08 95       	ret

000009ec <menuSystem>:
#include "oled_driver.h"
#include "joy_driver.h"
#include "draw.h"


void menuSystem(){
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	cd 5e       	subi	r28, 0xED	; 237
     9f6:	d1 09       	sbc	r29, r1
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 3};
     a02:	4a e3       	ldi	r20, 0x3A	; 58
     a04:	8e 01       	movw	r16, r28
     a06:	0f 5f       	subi	r16, 0xFF	; 255
     a08:	1f 4f       	sbci	r17, 0xFF	; 255
     a0a:	d8 01       	movw	r26, r16
     a0c:	e4 2f       	mov	r30, r20
     a0e:	1d 92       	st	X+, r1
     a10:	ea 95       	dec	r30
     a12:	e9 f7       	brne	.-6      	; 0xa0e <menuSystem+0x22>
     a14:	86 e3       	ldi	r24, 0x36	; 54
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	9a 83       	std	Y+2, r25	; 0x02
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	9e 8b       	std	Y+22, r25	; 0x16
     a22:	8d 8b       	std	Y+21, r24	; 0x15
	menu highscore = {.name = "Highscore", .parent = &mainMenu};
     a24:	de 01       	movw	r26, r28
     a26:	db 96       	adiw	r26, 0x3b	; 59
     a28:	fd 01       	movw	r30, r26
     a2a:	84 2f       	mov	r24, r20
     a2c:	11 92       	st	Z+, r1
     a2e:	8a 95       	dec	r24
     a30:	e9 f7       	brne	.-6      	; 0xa2c <menuSystem+0x40>
     a32:	80 e4       	ldi	r24, 0x40	; 64
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	9c af       	std	Y+60, r25	; 0x3c
     a38:	8b af       	std	Y+59, r24	; 0x3b
     a3a:	1e af       	std	Y+62, r17	; 0x3e
     a3c:	0d af       	std	Y+61, r16	; 0x3d
	mainMenu.submenues[0] = &highscore;
     a3e:	be 83       	std	Y+6, r27	; 0x06
     a40:	ad 83       	std	Y+5, r26	; 0x05
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 1};
     a42:	fe 01       	movw	r30, r28
     a44:	eb 58       	subi	r30, 0x8B	; 139
     a46:	ff 4f       	sbci	r31, 0xFF	; 255
     a48:	df 01       	movw	r26, r30
     a4a:	84 2f       	mov	r24, r20
     a4c:	1d 92       	st	X+, r1
     a4e:	8a 95       	dec	r24
     a50:	e9 f7       	brne	.-6      	; 0xa4c <menuSystem+0x60>
     a52:	8a e4       	ldi	r24, 0x4A	; 74
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	91 83       	std	Z+1, r25	; 0x01
     a58:	80 83       	st	Z, r24
     a5a:	13 83       	std	Z+3, r17	; 0x03
     a5c:	02 83       	std	Z+2, r16	; 0x02
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	97 ab       	std	Z+55, r25	; 0x37
     a64:	86 ab       	std	Z+54, r24	; 0x36
	playGame.functions[0] = &play_draw;
     a66:	27 ef       	ldi	r18, 0xF7	; 247
     a68:	31 e0       	ldi	r19, 0x01	; 1
     a6a:	37 a3       	std	Z+39, r19	; 0x27
     a6c:	26 a3       	std	Z+38, r18	; 0x26
	playGame.name_functions[0] = "Play Draw Game";
     a6e:	24 e5       	ldi	r18, 0x54	; 84
     a70:	31 e0       	ldi	r19, 0x01	; 1
     a72:	37 8b       	std	Z+23, r19	; 0x17
     a74:	26 8b       	std	Z+22, r18	; 0x16
	mainMenu.submenues[1] = &playGame;
     a76:	f8 87       	std	Y+8, r31	; 0x08
     a78:	ef 83       	std	Y+7, r30	; 0x07
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 1};
     a7a:	fa 96       	adiw	r30, 0x3a	; 58
     a7c:	df 01       	movw	r26, r30
     a7e:	1d 92       	st	X+, r1
     a80:	4a 95       	dec	r20
     a82:	e9 f7       	brne	.-6      	; 0xa7e <menuSystem+0x92>
     a84:	23 e6       	ldi	r18, 0x63	; 99
     a86:	31 e0       	ldi	r19, 0x01	; 1
     a88:	31 83       	std	Z+1, r19	; 0x01
     a8a:	20 83       	st	Z, r18
     a8c:	13 83       	std	Z+3, r17	; 0x03
     a8e:	02 83       	std	Z+2, r16	; 0x02
     a90:	97 ab       	std	Z+55, r25	; 0x37
     a92:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrateJoystick;
     a94:	8e e3       	ldi	r24, 0x3E	; 62
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	97 a3       	std	Z+39, r25	; 0x27
     a9a:	86 a3       	std	Z+38, r24	; 0x26
	settings.name_functions[0] = "Calibrate Joy";
     a9c:	8c e6       	ldi	r24, 0x6C	; 108
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	97 8b       	std	Z+23, r25	; 0x17
     aa2:	86 8b       	std	Z+22, r24	; 0x16
	mainMenu.submenues[2] = &settings;
     aa4:	fa 87       	std	Y+10, r31	; 0x0a
     aa6:	e9 87       	std	Y+9, r30	; 0x09
	
	
	
	direction previousDirection = NEUTRAL;
     aa8:	68 94       	set
     aaa:	aa 24       	eor	r10, r10
     aac:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
     aae:	f8 01       	movw	r30, r16
     ab0:	c6 a8       	ldd	r12, Z+54	; 0x36
     ab2:	d7 a8       	ldd	r13, Z+55	; 0x37
     ab4:	e4 88       	ldd	r14, Z+20	; 0x14
     ab6:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = getJoystickPosition();
     ab8:	0e 94 8c 02 	call	0x518	; 0x518 <getJoystickPosition>
     abc:	b6 2e       	mov	r11, r22
     abe:	c7 51       	subi	r28, 0x17	; 23
     ac0:	df 4f       	sbci	r29, 0xFF	; 255
     ac2:	28 83       	st	Y, r18
     ac4:	c9 5e       	subi	r28, 0xE9	; 233
     ac6:	d0 40       	sbci	r29, 0x00	; 0
     ac8:	c6 51       	subi	r28, 0x16	; 22
     aca:	df 4f       	sbci	r29, 0xFF	; 255
     acc:	38 83       	st	Y, r19
     ace:	ca 5e       	subi	r28, 0xEA	; 234
     ad0:	d0 40       	sbci	r29, 0x00	; 0
     ad2:	c5 51       	subi	r28, 0x15	; 21
     ad4:	df 4f       	sbci	r29, 0xFF	; 255
     ad6:	48 83       	st	Y, r20
     ad8:	cb 5e       	subi	r28, 0xEB	; 235
     ada:	d0 40       	sbci	r29, 0x00	; 0
     adc:	c4 51       	subi	r28, 0x14	; 20
     ade:	df 4f       	sbci	r29, 0xFF	; 255
     ae0:	58 83       	st	Y, r21
     ae2:	cc 5e       	subi	r28, 0xEC	; 236
     ae4:	d0 40       	sbci	r29, 0x00	; 0
     ae6:	c3 51       	subi	r28, 0x13	; 19
     ae8:	df 4f       	sbci	r29, 0xFF	; 255
     aea:	68 83       	st	Y, r22
     aec:	cd 5e       	subi	r28, 0xED	; 237
     aee:	d0 40       	sbci	r29, 0x00	; 0
     af0:	86 2f       	mov	r24, r22
		if (joy.D != previousDirection){
     af2:	a6 16       	cp	r10, r22
     af4:	09 f4       	brne	.+2      	; 0xaf8 <menuSystem+0x10c>
     af6:	4a c0       	rjmp	.+148    	; 0xb8c <menuSystem+0x1a0>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
     af8:	b6 01       	movw	r22, r12
     afa:	6e 0d       	add	r22, r14
     afc:	7f 1d       	adc	r23, r15
		joy = getJoystickPosition();
		if (joy.D != previousDirection){
			switch(joy.D){
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	49 f1       	breq	.+82     	; 0xb54 <menuSystem+0x168>
     b02:	f8 f0       	brcs	.+62     	; 0xb42 <menuSystem+0x156>
     b04:	82 30       	cpi	r24, 0x02	; 2
     b06:	19 f0       	breq	.+6      	; 0xb0e <menuSystem+0x122>
     b08:	83 30       	cpi	r24, 0x03	; 3
     b0a:	79 f0       	breq	.+30     	; 0xb2a <menuSystem+0x13e>
     b0c:	3f c0       	rjmp	.+126    	; 0xb8c <menuSystem+0x1a0>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
     b0e:	d8 01       	movw	r26, r16
     b10:	d8 96       	adiw	r26, 0x38	; 56
     b12:	8d 91       	ld	r24, X+
     b14:	9c 91       	ld	r25, X
     b16:	d9 97       	sbiw	r26, 0x39	; 57
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	86 0f       	add	r24, r22
     b1c:	97 1f       	adc	r25, r23
     b1e:	0e 94 91 09 	call	0x1322	; 0x1322 <__divmodhi4>
     b22:	f8 01       	movw	r30, r16
     b24:	91 af       	std	Z+57, r25	; 0x39
     b26:	80 af       	std	Z+56, r24	; 0x38
					break;
     b28:	31 c0       	rjmp	.+98     	; 0xb8c <menuSystem+0x1a0>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
     b2a:	d8 01       	movw	r26, r16
     b2c:	d8 96       	adiw	r26, 0x38	; 56
     b2e:	8d 91       	ld	r24, X+
     b30:	9c 91       	ld	r25, X
     b32:	d9 97       	sbiw	r26, 0x39	; 57
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	0e 94 91 09 	call	0x1322	; 0x1322 <__divmodhi4>
     b3a:	f8 01       	movw	r30, r16
     b3c:	91 af       	std	Z+57, r25	; 0x39
     b3e:	80 af       	std	Z+56, r24	; 0x38
					break;
     b40:	25 c0       	rjmp	.+74     	; 0xb8c <menuSystem+0x1a0>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
     b42:	d8 01       	movw	r26, r16
     b44:	12 96       	adiw	r26, 0x02	; 2
     b46:	8d 91       	ld	r24, X+
     b48:	9c 91       	ld	r25, X
     b4a:	13 97       	sbiw	r26, 0x03	; 3
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	f1 f0       	breq	.+60     	; 0xb8c <menuSystem+0x1a0>
     b50:	8c 01       	movw	r16, r24
     b52:	1c c0       	rjmp	.+56     	; 0xb8c <menuSystem+0x1a0>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
     b54:	f8 01       	movw	r30, r16
     b56:	80 ad       	ldd	r24, Z+56	; 0x38
     b58:	91 ad       	ldd	r25, Z+57	; 0x39
     b5a:	24 89       	ldd	r18, Z+20	; 0x14
     b5c:	35 89       	ldd	r19, Z+21	; 0x15
     b5e:	82 17       	cp	r24, r18
     b60:	93 07       	cpc	r25, r19
     b62:	44 f4       	brge	.+16     	; 0xb74 <menuSystem+0x188>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
     b64:	02 96       	adiw	r24, 0x02	; 2
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	e8 0f       	add	r30, r24
     b6c:	f9 1f       	adc	r31, r25
     b6e:	00 81       	ld	r16, Z
     b70:	11 81       	ldd	r17, Z+1	; 0x01
     b72:	0c c0       	rjmp	.+24     	; 0xb8c <menuSystem+0x1a0>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
     b74:	82 1b       	sub	r24, r18
     b76:	93 0b       	sbc	r25, r19
     b78:	43 96       	adiw	r24, 0x13	; 19
     b7a:	fc 01       	movw	r30, r24
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	e0 0f       	add	r30, r16
     b82:	f1 1f       	adc	r31, r17
     b84:	01 90       	ld	r0, Z+
     b86:	f0 81       	ld	r31, Z
     b88:	e0 2d       	mov	r30, r0
     b8a:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 ce 03 	call	0x79c	; 0x79c <make_screen>
     b92:	87 ea       	ldi	r24, 0xA7	; 167
     b94:	91 e6       	ldi	r25, 0x61	; 97
     b96:	01 97       	sbiw	r24, 0x01	; 1
     b98:	f1 f7       	brne	.-4      	; 0xb96 <menuSystem+0x1aa>
     b9a:	00 c0       	rjmp	.+0      	; 0xb9c <menuSystem+0x1b0>
     b9c:	00 00       	nop
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
     b9e:	ab 2c       	mov	r10, r11
     ba0:	86 cf       	rjmp	.-244    	; 0xaae <menuSystem+0xc2>

00000ba2 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e1       	ldi	r31, 0x10	; 16
     ba6:	8e ea       	ldi	r24, 0xAE	; 174
     ba8:	80 83       	st	Z, r24
     baa:	81 ea       	ldi	r24, 0xA1	; 161
     bac:	80 83       	st	Z, r24
     bae:	8a ed       	ldi	r24, 0xDA	; 218
     bb0:	80 83       	st	Z, r24
     bb2:	82 e1       	ldi	r24, 0x12	; 18
     bb4:	80 83       	st	Z, r24
     bb6:	88 ec       	ldi	r24, 0xC8	; 200
     bb8:	80 83       	st	Z, r24
     bba:	88 ea       	ldi	r24, 0xA8	; 168
     bbc:	80 83       	st	Z, r24
     bbe:	8f e3       	ldi	r24, 0x3F	; 63
     bc0:	80 83       	st	Z, r24
     bc2:	85 ed       	ldi	r24, 0xD5	; 213
     bc4:	80 83       	st	Z, r24
     bc6:	80 e8       	ldi	r24, 0x80	; 128
     bc8:	80 83       	st	Z, r24
     bca:	81 e8       	ldi	r24, 0x81	; 129
     bcc:	80 83       	st	Z, r24
     bce:	80 e5       	ldi	r24, 0x50	; 80
     bd0:	80 83       	st	Z, r24
     bd2:	89 ed       	ldi	r24, 0xD9	; 217
     bd4:	80 83       	st	Z, r24
     bd6:	81 e2       	ldi	r24, 0x21	; 33
     bd8:	80 83       	st	Z, r24
     bda:	80 e2       	ldi	r24, 0x20	; 32
     bdc:	80 83       	st	Z, r24
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	80 83       	st	Z, r24
     be2:	8b ed       	ldi	r24, 0xDB	; 219
     be4:	80 83       	st	Z, r24
     be6:	80 e3       	ldi	r24, 0x30	; 48
     be8:	80 83       	st	Z, r24
     bea:	8d ea       	ldi	r24, 0xAD	; 173
     bec:	80 83       	st	Z, r24
     bee:	10 82       	st	Z, r1
     bf0:	84 ea       	ldi	r24, 0xA4	; 164
     bf2:	80 83       	st	Z, r24
     bf4:	86 ea       	ldi	r24, 0xA6	; 166
     bf6:	80 83       	st	Z, r24
     bf8:	8f ea       	ldi	r24, 0xAF	; 175
     bfa:	80 83       	st	Z, r24
     bfc:	08 95       	ret

00000bfe <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
     bfe:	af 92       	push	r10
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     c14:	c0 e0       	ldi	r28, 0x00	; 0
     c16:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
     c18:	e1 2c       	mov	r14, r1
     c1a:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     c1c:	c1 2c       	mov	r12, r1
     c1e:	68 94       	set
     c20:	dd 24       	eor	r13, r13
     c22:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     c24:	00 e0       	ldi	r16, 0x00	; 0
     c26:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
     c28:	ce 01       	movw	r24, r28
     c2a:	9e 01       	movw	r18, r28
     c2c:	2f 77       	andi	r18, 0x7F	; 127
     c2e:	33 27       	eor	r19, r19
     c30:	23 2b       	or	r18, r19
     c32:	39 f4       	brne	.+14     	; 0xc42 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
     c34:	20 eb       	ldi	r18, 0xB0	; 176
     c36:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     c38:	f6 01       	movw	r30, r12
     c3a:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
     c3c:	ff ef       	ldi	r31, 0xFF	; 255
     c3e:	ef 1a       	sub	r14, r31
     c40:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
     c42:	8a 0d       	add	r24, r10
     c44:	9b 1d       	adc	r25, r11
     c46:	0e 94 4f 07 	call	0xe9e	; 0xe9e <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     c4a:	f8 01       	movw	r30, r16
     c4c:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     c4e:	21 96       	adiw	r28, 0x01	; 1
     c50:	c1 15       	cp	r28, r1
     c52:	f4 e0       	ldi	r31, 0x04	; 4
     c54:	df 07       	cpc	r29, r31
     c56:	41 f7       	brne	.-48     	; 0xc28 <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	df 90       	pop	r13
     c66:	cf 90       	pop	r12
     c68:	bf 90       	pop	r11
     c6a:	af 90       	pop	r10
     c6c:	08 95       	ret

00000c6e <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	0f 92       	push	r0
     c76:	11 24       	eor	r1, r1
     c78:	2f 93       	push	r18
     c7a:	3f 93       	push	r19
     c7c:	4f 93       	push	r20
     c7e:	5f 93       	push	r21
     c80:	6f 93       	push	r22
     c82:	7f 93       	push	r23
     c84:	8f 93       	push	r24
     c86:	9f 93       	push	r25
     c88:	af 93       	push	r26
     c8a:	bf 93       	push	r27
     c8c:	ef 93       	push	r30
     c8e:	ff 93       	push	r31
	oled_sram_flush(0);
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_flush>
	TCNT1 = 0;
     c98:	1d bc       	out	0x2d, r1	; 45
     c9a:	1c bc       	out	0x2c, r1	; 44
}
     c9c:	ff 91       	pop	r31
     c9e:	ef 91       	pop	r30
     ca0:	bf 91       	pop	r27
     ca2:	af 91       	pop	r26
     ca4:	9f 91       	pop	r25
     ca6:	8f 91       	pop	r24
     ca8:	7f 91       	pop	r23
     caa:	6f 91       	pop	r22
     cac:	5f 91       	pop	r21
     cae:	4f 91       	pop	r20
     cb0:	3f 91       	pop	r19
     cb2:	2f 91       	pop	r18
     cb4:	0f 90       	pop	r0
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	0f 90       	pop	r0
     cba:	1f 90       	pop	r1
     cbc:	18 95       	reti

00000cbe <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
     cbe:	af 92       	push	r10
     cc0:	bf 92       	push	r11
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
     cd2:	6a 01       	movw	r12, r20
     cd4:	d6 94       	lsr	r13
     cd6:	dc 2c       	mov	r13, r12
     cd8:	cc 24       	eor	r12, r12
     cda:	d7 94       	ror	r13
     cdc:	c7 94       	ror	r12
     cde:	c8 0e       	add	r12, r24
     ce0:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
     ce2:	fb 01       	movw	r30, r22
     ce4:	e0 80       	ld	r14, Z
	while(c != '\0'){
     ce6:	ee 20       	and	r14, r14
     ce8:	69 f1       	breq	.+90     	; 0xd44 <oled_sram_write_string+0x86>
     cea:	5b 01       	movw	r10, r22
     cec:	ff ef       	ldi	r31, 0xFF	; 255
     cee:	af 1a       	sub	r10, r31
     cf0:	bf 0a       	sbc	r11, r31
     cf2:	15 c0       	rjmp	.+42     	; 0xd1e <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     cf4:	ce 01       	movw	r24, r28
     cf6:	f7 01       	movw	r30, r14
     cf8:	e8 0f       	add	r30, r24
     cfa:	f9 1f       	adc	r31, r25
     cfc:	64 91       	lpm	r22, Z
     cfe:	ec 01       	movw	r28, r24
     d00:	21 96       	adiw	r28, 0x01	; 1
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	0e 94 53 07 	call	0xea6	; 0xea6 <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
     d08:	c0 17       	cp	r28, r16
     d0a:	d1 07       	cpc	r29, r17
     d0c:	99 f7       	brne	.-26     	; 0xcf4 <oled_sram_write_string+0x36>
     d0e:	48 e0       	ldi	r20, 0x08	; 8
     d10:	c4 0e       	add	r12, r20
     d12:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
     d14:	f5 01       	movw	r30, r10
     d16:	e1 90       	ld	r14, Z+
     d18:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
     d1a:	ee 20       	and	r14, r14
     d1c:	99 f0       	breq	.+38     	; 0xd44 <oled_sram_write_string+0x86>
     d1e:	86 01       	movw	r16, r12
     d20:	08 5f       	subi	r16, 0xF8	; 248
     d22:	1f 4f       	sbci	r17, 0xFF	; 255
     d24:	f1 2c       	mov	r15, r1
     d26:	ee 0c       	add	r14, r14
     d28:	ff 1c       	adc	r15, r15
     d2a:	ee 0c       	add	r14, r14
     d2c:	ff 1c       	adc	r15, r15
     d2e:	ee 0c       	add	r14, r14
     d30:	ff 1c       	adc	r15, r15
     d32:	97 01       	movw	r18, r14
     d34:	2c 19       	sub	r18, r12
     d36:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     d38:	c6 01       	movw	r24, r12
     d3a:	a9 01       	movw	r20, r18
     d3c:	40 59       	subi	r20, 0x90	; 144
     d3e:	50 40       	sbci	r21, 0x00	; 0
     d40:	7a 01       	movw	r14, r20
     d42:	d9 cf       	rjmp	.-78     	; 0xcf6 <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	0f 91       	pop	r16
     d4c:	ff 90       	pop	r15
     d4e:	ef 90       	pop	r14
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	bf 90       	pop	r11
     d56:	af 90       	pop	r10
     d58:	08 95       	ret

00000d5a <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	7b 01       	movw	r14, r22
	start = start + page*128+col;
     d68:	8a 01       	movw	r16, r20
     d6a:	16 95       	lsr	r17
     d6c:	10 2f       	mov	r17, r16
     d6e:	00 27       	eor	r16, r16
     d70:	17 95       	ror	r17
     d72:	07 95       	ror	r16
     d74:	80 0f       	add	r24, r16
     d76:	91 1f       	adc	r25, r17
     d78:	8c 01       	movw	r16, r24
     d7a:	02 0f       	add	r16, r18
     d7c:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
     d7e:	c0 e0       	ldi	r28, 0x00	; 0
     d80:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
     d82:	d7 01       	movw	r26, r14
     d84:	ec 91       	ld	r30, X
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	b0 97       	sbiw	r30, 0x20	; 32
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	ec 0f       	add	r30, r28
     d98:	fd 1f       	adc	r31, r29
     d9a:	e0 59       	subi	r30, 0x90	; 144
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	64 91       	lpm	r22, Z
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	ce 01       	movw	r24, r28
     da4:	80 0f       	add	r24, r16
     da6:	91 1f       	adc	r25, r17
     da8:	0e 94 53 07 	call	0xea6	; 0xea6 <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
     dac:	21 96       	adiw	r28, 0x01	; 1
     dae:	c8 30       	cpi	r28, 0x08	; 8
     db0:	d1 05       	cpc	r29, r1
     db2:	39 f7       	brne	.-50     	; 0xd82 <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	08 95       	ret

00000dc2 <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
     dca:	8b 01       	movw	r16, r22
     dcc:	16 95       	lsr	r17
     dce:	10 2f       	mov	r17, r16
     dd0:	00 27       	eor	r16, r16
     dd2:	17 95       	ror	r17
     dd4:	07 95       	ror	r16
     dd6:	08 0f       	add	r16, r24
     dd8:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
     dda:	c0 e0       	ldi	r28, 0x00	; 0
     ddc:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	ce 01       	movw	r24, r28
     de4:	80 0f       	add	r24, r16
     de6:	91 1f       	adc	r25, r17
     de8:	0e 94 53 07 	call	0xea6	; 0xea6 <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
     dec:	21 96       	adiw	r28, 0x01	; 1
     dee:	c0 38       	cpi	r28, 0x80	; 128
     df0:	d1 05       	cpc	r29, r1
     df2:	a9 f7       	brne	.-22     	; 0xdde <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
     e08:	c0 e0       	ldi	r28, 0x00	; 0
     e0a:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
     e0c:	be 01       	movw	r22, r28
     e0e:	c8 01       	movw	r24, r16
     e10:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
     e14:	21 96       	adiw	r28, 0x01	; 1
     e16:	c8 30       	cpi	r28, 0x08	; 8
     e18:	d1 05       	cpc	r29, r1
     e1a:	c1 f7       	brne	.-16     	; 0xe0c <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	1f 91       	pop	r17
     e22:	0f 91       	pop	r16
     e24:	08 95       	ret

00000e26 <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
     e26:	0f 93       	push	r16
     e28:	1f 93       	push	r17
     e2a:	cf 93       	push	r28
     e2c:	df 93       	push	r29
     e2e:	ea 01       	movw	r28, r20
	int page = y/8;
     e30:	9a 01       	movw	r18, r20
     e32:	dd 23       	and	r29, r29
     e34:	14 f4       	brge	.+4      	; 0xe3a <oled_sram_write_bit+0x14>
     e36:	29 5f       	subi	r18, 0xF9	; 249
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	89 01       	movw	r16, r18
     e3c:	15 95       	asr	r17
     e3e:	07 95       	ror	r16
     e40:	15 95       	asr	r17
     e42:	07 95       	ror	r16
     e44:	15 95       	asr	r17
     e46:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
     e48:	16 95       	lsr	r17
     e4a:	10 2f       	mov	r17, r16
     e4c:	00 27       	eor	r16, r16
     e4e:	17 95       	ror	r17
     e50:	07 95       	ror	r16
     e52:	08 0f       	add	r16, r24
     e54:	19 1f       	adc	r17, r25
     e56:	06 0f       	add	r16, r22
     e58:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
     e5a:	c8 01       	movw	r24, r16
     e5c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
     e60:	ae 01       	movw	r20, r28
     e62:	47 70       	andi	r20, 0x07	; 7
     e64:	50 78       	andi	r21, 0x80	; 128
     e66:	55 23       	and	r21, r21
     e68:	34 f4       	brge	.+12     	; 0xe76 <oled_sram_write_bit+0x50>
     e6a:	41 50       	subi	r20, 0x01	; 1
     e6c:	51 09       	sbc	r21, r1
     e6e:	48 6f       	ori	r20, 0xF8	; 248
     e70:	5f 6f       	ori	r21, 0xFF	; 255
     e72:	4f 5f       	subi	r20, 0xFF	; 255
     e74:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
     e76:	21 e0       	ldi	r18, 0x01	; 1
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	b9 01       	movw	r22, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <oled_sram_write_bit+0x5c>
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	4a 95       	dec	r20
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <oled_sram_write_bit+0x58>
     e86:	ab 01       	movw	r20, r22
     e88:	48 2b       	or	r20, r24
	setSRAM(index, temp);
     e8a:	64 2f       	mov	r22, r20
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	c8 01       	movw	r24, r16
     e90:	0e 94 53 07 	call	0xea6	; 0xea6 <setSRAM>
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	08 95       	ret

00000e9e <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
     e9e:	98 5e       	subi	r25, 0xE8	; 232
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 81       	ld	r24, Z
}
     ea4:	08 95       	ret

00000ea6 <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
     ea6:	fc 01       	movw	r30, r24
     ea8:	f8 5e       	subi	r31, 0xE8	; 232
     eaa:	80 81       	ld	r24, Z
		ext_ram[index] = value;
     eac:	60 83       	st	Z, r22
		return temp;
}
     eae:	08 95       	ret

00000eb0 <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     eb0:	5d 9b       	sbis	0x0b, 5	; 11
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
     eb4:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	08 95       	ret

00000ebc <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
     ebc:	9c 01       	movw	r18, r24
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 eb       	ldi	r23, 0xB0	; 176
     ec6:	84 e0       	ldi	r24, 0x04	; 4
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 a5 09 	call	0x134a	; 0x134a <__divmodsi4>
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     ed2:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
     ed4:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     ed6:	8a b1       	in	r24, 0x0a	; 10
     ed8:	88 61       	ori	r24, 0x18	; 24
     eda:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     edc:	80 b5       	in	r24, 0x20	; 32
     ede:	86 68       	ori	r24, 0x86	; 134
     ee0:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	88 e5       	ldi	r24, 0x58	; 88
     ee8:	97 e0       	ldi	r25, 0x07	; 7
     eea:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <fdevopen>
	
	return 0;
}
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	08 95       	ret

00000ef4 <__subsf3>:
     ef4:	50 58       	subi	r21, 0x80	; 128

00000ef6 <__addsf3>:
     ef6:	bb 27       	eor	r27, r27
     ef8:	aa 27       	eor	r26, r26
     efa:	0e d0       	rcall	.+28     	; 0xf18 <__addsf3x>
     efc:	75 c1       	rjmp	.+746    	; 0x11e8 <__fp_round>
     efe:	66 d1       	rcall	.+716    	; 0x11cc <__fp_pscA>
     f00:	30 f0       	brcs	.+12     	; 0xf0e <__addsf3+0x18>
     f02:	6b d1       	rcall	.+726    	; 0x11da <__fp_pscB>
     f04:	20 f0       	brcs	.+8      	; 0xf0e <__addsf3+0x18>
     f06:	31 f4       	brne	.+12     	; 0xf14 <__addsf3+0x1e>
     f08:	9f 3f       	cpi	r25, 0xFF	; 255
     f0a:	11 f4       	brne	.+4      	; 0xf10 <__addsf3+0x1a>
     f0c:	1e f4       	brtc	.+6      	; 0xf14 <__addsf3+0x1e>
     f0e:	5b c1       	rjmp	.+694    	; 0x11c6 <__fp_nan>
     f10:	0e f4       	brtc	.+2      	; 0xf14 <__addsf3+0x1e>
     f12:	e0 95       	com	r30
     f14:	e7 fb       	bst	r30, 7
     f16:	51 c1       	rjmp	.+674    	; 0x11ba <__fp_inf>

00000f18 <__addsf3x>:
     f18:	e9 2f       	mov	r30, r25
     f1a:	77 d1       	rcall	.+750    	; 0x120a <__fp_split3>
     f1c:	80 f3       	brcs	.-32     	; 0xefe <__addsf3+0x8>
     f1e:	ba 17       	cp	r27, r26
     f20:	62 07       	cpc	r22, r18
     f22:	73 07       	cpc	r23, r19
     f24:	84 07       	cpc	r24, r20
     f26:	95 07       	cpc	r25, r21
     f28:	18 f0       	brcs	.+6      	; 0xf30 <__addsf3x+0x18>
     f2a:	71 f4       	brne	.+28     	; 0xf48 <__addsf3x+0x30>
     f2c:	9e f5       	brtc	.+102    	; 0xf94 <__addsf3x+0x7c>
     f2e:	8f c1       	rjmp	.+798    	; 0x124e <__fp_zero>
     f30:	0e f4       	brtc	.+2      	; 0xf34 <__addsf3x+0x1c>
     f32:	e0 95       	com	r30
     f34:	0b 2e       	mov	r0, r27
     f36:	ba 2f       	mov	r27, r26
     f38:	a0 2d       	mov	r26, r0
     f3a:	0b 01       	movw	r0, r22
     f3c:	b9 01       	movw	r22, r18
     f3e:	90 01       	movw	r18, r0
     f40:	0c 01       	movw	r0, r24
     f42:	ca 01       	movw	r24, r20
     f44:	a0 01       	movw	r20, r0
     f46:	11 24       	eor	r1, r1
     f48:	ff 27       	eor	r31, r31
     f4a:	59 1b       	sub	r21, r25
     f4c:	99 f0       	breq	.+38     	; 0xf74 <__addsf3x+0x5c>
     f4e:	59 3f       	cpi	r21, 0xF9	; 249
     f50:	50 f4       	brcc	.+20     	; 0xf66 <__addsf3x+0x4e>
     f52:	50 3e       	cpi	r21, 0xE0	; 224
     f54:	68 f1       	brcs	.+90     	; 0xfb0 <__addsf3x+0x98>
     f56:	1a 16       	cp	r1, r26
     f58:	f0 40       	sbci	r31, 0x00	; 0
     f5a:	a2 2f       	mov	r26, r18
     f5c:	23 2f       	mov	r18, r19
     f5e:	34 2f       	mov	r19, r20
     f60:	44 27       	eor	r20, r20
     f62:	58 5f       	subi	r21, 0xF8	; 248
     f64:	f3 cf       	rjmp	.-26     	; 0xf4c <__addsf3x+0x34>
     f66:	46 95       	lsr	r20
     f68:	37 95       	ror	r19
     f6a:	27 95       	ror	r18
     f6c:	a7 95       	ror	r26
     f6e:	f0 40       	sbci	r31, 0x00	; 0
     f70:	53 95       	inc	r21
     f72:	c9 f7       	brne	.-14     	; 0xf66 <__addsf3x+0x4e>
     f74:	7e f4       	brtc	.+30     	; 0xf94 <__addsf3x+0x7c>
     f76:	1f 16       	cp	r1, r31
     f78:	ba 0b       	sbc	r27, r26
     f7a:	62 0b       	sbc	r22, r18
     f7c:	73 0b       	sbc	r23, r19
     f7e:	84 0b       	sbc	r24, r20
     f80:	ba f0       	brmi	.+46     	; 0xfb0 <__addsf3x+0x98>
     f82:	91 50       	subi	r25, 0x01	; 1
     f84:	a1 f0       	breq	.+40     	; 0xfae <__addsf3x+0x96>
     f86:	ff 0f       	add	r31, r31
     f88:	bb 1f       	adc	r27, r27
     f8a:	66 1f       	adc	r22, r22
     f8c:	77 1f       	adc	r23, r23
     f8e:	88 1f       	adc	r24, r24
     f90:	c2 f7       	brpl	.-16     	; 0xf82 <__addsf3x+0x6a>
     f92:	0e c0       	rjmp	.+28     	; 0xfb0 <__addsf3x+0x98>
     f94:	ba 0f       	add	r27, r26
     f96:	62 1f       	adc	r22, r18
     f98:	73 1f       	adc	r23, r19
     f9a:	84 1f       	adc	r24, r20
     f9c:	48 f4       	brcc	.+18     	; 0xfb0 <__addsf3x+0x98>
     f9e:	87 95       	ror	r24
     fa0:	77 95       	ror	r23
     fa2:	67 95       	ror	r22
     fa4:	b7 95       	ror	r27
     fa6:	f7 95       	ror	r31
     fa8:	9e 3f       	cpi	r25, 0xFE	; 254
     faa:	08 f0       	brcs	.+2      	; 0xfae <__addsf3x+0x96>
     fac:	b3 cf       	rjmp	.-154    	; 0xf14 <__addsf3+0x1e>
     fae:	93 95       	inc	r25
     fb0:	88 0f       	add	r24, r24
     fb2:	08 f0       	brcs	.+2      	; 0xfb6 <__addsf3x+0x9e>
     fb4:	99 27       	eor	r25, r25
     fb6:	ee 0f       	add	r30, r30
     fb8:	97 95       	ror	r25
     fba:	87 95       	ror	r24
     fbc:	08 95       	ret

00000fbe <__cmpsf2>:
     fbe:	d9 d0       	rcall	.+434    	; 0x1172 <__fp_cmp>
     fc0:	08 f4       	brcc	.+2      	; 0xfc4 <__cmpsf2+0x6>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	08 95       	ret

00000fc6 <__divsf3>:
     fc6:	0c d0       	rcall	.+24     	; 0xfe0 <__divsf3x>
     fc8:	0f c1       	rjmp	.+542    	; 0x11e8 <__fp_round>
     fca:	07 d1       	rcall	.+526    	; 0x11da <__fp_pscB>
     fcc:	40 f0       	brcs	.+16     	; 0xfde <__divsf3+0x18>
     fce:	fe d0       	rcall	.+508    	; 0x11cc <__fp_pscA>
     fd0:	30 f0       	brcs	.+12     	; 0xfde <__divsf3+0x18>
     fd2:	21 f4       	brne	.+8      	; 0xfdc <__divsf3+0x16>
     fd4:	5f 3f       	cpi	r21, 0xFF	; 255
     fd6:	19 f0       	breq	.+6      	; 0xfde <__divsf3+0x18>
     fd8:	f0 c0       	rjmp	.+480    	; 0x11ba <__fp_inf>
     fda:	51 11       	cpse	r21, r1
     fdc:	39 c1       	rjmp	.+626    	; 0x1250 <__fp_szero>
     fde:	f3 c0       	rjmp	.+486    	; 0x11c6 <__fp_nan>

00000fe0 <__divsf3x>:
     fe0:	14 d1       	rcall	.+552    	; 0x120a <__fp_split3>
     fe2:	98 f3       	brcs	.-26     	; 0xfca <__divsf3+0x4>

00000fe4 <__divsf3_pse>:
     fe4:	99 23       	and	r25, r25
     fe6:	c9 f3       	breq	.-14     	; 0xfda <__divsf3+0x14>
     fe8:	55 23       	and	r21, r21
     fea:	b1 f3       	breq	.-20     	; 0xfd8 <__divsf3+0x12>
     fec:	95 1b       	sub	r25, r21
     fee:	55 0b       	sbc	r21, r21
     ff0:	bb 27       	eor	r27, r27
     ff2:	aa 27       	eor	r26, r26
     ff4:	62 17       	cp	r22, r18
     ff6:	73 07       	cpc	r23, r19
     ff8:	84 07       	cpc	r24, r20
     ffa:	38 f0       	brcs	.+14     	; 0x100a <__divsf3_pse+0x26>
     ffc:	9f 5f       	subi	r25, 0xFF	; 255
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    1000:	22 0f       	add	r18, r18
    1002:	33 1f       	adc	r19, r19
    1004:	44 1f       	adc	r20, r20
    1006:	aa 1f       	adc	r26, r26
    1008:	a9 f3       	breq	.-22     	; 0xff4 <__divsf3_pse+0x10>
    100a:	33 d0       	rcall	.+102    	; 0x1072 <__divsf3_pse+0x8e>
    100c:	0e 2e       	mov	r0, r30
    100e:	3a f0       	brmi	.+14     	; 0x101e <__divsf3_pse+0x3a>
    1010:	e0 e8       	ldi	r30, 0x80	; 128
    1012:	30 d0       	rcall	.+96     	; 0x1074 <__divsf3_pse+0x90>
    1014:	91 50       	subi	r25, 0x01	; 1
    1016:	50 40       	sbci	r21, 0x00	; 0
    1018:	e6 95       	lsr	r30
    101a:	00 1c       	adc	r0, r0
    101c:	ca f7       	brpl	.-14     	; 0x1010 <__divsf3_pse+0x2c>
    101e:	29 d0       	rcall	.+82     	; 0x1072 <__divsf3_pse+0x8e>
    1020:	fe 2f       	mov	r31, r30
    1022:	27 d0       	rcall	.+78     	; 0x1072 <__divsf3_pse+0x8e>
    1024:	66 0f       	add	r22, r22
    1026:	77 1f       	adc	r23, r23
    1028:	88 1f       	adc	r24, r24
    102a:	bb 1f       	adc	r27, r27
    102c:	26 17       	cp	r18, r22
    102e:	37 07       	cpc	r19, r23
    1030:	48 07       	cpc	r20, r24
    1032:	ab 07       	cpc	r26, r27
    1034:	b0 e8       	ldi	r27, 0x80	; 128
    1036:	09 f0       	breq	.+2      	; 0x103a <__divsf3_pse+0x56>
    1038:	bb 0b       	sbc	r27, r27
    103a:	80 2d       	mov	r24, r0
    103c:	bf 01       	movw	r22, r30
    103e:	ff 27       	eor	r31, r31
    1040:	93 58       	subi	r25, 0x83	; 131
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	2a f0       	brmi	.+10     	; 0x1050 <__divsf3_pse+0x6c>
    1046:	9e 3f       	cpi	r25, 0xFE	; 254
    1048:	51 05       	cpc	r21, r1
    104a:	68 f0       	brcs	.+26     	; 0x1066 <__divsf3_pse+0x82>
    104c:	b6 c0       	rjmp	.+364    	; 0x11ba <__fp_inf>
    104e:	00 c1       	rjmp	.+512    	; 0x1250 <__fp_szero>
    1050:	5f 3f       	cpi	r21, 0xFF	; 255
    1052:	ec f3       	brlt	.-6      	; 0x104e <__divsf3_pse+0x6a>
    1054:	98 3e       	cpi	r25, 0xE8	; 232
    1056:	dc f3       	brlt	.-10     	; 0x104e <__divsf3_pse+0x6a>
    1058:	86 95       	lsr	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	b7 95       	ror	r27
    1060:	f7 95       	ror	r31
    1062:	9f 5f       	subi	r25, 0xFF	; 255
    1064:	c9 f7       	brne	.-14     	; 0x1058 <__divsf3_pse+0x74>
    1066:	88 0f       	add	r24, r24
    1068:	91 1d       	adc	r25, r1
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	97 f9       	bld	r25, 7
    1070:	08 95       	ret
    1072:	e1 e0       	ldi	r30, 0x01	; 1
    1074:	66 0f       	add	r22, r22
    1076:	77 1f       	adc	r23, r23
    1078:	88 1f       	adc	r24, r24
    107a:	bb 1f       	adc	r27, r27
    107c:	62 17       	cp	r22, r18
    107e:	73 07       	cpc	r23, r19
    1080:	84 07       	cpc	r24, r20
    1082:	ba 07       	cpc	r27, r26
    1084:	20 f0       	brcs	.+8      	; 0x108e <__divsf3_pse+0xaa>
    1086:	62 1b       	sub	r22, r18
    1088:	73 0b       	sbc	r23, r19
    108a:	84 0b       	sbc	r24, r20
    108c:	ba 0b       	sbc	r27, r26
    108e:	ee 1f       	adc	r30, r30
    1090:	88 f7       	brcc	.-30     	; 0x1074 <__divsf3_pse+0x90>
    1092:	e0 95       	com	r30
    1094:	08 95       	ret

00001096 <__fixsfsi>:
    1096:	04 d0       	rcall	.+8      	; 0x10a0 <__fixunssfsi>
    1098:	68 94       	set
    109a:	b1 11       	cpse	r27, r1
    109c:	d9 c0       	rjmp	.+434    	; 0x1250 <__fp_szero>
    109e:	08 95       	ret

000010a0 <__fixunssfsi>:
    10a0:	bc d0       	rcall	.+376    	; 0x121a <__fp_splitA>
    10a2:	88 f0       	brcs	.+34     	; 0x10c6 <__fixunssfsi+0x26>
    10a4:	9f 57       	subi	r25, 0x7F	; 127
    10a6:	90 f0       	brcs	.+36     	; 0x10cc <__fixunssfsi+0x2c>
    10a8:	b9 2f       	mov	r27, r25
    10aa:	99 27       	eor	r25, r25
    10ac:	b7 51       	subi	r27, 0x17	; 23
    10ae:	a0 f0       	brcs	.+40     	; 0x10d8 <__fixunssfsi+0x38>
    10b0:	d1 f0       	breq	.+52     	; 0x10e6 <__fixunssfsi+0x46>
    10b2:	66 0f       	add	r22, r22
    10b4:	77 1f       	adc	r23, r23
    10b6:	88 1f       	adc	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	1a f0       	brmi	.+6      	; 0x10c2 <__fixunssfsi+0x22>
    10bc:	ba 95       	dec	r27
    10be:	c9 f7       	brne	.-14     	; 0x10b2 <__fixunssfsi+0x12>
    10c0:	12 c0       	rjmp	.+36     	; 0x10e6 <__fixunssfsi+0x46>
    10c2:	b1 30       	cpi	r27, 0x01	; 1
    10c4:	81 f0       	breq	.+32     	; 0x10e6 <__fixunssfsi+0x46>
    10c6:	c3 d0       	rcall	.+390    	; 0x124e <__fp_zero>
    10c8:	b1 e0       	ldi	r27, 0x01	; 1
    10ca:	08 95       	ret
    10cc:	c0 c0       	rjmp	.+384    	; 0x124e <__fp_zero>
    10ce:	67 2f       	mov	r22, r23
    10d0:	78 2f       	mov	r23, r24
    10d2:	88 27       	eor	r24, r24
    10d4:	b8 5f       	subi	r27, 0xF8	; 248
    10d6:	39 f0       	breq	.+14     	; 0x10e6 <__fixunssfsi+0x46>
    10d8:	b9 3f       	cpi	r27, 0xF9	; 249
    10da:	cc f3       	brlt	.-14     	; 0x10ce <__fixunssfsi+0x2e>
    10dc:	86 95       	lsr	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b3 95       	inc	r27
    10e4:	d9 f7       	brne	.-10     	; 0x10dc <__fixunssfsi+0x3c>
    10e6:	3e f4       	brtc	.+14     	; 0x10f6 <__fixunssfsi+0x56>
    10e8:	90 95       	com	r25
    10ea:	80 95       	com	r24
    10ec:	70 95       	com	r23
    10ee:	61 95       	neg	r22
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	8f 4f       	sbci	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	08 95       	ret

000010f8 <__floatunsisf>:
    10f8:	e8 94       	clt
    10fa:	09 c0       	rjmp	.+18     	; 0x110e <__floatsisf+0x12>

000010fc <__floatsisf>:
    10fc:	97 fb       	bst	r25, 7
    10fe:	3e f4       	brtc	.+14     	; 0x110e <__floatsisf+0x12>
    1100:	90 95       	com	r25
    1102:	80 95       	com	r24
    1104:	70 95       	com	r23
    1106:	61 95       	neg	r22
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	99 23       	and	r25, r25
    1110:	a9 f0       	breq	.+42     	; 0x113c <__floatsisf+0x40>
    1112:	f9 2f       	mov	r31, r25
    1114:	96 e9       	ldi	r25, 0x96	; 150
    1116:	bb 27       	eor	r27, r27
    1118:	93 95       	inc	r25
    111a:	f6 95       	lsr	r31
    111c:	87 95       	ror	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b7 95       	ror	r27
    1124:	f1 11       	cpse	r31, r1
    1126:	f8 cf       	rjmp	.-16     	; 0x1118 <__floatsisf+0x1c>
    1128:	fa f4       	brpl	.+62     	; 0x1168 <__floatsisf+0x6c>
    112a:	bb 0f       	add	r27, r27
    112c:	11 f4       	brne	.+4      	; 0x1132 <__floatsisf+0x36>
    112e:	60 ff       	sbrs	r22, 0
    1130:	1b c0       	rjmp	.+54     	; 0x1168 <__floatsisf+0x6c>
    1132:	6f 5f       	subi	r22, 0xFF	; 255
    1134:	7f 4f       	sbci	r23, 0xFF	; 255
    1136:	8f 4f       	sbci	r24, 0xFF	; 255
    1138:	9f 4f       	sbci	r25, 0xFF	; 255
    113a:	16 c0       	rjmp	.+44     	; 0x1168 <__floatsisf+0x6c>
    113c:	88 23       	and	r24, r24
    113e:	11 f0       	breq	.+4      	; 0x1144 <__floatsisf+0x48>
    1140:	96 e9       	ldi	r25, 0x96	; 150
    1142:	11 c0       	rjmp	.+34     	; 0x1166 <__floatsisf+0x6a>
    1144:	77 23       	and	r23, r23
    1146:	21 f0       	breq	.+8      	; 0x1150 <__floatsisf+0x54>
    1148:	9e e8       	ldi	r25, 0x8E	; 142
    114a:	87 2f       	mov	r24, r23
    114c:	76 2f       	mov	r23, r22
    114e:	05 c0       	rjmp	.+10     	; 0x115a <__floatsisf+0x5e>
    1150:	66 23       	and	r22, r22
    1152:	71 f0       	breq	.+28     	; 0x1170 <__floatsisf+0x74>
    1154:	96 e8       	ldi	r25, 0x86	; 134
    1156:	86 2f       	mov	r24, r22
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	60 e0       	ldi	r22, 0x00	; 0
    115c:	2a f0       	brmi	.+10     	; 0x1168 <__floatsisf+0x6c>
    115e:	9a 95       	dec	r25
    1160:	66 0f       	add	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	88 1f       	adc	r24, r24
    1166:	da f7       	brpl	.-10     	; 0x115e <__floatsisf+0x62>
    1168:	88 0f       	add	r24, r24
    116a:	96 95       	lsr	r25
    116c:	87 95       	ror	r24
    116e:	97 f9       	bld	r25, 7
    1170:	08 95       	ret

00001172 <__fp_cmp>:
    1172:	99 0f       	add	r25, r25
    1174:	00 08       	sbc	r0, r0
    1176:	55 0f       	add	r21, r21
    1178:	aa 0b       	sbc	r26, r26
    117a:	e0 e8       	ldi	r30, 0x80	; 128
    117c:	fe ef       	ldi	r31, 0xFE	; 254
    117e:	16 16       	cp	r1, r22
    1180:	17 06       	cpc	r1, r23
    1182:	e8 07       	cpc	r30, r24
    1184:	f9 07       	cpc	r31, r25
    1186:	c0 f0       	brcs	.+48     	; 0x11b8 <__fp_cmp+0x46>
    1188:	12 16       	cp	r1, r18
    118a:	13 06       	cpc	r1, r19
    118c:	e4 07       	cpc	r30, r20
    118e:	f5 07       	cpc	r31, r21
    1190:	98 f0       	brcs	.+38     	; 0x11b8 <__fp_cmp+0x46>
    1192:	62 1b       	sub	r22, r18
    1194:	73 0b       	sbc	r23, r19
    1196:	84 0b       	sbc	r24, r20
    1198:	95 0b       	sbc	r25, r21
    119a:	39 f4       	brne	.+14     	; 0x11aa <__fp_cmp+0x38>
    119c:	0a 26       	eor	r0, r26
    119e:	61 f0       	breq	.+24     	; 0x11b8 <__fp_cmp+0x46>
    11a0:	23 2b       	or	r18, r19
    11a2:	24 2b       	or	r18, r20
    11a4:	25 2b       	or	r18, r21
    11a6:	21 f4       	brne	.+8      	; 0x11b0 <__fp_cmp+0x3e>
    11a8:	08 95       	ret
    11aa:	0a 26       	eor	r0, r26
    11ac:	09 f4       	brne	.+2      	; 0x11b0 <__fp_cmp+0x3e>
    11ae:	a1 40       	sbci	r26, 0x01	; 1
    11b0:	a6 95       	lsr	r26
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	81 1d       	adc	r24, r1
    11b6:	81 1d       	adc	r24, r1
    11b8:	08 95       	ret

000011ba <__fp_inf>:
    11ba:	97 f9       	bld	r25, 7
    11bc:	9f 67       	ori	r25, 0x7F	; 127
    11be:	80 e8       	ldi	r24, 0x80	; 128
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	08 95       	ret

000011c6 <__fp_nan>:
    11c6:	9f ef       	ldi	r25, 0xFF	; 255
    11c8:	80 ec       	ldi	r24, 0xC0	; 192
    11ca:	08 95       	ret

000011cc <__fp_pscA>:
    11cc:	00 24       	eor	r0, r0
    11ce:	0a 94       	dec	r0
    11d0:	16 16       	cp	r1, r22
    11d2:	17 06       	cpc	r1, r23
    11d4:	18 06       	cpc	r1, r24
    11d6:	09 06       	cpc	r0, r25
    11d8:	08 95       	ret

000011da <__fp_pscB>:
    11da:	00 24       	eor	r0, r0
    11dc:	0a 94       	dec	r0
    11de:	12 16       	cp	r1, r18
    11e0:	13 06       	cpc	r1, r19
    11e2:	14 06       	cpc	r1, r20
    11e4:	05 06       	cpc	r0, r21
    11e6:	08 95       	ret

000011e8 <__fp_round>:
    11e8:	09 2e       	mov	r0, r25
    11ea:	03 94       	inc	r0
    11ec:	00 0c       	add	r0, r0
    11ee:	11 f4       	brne	.+4      	; 0x11f4 <__fp_round+0xc>
    11f0:	88 23       	and	r24, r24
    11f2:	52 f0       	brmi	.+20     	; 0x1208 <__fp_round+0x20>
    11f4:	bb 0f       	add	r27, r27
    11f6:	40 f4       	brcc	.+16     	; 0x1208 <__fp_round+0x20>
    11f8:	bf 2b       	or	r27, r31
    11fa:	11 f4       	brne	.+4      	; 0x1200 <__fp_round+0x18>
    11fc:	60 ff       	sbrs	r22, 0
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <__fp_round+0x20>
    1200:	6f 5f       	subi	r22, 0xFF	; 255
    1202:	7f 4f       	sbci	r23, 0xFF	; 255
    1204:	8f 4f       	sbci	r24, 0xFF	; 255
    1206:	9f 4f       	sbci	r25, 0xFF	; 255
    1208:	08 95       	ret

0000120a <__fp_split3>:
    120a:	57 fd       	sbrc	r21, 7
    120c:	90 58       	subi	r25, 0x80	; 128
    120e:	44 0f       	add	r20, r20
    1210:	55 1f       	adc	r21, r21
    1212:	59 f0       	breq	.+22     	; 0x122a <__fp_splitA+0x10>
    1214:	5f 3f       	cpi	r21, 0xFF	; 255
    1216:	71 f0       	breq	.+28     	; 0x1234 <__fp_splitA+0x1a>
    1218:	47 95       	ror	r20

0000121a <__fp_splitA>:
    121a:	88 0f       	add	r24, r24
    121c:	97 fb       	bst	r25, 7
    121e:	99 1f       	adc	r25, r25
    1220:	61 f0       	breq	.+24     	; 0x123a <__fp_splitA+0x20>
    1222:	9f 3f       	cpi	r25, 0xFF	; 255
    1224:	79 f0       	breq	.+30     	; 0x1244 <__fp_splitA+0x2a>
    1226:	87 95       	ror	r24
    1228:	08 95       	ret
    122a:	12 16       	cp	r1, r18
    122c:	13 06       	cpc	r1, r19
    122e:	14 06       	cpc	r1, r20
    1230:	55 1f       	adc	r21, r21
    1232:	f2 cf       	rjmp	.-28     	; 0x1218 <__fp_split3+0xe>
    1234:	46 95       	lsr	r20
    1236:	f1 df       	rcall	.-30     	; 0x121a <__fp_splitA>
    1238:	08 c0       	rjmp	.+16     	; 0x124a <__fp_splitA+0x30>
    123a:	16 16       	cp	r1, r22
    123c:	17 06       	cpc	r1, r23
    123e:	18 06       	cpc	r1, r24
    1240:	99 1f       	adc	r25, r25
    1242:	f1 cf       	rjmp	.-30     	; 0x1226 <__fp_splitA+0xc>
    1244:	86 95       	lsr	r24
    1246:	71 05       	cpc	r23, r1
    1248:	61 05       	cpc	r22, r1
    124a:	08 94       	sec
    124c:	08 95       	ret

0000124e <__fp_zero>:
    124e:	e8 94       	clt

00001250 <__fp_szero>:
    1250:	bb 27       	eor	r27, r27
    1252:	66 27       	eor	r22, r22
    1254:	77 27       	eor	r23, r23
    1256:	cb 01       	movw	r24, r22
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret

0000125c <__mulsf3>:
    125c:	0b d0       	rcall	.+22     	; 0x1274 <__mulsf3x>
    125e:	c4 cf       	rjmp	.-120    	; 0x11e8 <__fp_round>
    1260:	b5 df       	rcall	.-150    	; 0x11cc <__fp_pscA>
    1262:	28 f0       	brcs	.+10     	; 0x126e <__mulsf3+0x12>
    1264:	ba df       	rcall	.-140    	; 0x11da <__fp_pscB>
    1266:	18 f0       	brcs	.+6      	; 0x126e <__mulsf3+0x12>
    1268:	95 23       	and	r25, r21
    126a:	09 f0       	breq	.+2      	; 0x126e <__mulsf3+0x12>
    126c:	a6 cf       	rjmp	.-180    	; 0x11ba <__fp_inf>
    126e:	ab cf       	rjmp	.-170    	; 0x11c6 <__fp_nan>
    1270:	11 24       	eor	r1, r1
    1272:	ee cf       	rjmp	.-36     	; 0x1250 <__fp_szero>

00001274 <__mulsf3x>:
    1274:	ca df       	rcall	.-108    	; 0x120a <__fp_split3>
    1276:	a0 f3       	brcs	.-24     	; 0x1260 <__mulsf3+0x4>

00001278 <__mulsf3_pse>:
    1278:	95 9f       	mul	r25, r21
    127a:	d1 f3       	breq	.-12     	; 0x1270 <__mulsf3+0x14>
    127c:	95 0f       	add	r25, r21
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	55 1f       	adc	r21, r21
    1282:	62 9f       	mul	r22, r18
    1284:	f0 01       	movw	r30, r0
    1286:	72 9f       	mul	r23, r18
    1288:	bb 27       	eor	r27, r27
    128a:	f0 0d       	add	r31, r0
    128c:	b1 1d       	adc	r27, r1
    128e:	63 9f       	mul	r22, r19
    1290:	aa 27       	eor	r26, r26
    1292:	f0 0d       	add	r31, r0
    1294:	b1 1d       	adc	r27, r1
    1296:	aa 1f       	adc	r26, r26
    1298:	64 9f       	mul	r22, r20
    129a:	66 27       	eor	r22, r22
    129c:	b0 0d       	add	r27, r0
    129e:	a1 1d       	adc	r26, r1
    12a0:	66 1f       	adc	r22, r22
    12a2:	82 9f       	mul	r24, r18
    12a4:	22 27       	eor	r18, r18
    12a6:	b0 0d       	add	r27, r0
    12a8:	a1 1d       	adc	r26, r1
    12aa:	62 1f       	adc	r22, r18
    12ac:	73 9f       	mul	r23, r19
    12ae:	b0 0d       	add	r27, r0
    12b0:	a1 1d       	adc	r26, r1
    12b2:	62 1f       	adc	r22, r18
    12b4:	83 9f       	mul	r24, r19
    12b6:	a0 0d       	add	r26, r0
    12b8:	61 1d       	adc	r22, r1
    12ba:	22 1f       	adc	r18, r18
    12bc:	74 9f       	mul	r23, r20
    12be:	33 27       	eor	r19, r19
    12c0:	a0 0d       	add	r26, r0
    12c2:	61 1d       	adc	r22, r1
    12c4:	23 1f       	adc	r18, r19
    12c6:	84 9f       	mul	r24, r20
    12c8:	60 0d       	add	r22, r0
    12ca:	21 1d       	adc	r18, r1
    12cc:	82 2f       	mov	r24, r18
    12ce:	76 2f       	mov	r23, r22
    12d0:	6a 2f       	mov	r22, r26
    12d2:	11 24       	eor	r1, r1
    12d4:	9f 57       	subi	r25, 0x7F	; 127
    12d6:	50 40       	sbci	r21, 0x00	; 0
    12d8:	8a f0       	brmi	.+34     	; 0x12fc <__mulsf3_pse+0x84>
    12da:	e1 f0       	breq	.+56     	; 0x1314 <__mulsf3_pse+0x9c>
    12dc:	88 23       	and	r24, r24
    12de:	4a f0       	brmi	.+18     	; 0x12f2 <__mulsf3_pse+0x7a>
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	bb 1f       	adc	r27, r27
    12e6:	66 1f       	adc	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	88 1f       	adc	r24, r24
    12ec:	91 50       	subi	r25, 0x01	; 1
    12ee:	50 40       	sbci	r21, 0x00	; 0
    12f0:	a9 f7       	brne	.-22     	; 0x12dc <__mulsf3_pse+0x64>
    12f2:	9e 3f       	cpi	r25, 0xFE	; 254
    12f4:	51 05       	cpc	r21, r1
    12f6:	70 f0       	brcs	.+28     	; 0x1314 <__mulsf3_pse+0x9c>
    12f8:	60 cf       	rjmp	.-320    	; 0x11ba <__fp_inf>
    12fa:	aa cf       	rjmp	.-172    	; 0x1250 <__fp_szero>
    12fc:	5f 3f       	cpi	r21, 0xFF	; 255
    12fe:	ec f3       	brlt	.-6      	; 0x12fa <__mulsf3_pse+0x82>
    1300:	98 3e       	cpi	r25, 0xE8	; 232
    1302:	dc f3       	brlt	.-10     	; 0x12fa <__mulsf3_pse+0x82>
    1304:	86 95       	lsr	r24
    1306:	77 95       	ror	r23
    1308:	67 95       	ror	r22
    130a:	b7 95       	ror	r27
    130c:	f7 95       	ror	r31
    130e:	e7 95       	ror	r30
    1310:	9f 5f       	subi	r25, 0xFF	; 255
    1312:	c1 f7       	brne	.-16     	; 0x1304 <__mulsf3_pse+0x8c>
    1314:	fe 2b       	or	r31, r30
    1316:	88 0f       	add	r24, r24
    1318:	91 1d       	adc	r25, r1
    131a:	96 95       	lsr	r25
    131c:	87 95       	ror	r24
    131e:	97 f9       	bld	r25, 7
    1320:	08 95       	ret

00001322 <__divmodhi4>:
    1322:	97 fb       	bst	r25, 7
    1324:	07 2e       	mov	r0, r23
    1326:	16 f4       	brtc	.+4      	; 0x132c <__divmodhi4+0xa>
    1328:	00 94       	com	r0
    132a:	07 d0       	rcall	.+14     	; 0x133a <__divmodhi4_neg1>
    132c:	77 fd       	sbrc	r23, 7
    132e:	09 d0       	rcall	.+18     	; 0x1342 <__divmodhi4_neg2>
    1330:	0e 94 c4 09 	call	0x1388	; 0x1388 <__udivmodhi4>
    1334:	07 fc       	sbrc	r0, 7
    1336:	05 d0       	rcall	.+10     	; 0x1342 <__divmodhi4_neg2>
    1338:	3e f4       	brtc	.+14     	; 0x1348 <__divmodhi4_exit>

0000133a <__divmodhi4_neg1>:
    133a:	90 95       	com	r25
    133c:	81 95       	neg	r24
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	08 95       	ret

00001342 <__divmodhi4_neg2>:
    1342:	70 95       	com	r23
    1344:	61 95       	neg	r22
    1346:	7f 4f       	sbci	r23, 0xFF	; 255

00001348 <__divmodhi4_exit>:
    1348:	08 95       	ret

0000134a <__divmodsi4>:
    134a:	05 2e       	mov	r0, r21
    134c:	97 fb       	bst	r25, 7
    134e:	1e f4       	brtc	.+6      	; 0x1356 <__divmodsi4+0xc>
    1350:	00 94       	com	r0
    1352:	0e 94 bc 09 	call	0x1378	; 0x1378 <__negsi2>
    1356:	57 fd       	sbrc	r21, 7
    1358:	07 d0       	rcall	.+14     	; 0x1368 <__divmodsi4_neg2>
    135a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__udivmodsi4>
    135e:	07 fc       	sbrc	r0, 7
    1360:	03 d0       	rcall	.+6      	; 0x1368 <__divmodsi4_neg2>
    1362:	4e f4       	brtc	.+18     	; 0x1376 <__divmodsi4_exit>
    1364:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <__negsi2>

00001368 <__divmodsi4_neg2>:
    1368:	50 95       	com	r21
    136a:	40 95       	com	r20
    136c:	30 95       	com	r19
    136e:	21 95       	neg	r18
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	4f 4f       	sbci	r20, 0xFF	; 255
    1374:	5f 4f       	sbci	r21, 0xFF	; 255

00001376 <__divmodsi4_exit>:
    1376:	08 95       	ret

00001378 <__negsi2>:
    1378:	90 95       	com	r25
    137a:	80 95       	com	r24
    137c:	70 95       	com	r23
    137e:	61 95       	neg	r22
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	08 95       	ret

00001388 <__udivmodhi4>:
    1388:	aa 1b       	sub	r26, r26
    138a:	bb 1b       	sub	r27, r27
    138c:	51 e1       	ldi	r21, 0x11	; 17
    138e:	07 c0       	rjmp	.+14     	; 0x139e <__udivmodhi4_ep>

00001390 <__udivmodhi4_loop>:
    1390:	aa 1f       	adc	r26, r26
    1392:	bb 1f       	adc	r27, r27
    1394:	a6 17       	cp	r26, r22
    1396:	b7 07       	cpc	r27, r23
    1398:	10 f0       	brcs	.+4      	; 0x139e <__udivmodhi4_ep>
    139a:	a6 1b       	sub	r26, r22
    139c:	b7 0b       	sbc	r27, r23

0000139e <__udivmodhi4_ep>:
    139e:	88 1f       	adc	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	5a 95       	dec	r21
    13a4:	a9 f7       	brne	.-22     	; 0x1390 <__udivmodhi4_loop>
    13a6:	80 95       	com	r24
    13a8:	90 95       	com	r25
    13aa:	bc 01       	movw	r22, r24
    13ac:	cd 01       	movw	r24, r26
    13ae:	08 95       	ret

000013b0 <__udivmodsi4>:
    13b0:	a1 e2       	ldi	r26, 0x21	; 33
    13b2:	1a 2e       	mov	r1, r26
    13b4:	aa 1b       	sub	r26, r26
    13b6:	bb 1b       	sub	r27, r27
    13b8:	fd 01       	movw	r30, r26
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <__udivmodsi4_ep>

000013bc <__udivmodsi4_loop>:
    13bc:	aa 1f       	adc	r26, r26
    13be:	bb 1f       	adc	r27, r27
    13c0:	ee 1f       	adc	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	a2 17       	cp	r26, r18
    13c6:	b3 07       	cpc	r27, r19
    13c8:	e4 07       	cpc	r30, r20
    13ca:	f5 07       	cpc	r31, r21
    13cc:	20 f0       	brcs	.+8      	; 0x13d6 <__udivmodsi4_ep>
    13ce:	a2 1b       	sub	r26, r18
    13d0:	b3 0b       	sbc	r27, r19
    13d2:	e4 0b       	sbc	r30, r20
    13d4:	f5 0b       	sbc	r31, r21

000013d6 <__udivmodsi4_ep>:
    13d6:	66 1f       	adc	r22, r22
    13d8:	77 1f       	adc	r23, r23
    13da:	88 1f       	adc	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	1a 94       	dec	r1
    13e0:	69 f7       	brne	.-38     	; 0x13bc <__udivmodsi4_loop>
    13e2:	60 95       	com	r22
    13e4:	70 95       	com	r23
    13e6:	80 95       	com	r24
    13e8:	90 95       	com	r25
    13ea:	9b 01       	movw	r18, r22
    13ec:	ac 01       	movw	r20, r24
    13ee:	bd 01       	movw	r22, r26
    13f0:	cf 01       	movw	r24, r30
    13f2:	08 95       	ret

000013f4 <fdevopen>:
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	ec 01       	movw	r28, r24
    13fe:	8b 01       	movw	r16, r22
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	31 f4       	brne	.+12     	; 0x1410 <fdevopen+0x1c>
    1404:	61 15       	cp	r22, r1
    1406:	71 05       	cpc	r23, r1
    1408:	19 f4       	brne	.+6      	; 0x1410 <fdevopen+0x1c>
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	38 c0       	rjmp	.+112    	; 0x1480 <fdevopen+0x8c>
    1410:	6e e0       	ldi	r22, 0x0E	; 14
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 2b 0c 	call	0x1856	; 0x1856 <calloc>
    141c:	fc 01       	movw	r30, r24
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	a1 f3       	breq	.-24     	; 0x140a <fdevopen+0x16>
    1422:	80 e8       	ldi	r24, 0x80	; 128
    1424:	83 83       	std	Z+3, r24	; 0x03
    1426:	01 15       	cp	r16, r1
    1428:	11 05       	cpc	r17, r1
    142a:	71 f0       	breq	.+28     	; 0x1448 <fdevopen+0x54>
    142c:	13 87       	std	Z+11, r17	; 0x0b
    142e:	02 87       	std	Z+10, r16	; 0x0a
    1430:	81 e8       	ldi	r24, 0x81	; 129
    1432:	83 83       	std	Z+3, r24	; 0x03
    1434:	80 91 7a 01 	lds	r24, 0x017A
    1438:	90 91 7b 01 	lds	r25, 0x017B
    143c:	89 2b       	or	r24, r25
    143e:	21 f4       	brne	.+8      	; 0x1448 <fdevopen+0x54>
    1440:	f0 93 7b 01 	sts	0x017B, r31
    1444:	e0 93 7a 01 	sts	0x017A, r30
    1448:	20 97       	sbiw	r28, 0x00	; 0
    144a:	c9 f0       	breq	.+50     	; 0x147e <fdevopen+0x8a>
    144c:	d1 87       	std	Z+9, r29	; 0x09
    144e:	c0 87       	std	Z+8, r28	; 0x08
    1450:	83 81       	ldd	r24, Z+3	; 0x03
    1452:	82 60       	ori	r24, 0x02	; 2
    1454:	83 83       	std	Z+3, r24	; 0x03
    1456:	80 91 7c 01 	lds	r24, 0x017C
    145a:	90 91 7d 01 	lds	r25, 0x017D
    145e:	89 2b       	or	r24, r25
    1460:	71 f4       	brne	.+28     	; 0x147e <fdevopen+0x8a>
    1462:	f0 93 7d 01 	sts	0x017D, r31
    1466:	e0 93 7c 01 	sts	0x017C, r30
    146a:	80 91 7e 01 	lds	r24, 0x017E
    146e:	90 91 7f 01 	lds	r25, 0x017F
    1472:	89 2b       	or	r24, r25
    1474:	21 f4       	brne	.+8      	; 0x147e <fdevopen+0x8a>
    1476:	f0 93 7f 01 	sts	0x017F, r31
    147a:	e0 93 7e 01 	sts	0x017E, r30
    147e:	cf 01       	movw	r24, r30
    1480:	df 91       	pop	r29
    1482:	cf 91       	pop	r28
    1484:	1f 91       	pop	r17
    1486:	0f 91       	pop	r16
    1488:	08 95       	ret

0000148a <printf>:
    148a:	a0 e0       	ldi	r26, 0x00	; 0
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e4       	ldi	r30, 0x4B	; 75
    1490:	fa e0       	ldi	r31, 0x0A	; 10
    1492:	0c 94 2b 0e 	jmp	0x1c56	; 0x1c56 <__prologue_saves__+0x20>
    1496:	fe 01       	movw	r30, r28
    1498:	35 96       	adiw	r30, 0x05	; 5
    149a:	61 91       	ld	r22, Z+
    149c:	71 91       	ld	r23, Z+
    149e:	af 01       	movw	r20, r30
    14a0:	80 91 7c 01 	lds	r24, 0x017C
    14a4:	90 91 7d 01 	lds	r25, 0x017D
    14a8:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <vfprintf>
    14ac:	e2 e0       	ldi	r30, 0x02	; 2
    14ae:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__epilogue_restores__+0x20>

000014b2 <vfprintf>:
    14b2:	ac e0       	ldi	r26, 0x0C	; 12
    14b4:	b0 e0       	ldi	r27, 0x00	; 0
    14b6:	ef e5       	ldi	r30, 0x5F	; 95
    14b8:	fa e0       	ldi	r31, 0x0A	; 10
    14ba:	0c 94 1b 0e 	jmp	0x1c36	; 0x1c36 <__prologue_saves__>
    14be:	7c 01       	movw	r14, r24
    14c0:	6b 01       	movw	r12, r22
    14c2:	8a 01       	movw	r16, r20
    14c4:	fc 01       	movw	r30, r24
    14c6:	17 82       	std	Z+7, r1	; 0x07
    14c8:	16 82       	std	Z+6, r1	; 0x06
    14ca:	83 81       	ldd	r24, Z+3	; 0x03
    14cc:	81 ff       	sbrs	r24, 1
    14ce:	bd c1       	rjmp	.+890    	; 0x184a <vfprintf+0x398>
    14d0:	ce 01       	movw	r24, r28
    14d2:	01 96       	adiw	r24, 0x01	; 1
    14d4:	4c 01       	movw	r8, r24
    14d6:	f7 01       	movw	r30, r14
    14d8:	93 81       	ldd	r25, Z+3	; 0x03
    14da:	f6 01       	movw	r30, r12
    14dc:	93 fd       	sbrc	r25, 3
    14de:	85 91       	lpm	r24, Z+
    14e0:	93 ff       	sbrs	r25, 3
    14e2:	81 91       	ld	r24, Z+
    14e4:	6f 01       	movw	r12, r30
    14e6:	88 23       	and	r24, r24
    14e8:	09 f4       	brne	.+2      	; 0x14ec <vfprintf+0x3a>
    14ea:	ab c1       	rjmp	.+854    	; 0x1842 <vfprintf+0x390>
    14ec:	85 32       	cpi	r24, 0x25	; 37
    14ee:	39 f4       	brne	.+14     	; 0x14fe <vfprintf+0x4c>
    14f0:	93 fd       	sbrc	r25, 3
    14f2:	85 91       	lpm	r24, Z+
    14f4:	93 ff       	sbrs	r25, 3
    14f6:	81 91       	ld	r24, Z+
    14f8:	6f 01       	movw	r12, r30
    14fa:	85 32       	cpi	r24, 0x25	; 37
    14fc:	29 f4       	brne	.+10     	; 0x1508 <vfprintf+0x56>
    14fe:	b7 01       	movw	r22, r14
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1506:	e7 cf       	rjmp	.-50     	; 0x14d6 <vfprintf+0x24>
    1508:	51 2c       	mov	r5, r1
    150a:	31 2c       	mov	r3, r1
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	20 32       	cpi	r18, 0x20	; 32
    1510:	a0 f4       	brcc	.+40     	; 0x153a <vfprintf+0x88>
    1512:	8b 32       	cpi	r24, 0x2B	; 43
    1514:	69 f0       	breq	.+26     	; 0x1530 <vfprintf+0x7e>
    1516:	30 f4       	brcc	.+12     	; 0x1524 <vfprintf+0x72>
    1518:	80 32       	cpi	r24, 0x20	; 32
    151a:	59 f0       	breq	.+22     	; 0x1532 <vfprintf+0x80>
    151c:	83 32       	cpi	r24, 0x23	; 35
    151e:	69 f4       	brne	.+26     	; 0x153a <vfprintf+0x88>
    1520:	20 61       	ori	r18, 0x10	; 16
    1522:	2c c0       	rjmp	.+88     	; 0x157c <vfprintf+0xca>
    1524:	8d 32       	cpi	r24, 0x2D	; 45
    1526:	39 f0       	breq	.+14     	; 0x1536 <vfprintf+0x84>
    1528:	80 33       	cpi	r24, 0x30	; 48
    152a:	39 f4       	brne	.+14     	; 0x153a <vfprintf+0x88>
    152c:	21 60       	ori	r18, 0x01	; 1
    152e:	26 c0       	rjmp	.+76     	; 0x157c <vfprintf+0xca>
    1530:	22 60       	ori	r18, 0x02	; 2
    1532:	24 60       	ori	r18, 0x04	; 4
    1534:	23 c0       	rjmp	.+70     	; 0x157c <vfprintf+0xca>
    1536:	28 60       	ori	r18, 0x08	; 8
    1538:	21 c0       	rjmp	.+66     	; 0x157c <vfprintf+0xca>
    153a:	27 fd       	sbrc	r18, 7
    153c:	27 c0       	rjmp	.+78     	; 0x158c <vfprintf+0xda>
    153e:	30 ed       	ldi	r19, 0xD0	; 208
    1540:	38 0f       	add	r19, r24
    1542:	3a 30       	cpi	r19, 0x0A	; 10
    1544:	78 f4       	brcc	.+30     	; 0x1564 <vfprintf+0xb2>
    1546:	26 ff       	sbrs	r18, 6
    1548:	06 c0       	rjmp	.+12     	; 0x1556 <vfprintf+0xa4>
    154a:	fa e0       	ldi	r31, 0x0A	; 10
    154c:	5f 9e       	mul	r5, r31
    154e:	30 0d       	add	r19, r0
    1550:	11 24       	eor	r1, r1
    1552:	53 2e       	mov	r5, r19
    1554:	13 c0       	rjmp	.+38     	; 0x157c <vfprintf+0xca>
    1556:	8a e0       	ldi	r24, 0x0A	; 10
    1558:	38 9e       	mul	r3, r24
    155a:	30 0d       	add	r19, r0
    155c:	11 24       	eor	r1, r1
    155e:	33 2e       	mov	r3, r19
    1560:	20 62       	ori	r18, 0x20	; 32
    1562:	0c c0       	rjmp	.+24     	; 0x157c <vfprintf+0xca>
    1564:	8e 32       	cpi	r24, 0x2E	; 46
    1566:	21 f4       	brne	.+8      	; 0x1570 <vfprintf+0xbe>
    1568:	26 fd       	sbrc	r18, 6
    156a:	6b c1       	rjmp	.+726    	; 0x1842 <vfprintf+0x390>
    156c:	20 64       	ori	r18, 0x40	; 64
    156e:	06 c0       	rjmp	.+12     	; 0x157c <vfprintf+0xca>
    1570:	8c 36       	cpi	r24, 0x6C	; 108
    1572:	11 f4       	brne	.+4      	; 0x1578 <vfprintf+0xc6>
    1574:	20 68       	ori	r18, 0x80	; 128
    1576:	02 c0       	rjmp	.+4      	; 0x157c <vfprintf+0xca>
    1578:	88 36       	cpi	r24, 0x68	; 104
    157a:	41 f4       	brne	.+16     	; 0x158c <vfprintf+0xda>
    157c:	f6 01       	movw	r30, r12
    157e:	93 fd       	sbrc	r25, 3
    1580:	85 91       	lpm	r24, Z+
    1582:	93 ff       	sbrs	r25, 3
    1584:	81 91       	ld	r24, Z+
    1586:	6f 01       	movw	r12, r30
    1588:	81 11       	cpse	r24, r1
    158a:	c1 cf       	rjmp	.-126    	; 0x150e <vfprintf+0x5c>
    158c:	98 2f       	mov	r25, r24
    158e:	9f 7d       	andi	r25, 0xDF	; 223
    1590:	95 54       	subi	r25, 0x45	; 69
    1592:	93 30       	cpi	r25, 0x03	; 3
    1594:	28 f4       	brcc	.+10     	; 0x15a0 <vfprintf+0xee>
    1596:	0c 5f       	subi	r16, 0xFC	; 252
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
    159a:	ff e3       	ldi	r31, 0x3F	; 63
    159c:	f9 83       	std	Y+1, r31	; 0x01
    159e:	0d c0       	rjmp	.+26     	; 0x15ba <vfprintf+0x108>
    15a0:	83 36       	cpi	r24, 0x63	; 99
    15a2:	31 f0       	breq	.+12     	; 0x15b0 <vfprintf+0xfe>
    15a4:	83 37       	cpi	r24, 0x73	; 115
    15a6:	71 f0       	breq	.+28     	; 0x15c4 <vfprintf+0x112>
    15a8:	83 35       	cpi	r24, 0x53	; 83
    15aa:	09 f0       	breq	.+2      	; 0x15ae <vfprintf+0xfc>
    15ac:	5b c0       	rjmp	.+182    	; 0x1664 <vfprintf+0x1b2>
    15ae:	22 c0       	rjmp	.+68     	; 0x15f4 <vfprintf+0x142>
    15b0:	f8 01       	movw	r30, r16
    15b2:	80 81       	ld	r24, Z
    15b4:	89 83       	std	Y+1, r24	; 0x01
    15b6:	0e 5f       	subi	r16, 0xFE	; 254
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	44 24       	eor	r4, r4
    15bc:	43 94       	inc	r4
    15be:	51 2c       	mov	r5, r1
    15c0:	54 01       	movw	r10, r8
    15c2:	15 c0       	rjmp	.+42     	; 0x15ee <vfprintf+0x13c>
    15c4:	38 01       	movw	r6, r16
    15c6:	f2 e0       	ldi	r31, 0x02	; 2
    15c8:	6f 0e       	add	r6, r31
    15ca:	71 1c       	adc	r7, r1
    15cc:	f8 01       	movw	r30, r16
    15ce:	a0 80       	ld	r10, Z
    15d0:	b1 80       	ldd	r11, Z+1	; 0x01
    15d2:	26 ff       	sbrs	r18, 6
    15d4:	03 c0       	rjmp	.+6      	; 0x15dc <vfprintf+0x12a>
    15d6:	65 2d       	mov	r22, r5
    15d8:	70 e0       	ldi	r23, 0x00	; 0
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <vfprintf+0x12e>
    15dc:	6f ef       	ldi	r22, 0xFF	; 255
    15de:	7f ef       	ldi	r23, 0xFF	; 255
    15e0:	c5 01       	movw	r24, r10
    15e2:	2c 87       	std	Y+12, r18	; 0x0c
    15e4:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <strnlen>
    15e8:	2c 01       	movw	r4, r24
    15ea:	83 01       	movw	r16, r6
    15ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    15ee:	2f 77       	andi	r18, 0x7F	; 127
    15f0:	22 2e       	mov	r2, r18
    15f2:	17 c0       	rjmp	.+46     	; 0x1622 <vfprintf+0x170>
    15f4:	38 01       	movw	r6, r16
    15f6:	f2 e0       	ldi	r31, 0x02	; 2
    15f8:	6f 0e       	add	r6, r31
    15fa:	71 1c       	adc	r7, r1
    15fc:	f8 01       	movw	r30, r16
    15fe:	a0 80       	ld	r10, Z
    1600:	b1 80       	ldd	r11, Z+1	; 0x01
    1602:	26 ff       	sbrs	r18, 6
    1604:	03 c0       	rjmp	.+6      	; 0x160c <vfprintf+0x15a>
    1606:	65 2d       	mov	r22, r5
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <vfprintf+0x15e>
    160c:	6f ef       	ldi	r22, 0xFF	; 255
    160e:	7f ef       	ldi	r23, 0xFF	; 255
    1610:	c5 01       	movw	r24, r10
    1612:	2c 87       	std	Y+12, r18	; 0x0c
    1614:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <strnlen_P>
    1618:	2c 01       	movw	r4, r24
    161a:	2c 85       	ldd	r18, Y+12	; 0x0c
    161c:	20 68       	ori	r18, 0x80	; 128
    161e:	22 2e       	mov	r2, r18
    1620:	83 01       	movw	r16, r6
    1622:	23 fc       	sbrc	r2, 3
    1624:	1b c0       	rjmp	.+54     	; 0x165c <vfprintf+0x1aa>
    1626:	83 2d       	mov	r24, r3
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	48 16       	cp	r4, r24
    162c:	59 06       	cpc	r5, r25
    162e:	b0 f4       	brcc	.+44     	; 0x165c <vfprintf+0x1aa>
    1630:	b7 01       	movw	r22, r14
    1632:	80 e2       	ldi	r24, 0x20	; 32
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    163a:	3a 94       	dec	r3
    163c:	f4 cf       	rjmp	.-24     	; 0x1626 <vfprintf+0x174>
    163e:	f5 01       	movw	r30, r10
    1640:	27 fc       	sbrc	r2, 7
    1642:	85 91       	lpm	r24, Z+
    1644:	27 fe       	sbrs	r2, 7
    1646:	81 91       	ld	r24, Z+
    1648:	5f 01       	movw	r10, r30
    164a:	b7 01       	movw	r22, r14
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1652:	31 10       	cpse	r3, r1
    1654:	3a 94       	dec	r3
    1656:	f1 e0       	ldi	r31, 0x01	; 1
    1658:	4f 1a       	sub	r4, r31
    165a:	51 08       	sbc	r5, r1
    165c:	41 14       	cp	r4, r1
    165e:	51 04       	cpc	r5, r1
    1660:	71 f7       	brne	.-36     	; 0x163e <vfprintf+0x18c>
    1662:	e5 c0       	rjmp	.+458    	; 0x182e <vfprintf+0x37c>
    1664:	84 36       	cpi	r24, 0x64	; 100
    1666:	11 f0       	breq	.+4      	; 0x166c <vfprintf+0x1ba>
    1668:	89 36       	cpi	r24, 0x69	; 105
    166a:	39 f5       	brne	.+78     	; 0x16ba <vfprintf+0x208>
    166c:	f8 01       	movw	r30, r16
    166e:	27 ff       	sbrs	r18, 7
    1670:	07 c0       	rjmp	.+14     	; 0x1680 <vfprintf+0x1ce>
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	0c 5f       	subi	r16, 0xFC	; 252
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <vfprintf+0x1de>
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	88 27       	eor	r24, r24
    1686:	77 fd       	sbrc	r23, 7
    1688:	80 95       	com	r24
    168a:	98 2f       	mov	r25, r24
    168c:	0e 5f       	subi	r16, 0xFE	; 254
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	2f 76       	andi	r18, 0x6F	; 111
    1692:	b2 2e       	mov	r11, r18
    1694:	97 ff       	sbrs	r25, 7
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <vfprintf+0x1f8>
    1698:	90 95       	com	r25
    169a:	80 95       	com	r24
    169c:	70 95       	com	r23
    169e:	61 95       	neg	r22
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	8f 4f       	sbci	r24, 0xFF	; 255
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	20 68       	ori	r18, 0x80	; 128
    16a8:	b2 2e       	mov	r11, r18
    16aa:	2a e0       	ldi	r18, 0x0A	; 10
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	a4 01       	movw	r20, r8
    16b0:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ultoa_invert>
    16b4:	a8 2e       	mov	r10, r24
    16b6:	a8 18       	sub	r10, r8
    16b8:	44 c0       	rjmp	.+136    	; 0x1742 <vfprintf+0x290>
    16ba:	85 37       	cpi	r24, 0x75	; 117
    16bc:	29 f4       	brne	.+10     	; 0x16c8 <vfprintf+0x216>
    16be:	2f 7e       	andi	r18, 0xEF	; 239
    16c0:	b2 2e       	mov	r11, r18
    16c2:	2a e0       	ldi	r18, 0x0A	; 10
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	25 c0       	rjmp	.+74     	; 0x1712 <vfprintf+0x260>
    16c8:	f2 2f       	mov	r31, r18
    16ca:	f9 7f       	andi	r31, 0xF9	; 249
    16cc:	bf 2e       	mov	r11, r31
    16ce:	8f 36       	cpi	r24, 0x6F	; 111
    16d0:	c1 f0       	breq	.+48     	; 0x1702 <vfprintf+0x250>
    16d2:	18 f4       	brcc	.+6      	; 0x16da <vfprintf+0x228>
    16d4:	88 35       	cpi	r24, 0x58	; 88
    16d6:	79 f0       	breq	.+30     	; 0x16f6 <vfprintf+0x244>
    16d8:	b4 c0       	rjmp	.+360    	; 0x1842 <vfprintf+0x390>
    16da:	80 37       	cpi	r24, 0x70	; 112
    16dc:	19 f0       	breq	.+6      	; 0x16e4 <vfprintf+0x232>
    16de:	88 37       	cpi	r24, 0x78	; 120
    16e0:	21 f0       	breq	.+8      	; 0x16ea <vfprintf+0x238>
    16e2:	af c0       	rjmp	.+350    	; 0x1842 <vfprintf+0x390>
    16e4:	2f 2f       	mov	r18, r31
    16e6:	20 61       	ori	r18, 0x10	; 16
    16e8:	b2 2e       	mov	r11, r18
    16ea:	b4 fe       	sbrs	r11, 4
    16ec:	0d c0       	rjmp	.+26     	; 0x1708 <vfprintf+0x256>
    16ee:	8b 2d       	mov	r24, r11
    16f0:	84 60       	ori	r24, 0x04	; 4
    16f2:	b8 2e       	mov	r11, r24
    16f4:	09 c0       	rjmp	.+18     	; 0x1708 <vfprintf+0x256>
    16f6:	24 ff       	sbrs	r18, 4
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <vfprintf+0x25c>
    16fa:	9f 2f       	mov	r25, r31
    16fc:	96 60       	ori	r25, 0x06	; 6
    16fe:	b9 2e       	mov	r11, r25
    1700:	06 c0       	rjmp	.+12     	; 0x170e <vfprintf+0x25c>
    1702:	28 e0       	ldi	r18, 0x08	; 8
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	05 c0       	rjmp	.+10     	; 0x1712 <vfprintf+0x260>
    1708:	20 e1       	ldi	r18, 0x10	; 16
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <vfprintf+0x260>
    170e:	20 e1       	ldi	r18, 0x10	; 16
    1710:	32 e0       	ldi	r19, 0x02	; 2
    1712:	f8 01       	movw	r30, r16
    1714:	b7 fe       	sbrs	r11, 7
    1716:	07 c0       	rjmp	.+14     	; 0x1726 <vfprintf+0x274>
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	0c 5f       	subi	r16, 0xFC	; 252
    1722:	1f 4f       	sbci	r17, 0xFF	; 255
    1724:	06 c0       	rjmp	.+12     	; 0x1732 <vfprintf+0x280>
    1726:	60 81       	ld	r22, Z
    1728:	71 81       	ldd	r23, Z+1	; 0x01
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	0e 5f       	subi	r16, 0xFE	; 254
    1730:	1f 4f       	sbci	r17, 0xFF	; 255
    1732:	a4 01       	movw	r20, r8
    1734:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <__ultoa_invert>
    1738:	a8 2e       	mov	r10, r24
    173a:	a8 18       	sub	r10, r8
    173c:	fb 2d       	mov	r31, r11
    173e:	ff 77       	andi	r31, 0x7F	; 127
    1740:	bf 2e       	mov	r11, r31
    1742:	b6 fe       	sbrs	r11, 6
    1744:	0b c0       	rjmp	.+22     	; 0x175c <vfprintf+0x2aa>
    1746:	2b 2d       	mov	r18, r11
    1748:	2e 7f       	andi	r18, 0xFE	; 254
    174a:	a5 14       	cp	r10, r5
    174c:	50 f4       	brcc	.+20     	; 0x1762 <vfprintf+0x2b0>
    174e:	b4 fe       	sbrs	r11, 4
    1750:	0a c0       	rjmp	.+20     	; 0x1766 <vfprintf+0x2b4>
    1752:	b2 fc       	sbrc	r11, 2
    1754:	08 c0       	rjmp	.+16     	; 0x1766 <vfprintf+0x2b4>
    1756:	2b 2d       	mov	r18, r11
    1758:	2e 7e       	andi	r18, 0xEE	; 238
    175a:	05 c0       	rjmp	.+10     	; 0x1766 <vfprintf+0x2b4>
    175c:	7a 2c       	mov	r7, r10
    175e:	2b 2d       	mov	r18, r11
    1760:	03 c0       	rjmp	.+6      	; 0x1768 <vfprintf+0x2b6>
    1762:	7a 2c       	mov	r7, r10
    1764:	01 c0       	rjmp	.+2      	; 0x1768 <vfprintf+0x2b6>
    1766:	75 2c       	mov	r7, r5
    1768:	24 ff       	sbrs	r18, 4
    176a:	0d c0       	rjmp	.+26     	; 0x1786 <vfprintf+0x2d4>
    176c:	fe 01       	movw	r30, r28
    176e:	ea 0d       	add	r30, r10
    1770:	f1 1d       	adc	r31, r1
    1772:	80 81       	ld	r24, Z
    1774:	80 33       	cpi	r24, 0x30	; 48
    1776:	11 f4       	brne	.+4      	; 0x177c <vfprintf+0x2ca>
    1778:	29 7e       	andi	r18, 0xE9	; 233
    177a:	09 c0       	rjmp	.+18     	; 0x178e <vfprintf+0x2dc>
    177c:	22 ff       	sbrs	r18, 2
    177e:	06 c0       	rjmp	.+12     	; 0x178c <vfprintf+0x2da>
    1780:	73 94       	inc	r7
    1782:	73 94       	inc	r7
    1784:	04 c0       	rjmp	.+8      	; 0x178e <vfprintf+0x2dc>
    1786:	82 2f       	mov	r24, r18
    1788:	86 78       	andi	r24, 0x86	; 134
    178a:	09 f0       	breq	.+2      	; 0x178e <vfprintf+0x2dc>
    178c:	73 94       	inc	r7
    178e:	23 fd       	sbrc	r18, 3
    1790:	13 c0       	rjmp	.+38     	; 0x17b8 <vfprintf+0x306>
    1792:	20 ff       	sbrs	r18, 0
    1794:	06 c0       	rjmp	.+12     	; 0x17a2 <vfprintf+0x2f0>
    1796:	5a 2c       	mov	r5, r10
    1798:	73 14       	cp	r7, r3
    179a:	18 f4       	brcc	.+6      	; 0x17a2 <vfprintf+0x2f0>
    179c:	53 0c       	add	r5, r3
    179e:	57 18       	sub	r5, r7
    17a0:	73 2c       	mov	r7, r3
    17a2:	73 14       	cp	r7, r3
    17a4:	68 f4       	brcc	.+26     	; 0x17c0 <vfprintf+0x30e>
    17a6:	b7 01       	movw	r22, r14
    17a8:	80 e2       	ldi	r24, 0x20	; 32
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	2c 87       	std	Y+12, r18	; 0x0c
    17ae:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    17b2:	73 94       	inc	r7
    17b4:	2c 85       	ldd	r18, Y+12	; 0x0c
    17b6:	f5 cf       	rjmp	.-22     	; 0x17a2 <vfprintf+0x2f0>
    17b8:	73 14       	cp	r7, r3
    17ba:	10 f4       	brcc	.+4      	; 0x17c0 <vfprintf+0x30e>
    17bc:	37 18       	sub	r3, r7
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <vfprintf+0x310>
    17c0:	31 2c       	mov	r3, r1
    17c2:	24 ff       	sbrs	r18, 4
    17c4:	12 c0       	rjmp	.+36     	; 0x17ea <vfprintf+0x338>
    17c6:	b7 01       	movw	r22, r14
    17c8:	80 e3       	ldi	r24, 0x30	; 48
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	2c 87       	std	Y+12, r18	; 0x0c
    17ce:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    17d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    17d4:	22 ff       	sbrs	r18, 2
    17d6:	17 c0       	rjmp	.+46     	; 0x1806 <vfprintf+0x354>
    17d8:	21 ff       	sbrs	r18, 1
    17da:	03 c0       	rjmp	.+6      	; 0x17e2 <vfprintf+0x330>
    17dc:	88 e5       	ldi	r24, 0x58	; 88
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <vfprintf+0x334>
    17e2:	88 e7       	ldi	r24, 0x78	; 120
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	b7 01       	movw	r22, r14
    17e8:	0c c0       	rjmp	.+24     	; 0x1802 <vfprintf+0x350>
    17ea:	82 2f       	mov	r24, r18
    17ec:	86 78       	andi	r24, 0x86	; 134
    17ee:	59 f0       	breq	.+22     	; 0x1806 <vfprintf+0x354>
    17f0:	21 fd       	sbrc	r18, 1
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <vfprintf+0x346>
    17f4:	80 e2       	ldi	r24, 0x20	; 32
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <vfprintf+0x348>
    17f8:	8b e2       	ldi	r24, 0x2B	; 43
    17fa:	27 fd       	sbrc	r18, 7
    17fc:	8d e2       	ldi	r24, 0x2D	; 45
    17fe:	b7 01       	movw	r22, r14
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1806:	a5 14       	cp	r10, r5
    1808:	38 f4       	brcc	.+14     	; 0x1818 <vfprintf+0x366>
    180a:	b7 01       	movw	r22, r14
    180c:	80 e3       	ldi	r24, 0x30	; 48
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    1814:	5a 94       	dec	r5
    1816:	f7 cf       	rjmp	.-18     	; 0x1806 <vfprintf+0x354>
    1818:	aa 94       	dec	r10
    181a:	f4 01       	movw	r30, r8
    181c:	ea 0d       	add	r30, r10
    181e:	f1 1d       	adc	r31, r1
    1820:	80 81       	ld	r24, Z
    1822:	b7 01       	movw	r22, r14
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    182a:	a1 10       	cpse	r10, r1
    182c:	f5 cf       	rjmp	.-22     	; 0x1818 <vfprintf+0x366>
    182e:	33 20       	and	r3, r3
    1830:	09 f4       	brne	.+2      	; 0x1834 <vfprintf+0x382>
    1832:	51 ce       	rjmp	.-862    	; 0x14d6 <vfprintf+0x24>
    1834:	b7 01       	movw	r22, r14
    1836:	80 e2       	ldi	r24, 0x20	; 32
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <fputc>
    183e:	3a 94       	dec	r3
    1840:	f6 cf       	rjmp	.-20     	; 0x182e <vfprintf+0x37c>
    1842:	f7 01       	movw	r30, r14
    1844:	86 81       	ldd	r24, Z+6	; 0x06
    1846:	97 81       	ldd	r25, Z+7	; 0x07
    1848:	02 c0       	rjmp	.+4      	; 0x184e <vfprintf+0x39c>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	9f ef       	ldi	r25, 0xFF	; 255
    184e:	2c 96       	adiw	r28, 0x0c	; 12
    1850:	e2 e1       	ldi	r30, 0x12	; 18
    1852:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__epilogue_restores__>

00001856 <calloc>:
    1856:	0f 93       	push	r16
    1858:	1f 93       	push	r17
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	86 9f       	mul	r24, r22
    1860:	80 01       	movw	r16, r0
    1862:	87 9f       	mul	r24, r23
    1864:	10 0d       	add	r17, r0
    1866:	96 9f       	mul	r25, r22
    1868:	10 0d       	add	r17, r0
    186a:	11 24       	eor	r1, r1
    186c:	c8 01       	movw	r24, r16
    186e:	0e 94 47 0c 	call	0x188e	; 0x188e <malloc>
    1872:	ec 01       	movw	r28, r24
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	29 f0       	breq	.+10     	; 0x1882 <calloc+0x2c>
    1878:	a8 01       	movw	r20, r16
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <memset>
    1882:	ce 01       	movw	r24, r28
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	08 95       	ret

0000188e <malloc>:
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	82 30       	cpi	r24, 0x02	; 2
    1894:	91 05       	cpc	r25, r1
    1896:	10 f4       	brcc	.+4      	; 0x189c <malloc+0xe>
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	e0 91 82 01 	lds	r30, 0x0182
    18a0:	f0 91 83 01 	lds	r31, 0x0183
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	a0 e0       	ldi	r26, 0x00	; 0
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	30 97       	sbiw	r30, 0x00	; 0
    18ae:	39 f1       	breq	.+78     	; 0x18fe <malloc+0x70>
    18b0:	40 81       	ld	r20, Z
    18b2:	51 81       	ldd	r21, Z+1	; 0x01
    18b4:	48 17       	cp	r20, r24
    18b6:	59 07       	cpc	r21, r25
    18b8:	b8 f0       	brcs	.+46     	; 0x18e8 <malloc+0x5a>
    18ba:	48 17       	cp	r20, r24
    18bc:	59 07       	cpc	r21, r25
    18be:	71 f4       	brne	.+28     	; 0x18dc <malloc+0x4e>
    18c0:	82 81       	ldd	r24, Z+2	; 0x02
    18c2:	93 81       	ldd	r25, Z+3	; 0x03
    18c4:	10 97       	sbiw	r26, 0x00	; 0
    18c6:	29 f0       	breq	.+10     	; 0x18d2 <malloc+0x44>
    18c8:	13 96       	adiw	r26, 0x03	; 3
    18ca:	9c 93       	st	X, r25
    18cc:	8e 93       	st	-X, r24
    18ce:	12 97       	sbiw	r26, 0x02	; 2
    18d0:	2c c0       	rjmp	.+88     	; 0x192a <malloc+0x9c>
    18d2:	90 93 83 01 	sts	0x0183, r25
    18d6:	80 93 82 01 	sts	0x0182, r24
    18da:	27 c0       	rjmp	.+78     	; 0x192a <malloc+0x9c>
    18dc:	21 15       	cp	r18, r1
    18de:	31 05       	cpc	r19, r1
    18e0:	31 f0       	breq	.+12     	; 0x18ee <malloc+0x60>
    18e2:	42 17       	cp	r20, r18
    18e4:	53 07       	cpc	r21, r19
    18e6:	18 f0       	brcs	.+6      	; 0x18ee <malloc+0x60>
    18e8:	a9 01       	movw	r20, r18
    18ea:	db 01       	movw	r26, r22
    18ec:	01 c0       	rjmp	.+2      	; 0x18f0 <malloc+0x62>
    18ee:	ef 01       	movw	r28, r30
    18f0:	9a 01       	movw	r18, r20
    18f2:	bd 01       	movw	r22, r26
    18f4:	df 01       	movw	r26, r30
    18f6:	02 80       	ldd	r0, Z+2	; 0x02
    18f8:	f3 81       	ldd	r31, Z+3	; 0x03
    18fa:	e0 2d       	mov	r30, r0
    18fc:	d7 cf       	rjmp	.-82     	; 0x18ac <malloc+0x1e>
    18fe:	21 15       	cp	r18, r1
    1900:	31 05       	cpc	r19, r1
    1902:	f9 f0       	breq	.+62     	; 0x1942 <malloc+0xb4>
    1904:	28 1b       	sub	r18, r24
    1906:	39 0b       	sbc	r19, r25
    1908:	24 30       	cpi	r18, 0x04	; 4
    190a:	31 05       	cpc	r19, r1
    190c:	80 f4       	brcc	.+32     	; 0x192e <malloc+0xa0>
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	9b 81       	ldd	r25, Y+3	; 0x03
    1912:	61 15       	cp	r22, r1
    1914:	71 05       	cpc	r23, r1
    1916:	21 f0       	breq	.+8      	; 0x1920 <malloc+0x92>
    1918:	fb 01       	movw	r30, r22
    191a:	93 83       	std	Z+3, r25	; 0x03
    191c:	82 83       	std	Z+2, r24	; 0x02
    191e:	04 c0       	rjmp	.+8      	; 0x1928 <malloc+0x9a>
    1920:	90 93 83 01 	sts	0x0183, r25
    1924:	80 93 82 01 	sts	0x0182, r24
    1928:	fe 01       	movw	r30, r28
    192a:	32 96       	adiw	r30, 0x02	; 2
    192c:	44 c0       	rjmp	.+136    	; 0x19b6 <malloc+0x128>
    192e:	fe 01       	movw	r30, r28
    1930:	e2 0f       	add	r30, r18
    1932:	f3 1f       	adc	r31, r19
    1934:	81 93       	st	Z+, r24
    1936:	91 93       	st	Z+, r25
    1938:	22 50       	subi	r18, 0x02	; 2
    193a:	31 09       	sbc	r19, r1
    193c:	39 83       	std	Y+1, r19	; 0x01
    193e:	28 83       	st	Y, r18
    1940:	3a c0       	rjmp	.+116    	; 0x19b6 <malloc+0x128>
    1942:	20 91 80 01 	lds	r18, 0x0180
    1946:	30 91 81 01 	lds	r19, 0x0181
    194a:	23 2b       	or	r18, r19
    194c:	41 f4       	brne	.+16     	; 0x195e <malloc+0xd0>
    194e:	20 91 02 01 	lds	r18, 0x0102
    1952:	30 91 03 01 	lds	r19, 0x0103
    1956:	30 93 81 01 	sts	0x0181, r19
    195a:	20 93 80 01 	sts	0x0180, r18
    195e:	20 91 00 01 	lds	r18, 0x0100
    1962:	30 91 01 01 	lds	r19, 0x0101
    1966:	21 15       	cp	r18, r1
    1968:	31 05       	cpc	r19, r1
    196a:	41 f4       	brne	.+16     	; 0x197c <malloc+0xee>
    196c:	2d b7       	in	r18, 0x3d	; 61
    196e:	3e b7       	in	r19, 0x3e	; 62
    1970:	40 91 04 01 	lds	r20, 0x0104
    1974:	50 91 05 01 	lds	r21, 0x0105
    1978:	24 1b       	sub	r18, r20
    197a:	35 0b       	sbc	r19, r21
    197c:	e0 91 80 01 	lds	r30, 0x0180
    1980:	f0 91 81 01 	lds	r31, 0x0181
    1984:	e2 17       	cp	r30, r18
    1986:	f3 07       	cpc	r31, r19
    1988:	a0 f4       	brcc	.+40     	; 0x19b2 <malloc+0x124>
    198a:	2e 1b       	sub	r18, r30
    198c:	3f 0b       	sbc	r19, r31
    198e:	28 17       	cp	r18, r24
    1990:	39 07       	cpc	r19, r25
    1992:	78 f0       	brcs	.+30     	; 0x19b2 <malloc+0x124>
    1994:	ac 01       	movw	r20, r24
    1996:	4e 5f       	subi	r20, 0xFE	; 254
    1998:	5f 4f       	sbci	r21, 0xFF	; 255
    199a:	24 17       	cp	r18, r20
    199c:	35 07       	cpc	r19, r21
    199e:	48 f0       	brcs	.+18     	; 0x19b2 <malloc+0x124>
    19a0:	4e 0f       	add	r20, r30
    19a2:	5f 1f       	adc	r21, r31
    19a4:	50 93 81 01 	sts	0x0181, r21
    19a8:	40 93 80 01 	sts	0x0180, r20
    19ac:	81 93       	st	Z+, r24
    19ae:	91 93       	st	Z+, r25
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <malloc+0x128>
    19b2:	e0 e0       	ldi	r30, 0x00	; 0
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	cf 01       	movw	r24, r30
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	08 95       	ret

000019be <free>:
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <free+0xa>
    19c6:	87 c0       	rjmp	.+270    	; 0x1ad6 <free+0x118>
    19c8:	fc 01       	movw	r30, r24
    19ca:	32 97       	sbiw	r30, 0x02	; 2
    19cc:	13 82       	std	Z+3, r1	; 0x03
    19ce:	12 82       	std	Z+2, r1	; 0x02
    19d0:	c0 91 82 01 	lds	r28, 0x0182
    19d4:	d0 91 83 01 	lds	r29, 0x0183
    19d8:	20 97       	sbiw	r28, 0x00	; 0
    19da:	81 f4       	brne	.+32     	; 0x19fc <free+0x3e>
    19dc:	20 81       	ld	r18, Z
    19de:	31 81       	ldd	r19, Z+1	; 0x01
    19e0:	28 0f       	add	r18, r24
    19e2:	39 1f       	adc	r19, r25
    19e4:	80 91 80 01 	lds	r24, 0x0180
    19e8:	90 91 81 01 	lds	r25, 0x0181
    19ec:	82 17       	cp	r24, r18
    19ee:	93 07       	cpc	r25, r19
    19f0:	79 f5       	brne	.+94     	; 0x1a50 <free+0x92>
    19f2:	f0 93 81 01 	sts	0x0181, r31
    19f6:	e0 93 80 01 	sts	0x0180, r30
    19fa:	6d c0       	rjmp	.+218    	; 0x1ad6 <free+0x118>
    19fc:	de 01       	movw	r26, r28
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	ae 17       	cp	r26, r30
    1a04:	bf 07       	cpc	r27, r31
    1a06:	50 f4       	brcc	.+20     	; 0x1a1c <free+0x5e>
    1a08:	12 96       	adiw	r26, 0x02	; 2
    1a0a:	4d 91       	ld	r20, X+
    1a0c:	5c 91       	ld	r21, X
    1a0e:	13 97       	sbiw	r26, 0x03	; 3
    1a10:	9d 01       	movw	r18, r26
    1a12:	41 15       	cp	r20, r1
    1a14:	51 05       	cpc	r21, r1
    1a16:	09 f1       	breq	.+66     	; 0x1a5a <free+0x9c>
    1a18:	da 01       	movw	r26, r20
    1a1a:	f3 cf       	rjmp	.-26     	; 0x1a02 <free+0x44>
    1a1c:	b3 83       	std	Z+3, r27	; 0x03
    1a1e:	a2 83       	std	Z+2, r26	; 0x02
    1a20:	40 81       	ld	r20, Z
    1a22:	51 81       	ldd	r21, Z+1	; 0x01
    1a24:	84 0f       	add	r24, r20
    1a26:	95 1f       	adc	r25, r21
    1a28:	8a 17       	cp	r24, r26
    1a2a:	9b 07       	cpc	r25, r27
    1a2c:	71 f4       	brne	.+28     	; 0x1a4a <free+0x8c>
    1a2e:	8d 91       	ld	r24, X+
    1a30:	9c 91       	ld	r25, X
    1a32:	11 97       	sbiw	r26, 0x01	; 1
    1a34:	84 0f       	add	r24, r20
    1a36:	95 1f       	adc	r25, r21
    1a38:	02 96       	adiw	r24, 0x02	; 2
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	12 96       	adiw	r26, 0x02	; 2
    1a40:	8d 91       	ld	r24, X+
    1a42:	9c 91       	ld	r25, X
    1a44:	13 97       	sbiw	r26, 0x03	; 3
    1a46:	93 83       	std	Z+3, r25	; 0x03
    1a48:	82 83       	std	Z+2, r24	; 0x02
    1a4a:	21 15       	cp	r18, r1
    1a4c:	31 05       	cpc	r19, r1
    1a4e:	29 f4       	brne	.+10     	; 0x1a5a <free+0x9c>
    1a50:	f0 93 83 01 	sts	0x0183, r31
    1a54:	e0 93 82 01 	sts	0x0182, r30
    1a58:	3e c0       	rjmp	.+124    	; 0x1ad6 <free+0x118>
    1a5a:	d9 01       	movw	r26, r18
    1a5c:	13 96       	adiw	r26, 0x03	; 3
    1a5e:	fc 93       	st	X, r31
    1a60:	ee 93       	st	-X, r30
    1a62:	12 97       	sbiw	r26, 0x02	; 2
    1a64:	4d 91       	ld	r20, X+
    1a66:	5d 91       	ld	r21, X+
    1a68:	a4 0f       	add	r26, r20
    1a6a:	b5 1f       	adc	r27, r21
    1a6c:	ea 17       	cp	r30, r26
    1a6e:	fb 07       	cpc	r31, r27
    1a70:	79 f4       	brne	.+30     	; 0x1a90 <free+0xd2>
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	84 0f       	add	r24, r20
    1a78:	95 1f       	adc	r25, r21
    1a7a:	02 96       	adiw	r24, 0x02	; 2
    1a7c:	d9 01       	movw	r26, r18
    1a7e:	11 96       	adiw	r26, 0x01	; 1
    1a80:	9c 93       	st	X, r25
    1a82:	8e 93       	st	-X, r24
    1a84:	82 81       	ldd	r24, Z+2	; 0x02
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	13 96       	adiw	r26, 0x03	; 3
    1a8a:	9c 93       	st	X, r25
    1a8c:	8e 93       	st	-X, r24
    1a8e:	12 97       	sbiw	r26, 0x02	; 2
    1a90:	e0 e0       	ldi	r30, 0x00	; 0
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	9b 81       	ldd	r25, Y+3	; 0x03
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	19 f0       	breq	.+6      	; 0x1aa2 <free+0xe4>
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	ec 01       	movw	r28, r24
    1aa0:	f9 cf       	rjmp	.-14     	; 0x1a94 <free+0xd6>
    1aa2:	ce 01       	movw	r24, r28
    1aa4:	02 96       	adiw	r24, 0x02	; 2
    1aa6:	28 81       	ld	r18, Y
    1aa8:	39 81       	ldd	r19, Y+1	; 0x01
    1aaa:	82 0f       	add	r24, r18
    1aac:	93 1f       	adc	r25, r19
    1aae:	20 91 80 01 	lds	r18, 0x0180
    1ab2:	30 91 81 01 	lds	r19, 0x0181
    1ab6:	28 17       	cp	r18, r24
    1ab8:	39 07       	cpc	r19, r25
    1aba:	69 f4       	brne	.+26     	; 0x1ad6 <free+0x118>
    1abc:	30 97       	sbiw	r30, 0x00	; 0
    1abe:	29 f4       	brne	.+10     	; 0x1aca <free+0x10c>
    1ac0:	10 92 83 01 	sts	0x0183, r1
    1ac4:	10 92 82 01 	sts	0x0182, r1
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <free+0x110>
    1aca:	13 82       	std	Z+3, r1	; 0x03
    1acc:	12 82       	std	Z+2, r1	; 0x02
    1ace:	d0 93 81 01 	sts	0x0181, r29
    1ad2:	c0 93 80 01 	sts	0x0180, r28
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	08 95       	ret

00001adc <strnlen_P>:
    1adc:	fc 01       	movw	r30, r24
    1ade:	05 90       	lpm	r0, Z+
    1ae0:	61 50       	subi	r22, 0x01	; 1
    1ae2:	70 40       	sbci	r23, 0x00	; 0
    1ae4:	01 10       	cpse	r0, r1
    1ae6:	d8 f7       	brcc	.-10     	; 0x1ade <strnlen_P+0x2>
    1ae8:	80 95       	com	r24
    1aea:	90 95       	com	r25
    1aec:	8e 0f       	add	r24, r30
    1aee:	9f 1f       	adc	r25, r31
    1af0:	08 95       	ret

00001af2 <memset>:
    1af2:	dc 01       	movw	r26, r24
    1af4:	01 c0       	rjmp	.+2      	; 0x1af8 <memset+0x6>
    1af6:	6d 93       	st	X+, r22
    1af8:	41 50       	subi	r20, 0x01	; 1
    1afa:	50 40       	sbci	r21, 0x00	; 0
    1afc:	e0 f7       	brcc	.-8      	; 0x1af6 <memset+0x4>
    1afe:	08 95       	ret

00001b00 <strnlen>:
    1b00:	fc 01       	movw	r30, r24
    1b02:	61 50       	subi	r22, 0x01	; 1
    1b04:	70 40       	sbci	r23, 0x00	; 0
    1b06:	01 90       	ld	r0, Z+
    1b08:	01 10       	cpse	r0, r1
    1b0a:	d8 f7       	brcc	.-10     	; 0x1b02 <strnlen+0x2>
    1b0c:	80 95       	com	r24
    1b0e:	90 95       	com	r25
    1b10:	8e 0f       	add	r24, r30
    1b12:	9f 1f       	adc	r25, r31
    1b14:	08 95       	ret

00001b16 <fputc>:
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	18 2f       	mov	r17, r24
    1b20:	09 2f       	mov	r16, r25
    1b22:	eb 01       	movw	r28, r22
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	81 fd       	sbrc	r24, 1
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <fputc+0x1a>
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
    1b2c:	9f ef       	ldi	r25, 0xFF	; 255
    1b2e:	20 c0       	rjmp	.+64     	; 0x1b70 <fputc+0x5a>
    1b30:	82 ff       	sbrs	r24, 2
    1b32:	10 c0       	rjmp	.+32     	; 0x1b54 <fputc+0x3e>
    1b34:	4e 81       	ldd	r20, Y+6	; 0x06
    1b36:	5f 81       	ldd	r21, Y+7	; 0x07
    1b38:	2c 81       	ldd	r18, Y+4	; 0x04
    1b3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3c:	42 17       	cp	r20, r18
    1b3e:	53 07       	cpc	r21, r19
    1b40:	7c f4       	brge	.+30     	; 0x1b60 <fputc+0x4a>
    1b42:	e8 81       	ld	r30, Y
    1b44:	f9 81       	ldd	r31, Y+1	; 0x01
    1b46:	9f 01       	movw	r18, r30
    1b48:	2f 5f       	subi	r18, 0xFF	; 255
    1b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b4c:	39 83       	std	Y+1, r19	; 0x01
    1b4e:	28 83       	st	Y, r18
    1b50:	10 83       	st	Z, r17
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <fputc+0x4a>
    1b54:	e8 85       	ldd	r30, Y+8	; 0x08
    1b56:	f9 85       	ldd	r31, Y+9	; 0x09
    1b58:	81 2f       	mov	r24, r17
    1b5a:	09 95       	icall
    1b5c:	89 2b       	or	r24, r25
    1b5e:	29 f7       	brne	.-54     	; 0x1b2a <fputc+0x14>
    1b60:	2e 81       	ldd	r18, Y+6	; 0x06
    1b62:	3f 81       	ldd	r19, Y+7	; 0x07
    1b64:	2f 5f       	subi	r18, 0xFF	; 255
    1b66:	3f 4f       	sbci	r19, 0xFF	; 255
    1b68:	3f 83       	std	Y+7, r19	; 0x07
    1b6a:	2e 83       	std	Y+6, r18	; 0x06
    1b6c:	81 2f       	mov	r24, r17
    1b6e:	90 2f       	mov	r25, r16
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <__ultoa_invert>:
    1b7a:	fa 01       	movw	r30, r20
    1b7c:	aa 27       	eor	r26, r26
    1b7e:	28 30       	cpi	r18, 0x08	; 8
    1b80:	51 f1       	breq	.+84     	; 0x1bd6 <__ultoa_invert+0x5c>
    1b82:	20 31       	cpi	r18, 0x10	; 16
    1b84:	81 f1       	breq	.+96     	; 0x1be6 <__ultoa_invert+0x6c>
    1b86:	e8 94       	clt
    1b88:	6f 93       	push	r22
    1b8a:	6e 7f       	andi	r22, 0xFE	; 254
    1b8c:	6e 5f       	subi	r22, 0xFE	; 254
    1b8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b90:	8f 4f       	sbci	r24, 0xFF	; 255
    1b92:	9f 4f       	sbci	r25, 0xFF	; 255
    1b94:	af 4f       	sbci	r26, 0xFF	; 255
    1b96:	b1 e0       	ldi	r27, 0x01	; 1
    1b98:	3e d0       	rcall	.+124    	; 0x1c16 <__ultoa_invert+0x9c>
    1b9a:	b4 e0       	ldi	r27, 0x04	; 4
    1b9c:	3c d0       	rcall	.+120    	; 0x1c16 <__ultoa_invert+0x9c>
    1b9e:	67 0f       	add	r22, r23
    1ba0:	78 1f       	adc	r23, r24
    1ba2:	89 1f       	adc	r24, r25
    1ba4:	9a 1f       	adc	r25, r26
    1ba6:	a1 1d       	adc	r26, r1
    1ba8:	68 0f       	add	r22, r24
    1baa:	79 1f       	adc	r23, r25
    1bac:	8a 1f       	adc	r24, r26
    1bae:	91 1d       	adc	r25, r1
    1bb0:	a1 1d       	adc	r26, r1
    1bb2:	6a 0f       	add	r22, r26
    1bb4:	71 1d       	adc	r23, r1
    1bb6:	81 1d       	adc	r24, r1
    1bb8:	91 1d       	adc	r25, r1
    1bba:	a1 1d       	adc	r26, r1
    1bbc:	20 d0       	rcall	.+64     	; 0x1bfe <__ultoa_invert+0x84>
    1bbe:	09 f4       	brne	.+2      	; 0x1bc2 <__ultoa_invert+0x48>
    1bc0:	68 94       	set
    1bc2:	3f 91       	pop	r19
    1bc4:	2a e0       	ldi	r18, 0x0A	; 10
    1bc6:	26 9f       	mul	r18, r22
    1bc8:	11 24       	eor	r1, r1
    1bca:	30 19       	sub	r19, r0
    1bcc:	30 5d       	subi	r19, 0xD0	; 208
    1bce:	31 93       	st	Z+, r19
    1bd0:	de f6       	brtc	.-74     	; 0x1b88 <__ultoa_invert+0xe>
    1bd2:	cf 01       	movw	r24, r30
    1bd4:	08 95       	ret
    1bd6:	46 2f       	mov	r20, r22
    1bd8:	47 70       	andi	r20, 0x07	; 7
    1bda:	40 5d       	subi	r20, 0xD0	; 208
    1bdc:	41 93       	st	Z+, r20
    1bde:	b3 e0       	ldi	r27, 0x03	; 3
    1be0:	0f d0       	rcall	.+30     	; 0x1c00 <__ultoa_invert+0x86>
    1be2:	c9 f7       	brne	.-14     	; 0x1bd6 <__ultoa_invert+0x5c>
    1be4:	f6 cf       	rjmp	.-20     	; 0x1bd2 <__ultoa_invert+0x58>
    1be6:	46 2f       	mov	r20, r22
    1be8:	4f 70       	andi	r20, 0x0F	; 15
    1bea:	40 5d       	subi	r20, 0xD0	; 208
    1bec:	4a 33       	cpi	r20, 0x3A	; 58
    1bee:	18 f0       	brcs	.+6      	; 0x1bf6 <__ultoa_invert+0x7c>
    1bf0:	49 5d       	subi	r20, 0xD9	; 217
    1bf2:	31 fd       	sbrc	r19, 1
    1bf4:	40 52       	subi	r20, 0x20	; 32
    1bf6:	41 93       	st	Z+, r20
    1bf8:	02 d0       	rcall	.+4      	; 0x1bfe <__ultoa_invert+0x84>
    1bfa:	a9 f7       	brne	.-22     	; 0x1be6 <__ultoa_invert+0x6c>
    1bfc:	ea cf       	rjmp	.-44     	; 0x1bd2 <__ultoa_invert+0x58>
    1bfe:	b4 e0       	ldi	r27, 0x04	; 4
    1c00:	a6 95       	lsr	r26
    1c02:	97 95       	ror	r25
    1c04:	87 95       	ror	r24
    1c06:	77 95       	ror	r23
    1c08:	67 95       	ror	r22
    1c0a:	ba 95       	dec	r27
    1c0c:	c9 f7       	brne	.-14     	; 0x1c00 <__ultoa_invert+0x86>
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	61 05       	cpc	r22, r1
    1c12:	71 05       	cpc	r23, r1
    1c14:	08 95       	ret
    1c16:	9b 01       	movw	r18, r22
    1c18:	ac 01       	movw	r20, r24
    1c1a:	0a 2e       	mov	r0, r26
    1c1c:	06 94       	lsr	r0
    1c1e:	57 95       	ror	r21
    1c20:	47 95       	ror	r20
    1c22:	37 95       	ror	r19
    1c24:	27 95       	ror	r18
    1c26:	ba 95       	dec	r27
    1c28:	c9 f7       	brne	.-14     	; 0x1c1c <__ultoa_invert+0xa2>
    1c2a:	62 0f       	add	r22, r18
    1c2c:	73 1f       	adc	r23, r19
    1c2e:	84 1f       	adc	r24, r20
    1c30:	95 1f       	adc	r25, r21
    1c32:	a0 1d       	adc	r26, r0
    1c34:	08 95       	ret

00001c36 <__prologue_saves__>:
    1c36:	2f 92       	push	r2
    1c38:	3f 92       	push	r3
    1c3a:	4f 92       	push	r4
    1c3c:	5f 92       	push	r5
    1c3e:	6f 92       	push	r6
    1c40:	7f 92       	push	r7
    1c42:	8f 92       	push	r8
    1c44:	9f 92       	push	r9
    1c46:	af 92       	push	r10
    1c48:	bf 92       	push	r11
    1c4a:	cf 92       	push	r12
    1c4c:	df 92       	push	r13
    1c4e:	ef 92       	push	r14
    1c50:	ff 92       	push	r15
    1c52:	0f 93       	push	r16
    1c54:	1f 93       	push	r17
    1c56:	cf 93       	push	r28
    1c58:	df 93       	push	r29
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	ca 1b       	sub	r28, r26
    1c60:	db 0b       	sbc	r29, r27
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	f8 94       	cli
    1c66:	de bf       	out	0x3e, r29	; 62
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	cd bf       	out	0x3d, r28	; 61
    1c6c:	09 94       	ijmp

00001c6e <__epilogue_restores__>:
    1c6e:	2a 88       	ldd	r2, Y+18	; 0x12
    1c70:	39 88       	ldd	r3, Y+17	; 0x11
    1c72:	48 88       	ldd	r4, Y+16	; 0x10
    1c74:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c76:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c78:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c7a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c7c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c7e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c80:	b9 84       	ldd	r11, Y+9	; 0x09
    1c82:	c8 84       	ldd	r12, Y+8	; 0x08
    1c84:	df 80       	ldd	r13, Y+7	; 0x07
    1c86:	ee 80       	ldd	r14, Y+6	; 0x06
    1c88:	fd 80       	ldd	r15, Y+5	; 0x05
    1c8a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c8c:	1b 81       	ldd	r17, Y+3	; 0x03
    1c8e:	aa 81       	ldd	r26, Y+2	; 0x02
    1c90:	b9 81       	ldd	r27, Y+1	; 0x01
    1c92:	ce 0f       	add	r28, r30
    1c94:	d1 1d       	adc	r29, r1
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
    1ca0:	ed 01       	movw	r28, r26
    1ca2:	08 95       	ret

00001ca4 <_exit>:
    1ca4:	f8 94       	cli

00001ca6 <__stop_program>:
    1ca6:	ff cf       	rjmp	.-2      	; 0x1ca6 <__stop_program>
