
ByggernBellLund.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000d84  00000e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080012c  0080012c  00000e44  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c95  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c7  00000000  00000000  00002d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e7  00000000  00000000  000036fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005bc  00000000  00000000  000040e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000535  00000000  00000000  000046a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016af  00000000  00000000  00004bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00006284  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 cf 01 	jmp	0x39e	; 0x39e <__vector_14>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e8       	ldi	r30, 0x84	; 132
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 32       	cpi	r26, 0x2C	; 44
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ac e2       	ldi	r26, 0x2C	; 44
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 33       	cpi	r26, 0x36	; 54
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 c0 06 	jmp	0xd80	; 0xd80 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
  ae:	80 b7       	in	r24, 0x30	; 48
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
  b4:	85 b7       	in	r24, 0x35	; 53
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	85 bf       	out	0x35, r24	; 53
  ba:	08 95       	ret

000000bc <main>:
#include "menu.h"
#include "draw.h"
#include "CAN_driver.h"

int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	66 97       	sbiw	r28, 0x16	; 22
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
	//DDRA = 0xFF;
	uartInit(9600);
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	95 e2       	ldi	r25, 0x25	; 37
  d4:	0e 94 0b 02 	call	0x416	; 0x416 <uartInit>
	bus_init();
  d8:	0e 94 57 00 	call	0xae	; 0xae <bus_init>
	oled_init();
  dc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <oled_init>
	//oled_sram_init();
	CAN_init();
  e0:	0e 94 b7 00 	call	0x16e	; 0x16e <CAN_init>
		//oled_sram_write_string(0, "Hello", 4);
		//flush_sram(0);
		//_delay_ms(1000);
		
		//menuSystem();
		printf("Hello \n\r");
  e4:	0f 2e       	mov	r0, r31
  e6:	f6 e0       	ldi	r31, 0x06	; 6
  e8:	cf 2e       	mov	r12, r31
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	df 2e       	mov	r13, r31
  ee:	f0 2d       	mov	r31, r0
		Message m;
		m.id = 0b00001;
  f0:	aa 24       	eor	r10, r10
  f2:	a3 94       	inc	r10
  f4:	b1 2c       	mov	r11, r1
		m.data[0] = 'h';
  f6:	0f 2e       	mov	r0, r31
  f8:	f8 e6       	ldi	r31, 0x68	; 104
  fa:	8f 2e       	mov	r8, r31
  fc:	f0 2d       	mov	r31, r0
		m.length = 4;
  fe:	68 94       	set
 100:	99 24       	eor	r9, r9
 102:	92 f8       	bld	r9, 2
		
		CAN_transmit(&m);
		printf("message: %c \n\r", m.data[0]);
 104:	0f 2e       	mov	r0, r31
 106:	ff e0       	ldi	r31, 0x0F	; 15
 108:	ef 2e       	mov	r14, r31
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	ff 2e       	mov	r15, r31
 10e:	f0 2d       	mov	r31, r0
		
		Message answer;
		CAN_receive(&answer);
		printf("answer: %c \n\r", answer.data[0]);
 110:	0e e1       	ldi	r16, 0x1E	; 30
 112:	11 e0       	ldi	r17, 0x01	; 1
		//oled_sram_write_string(0, "Hello", 4);
		//flush_sram(0);
		//_delay_ms(1000);
		
		//menuSystem();
		printf("Hello \n\r");
 114:	df 92       	push	r13
 116:	cf 92       	push	r12
 118:	0e 94 da 03 	call	0x7b4	; 0x7b4 <printf>
		Message m;
		m.id = 0b00001;
 11c:	bd 86       	std	Y+13, r11	; 0x0d
 11e:	ac 86       	std	Y+12, r10	; 0x0c
		m.data[0] = 'h';
 120:	8f 86       	std	Y+15, r8	; 0x0f
		m.length = 4;
 122:	9e 86       	std	Y+14, r9	; 0x0e
		
		CAN_transmit(&m);
 124:	ce 01       	movw	r24, r28
 126:	0c 96       	adiw	r24, 0x0c	; 12
 128:	0e 94 c0 00 	call	0x180	; 0x180 <CAN_transmit>
		printf("message: %c \n\r", m.data[0]);
 12c:	8f 85       	ldd	r24, Y+15	; 0x0f
 12e:	1f 92       	push	r1
 130:	8f 93       	push	r24
 132:	ff 92       	push	r15
 134:	ef 92       	push	r14
 136:	0e 94 da 03 	call	0x7b4	; 0x7b4 <printf>
		
		Message answer;
		CAN_receive(&answer);
 13a:	ce 01       	movw	r24, r28
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <CAN_receive>
		printf("answer: %c \n\r", answer.data[0]);
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	1f 92       	push	r1
 146:	8f 93       	push	r24
 148:	1f 93       	push	r17
 14a:	0f 93       	push	r16
 14c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	2f ef       	ldi	r18, 0xFF	; 255
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	9e e0       	ldi	r25, 0x0E	; 14
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <main+0x9a>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0xa4>
 160:	00 00       	nop
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	de bf       	out	0x3e, r29	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	cd bf       	out	0x3d, r28	; 61
 16c:	d3 cf       	rjmp	.-90     	; 0x114 <main+0x58>

0000016e <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"
#include "MCP2515.h"

void CAN_init(){
	MCP_init();
 16e:	0e 94 19 01 	call	0x232	; 0x232 <MCP_init>
	//Enter config mode
	MCP_reset();
 172:	0e 94 22 01 	call	0x244	; 0x244 <MCP_reset>
	//set loopback mode on CANCTRL
	MCP_write(MCP_CANCTRL, 0b01000000);
 176:	60 e4       	ldi	r22, 0x40	; 64
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	0e 94 41 01 	call	0x282	; 0x282 <MCP_write>
 17e:	08 95       	ret

00000180 <CAN_transmit>:
}

void CAN_transmit(Message *m){
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	7c 01       	movw	r14, r24
	//Write id to register
	MCP_write(MCP_TXB0SIDL,m->id);
 18e:	fc 01       	movw	r30, r24
 190:	60 81       	ld	r22, Z
 192:	82 e3       	ldi	r24, 0x32	; 50
 194:	0e 94 41 01 	call	0x282	; 0x282 <MCP_write>
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
 198:	f7 01       	movw	r30, r14
 19a:	62 81       	ldd	r22, Z+2	; 0x02
 19c:	85 e3       	ldi	r24, 0x35	; 53
 19e:	0e 94 41 01 	call	0x282	; 0x282 <MCP_write>
	//Write data to register
	for (int i = 0; i < m->length; i++){
 1a2:	f7 01       	movw	r30, r14
 1a4:	82 81       	ldd	r24, Z+2	; 0x02
 1a6:	88 23       	and	r24, r24
 1a8:	91 f0       	breq	.+36     	; 0x1ce <CAN_transmit+0x4e>
 1aa:	87 01       	movw	r16, r14
 1ac:	0d 5f       	subi	r16, 0xFD	; 253
 1ae:	1f 4f       	sbci	r17, 0xFF	; 255
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0D0, m->data[i]);
 1b4:	f8 01       	movw	r30, r16
 1b6:	61 91       	ld	r22, Z+
 1b8:	8f 01       	movw	r16, r30
 1ba:	86 e3       	ldi	r24, 0x36	; 54
 1bc:	0e 94 41 01 	call	0x282	; 0x282 <MCP_write>
	//Write id to register
	MCP_write(MCP_TXB0SIDL,m->id);
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (int i = 0; i < m->length; i++){
 1c0:	21 96       	adiw	r28, 0x01	; 1
 1c2:	f7 01       	movw	r30, r14
 1c4:	22 81       	ldd	r18, Z+2	; 0x02
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	c2 17       	cp	r28, r18
 1ca:	d3 07       	cpc	r29, r19
 1cc:	9c f3       	brlt	.-26     	; 0x1b4 <CAN_transmit+0x34>
		MCP_write(MCP_TXB0D0, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 57 01 	call	0x2ae	; 0x2ae <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	08 95       	ret

000001e2 <CAN_receive>:

void CAN_receive(Message *m){
 1e2:	ef 92       	push	r14
 1e4:	ff 92       	push	r15
 1e6:	0f 93       	push	r16
 1e8:	1f 93       	push	r17
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	7c 01       	movw	r14, r24
	m->length = MCP_read(MCP_RBB0DLC);
 1f0:	85 e6       	ldi	r24, 0x65	; 101
 1f2:	0e 94 2c 01 	call	0x258	; 0x258 <MCP_read>
 1f6:	f7 01       	movw	r30, r14
 1f8:	82 83       	std	Z+2, r24	; 0x02
	for(int i = 0; i < m->length; i++){
 1fa:	88 23       	and	r24, r24
 1fc:	99 f0       	breq	.+38     	; 0x224 <CAN_receive+0x42>
 1fe:	87 01       	movw	r16, r14
 200:	0d 5f       	subi	r16, 0xFD	; 253
 202:	1f 4f       	sbci	r17, 0xFF	; 255
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
		m->data[i] = MCP_read(MCP_RXB0D0 + i);
 208:	8c 2f       	mov	r24, r28
 20a:	8a 59       	subi	r24, 0x9A	; 154
 20c:	0e 94 2c 01 	call	0x258	; 0x258 <MCP_read>
 210:	f8 01       	movw	r30, r16
 212:	81 93       	st	Z+, r24
 214:	8f 01       	movw	r16, r30
	//set !TXnRTS low of transmit register
}

void CAN_receive(Message *m){
	m->length = MCP_read(MCP_RBB0DLC);
	for(int i = 0; i < m->length; i++){
 216:	21 96       	adiw	r28, 0x01	; 1
 218:	f7 01       	movw	r30, r14
 21a:	22 81       	ldd	r18, Z+2	; 0x02
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	c2 17       	cp	r28, r18
 220:	d3 07       	cpc	r29, r19
 222:	94 f3       	brlt	.-28     	; 0x208 <CAN_receive+0x26>
		m->data[i] = MCP_read(MCP_RXB0D0 + i);
	}
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	1f 91       	pop	r17
 22a:	0f 91       	pop	r16
 22c:	ff 90       	pop	r15
 22e:	ef 90       	pop	r14
 230:	08 95       	ret

00000232 <MCP_init>:
#include <avr/io.h>
#include "MCP_driver.h"
#include "SPI_driver.h"

void MCP_init(){
	SPI_init();
 232:	0e 94 f7 01 	call	0x3ee	; 0x3ee <SPI_init>
 236:	08 95       	ret

00000238 <toggle_cs>:
}

void toggle_cs(uint8_t i){
	if(i){
 238:	88 23       	and	r24, r24
 23a:	11 f0       	breq	.+4      	; 0x240 <toggle_cs+0x8>
		PORTB |= (1<<PB4);		
 23c:	c4 9a       	sbi	0x18, 4	; 24
 23e:	08 95       	ret
	}
	else{
		PORTB &= ~(1<<PB4);		
 240:	c4 98       	cbi	0x18, 4	; 24
 242:	08 95       	ret

00000244 <MCP_reset>:
	}
}

void MCP_reset(){
	toggle_cs(0);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	0e 94 1c 01 	call	0x238	; 0x238 <toggle_cs>
	SPI_transmit(0b11000000);
 24a:	80 ec       	ldi	r24, 0xC0	; 192
 24c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
	toggle_cs(1);
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 1c 01 	call	0x238	; 0x238 <toggle_cs>
 256:	08 95       	ret

00000258 <MCP_read>:
}

char MCP_read(uint8_t address){
 258:	cf 93       	push	r28
 25a:	c8 2f       	mov	r28, r24
	toggle_cs(0);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 1c 01 	call	0x238	; 0x238 <toggle_cs>
	SPI_transmit(0b00000011);
 262:	83 e0       	ldi	r24, 0x03	; 3
 264:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
	SPI_transmit(address);
 268:	8c 2f       	mov	r24, r28
 26a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
	char c = SPI_transmit('j'); //Send junk to recieve data
 26e:	8a e6       	ldi	r24, 0x6A	; 106
 270:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
 274:	c8 2f       	mov	r28, r24
	toggle_cs(1);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 1c 01 	call	0x238	; 0x238 <toggle_cs>
	return c;
}
 27c:	8c 2f       	mov	r24, r28
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <MCP_write>:

void MCP_read_rx(){
	return 0;
}

void MCP_write(uint8_t address, char data){
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	d8 2f       	mov	r29, r24
 288:	c6 2f       	mov	r28, r22
	toggle_cs(0);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 1c 01 	call	0x238	; 0x238 <toggle_cs>
	SPI_transmit(0b00000010);
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
	SPI_transmit(address);
 296:	8d 2f       	mov	r24, r29
 298:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
	SPI_transmit(data);
 29c:	8c 2f       	mov	r24, r28
 29e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
	toggle_cs(1);
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 1c 01 	call	0x238	; 0x238 <toggle_cs>
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	switch(buffer){
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	41 f0       	breq	.+16     	; 0x2c2 <MCP_rts+0x14>
 2b2:	18 f0       	brcs	.+6      	; 0x2ba <MCP_rts+0xc>
 2b4:	82 30       	cpi	r24, 0x02	; 2
 2b6:	49 f0       	breq	.+18     	; 0x2ca <MCP_rts+0x1c>
 2b8:	08 95       	ret
		case 0:
			SPI_transmit(0b10000001);
 2ba:	81 e8       	ldi	r24, 0x81	; 129
 2bc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
			break;
 2c0:	08 95       	ret
		case 1:
			SPI_transmit(0b10000010);
 2c2:	82 e8       	ldi	r24, 0x82	; 130
 2c4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
			break;
 2c8:	08 95       	ret
		case 2:
			SPI_transmit(0b10000100);
 2ca:	84 e8       	ldi	r24, 0x84	; 132
 2cc:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <SPI_transmit>
 2d0:	08 95       	ret

000002d2 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 2d2:	e0 e0       	ldi	r30, 0x00	; 0
 2d4:	f0 e1       	ldi	r31, 0x10	; 16
 2d6:	8e ea       	ldi	r24, 0xAE	; 174
 2d8:	80 83       	st	Z, r24
 2da:	81 ea       	ldi	r24, 0xA1	; 161
 2dc:	80 83       	st	Z, r24
 2de:	8a ed       	ldi	r24, 0xDA	; 218
 2e0:	80 83       	st	Z, r24
 2e2:	82 e1       	ldi	r24, 0x12	; 18
 2e4:	80 83       	st	Z, r24
 2e6:	88 ec       	ldi	r24, 0xC8	; 200
 2e8:	80 83       	st	Z, r24
 2ea:	88 ea       	ldi	r24, 0xA8	; 168
 2ec:	80 83       	st	Z, r24
 2ee:	8f e3       	ldi	r24, 0x3F	; 63
 2f0:	80 83       	st	Z, r24
 2f2:	85 ed       	ldi	r24, 0xD5	; 213
 2f4:	80 83       	st	Z, r24
 2f6:	80 e8       	ldi	r24, 0x80	; 128
 2f8:	80 83       	st	Z, r24
 2fa:	81 e8       	ldi	r24, 0x81	; 129
 2fc:	80 83       	st	Z, r24
 2fe:	80 e5       	ldi	r24, 0x50	; 80
 300:	80 83       	st	Z, r24
 302:	89 ed       	ldi	r24, 0xD9	; 217
 304:	80 83       	st	Z, r24
 306:	81 e2       	ldi	r24, 0x21	; 33
 308:	80 83       	st	Z, r24
 30a:	80 e2       	ldi	r24, 0x20	; 32
 30c:	80 83       	st	Z, r24
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	80 83       	st	Z, r24
 312:	8b ed       	ldi	r24, 0xDB	; 219
 314:	80 83       	st	Z, r24
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	80 83       	st	Z, r24
 31a:	8d ea       	ldi	r24, 0xAD	; 173
 31c:	80 83       	st	Z, r24
 31e:	10 82       	st	Z, r1
 320:	84 ea       	ldi	r24, 0xA4	; 164
 322:	80 83       	st	Z, r24
 324:	86 ea       	ldi	r24, 0xA6	; 166
 326:	80 83       	st	Z, r24
 328:	8f ea       	ldi	r24, 0xAF	; 175
 32a:	80 83       	st	Z, r24
 32c:	08 95       	ret

0000032e <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
 32e:	af 92       	push	r10
 330:	bf 92       	push	r11
 332:	cf 92       	push	r12
 334:	df 92       	push	r13
 336:	ef 92       	push	r14
 338:	ff 92       	push	r15
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
 344:	c0 e0       	ldi	r28, 0x00	; 0
 346:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
 348:	e1 2c       	mov	r14, r1
 34a:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 34c:	c1 2c       	mov	r12, r1
 34e:	68 94       	set
 350:	dd 24       	eor	r13, r13
 352:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
 354:	00 e0       	ldi	r16, 0x00	; 0
 356:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
 358:	ce 01       	movw	r24, r28
 35a:	9e 01       	movw	r18, r28
 35c:	2f 77       	andi	r18, 0x7F	; 127
 35e:	33 27       	eor	r19, r19
 360:	23 2b       	or	r18, r19
 362:	39 f4       	brne	.+14     	; 0x372 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
 364:	20 eb       	ldi	r18, 0xB0	; 176
 366:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 368:	f6 01       	movw	r30, r12
 36a:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
 36c:	ff ef       	ldi	r31, 0xFF	; 255
 36e:	ef 1a       	sub	r14, r31
 370:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
 372:	8a 0d       	add	r24, r10
 374:	9b 1d       	adc	r25, r11
 376:	0e 94 01 02 	call	0x402	; 0x402 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
 37a:	f8 01       	movw	r30, r16
 37c:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
 37e:	21 96       	adiw	r28, 0x01	; 1
 380:	c1 15       	cp	r28, r1
 382:	f4 e0       	ldi	r31, 0x04	; 4
 384:	df 07       	cpc	r29, r31
 386:	41 f7       	brne	.-48     	; 0x358 <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	cf 90       	pop	r12
 398:	bf 90       	pop	r11
 39a:	af 90       	pop	r10
 39c:	08 95       	ret

0000039e <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	2f 93       	push	r18
 3aa:	3f 93       	push	r19
 3ac:	4f 93       	push	r20
 3ae:	5f 93       	push	r21
 3b0:	6f 93       	push	r22
 3b2:	7f 93       	push	r23
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
 3b8:	af 93       	push	r26
 3ba:	bf 93       	push	r27
 3bc:	ef 93       	push	r30
 3be:	ff 93       	push	r31
	oled_sram_flush(0);
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e 94 97 01 	call	0x32e	; 0x32e <oled_sram_flush>
	TCNT1 = 0;
 3c8:	1d bc       	out	0x2d, r1	; 45
 3ca:	1c bc       	out	0x2c, r1	; 44
}
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	9f 91       	pop	r25
 3d6:	8f 91       	pop	r24
 3d8:	7f 91       	pop	r23
 3da:	6f 91       	pop	r22
 3dc:	5f 91       	pop	r21
 3de:	4f 91       	pop	r20
 3e0:	3f 91       	pop	r19
 3e2:	2f 91       	pop	r18
 3e4:	0f 90       	pop	r0
 3e6:	0f be       	out	0x3f, r0	; 63
 3e8:	0f 90       	pop	r0
 3ea:	1f 90       	pop	r1
 3ec:	18 95       	reti

000003ee <SPI_init>:
#include <avr/io.h>
#include <util/delay.h>

void SPI_init(){
	//Datadir: MOSI (== PB6) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<PB6)|(1<<PB7)|(1<<PB4);
 3ee:	80 ed       	ldi	r24, 0xD0	; 208
 3f0:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 3f2:	81 e5       	ldi	r24, 0x51	; 81
 3f4:	8d b9       	out	0x0d, r24	; 13
 3f6:	08 95       	ret

000003f8 <SPI_transmit>:
}
char SPI_transmit(char c){
	SPDR = c;
 3f8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 3fa:	77 9b       	sbis	0x0e, 7	; 14
 3fc:	fe cf       	rjmp	.-4      	; 0x3fa <SPI_transmit+0x2>
	return SPDR;
 3fe:	8f b1       	in	r24, 0x0f	; 15
}
 400:	08 95       	ret

00000402 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
 402:	98 5e       	subi	r25, 0xE8	; 232
 404:	fc 01       	movw	r30, r24
 406:	80 81       	ld	r24, Z
}
 408:	08 95       	ret

0000040a <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 40a:	5d 9b       	sbis	0x0b, 5	; 11
 40c:	fe cf       	rjmp	.-4      	; 0x40a <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
 40e:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	08 95       	ret

00000416 <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
 416:	9c 01       	movw	r18, r24
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	60 e0       	ldi	r22, 0x00	; 0
 41e:	70 eb       	ldi	r23, 0xB0	; 176
 420:	84 e0       	ldi	r24, 0x04	; 4
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 27 02 	call	0x44e	; 0x44e <__divmodsi4>
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 42c:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
 42e:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 430:	8a b1       	in	r24, 0x0a	; 10
 432:	88 61       	ori	r24, 0x18	; 24
 434:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
 436:	80 b5       	in	r24, 0x20	; 32
 438:	86 68       	ori	r24, 0x86	; 134
 43a:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	85 e0       	ldi	r24, 0x05	; 5
 442:	92 e0       	ldi	r25, 0x02	; 2
 444:	0e 94 8f 03 	call	0x71e	; 0x71e <fdevopen>
	
	return 0;
}
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	08 95       	ret

0000044e <__divmodsi4>:
 44e:	05 2e       	mov	r0, r21
 450:	97 fb       	bst	r25, 7
 452:	1e f4       	brtc	.+6      	; 0x45a <__divmodsi4+0xc>
 454:	00 94       	com	r0
 456:	0e 94 3e 02 	call	0x47c	; 0x47c <__negsi2>
 45a:	57 fd       	sbrc	r21, 7
 45c:	07 d0       	rcall	.+14     	; 0x46c <__divmodsi4_neg2>
 45e:	0e 94 46 02 	call	0x48c	; 0x48c <__udivmodsi4>
 462:	07 fc       	sbrc	r0, 7
 464:	03 d0       	rcall	.+6      	; 0x46c <__divmodsi4_neg2>
 466:	4e f4       	brtc	.+18     	; 0x47a <__divmodsi4_exit>
 468:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__negsi2>

0000046c <__divmodsi4_neg2>:
 46c:	50 95       	com	r21
 46e:	40 95       	com	r20
 470:	30 95       	com	r19
 472:	21 95       	neg	r18
 474:	3f 4f       	sbci	r19, 0xFF	; 255
 476:	4f 4f       	sbci	r20, 0xFF	; 255
 478:	5f 4f       	sbci	r21, 0xFF	; 255

0000047a <__divmodsi4_exit>:
 47a:	08 95       	ret

0000047c <__negsi2>:
 47c:	90 95       	com	r25
 47e:	80 95       	com	r24
 480:	70 95       	com	r23
 482:	61 95       	neg	r22
 484:	7f 4f       	sbci	r23, 0xFF	; 255
 486:	8f 4f       	sbci	r24, 0xFF	; 255
 488:	9f 4f       	sbci	r25, 0xFF	; 255
 48a:	08 95       	ret

0000048c <__udivmodsi4>:
 48c:	a1 e2       	ldi	r26, 0x21	; 33
 48e:	1a 2e       	mov	r1, r26
 490:	aa 1b       	sub	r26, r26
 492:	bb 1b       	sub	r27, r27
 494:	fd 01       	movw	r30, r26
 496:	0d c0       	rjmp	.+26     	; 0x4b2 <__udivmodsi4_ep>

00000498 <__udivmodsi4_loop>:
 498:	aa 1f       	adc	r26, r26
 49a:	bb 1f       	adc	r27, r27
 49c:	ee 1f       	adc	r30, r30
 49e:	ff 1f       	adc	r31, r31
 4a0:	a2 17       	cp	r26, r18
 4a2:	b3 07       	cpc	r27, r19
 4a4:	e4 07       	cpc	r30, r20
 4a6:	f5 07       	cpc	r31, r21
 4a8:	20 f0       	brcs	.+8      	; 0x4b2 <__udivmodsi4_ep>
 4aa:	a2 1b       	sub	r26, r18
 4ac:	b3 0b       	sbc	r27, r19
 4ae:	e4 0b       	sbc	r30, r20
 4b0:	f5 0b       	sbc	r31, r21

000004b2 <__udivmodsi4_ep>:
 4b2:	66 1f       	adc	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	1a 94       	dec	r1
 4bc:	69 f7       	brne	.-38     	; 0x498 <__udivmodsi4_loop>
 4be:	60 95       	com	r22
 4c0:	70 95       	com	r23
 4c2:	80 95       	com	r24
 4c4:	90 95       	com	r25
 4c6:	9b 01       	movw	r18, r22
 4c8:	ac 01       	movw	r20, r24
 4ca:	bd 01       	movw	r22, r26
 4cc:	cf 01       	movw	r24, r30
 4ce:	08 95       	ret

000004d0 <malloc>:
 4d0:	cf 93       	push	r28
 4d2:	df 93       	push	r29
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	91 05       	cpc	r25, r1
 4d8:	10 f4       	brcc	.+4      	; 0x4de <malloc+0xe>
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	e0 91 2e 01 	lds	r30, 0x012E
 4e2:	f0 91 2f 01 	lds	r31, 0x012F
 4e6:	20 e0       	ldi	r18, 0x00	; 0
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	a0 e0       	ldi	r26, 0x00	; 0
 4ec:	b0 e0       	ldi	r27, 0x00	; 0
 4ee:	30 97       	sbiw	r30, 0x00	; 0
 4f0:	39 f1       	breq	.+78     	; 0x540 <__stack+0x41>
 4f2:	40 81       	ld	r20, Z
 4f4:	51 81       	ldd	r21, Z+1	; 0x01
 4f6:	48 17       	cp	r20, r24
 4f8:	59 07       	cpc	r21, r25
 4fa:	b8 f0       	brcs	.+46     	; 0x52a <__stack+0x2b>
 4fc:	48 17       	cp	r20, r24
 4fe:	59 07       	cpc	r21, r25
 500:	71 f4       	brne	.+28     	; 0x51e <__stack+0x1f>
 502:	82 81       	ldd	r24, Z+2	; 0x02
 504:	93 81       	ldd	r25, Z+3	; 0x03
 506:	10 97       	sbiw	r26, 0x00	; 0
 508:	29 f0       	breq	.+10     	; 0x514 <__stack+0x15>
 50a:	13 96       	adiw	r26, 0x03	; 3
 50c:	9c 93       	st	X, r25
 50e:	8e 93       	st	-X, r24
 510:	12 97       	sbiw	r26, 0x02	; 2
 512:	2c c0       	rjmp	.+88     	; 0x56c <__stack+0x6d>
 514:	90 93 2f 01 	sts	0x012F, r25
 518:	80 93 2e 01 	sts	0x012E, r24
 51c:	27 c0       	rjmp	.+78     	; 0x56c <__stack+0x6d>
 51e:	21 15       	cp	r18, r1
 520:	31 05       	cpc	r19, r1
 522:	31 f0       	breq	.+12     	; 0x530 <__stack+0x31>
 524:	42 17       	cp	r20, r18
 526:	53 07       	cpc	r21, r19
 528:	18 f0       	brcs	.+6      	; 0x530 <__stack+0x31>
 52a:	a9 01       	movw	r20, r18
 52c:	db 01       	movw	r26, r22
 52e:	01 c0       	rjmp	.+2      	; 0x532 <__stack+0x33>
 530:	ef 01       	movw	r28, r30
 532:	9a 01       	movw	r18, r20
 534:	bd 01       	movw	r22, r26
 536:	df 01       	movw	r26, r30
 538:	02 80       	ldd	r0, Z+2	; 0x02
 53a:	f3 81       	ldd	r31, Z+3	; 0x03
 53c:	e0 2d       	mov	r30, r0
 53e:	d7 cf       	rjmp	.-82     	; 0x4ee <malloc+0x1e>
 540:	21 15       	cp	r18, r1
 542:	31 05       	cpc	r19, r1
 544:	f9 f0       	breq	.+62     	; 0x584 <__stack+0x85>
 546:	28 1b       	sub	r18, r24
 548:	39 0b       	sbc	r19, r25
 54a:	24 30       	cpi	r18, 0x04	; 4
 54c:	31 05       	cpc	r19, r1
 54e:	80 f4       	brcc	.+32     	; 0x570 <__stack+0x71>
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	9b 81       	ldd	r25, Y+3	; 0x03
 554:	61 15       	cp	r22, r1
 556:	71 05       	cpc	r23, r1
 558:	21 f0       	breq	.+8      	; 0x562 <__stack+0x63>
 55a:	fb 01       	movw	r30, r22
 55c:	93 83       	std	Z+3, r25	; 0x03
 55e:	82 83       	std	Z+2, r24	; 0x02
 560:	04 c0       	rjmp	.+8      	; 0x56a <__stack+0x6b>
 562:	90 93 2f 01 	sts	0x012F, r25
 566:	80 93 2e 01 	sts	0x012E, r24
 56a:	fe 01       	movw	r30, r28
 56c:	32 96       	adiw	r30, 0x02	; 2
 56e:	44 c0       	rjmp	.+136    	; 0x5f8 <__stack+0xf9>
 570:	fe 01       	movw	r30, r28
 572:	e2 0f       	add	r30, r18
 574:	f3 1f       	adc	r31, r19
 576:	81 93       	st	Z+, r24
 578:	91 93       	st	Z+, r25
 57a:	22 50       	subi	r18, 0x02	; 2
 57c:	31 09       	sbc	r19, r1
 57e:	39 83       	std	Y+1, r19	; 0x01
 580:	28 83       	st	Y, r18
 582:	3a c0       	rjmp	.+116    	; 0x5f8 <__stack+0xf9>
 584:	20 91 2c 01 	lds	r18, 0x012C
 588:	30 91 2d 01 	lds	r19, 0x012D
 58c:	23 2b       	or	r18, r19
 58e:	41 f4       	brne	.+16     	; 0x5a0 <__stack+0xa1>
 590:	20 91 02 01 	lds	r18, 0x0102
 594:	30 91 03 01 	lds	r19, 0x0103
 598:	30 93 2d 01 	sts	0x012D, r19
 59c:	20 93 2c 01 	sts	0x012C, r18
 5a0:	20 91 00 01 	lds	r18, 0x0100
 5a4:	30 91 01 01 	lds	r19, 0x0101
 5a8:	21 15       	cp	r18, r1
 5aa:	31 05       	cpc	r19, r1
 5ac:	41 f4       	brne	.+16     	; 0x5be <__stack+0xbf>
 5ae:	2d b7       	in	r18, 0x3d	; 61
 5b0:	3e b7       	in	r19, 0x3e	; 62
 5b2:	40 91 04 01 	lds	r20, 0x0104
 5b6:	50 91 05 01 	lds	r21, 0x0105
 5ba:	24 1b       	sub	r18, r20
 5bc:	35 0b       	sbc	r19, r21
 5be:	e0 91 2c 01 	lds	r30, 0x012C
 5c2:	f0 91 2d 01 	lds	r31, 0x012D
 5c6:	e2 17       	cp	r30, r18
 5c8:	f3 07       	cpc	r31, r19
 5ca:	a0 f4       	brcc	.+40     	; 0x5f4 <__stack+0xf5>
 5cc:	2e 1b       	sub	r18, r30
 5ce:	3f 0b       	sbc	r19, r31
 5d0:	28 17       	cp	r18, r24
 5d2:	39 07       	cpc	r19, r25
 5d4:	78 f0       	brcs	.+30     	; 0x5f4 <__stack+0xf5>
 5d6:	ac 01       	movw	r20, r24
 5d8:	4e 5f       	subi	r20, 0xFE	; 254
 5da:	5f 4f       	sbci	r21, 0xFF	; 255
 5dc:	24 17       	cp	r18, r20
 5de:	35 07       	cpc	r19, r21
 5e0:	48 f0       	brcs	.+18     	; 0x5f4 <__stack+0xf5>
 5e2:	4e 0f       	add	r20, r30
 5e4:	5f 1f       	adc	r21, r31
 5e6:	50 93 2d 01 	sts	0x012D, r21
 5ea:	40 93 2c 01 	sts	0x012C, r20
 5ee:	81 93       	st	Z+, r24
 5f0:	91 93       	st	Z+, r25
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <__stack+0xf9>
 5f4:	e0 e0       	ldi	r30, 0x00	; 0
 5f6:	f0 e0       	ldi	r31, 0x00	; 0
 5f8:	cf 01       	movw	r24, r30
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <free>:
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	09 f4       	brne	.+2      	; 0x60a <free+0xa>
 608:	87 c0       	rjmp	.+270    	; 0x718 <free+0x118>
 60a:	fc 01       	movw	r30, r24
 60c:	32 97       	sbiw	r30, 0x02	; 2
 60e:	13 82       	std	Z+3, r1	; 0x03
 610:	12 82       	std	Z+2, r1	; 0x02
 612:	c0 91 2e 01 	lds	r28, 0x012E
 616:	d0 91 2f 01 	lds	r29, 0x012F
 61a:	20 97       	sbiw	r28, 0x00	; 0
 61c:	81 f4       	brne	.+32     	; 0x63e <free+0x3e>
 61e:	20 81       	ld	r18, Z
 620:	31 81       	ldd	r19, Z+1	; 0x01
 622:	28 0f       	add	r18, r24
 624:	39 1f       	adc	r19, r25
 626:	80 91 2c 01 	lds	r24, 0x012C
 62a:	90 91 2d 01 	lds	r25, 0x012D
 62e:	82 17       	cp	r24, r18
 630:	93 07       	cpc	r25, r19
 632:	79 f5       	brne	.+94     	; 0x692 <free+0x92>
 634:	f0 93 2d 01 	sts	0x012D, r31
 638:	e0 93 2c 01 	sts	0x012C, r30
 63c:	6d c0       	rjmp	.+218    	; 0x718 <free+0x118>
 63e:	de 01       	movw	r26, r28
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	ae 17       	cp	r26, r30
 646:	bf 07       	cpc	r27, r31
 648:	50 f4       	brcc	.+20     	; 0x65e <free+0x5e>
 64a:	12 96       	adiw	r26, 0x02	; 2
 64c:	4d 91       	ld	r20, X+
 64e:	5c 91       	ld	r21, X
 650:	13 97       	sbiw	r26, 0x03	; 3
 652:	9d 01       	movw	r18, r26
 654:	41 15       	cp	r20, r1
 656:	51 05       	cpc	r21, r1
 658:	09 f1       	breq	.+66     	; 0x69c <free+0x9c>
 65a:	da 01       	movw	r26, r20
 65c:	f3 cf       	rjmp	.-26     	; 0x644 <free+0x44>
 65e:	b3 83       	std	Z+3, r27	; 0x03
 660:	a2 83       	std	Z+2, r26	; 0x02
 662:	40 81       	ld	r20, Z
 664:	51 81       	ldd	r21, Z+1	; 0x01
 666:	84 0f       	add	r24, r20
 668:	95 1f       	adc	r25, r21
 66a:	8a 17       	cp	r24, r26
 66c:	9b 07       	cpc	r25, r27
 66e:	71 f4       	brne	.+28     	; 0x68c <free+0x8c>
 670:	8d 91       	ld	r24, X+
 672:	9c 91       	ld	r25, X
 674:	11 97       	sbiw	r26, 0x01	; 1
 676:	84 0f       	add	r24, r20
 678:	95 1f       	adc	r25, r21
 67a:	02 96       	adiw	r24, 0x02	; 2
 67c:	91 83       	std	Z+1, r25	; 0x01
 67e:	80 83       	st	Z, r24
 680:	12 96       	adiw	r26, 0x02	; 2
 682:	8d 91       	ld	r24, X+
 684:	9c 91       	ld	r25, X
 686:	13 97       	sbiw	r26, 0x03	; 3
 688:	93 83       	std	Z+3, r25	; 0x03
 68a:	82 83       	std	Z+2, r24	; 0x02
 68c:	21 15       	cp	r18, r1
 68e:	31 05       	cpc	r19, r1
 690:	29 f4       	brne	.+10     	; 0x69c <free+0x9c>
 692:	f0 93 2f 01 	sts	0x012F, r31
 696:	e0 93 2e 01 	sts	0x012E, r30
 69a:	3e c0       	rjmp	.+124    	; 0x718 <free+0x118>
 69c:	d9 01       	movw	r26, r18
 69e:	13 96       	adiw	r26, 0x03	; 3
 6a0:	fc 93       	st	X, r31
 6a2:	ee 93       	st	-X, r30
 6a4:	12 97       	sbiw	r26, 0x02	; 2
 6a6:	4d 91       	ld	r20, X+
 6a8:	5d 91       	ld	r21, X+
 6aa:	a4 0f       	add	r26, r20
 6ac:	b5 1f       	adc	r27, r21
 6ae:	ea 17       	cp	r30, r26
 6b0:	fb 07       	cpc	r31, r27
 6b2:	79 f4       	brne	.+30     	; 0x6d2 <free+0xd2>
 6b4:	80 81       	ld	r24, Z
 6b6:	91 81       	ldd	r25, Z+1	; 0x01
 6b8:	84 0f       	add	r24, r20
 6ba:	95 1f       	adc	r25, r21
 6bc:	02 96       	adiw	r24, 0x02	; 2
 6be:	d9 01       	movw	r26, r18
 6c0:	11 96       	adiw	r26, 0x01	; 1
 6c2:	9c 93       	st	X, r25
 6c4:	8e 93       	st	-X, r24
 6c6:	82 81       	ldd	r24, Z+2	; 0x02
 6c8:	93 81       	ldd	r25, Z+3	; 0x03
 6ca:	13 96       	adiw	r26, 0x03	; 3
 6cc:	9c 93       	st	X, r25
 6ce:	8e 93       	st	-X, r24
 6d0:	12 97       	sbiw	r26, 0x02	; 2
 6d2:	e0 e0       	ldi	r30, 0x00	; 0
 6d4:	f0 e0       	ldi	r31, 0x00	; 0
 6d6:	8a 81       	ldd	r24, Y+2	; 0x02
 6d8:	9b 81       	ldd	r25, Y+3	; 0x03
 6da:	00 97       	sbiw	r24, 0x00	; 0
 6dc:	19 f0       	breq	.+6      	; 0x6e4 <free+0xe4>
 6de:	fe 01       	movw	r30, r28
 6e0:	ec 01       	movw	r28, r24
 6e2:	f9 cf       	rjmp	.-14     	; 0x6d6 <free+0xd6>
 6e4:	ce 01       	movw	r24, r28
 6e6:	02 96       	adiw	r24, 0x02	; 2
 6e8:	28 81       	ld	r18, Y
 6ea:	39 81       	ldd	r19, Y+1	; 0x01
 6ec:	82 0f       	add	r24, r18
 6ee:	93 1f       	adc	r25, r19
 6f0:	20 91 2c 01 	lds	r18, 0x012C
 6f4:	30 91 2d 01 	lds	r19, 0x012D
 6f8:	28 17       	cp	r18, r24
 6fa:	39 07       	cpc	r19, r25
 6fc:	69 f4       	brne	.+26     	; 0x718 <free+0x118>
 6fe:	30 97       	sbiw	r30, 0x00	; 0
 700:	29 f4       	brne	.+10     	; 0x70c <free+0x10c>
 702:	10 92 2f 01 	sts	0x012F, r1
 706:	10 92 2e 01 	sts	0x012E, r1
 70a:	02 c0       	rjmp	.+4      	; 0x710 <free+0x110>
 70c:	13 82       	std	Z+3, r1	; 0x03
 70e:	12 82       	std	Z+2, r1	; 0x02
 710:	d0 93 2d 01 	sts	0x012D, r29
 714:	c0 93 2c 01 	sts	0x012C, r28
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	08 95       	ret

0000071e <fdevopen>:
 71e:	0f 93       	push	r16
 720:	1f 93       	push	r17
 722:	cf 93       	push	r28
 724:	df 93       	push	r29
 726:	ec 01       	movw	r28, r24
 728:	8b 01       	movw	r16, r22
 72a:	00 97       	sbiw	r24, 0x00	; 0
 72c:	31 f4       	brne	.+12     	; 0x73a <fdevopen+0x1c>
 72e:	61 15       	cp	r22, r1
 730:	71 05       	cpc	r23, r1
 732:	19 f4       	brne	.+6      	; 0x73a <fdevopen+0x1c>
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	38 c0       	rjmp	.+112    	; 0x7aa <fdevopen+0x8c>
 73a:	6e e0       	ldi	r22, 0x0E	; 14
 73c:	70 e0       	ldi	r23, 0x00	; 0
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	0e 94 c0 05 	call	0xb80	; 0xb80 <calloc>
 746:	fc 01       	movw	r30, r24
 748:	00 97       	sbiw	r24, 0x00	; 0
 74a:	a1 f3       	breq	.-24     	; 0x734 <fdevopen+0x16>
 74c:	80 e8       	ldi	r24, 0x80	; 128
 74e:	83 83       	std	Z+3, r24	; 0x03
 750:	01 15       	cp	r16, r1
 752:	11 05       	cpc	r17, r1
 754:	71 f0       	breq	.+28     	; 0x772 <fdevopen+0x54>
 756:	13 87       	std	Z+11, r17	; 0x0b
 758:	02 87       	std	Z+10, r16	; 0x0a
 75a:	81 e8       	ldi	r24, 0x81	; 129
 75c:	83 83       	std	Z+3, r24	; 0x03
 75e:	80 91 30 01 	lds	r24, 0x0130
 762:	90 91 31 01 	lds	r25, 0x0131
 766:	89 2b       	or	r24, r25
 768:	21 f4       	brne	.+8      	; 0x772 <fdevopen+0x54>
 76a:	f0 93 31 01 	sts	0x0131, r31
 76e:	e0 93 30 01 	sts	0x0130, r30
 772:	20 97       	sbiw	r28, 0x00	; 0
 774:	c9 f0       	breq	.+50     	; 0x7a8 <fdevopen+0x8a>
 776:	d1 87       	std	Z+9, r29	; 0x09
 778:	c0 87       	std	Z+8, r28	; 0x08
 77a:	83 81       	ldd	r24, Z+3	; 0x03
 77c:	82 60       	ori	r24, 0x02	; 2
 77e:	83 83       	std	Z+3, r24	; 0x03
 780:	80 91 32 01 	lds	r24, 0x0132
 784:	90 91 33 01 	lds	r25, 0x0133
 788:	89 2b       	or	r24, r25
 78a:	71 f4       	brne	.+28     	; 0x7a8 <fdevopen+0x8a>
 78c:	f0 93 33 01 	sts	0x0133, r31
 790:	e0 93 32 01 	sts	0x0132, r30
 794:	80 91 34 01 	lds	r24, 0x0134
 798:	90 91 35 01 	lds	r25, 0x0135
 79c:	89 2b       	or	r24, r25
 79e:	21 f4       	brne	.+8      	; 0x7a8 <fdevopen+0x8a>
 7a0:	f0 93 35 01 	sts	0x0135, r31
 7a4:	e0 93 34 01 	sts	0x0134, r30
 7a8:	cf 01       	movw	r24, r30
 7aa:	df 91       	pop	r29
 7ac:	cf 91       	pop	r28
 7ae:	1f 91       	pop	r17
 7b0:	0f 91       	pop	r16
 7b2:	08 95       	ret

000007b4 <printf>:
 7b4:	a0 e0       	ldi	r26, 0x00	; 0
 7b6:	b0 e0       	ldi	r27, 0x00	; 0
 7b8:	e0 ee       	ldi	r30, 0xE0	; 224
 7ba:	f3 e0       	ldi	r31, 0x03	; 3
 7bc:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__prologue_saves__+0x20>
 7c0:	fe 01       	movw	r30, r28
 7c2:	35 96       	adiw	r30, 0x05	; 5
 7c4:	61 91       	ld	r22, Z+
 7c6:	71 91       	ld	r23, Z+
 7c8:	af 01       	movw	r20, r30
 7ca:	80 91 32 01 	lds	r24, 0x0132
 7ce:	90 91 33 01 	lds	r25, 0x0133
 7d2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <vfprintf>
 7d6:	e2 e0       	ldi	r30, 0x02	; 2
 7d8:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <__epilogue_restores__+0x20>

000007dc <vfprintf>:
 7dc:	ac e0       	ldi	r26, 0x0C	; 12
 7de:	b0 e0       	ldi	r27, 0x00	; 0
 7e0:	e4 ef       	ldi	r30, 0xF4	; 244
 7e2:	f3 e0       	ldi	r31, 0x03	; 3
 7e4:	0c 94 89 06 	jmp	0xd12	; 0xd12 <__prologue_saves__>
 7e8:	7c 01       	movw	r14, r24
 7ea:	6b 01       	movw	r12, r22
 7ec:	8a 01       	movw	r16, r20
 7ee:	fc 01       	movw	r30, r24
 7f0:	17 82       	std	Z+7, r1	; 0x07
 7f2:	16 82       	std	Z+6, r1	; 0x06
 7f4:	83 81       	ldd	r24, Z+3	; 0x03
 7f6:	81 ff       	sbrs	r24, 1
 7f8:	bd c1       	rjmp	.+890    	; 0xb74 <vfprintf+0x398>
 7fa:	ce 01       	movw	r24, r28
 7fc:	01 96       	adiw	r24, 0x01	; 1
 7fe:	4c 01       	movw	r8, r24
 800:	f7 01       	movw	r30, r14
 802:	93 81       	ldd	r25, Z+3	; 0x03
 804:	f6 01       	movw	r30, r12
 806:	93 fd       	sbrc	r25, 3
 808:	85 91       	lpm	r24, Z+
 80a:	93 ff       	sbrs	r25, 3
 80c:	81 91       	ld	r24, Z+
 80e:	6f 01       	movw	r12, r30
 810:	88 23       	and	r24, r24
 812:	09 f4       	brne	.+2      	; 0x816 <vfprintf+0x3a>
 814:	ab c1       	rjmp	.+854    	; 0xb6c <vfprintf+0x390>
 816:	85 32       	cpi	r24, 0x25	; 37
 818:	39 f4       	brne	.+14     	; 0x828 <vfprintf+0x4c>
 81a:	93 fd       	sbrc	r25, 3
 81c:	85 91       	lpm	r24, Z+
 81e:	93 ff       	sbrs	r25, 3
 820:	81 91       	ld	r24, Z+
 822:	6f 01       	movw	r12, r30
 824:	85 32       	cpi	r24, 0x25	; 37
 826:	29 f4       	brne	.+10     	; 0x832 <vfprintf+0x56>
 828:	b7 01       	movw	r22, r14
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 830:	e7 cf       	rjmp	.-50     	; 0x800 <vfprintf+0x24>
 832:	51 2c       	mov	r5, r1
 834:	31 2c       	mov	r3, r1
 836:	20 e0       	ldi	r18, 0x00	; 0
 838:	20 32       	cpi	r18, 0x20	; 32
 83a:	a0 f4       	brcc	.+40     	; 0x864 <vfprintf+0x88>
 83c:	8b 32       	cpi	r24, 0x2B	; 43
 83e:	69 f0       	breq	.+26     	; 0x85a <vfprintf+0x7e>
 840:	30 f4       	brcc	.+12     	; 0x84e <vfprintf+0x72>
 842:	80 32       	cpi	r24, 0x20	; 32
 844:	59 f0       	breq	.+22     	; 0x85c <vfprintf+0x80>
 846:	83 32       	cpi	r24, 0x23	; 35
 848:	69 f4       	brne	.+26     	; 0x864 <vfprintf+0x88>
 84a:	20 61       	ori	r18, 0x10	; 16
 84c:	2c c0       	rjmp	.+88     	; 0x8a6 <vfprintf+0xca>
 84e:	8d 32       	cpi	r24, 0x2D	; 45
 850:	39 f0       	breq	.+14     	; 0x860 <vfprintf+0x84>
 852:	80 33       	cpi	r24, 0x30	; 48
 854:	39 f4       	brne	.+14     	; 0x864 <vfprintf+0x88>
 856:	21 60       	ori	r18, 0x01	; 1
 858:	26 c0       	rjmp	.+76     	; 0x8a6 <vfprintf+0xca>
 85a:	22 60       	ori	r18, 0x02	; 2
 85c:	24 60       	ori	r18, 0x04	; 4
 85e:	23 c0       	rjmp	.+70     	; 0x8a6 <vfprintf+0xca>
 860:	28 60       	ori	r18, 0x08	; 8
 862:	21 c0       	rjmp	.+66     	; 0x8a6 <vfprintf+0xca>
 864:	27 fd       	sbrc	r18, 7
 866:	27 c0       	rjmp	.+78     	; 0x8b6 <vfprintf+0xda>
 868:	30 ed       	ldi	r19, 0xD0	; 208
 86a:	38 0f       	add	r19, r24
 86c:	3a 30       	cpi	r19, 0x0A	; 10
 86e:	78 f4       	brcc	.+30     	; 0x88e <vfprintf+0xb2>
 870:	26 ff       	sbrs	r18, 6
 872:	06 c0       	rjmp	.+12     	; 0x880 <vfprintf+0xa4>
 874:	fa e0       	ldi	r31, 0x0A	; 10
 876:	5f 9e       	mul	r5, r31
 878:	30 0d       	add	r19, r0
 87a:	11 24       	eor	r1, r1
 87c:	53 2e       	mov	r5, r19
 87e:	13 c0       	rjmp	.+38     	; 0x8a6 <vfprintf+0xca>
 880:	8a e0       	ldi	r24, 0x0A	; 10
 882:	38 9e       	mul	r3, r24
 884:	30 0d       	add	r19, r0
 886:	11 24       	eor	r1, r1
 888:	33 2e       	mov	r3, r19
 88a:	20 62       	ori	r18, 0x20	; 32
 88c:	0c c0       	rjmp	.+24     	; 0x8a6 <vfprintf+0xca>
 88e:	8e 32       	cpi	r24, 0x2E	; 46
 890:	21 f4       	brne	.+8      	; 0x89a <vfprintf+0xbe>
 892:	26 fd       	sbrc	r18, 6
 894:	6b c1       	rjmp	.+726    	; 0xb6c <vfprintf+0x390>
 896:	20 64       	ori	r18, 0x40	; 64
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0xca>
 89a:	8c 36       	cpi	r24, 0x6C	; 108
 89c:	11 f4       	brne	.+4      	; 0x8a2 <vfprintf+0xc6>
 89e:	20 68       	ori	r18, 0x80	; 128
 8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <vfprintf+0xca>
 8a2:	88 36       	cpi	r24, 0x68	; 104
 8a4:	41 f4       	brne	.+16     	; 0x8b6 <vfprintf+0xda>
 8a6:	f6 01       	movw	r30, r12
 8a8:	93 fd       	sbrc	r25, 3
 8aa:	85 91       	lpm	r24, Z+
 8ac:	93 ff       	sbrs	r25, 3
 8ae:	81 91       	ld	r24, Z+
 8b0:	6f 01       	movw	r12, r30
 8b2:	81 11       	cpse	r24, r1
 8b4:	c1 cf       	rjmp	.-126    	; 0x838 <vfprintf+0x5c>
 8b6:	98 2f       	mov	r25, r24
 8b8:	9f 7d       	andi	r25, 0xDF	; 223
 8ba:	95 54       	subi	r25, 0x45	; 69
 8bc:	93 30       	cpi	r25, 0x03	; 3
 8be:	28 f4       	brcc	.+10     	; 0x8ca <vfprintf+0xee>
 8c0:	0c 5f       	subi	r16, 0xFC	; 252
 8c2:	1f 4f       	sbci	r17, 0xFF	; 255
 8c4:	ff e3       	ldi	r31, 0x3F	; 63
 8c6:	f9 83       	std	Y+1, r31	; 0x01
 8c8:	0d c0       	rjmp	.+26     	; 0x8e4 <vfprintf+0x108>
 8ca:	83 36       	cpi	r24, 0x63	; 99
 8cc:	31 f0       	breq	.+12     	; 0x8da <vfprintf+0xfe>
 8ce:	83 37       	cpi	r24, 0x73	; 115
 8d0:	71 f0       	breq	.+28     	; 0x8ee <vfprintf+0x112>
 8d2:	83 35       	cpi	r24, 0x53	; 83
 8d4:	09 f0       	breq	.+2      	; 0x8d8 <vfprintf+0xfc>
 8d6:	5b c0       	rjmp	.+182    	; 0x98e <vfprintf+0x1b2>
 8d8:	22 c0       	rjmp	.+68     	; 0x91e <vfprintf+0x142>
 8da:	f8 01       	movw	r30, r16
 8dc:	80 81       	ld	r24, Z
 8de:	89 83       	std	Y+1, r24	; 0x01
 8e0:	0e 5f       	subi	r16, 0xFE	; 254
 8e2:	1f 4f       	sbci	r17, 0xFF	; 255
 8e4:	44 24       	eor	r4, r4
 8e6:	43 94       	inc	r4
 8e8:	51 2c       	mov	r5, r1
 8ea:	54 01       	movw	r10, r8
 8ec:	15 c0       	rjmp	.+42     	; 0x918 <vfprintf+0x13c>
 8ee:	38 01       	movw	r6, r16
 8f0:	f2 e0       	ldi	r31, 0x02	; 2
 8f2:	6f 0e       	add	r6, r31
 8f4:	71 1c       	adc	r7, r1
 8f6:	f8 01       	movw	r30, r16
 8f8:	a0 80       	ld	r10, Z
 8fa:	b1 80       	ldd	r11, Z+1	; 0x01
 8fc:	26 ff       	sbrs	r18, 6
 8fe:	03 c0       	rjmp	.+6      	; 0x906 <vfprintf+0x12a>
 900:	65 2d       	mov	r22, r5
 902:	70 e0       	ldi	r23, 0x00	; 0
 904:	02 c0       	rjmp	.+4      	; 0x90a <vfprintf+0x12e>
 906:	6f ef       	ldi	r22, 0xFF	; 255
 908:	7f ef       	ldi	r23, 0xFF	; 255
 90a:	c5 01       	movw	r24, r10
 90c:	2c 87       	std	Y+12, r18	; 0x0c
 90e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <strnlen>
 912:	2c 01       	movw	r4, r24
 914:	83 01       	movw	r16, r6
 916:	2c 85       	ldd	r18, Y+12	; 0x0c
 918:	2f 77       	andi	r18, 0x7F	; 127
 91a:	22 2e       	mov	r2, r18
 91c:	17 c0       	rjmp	.+46     	; 0x94c <vfprintf+0x170>
 91e:	38 01       	movw	r6, r16
 920:	f2 e0       	ldi	r31, 0x02	; 2
 922:	6f 0e       	add	r6, r31
 924:	71 1c       	adc	r7, r1
 926:	f8 01       	movw	r30, r16
 928:	a0 80       	ld	r10, Z
 92a:	b1 80       	ldd	r11, Z+1	; 0x01
 92c:	26 ff       	sbrs	r18, 6
 92e:	03 c0       	rjmp	.+6      	; 0x936 <vfprintf+0x15a>
 930:	65 2d       	mov	r22, r5
 932:	70 e0       	ldi	r23, 0x00	; 0
 934:	02 c0       	rjmp	.+4      	; 0x93a <vfprintf+0x15e>
 936:	6f ef       	ldi	r22, 0xFF	; 255
 938:	7f ef       	ldi	r23, 0xFF	; 255
 93a:	c5 01       	movw	r24, r10
 93c:	2c 87       	std	Y+12, r18	; 0x0c
 93e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <strnlen_P>
 942:	2c 01       	movw	r4, r24
 944:	2c 85       	ldd	r18, Y+12	; 0x0c
 946:	20 68       	ori	r18, 0x80	; 128
 948:	22 2e       	mov	r2, r18
 94a:	83 01       	movw	r16, r6
 94c:	23 fc       	sbrc	r2, 3
 94e:	1b c0       	rjmp	.+54     	; 0x986 <vfprintf+0x1aa>
 950:	83 2d       	mov	r24, r3
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	48 16       	cp	r4, r24
 956:	59 06       	cpc	r5, r25
 958:	b0 f4       	brcc	.+44     	; 0x986 <vfprintf+0x1aa>
 95a:	b7 01       	movw	r22, r14
 95c:	80 e2       	ldi	r24, 0x20	; 32
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 964:	3a 94       	dec	r3
 966:	f4 cf       	rjmp	.-24     	; 0x950 <vfprintf+0x174>
 968:	f5 01       	movw	r30, r10
 96a:	27 fc       	sbrc	r2, 7
 96c:	85 91       	lpm	r24, Z+
 96e:	27 fe       	sbrs	r2, 7
 970:	81 91       	ld	r24, Z+
 972:	5f 01       	movw	r10, r30
 974:	b7 01       	movw	r22, r14
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 97c:	31 10       	cpse	r3, r1
 97e:	3a 94       	dec	r3
 980:	f1 e0       	ldi	r31, 0x01	; 1
 982:	4f 1a       	sub	r4, r31
 984:	51 08       	sbc	r5, r1
 986:	41 14       	cp	r4, r1
 988:	51 04       	cpc	r5, r1
 98a:	71 f7       	brne	.-36     	; 0x968 <vfprintf+0x18c>
 98c:	e5 c0       	rjmp	.+458    	; 0xb58 <vfprintf+0x37c>
 98e:	84 36       	cpi	r24, 0x64	; 100
 990:	11 f0       	breq	.+4      	; 0x996 <vfprintf+0x1ba>
 992:	89 36       	cpi	r24, 0x69	; 105
 994:	39 f5       	brne	.+78     	; 0x9e4 <vfprintf+0x208>
 996:	f8 01       	movw	r30, r16
 998:	27 ff       	sbrs	r18, 7
 99a:	07 c0       	rjmp	.+14     	; 0x9aa <vfprintf+0x1ce>
 99c:	60 81       	ld	r22, Z
 99e:	71 81       	ldd	r23, Z+1	; 0x01
 9a0:	82 81       	ldd	r24, Z+2	; 0x02
 9a2:	93 81       	ldd	r25, Z+3	; 0x03
 9a4:	0c 5f       	subi	r16, 0xFC	; 252
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <vfprintf+0x1de>
 9aa:	60 81       	ld	r22, Z
 9ac:	71 81       	ldd	r23, Z+1	; 0x01
 9ae:	88 27       	eor	r24, r24
 9b0:	77 fd       	sbrc	r23, 7
 9b2:	80 95       	com	r24
 9b4:	98 2f       	mov	r25, r24
 9b6:	0e 5f       	subi	r16, 0xFE	; 254
 9b8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ba:	2f 76       	andi	r18, 0x6F	; 111
 9bc:	b2 2e       	mov	r11, r18
 9be:	97 ff       	sbrs	r25, 7
 9c0:	09 c0       	rjmp	.+18     	; 0x9d4 <vfprintf+0x1f8>
 9c2:	90 95       	com	r25
 9c4:	80 95       	com	r24
 9c6:	70 95       	com	r23
 9c8:	61 95       	neg	r22
 9ca:	7f 4f       	sbci	r23, 0xFF	; 255
 9cc:	8f 4f       	sbci	r24, 0xFF	; 255
 9ce:	9f 4f       	sbci	r25, 0xFF	; 255
 9d0:	20 68       	ori	r18, 0x80	; 128
 9d2:	b2 2e       	mov	r11, r18
 9d4:	2a e0       	ldi	r18, 0x0A	; 10
 9d6:	30 e0       	ldi	r19, 0x00	; 0
 9d8:	a4 01       	movw	r20, r8
 9da:	0e 94 2b 06 	call	0xc56	; 0xc56 <__ultoa_invert>
 9de:	a8 2e       	mov	r10, r24
 9e0:	a8 18       	sub	r10, r8
 9e2:	44 c0       	rjmp	.+136    	; 0xa6c <vfprintf+0x290>
 9e4:	85 37       	cpi	r24, 0x75	; 117
 9e6:	29 f4       	brne	.+10     	; 0x9f2 <vfprintf+0x216>
 9e8:	2f 7e       	andi	r18, 0xEF	; 239
 9ea:	b2 2e       	mov	r11, r18
 9ec:	2a e0       	ldi	r18, 0x0A	; 10
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	25 c0       	rjmp	.+74     	; 0xa3c <vfprintf+0x260>
 9f2:	f2 2f       	mov	r31, r18
 9f4:	f9 7f       	andi	r31, 0xF9	; 249
 9f6:	bf 2e       	mov	r11, r31
 9f8:	8f 36       	cpi	r24, 0x6F	; 111
 9fa:	c1 f0       	breq	.+48     	; 0xa2c <vfprintf+0x250>
 9fc:	18 f4       	brcc	.+6      	; 0xa04 <vfprintf+0x228>
 9fe:	88 35       	cpi	r24, 0x58	; 88
 a00:	79 f0       	breq	.+30     	; 0xa20 <vfprintf+0x244>
 a02:	b4 c0       	rjmp	.+360    	; 0xb6c <vfprintf+0x390>
 a04:	80 37       	cpi	r24, 0x70	; 112
 a06:	19 f0       	breq	.+6      	; 0xa0e <vfprintf+0x232>
 a08:	88 37       	cpi	r24, 0x78	; 120
 a0a:	21 f0       	breq	.+8      	; 0xa14 <vfprintf+0x238>
 a0c:	af c0       	rjmp	.+350    	; 0xb6c <vfprintf+0x390>
 a0e:	2f 2f       	mov	r18, r31
 a10:	20 61       	ori	r18, 0x10	; 16
 a12:	b2 2e       	mov	r11, r18
 a14:	b4 fe       	sbrs	r11, 4
 a16:	0d c0       	rjmp	.+26     	; 0xa32 <vfprintf+0x256>
 a18:	8b 2d       	mov	r24, r11
 a1a:	84 60       	ori	r24, 0x04	; 4
 a1c:	b8 2e       	mov	r11, r24
 a1e:	09 c0       	rjmp	.+18     	; 0xa32 <vfprintf+0x256>
 a20:	24 ff       	sbrs	r18, 4
 a22:	0a c0       	rjmp	.+20     	; 0xa38 <vfprintf+0x25c>
 a24:	9f 2f       	mov	r25, r31
 a26:	96 60       	ori	r25, 0x06	; 6
 a28:	b9 2e       	mov	r11, r25
 a2a:	06 c0       	rjmp	.+12     	; 0xa38 <vfprintf+0x25c>
 a2c:	28 e0       	ldi	r18, 0x08	; 8
 a2e:	30 e0       	ldi	r19, 0x00	; 0
 a30:	05 c0       	rjmp	.+10     	; 0xa3c <vfprintf+0x260>
 a32:	20 e1       	ldi	r18, 0x10	; 16
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <vfprintf+0x260>
 a38:	20 e1       	ldi	r18, 0x10	; 16
 a3a:	32 e0       	ldi	r19, 0x02	; 2
 a3c:	f8 01       	movw	r30, r16
 a3e:	b7 fe       	sbrs	r11, 7
 a40:	07 c0       	rjmp	.+14     	; 0xa50 <vfprintf+0x274>
 a42:	60 81       	ld	r22, Z
 a44:	71 81       	ldd	r23, Z+1	; 0x01
 a46:	82 81       	ldd	r24, Z+2	; 0x02
 a48:	93 81       	ldd	r25, Z+3	; 0x03
 a4a:	0c 5f       	subi	r16, 0xFC	; 252
 a4c:	1f 4f       	sbci	r17, 0xFF	; 255
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <vfprintf+0x280>
 a50:	60 81       	ld	r22, Z
 a52:	71 81       	ldd	r23, Z+1	; 0x01
 a54:	80 e0       	ldi	r24, 0x00	; 0
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 5f       	subi	r16, 0xFE	; 254
 a5a:	1f 4f       	sbci	r17, 0xFF	; 255
 a5c:	a4 01       	movw	r20, r8
 a5e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__ultoa_invert>
 a62:	a8 2e       	mov	r10, r24
 a64:	a8 18       	sub	r10, r8
 a66:	fb 2d       	mov	r31, r11
 a68:	ff 77       	andi	r31, 0x7F	; 127
 a6a:	bf 2e       	mov	r11, r31
 a6c:	b6 fe       	sbrs	r11, 6
 a6e:	0b c0       	rjmp	.+22     	; 0xa86 <vfprintf+0x2aa>
 a70:	2b 2d       	mov	r18, r11
 a72:	2e 7f       	andi	r18, 0xFE	; 254
 a74:	a5 14       	cp	r10, r5
 a76:	50 f4       	brcc	.+20     	; 0xa8c <vfprintf+0x2b0>
 a78:	b4 fe       	sbrs	r11, 4
 a7a:	0a c0       	rjmp	.+20     	; 0xa90 <vfprintf+0x2b4>
 a7c:	b2 fc       	sbrc	r11, 2
 a7e:	08 c0       	rjmp	.+16     	; 0xa90 <vfprintf+0x2b4>
 a80:	2b 2d       	mov	r18, r11
 a82:	2e 7e       	andi	r18, 0xEE	; 238
 a84:	05 c0       	rjmp	.+10     	; 0xa90 <vfprintf+0x2b4>
 a86:	7a 2c       	mov	r7, r10
 a88:	2b 2d       	mov	r18, r11
 a8a:	03 c0       	rjmp	.+6      	; 0xa92 <vfprintf+0x2b6>
 a8c:	7a 2c       	mov	r7, r10
 a8e:	01 c0       	rjmp	.+2      	; 0xa92 <vfprintf+0x2b6>
 a90:	75 2c       	mov	r7, r5
 a92:	24 ff       	sbrs	r18, 4
 a94:	0d c0       	rjmp	.+26     	; 0xab0 <vfprintf+0x2d4>
 a96:	fe 01       	movw	r30, r28
 a98:	ea 0d       	add	r30, r10
 a9a:	f1 1d       	adc	r31, r1
 a9c:	80 81       	ld	r24, Z
 a9e:	80 33       	cpi	r24, 0x30	; 48
 aa0:	11 f4       	brne	.+4      	; 0xaa6 <vfprintf+0x2ca>
 aa2:	29 7e       	andi	r18, 0xE9	; 233
 aa4:	09 c0       	rjmp	.+18     	; 0xab8 <vfprintf+0x2dc>
 aa6:	22 ff       	sbrs	r18, 2
 aa8:	06 c0       	rjmp	.+12     	; 0xab6 <vfprintf+0x2da>
 aaa:	73 94       	inc	r7
 aac:	73 94       	inc	r7
 aae:	04 c0       	rjmp	.+8      	; 0xab8 <vfprintf+0x2dc>
 ab0:	82 2f       	mov	r24, r18
 ab2:	86 78       	andi	r24, 0x86	; 134
 ab4:	09 f0       	breq	.+2      	; 0xab8 <vfprintf+0x2dc>
 ab6:	73 94       	inc	r7
 ab8:	23 fd       	sbrc	r18, 3
 aba:	13 c0       	rjmp	.+38     	; 0xae2 <vfprintf+0x306>
 abc:	20 ff       	sbrs	r18, 0
 abe:	06 c0       	rjmp	.+12     	; 0xacc <vfprintf+0x2f0>
 ac0:	5a 2c       	mov	r5, r10
 ac2:	73 14       	cp	r7, r3
 ac4:	18 f4       	brcc	.+6      	; 0xacc <vfprintf+0x2f0>
 ac6:	53 0c       	add	r5, r3
 ac8:	57 18       	sub	r5, r7
 aca:	73 2c       	mov	r7, r3
 acc:	73 14       	cp	r7, r3
 ace:	68 f4       	brcc	.+26     	; 0xaea <vfprintf+0x30e>
 ad0:	b7 01       	movw	r22, r14
 ad2:	80 e2       	ldi	r24, 0x20	; 32
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	2c 87       	std	Y+12, r18	; 0x0c
 ad8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 adc:	73 94       	inc	r7
 ade:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae0:	f5 cf       	rjmp	.-22     	; 0xacc <vfprintf+0x2f0>
 ae2:	73 14       	cp	r7, r3
 ae4:	10 f4       	brcc	.+4      	; 0xaea <vfprintf+0x30e>
 ae6:	37 18       	sub	r3, r7
 ae8:	01 c0       	rjmp	.+2      	; 0xaec <vfprintf+0x310>
 aea:	31 2c       	mov	r3, r1
 aec:	24 ff       	sbrs	r18, 4
 aee:	12 c0       	rjmp	.+36     	; 0xb14 <vfprintf+0x338>
 af0:	b7 01       	movw	r22, r14
 af2:	80 e3       	ldi	r24, 0x30	; 48
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	2c 87       	std	Y+12, r18	; 0x0c
 af8:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 afc:	2c 85       	ldd	r18, Y+12	; 0x0c
 afe:	22 ff       	sbrs	r18, 2
 b00:	17 c0       	rjmp	.+46     	; 0xb30 <vfprintf+0x354>
 b02:	21 ff       	sbrs	r18, 1
 b04:	03 c0       	rjmp	.+6      	; 0xb0c <vfprintf+0x330>
 b06:	88 e5       	ldi	r24, 0x58	; 88
 b08:	90 e0       	ldi	r25, 0x00	; 0
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <vfprintf+0x334>
 b0c:	88 e7       	ldi	r24, 0x78	; 120
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	b7 01       	movw	r22, r14
 b12:	0c c0       	rjmp	.+24     	; 0xb2c <vfprintf+0x350>
 b14:	82 2f       	mov	r24, r18
 b16:	86 78       	andi	r24, 0x86	; 134
 b18:	59 f0       	breq	.+22     	; 0xb30 <vfprintf+0x354>
 b1a:	21 fd       	sbrc	r18, 1
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <vfprintf+0x346>
 b1e:	80 e2       	ldi	r24, 0x20	; 32
 b20:	01 c0       	rjmp	.+2      	; 0xb24 <vfprintf+0x348>
 b22:	8b e2       	ldi	r24, 0x2B	; 43
 b24:	27 fd       	sbrc	r18, 7
 b26:	8d e2       	ldi	r24, 0x2D	; 45
 b28:	b7 01       	movw	r22, r14
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 b30:	a5 14       	cp	r10, r5
 b32:	38 f4       	brcc	.+14     	; 0xb42 <vfprintf+0x366>
 b34:	b7 01       	movw	r22, r14
 b36:	80 e3       	ldi	r24, 0x30	; 48
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 b3e:	5a 94       	dec	r5
 b40:	f7 cf       	rjmp	.-18     	; 0xb30 <vfprintf+0x354>
 b42:	aa 94       	dec	r10
 b44:	f4 01       	movw	r30, r8
 b46:	ea 0d       	add	r30, r10
 b48:	f1 1d       	adc	r31, r1
 b4a:	80 81       	ld	r24, Z
 b4c:	b7 01       	movw	r22, r14
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 b54:	a1 10       	cpse	r10, r1
 b56:	f5 cf       	rjmp	.-22     	; 0xb42 <vfprintf+0x366>
 b58:	33 20       	and	r3, r3
 b5a:	09 f4       	brne	.+2      	; 0xb5e <vfprintf+0x382>
 b5c:	51 ce       	rjmp	.-862    	; 0x800 <vfprintf+0x24>
 b5e:	b7 01       	movw	r22, r14
 b60:	80 e2       	ldi	r24, 0x20	; 32
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <fputc>
 b68:	3a 94       	dec	r3
 b6a:	f6 cf       	rjmp	.-20     	; 0xb58 <vfprintf+0x37c>
 b6c:	f7 01       	movw	r30, r14
 b6e:	86 81       	ldd	r24, Z+6	; 0x06
 b70:	97 81       	ldd	r25, Z+7	; 0x07
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <vfprintf+0x39c>
 b74:	8f ef       	ldi	r24, 0xFF	; 255
 b76:	9f ef       	ldi	r25, 0xFF	; 255
 b78:	2c 96       	adiw	r28, 0x0c	; 12
 b7a:	e2 e1       	ldi	r30, 0x12	; 18
 b7c:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__epilogue_restores__>

00000b80 <calloc>:
 b80:	0f 93       	push	r16
 b82:	1f 93       	push	r17
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	86 9f       	mul	r24, r22
 b8a:	80 01       	movw	r16, r0
 b8c:	87 9f       	mul	r24, r23
 b8e:	10 0d       	add	r17, r0
 b90:	96 9f       	mul	r25, r22
 b92:	10 0d       	add	r17, r0
 b94:	11 24       	eor	r1, r1
 b96:	c8 01       	movw	r24, r16
 b98:	0e 94 68 02 	call	0x4d0	; 0x4d0 <malloc>
 b9c:	ec 01       	movw	r28, r24
 b9e:	00 97       	sbiw	r24, 0x00	; 0
 ba0:	29 f0       	breq	.+10     	; 0xbac <calloc+0x2c>
 ba2:	a8 01       	movw	r20, r16
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	70 e0       	ldi	r23, 0x00	; 0
 ba8:	0e 94 e7 05 	call	0xbce	; 0xbce <memset>
 bac:	ce 01       	movw	r24, r28
 bae:	df 91       	pop	r29
 bb0:	cf 91       	pop	r28
 bb2:	1f 91       	pop	r17
 bb4:	0f 91       	pop	r16
 bb6:	08 95       	ret

00000bb8 <strnlen_P>:
 bb8:	fc 01       	movw	r30, r24
 bba:	05 90       	lpm	r0, Z+
 bbc:	61 50       	subi	r22, 0x01	; 1
 bbe:	70 40       	sbci	r23, 0x00	; 0
 bc0:	01 10       	cpse	r0, r1
 bc2:	d8 f7       	brcc	.-10     	; 0xbba <strnlen_P+0x2>
 bc4:	80 95       	com	r24
 bc6:	90 95       	com	r25
 bc8:	8e 0f       	add	r24, r30
 bca:	9f 1f       	adc	r25, r31
 bcc:	08 95       	ret

00000bce <memset>:
 bce:	dc 01       	movw	r26, r24
 bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <memset+0x6>
 bd2:	6d 93       	st	X+, r22
 bd4:	41 50       	subi	r20, 0x01	; 1
 bd6:	50 40       	sbci	r21, 0x00	; 0
 bd8:	e0 f7       	brcc	.-8      	; 0xbd2 <memset+0x4>
 bda:	08 95       	ret

00000bdc <strnlen>:
 bdc:	fc 01       	movw	r30, r24
 bde:	61 50       	subi	r22, 0x01	; 1
 be0:	70 40       	sbci	r23, 0x00	; 0
 be2:	01 90       	ld	r0, Z+
 be4:	01 10       	cpse	r0, r1
 be6:	d8 f7       	brcc	.-10     	; 0xbde <strnlen+0x2>
 be8:	80 95       	com	r24
 bea:	90 95       	com	r25
 bec:	8e 0f       	add	r24, r30
 bee:	9f 1f       	adc	r25, r31
 bf0:	08 95       	ret

00000bf2 <fputc>:
 bf2:	0f 93       	push	r16
 bf4:	1f 93       	push	r17
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	18 2f       	mov	r17, r24
 bfc:	09 2f       	mov	r16, r25
 bfe:	eb 01       	movw	r28, r22
 c00:	8b 81       	ldd	r24, Y+3	; 0x03
 c02:	81 fd       	sbrc	r24, 1
 c04:	03 c0       	rjmp	.+6      	; 0xc0c <fputc+0x1a>
 c06:	8f ef       	ldi	r24, 0xFF	; 255
 c08:	9f ef       	ldi	r25, 0xFF	; 255
 c0a:	20 c0       	rjmp	.+64     	; 0xc4c <fputc+0x5a>
 c0c:	82 ff       	sbrs	r24, 2
 c0e:	10 c0       	rjmp	.+32     	; 0xc30 <fputc+0x3e>
 c10:	4e 81       	ldd	r20, Y+6	; 0x06
 c12:	5f 81       	ldd	r21, Y+7	; 0x07
 c14:	2c 81       	ldd	r18, Y+4	; 0x04
 c16:	3d 81       	ldd	r19, Y+5	; 0x05
 c18:	42 17       	cp	r20, r18
 c1a:	53 07       	cpc	r21, r19
 c1c:	7c f4       	brge	.+30     	; 0xc3c <fputc+0x4a>
 c1e:	e8 81       	ld	r30, Y
 c20:	f9 81       	ldd	r31, Y+1	; 0x01
 c22:	9f 01       	movw	r18, r30
 c24:	2f 5f       	subi	r18, 0xFF	; 255
 c26:	3f 4f       	sbci	r19, 0xFF	; 255
 c28:	39 83       	std	Y+1, r19	; 0x01
 c2a:	28 83       	st	Y, r18
 c2c:	10 83       	st	Z, r17
 c2e:	06 c0       	rjmp	.+12     	; 0xc3c <fputc+0x4a>
 c30:	e8 85       	ldd	r30, Y+8	; 0x08
 c32:	f9 85       	ldd	r31, Y+9	; 0x09
 c34:	81 2f       	mov	r24, r17
 c36:	09 95       	icall
 c38:	89 2b       	or	r24, r25
 c3a:	29 f7       	brne	.-54     	; 0xc06 <fputc+0x14>
 c3c:	2e 81       	ldd	r18, Y+6	; 0x06
 c3e:	3f 81       	ldd	r19, Y+7	; 0x07
 c40:	2f 5f       	subi	r18, 0xFF	; 255
 c42:	3f 4f       	sbci	r19, 0xFF	; 255
 c44:	3f 83       	std	Y+7, r19	; 0x07
 c46:	2e 83       	std	Y+6, r18	; 0x06
 c48:	81 2f       	mov	r24, r17
 c4a:	90 2f       	mov	r25, r16
 c4c:	df 91       	pop	r29
 c4e:	cf 91       	pop	r28
 c50:	1f 91       	pop	r17
 c52:	0f 91       	pop	r16
 c54:	08 95       	ret

00000c56 <__ultoa_invert>:
 c56:	fa 01       	movw	r30, r20
 c58:	aa 27       	eor	r26, r26
 c5a:	28 30       	cpi	r18, 0x08	; 8
 c5c:	51 f1       	breq	.+84     	; 0xcb2 <__ultoa_invert+0x5c>
 c5e:	20 31       	cpi	r18, 0x10	; 16
 c60:	81 f1       	breq	.+96     	; 0xcc2 <__ultoa_invert+0x6c>
 c62:	e8 94       	clt
 c64:	6f 93       	push	r22
 c66:	6e 7f       	andi	r22, 0xFE	; 254
 c68:	6e 5f       	subi	r22, 0xFE	; 254
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	af 4f       	sbci	r26, 0xFF	; 255
 c72:	b1 e0       	ldi	r27, 0x01	; 1
 c74:	3e d0       	rcall	.+124    	; 0xcf2 <__ultoa_invert+0x9c>
 c76:	b4 e0       	ldi	r27, 0x04	; 4
 c78:	3c d0       	rcall	.+120    	; 0xcf2 <__ultoa_invert+0x9c>
 c7a:	67 0f       	add	r22, r23
 c7c:	78 1f       	adc	r23, r24
 c7e:	89 1f       	adc	r24, r25
 c80:	9a 1f       	adc	r25, r26
 c82:	a1 1d       	adc	r26, r1
 c84:	68 0f       	add	r22, r24
 c86:	79 1f       	adc	r23, r25
 c88:	8a 1f       	adc	r24, r26
 c8a:	91 1d       	adc	r25, r1
 c8c:	a1 1d       	adc	r26, r1
 c8e:	6a 0f       	add	r22, r26
 c90:	71 1d       	adc	r23, r1
 c92:	81 1d       	adc	r24, r1
 c94:	91 1d       	adc	r25, r1
 c96:	a1 1d       	adc	r26, r1
 c98:	20 d0       	rcall	.+64     	; 0xcda <__ultoa_invert+0x84>
 c9a:	09 f4       	brne	.+2      	; 0xc9e <__ultoa_invert+0x48>
 c9c:	68 94       	set
 c9e:	3f 91       	pop	r19
 ca0:	2a e0       	ldi	r18, 0x0A	; 10
 ca2:	26 9f       	mul	r18, r22
 ca4:	11 24       	eor	r1, r1
 ca6:	30 19       	sub	r19, r0
 ca8:	30 5d       	subi	r19, 0xD0	; 208
 caa:	31 93       	st	Z+, r19
 cac:	de f6       	brtc	.-74     	; 0xc64 <__ultoa_invert+0xe>
 cae:	cf 01       	movw	r24, r30
 cb0:	08 95       	ret
 cb2:	46 2f       	mov	r20, r22
 cb4:	47 70       	andi	r20, 0x07	; 7
 cb6:	40 5d       	subi	r20, 0xD0	; 208
 cb8:	41 93       	st	Z+, r20
 cba:	b3 e0       	ldi	r27, 0x03	; 3
 cbc:	0f d0       	rcall	.+30     	; 0xcdc <__ultoa_invert+0x86>
 cbe:	c9 f7       	brne	.-14     	; 0xcb2 <__ultoa_invert+0x5c>
 cc0:	f6 cf       	rjmp	.-20     	; 0xcae <__ultoa_invert+0x58>
 cc2:	46 2f       	mov	r20, r22
 cc4:	4f 70       	andi	r20, 0x0F	; 15
 cc6:	40 5d       	subi	r20, 0xD0	; 208
 cc8:	4a 33       	cpi	r20, 0x3A	; 58
 cca:	18 f0       	brcs	.+6      	; 0xcd2 <__ultoa_invert+0x7c>
 ccc:	49 5d       	subi	r20, 0xD9	; 217
 cce:	31 fd       	sbrc	r19, 1
 cd0:	40 52       	subi	r20, 0x20	; 32
 cd2:	41 93       	st	Z+, r20
 cd4:	02 d0       	rcall	.+4      	; 0xcda <__ultoa_invert+0x84>
 cd6:	a9 f7       	brne	.-22     	; 0xcc2 <__ultoa_invert+0x6c>
 cd8:	ea cf       	rjmp	.-44     	; 0xcae <__ultoa_invert+0x58>
 cda:	b4 e0       	ldi	r27, 0x04	; 4
 cdc:	a6 95       	lsr	r26
 cde:	97 95       	ror	r25
 ce0:	87 95       	ror	r24
 ce2:	77 95       	ror	r23
 ce4:	67 95       	ror	r22
 ce6:	ba 95       	dec	r27
 ce8:	c9 f7       	brne	.-14     	; 0xcdc <__ultoa_invert+0x86>
 cea:	00 97       	sbiw	r24, 0x00	; 0
 cec:	61 05       	cpc	r22, r1
 cee:	71 05       	cpc	r23, r1
 cf0:	08 95       	ret
 cf2:	9b 01       	movw	r18, r22
 cf4:	ac 01       	movw	r20, r24
 cf6:	0a 2e       	mov	r0, r26
 cf8:	06 94       	lsr	r0
 cfa:	57 95       	ror	r21
 cfc:	47 95       	ror	r20
 cfe:	37 95       	ror	r19
 d00:	27 95       	ror	r18
 d02:	ba 95       	dec	r27
 d04:	c9 f7       	brne	.-14     	; 0xcf8 <__ultoa_invert+0xa2>
 d06:	62 0f       	add	r22, r18
 d08:	73 1f       	adc	r23, r19
 d0a:	84 1f       	adc	r24, r20
 d0c:	95 1f       	adc	r25, r21
 d0e:	a0 1d       	adc	r26, r0
 d10:	08 95       	ret

00000d12 <__prologue_saves__>:
 d12:	2f 92       	push	r2
 d14:	3f 92       	push	r3
 d16:	4f 92       	push	r4
 d18:	5f 92       	push	r5
 d1a:	6f 92       	push	r6
 d1c:	7f 92       	push	r7
 d1e:	8f 92       	push	r8
 d20:	9f 92       	push	r9
 d22:	af 92       	push	r10
 d24:	bf 92       	push	r11
 d26:	cf 92       	push	r12
 d28:	df 92       	push	r13
 d2a:	ef 92       	push	r14
 d2c:	ff 92       	push	r15
 d2e:	0f 93       	push	r16
 d30:	1f 93       	push	r17
 d32:	cf 93       	push	r28
 d34:	df 93       	push	r29
 d36:	cd b7       	in	r28, 0x3d	; 61
 d38:	de b7       	in	r29, 0x3e	; 62
 d3a:	ca 1b       	sub	r28, r26
 d3c:	db 0b       	sbc	r29, r27
 d3e:	0f b6       	in	r0, 0x3f	; 63
 d40:	f8 94       	cli
 d42:	de bf       	out	0x3e, r29	; 62
 d44:	0f be       	out	0x3f, r0	; 63
 d46:	cd bf       	out	0x3d, r28	; 61
 d48:	09 94       	ijmp

00000d4a <__epilogue_restores__>:
 d4a:	2a 88       	ldd	r2, Y+18	; 0x12
 d4c:	39 88       	ldd	r3, Y+17	; 0x11
 d4e:	48 88       	ldd	r4, Y+16	; 0x10
 d50:	5f 84       	ldd	r5, Y+15	; 0x0f
 d52:	6e 84       	ldd	r6, Y+14	; 0x0e
 d54:	7d 84       	ldd	r7, Y+13	; 0x0d
 d56:	8c 84       	ldd	r8, Y+12	; 0x0c
 d58:	9b 84       	ldd	r9, Y+11	; 0x0b
 d5a:	aa 84       	ldd	r10, Y+10	; 0x0a
 d5c:	b9 84       	ldd	r11, Y+9	; 0x09
 d5e:	c8 84       	ldd	r12, Y+8	; 0x08
 d60:	df 80       	ldd	r13, Y+7	; 0x07
 d62:	ee 80       	ldd	r14, Y+6	; 0x06
 d64:	fd 80       	ldd	r15, Y+5	; 0x05
 d66:	0c 81       	ldd	r16, Y+4	; 0x04
 d68:	1b 81       	ldd	r17, Y+3	; 0x03
 d6a:	aa 81       	ldd	r26, Y+2	; 0x02
 d6c:	b9 81       	ldd	r27, Y+1	; 0x01
 d6e:	ce 0f       	add	r28, r30
 d70:	d1 1d       	adc	r29, r1
 d72:	0f b6       	in	r0, 0x3f	; 63
 d74:	f8 94       	cli
 d76:	de bf       	out	0x3e, r29	; 62
 d78:	0f be       	out	0x3f, r0	; 63
 d7a:	cd bf       	out	0x3d, r28	; 61
 d7c:	ed 01       	movw	r28, r26
 d7e:	08 95       	ret

00000d80 <_exit>:
 d80:	f8 94       	cli

00000d82 <__stop_program>:
 d82:	ff cf       	rjmp	.-2      	; 0xd82 <__stop_program>
