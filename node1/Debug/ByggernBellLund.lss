
ByggernBellLund.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  00000ebe  00000f52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ebe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800196  00800196  00000fe8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000218  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000201a  00000000  00000000  0000125c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b23  00000000  00000000  00003276  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a72  00000000  00000000  00003d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005ec  00000000  00000000  0000480c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000537  00000000  00000000  00004df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001769  00000000  00000000  0000532f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000268  00000000  00000000  00006a98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_14>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee eb       	ldi	r30, 0xBE	; 190
  84:	fe e0       	ldi	r31, 0x0E	; 14
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a6 39       	cpi	r26, 0x96	; 150
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a6 e9       	ldi	r26, 0x96	; 150
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 3a       	cpi	r26, 0xA0	; 160
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 5d 07 	jmp	0xeba	; 0xeba <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
  ae:	80 b7       	in	r24, 0x30	; 48
  b0:	80 62       	ori	r24, 0x20	; 32
  b2:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
  b4:	85 b7       	in	r24, 0x35	; 53
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	85 bf       	out	0x35, r24	; 53
  ba:	08 95       	ret

000000bc <main>:
#include "MCP_driver.h"
#include "MCP2515.h"
#include <string.h>

int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	64 97       	sbiw	r28, 0x14	; 20
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
	//DDRA = 0xFF;
	uartInit(9600);
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	95 e2       	ldi	r25, 0x25	; 37
  d4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uartInit>
	bus_init();
  d8:	0e 94 57 00 	call	0xae	; 0xae <bus_init>
	oled_init();
  dc:	0e 94 ce 01 	call	0x39c	; 0x39c <oled_init>
	//oled_sram_init();
	CAN_init();
  e0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <CAN_init>
	
	char c = 'a';
  e4:	0f 2e       	mov	r0, r31
  e6:	f1 e6       	ldi	r31, 0x61	; 97
  e8:	5f 2e       	mov	r5, r31
  ea:	f0 2d       	mov	r31, r0
		//oled_print("Hello");
		//oled_sram_write_string(0, "Hello", 4);
		//flush_sram(0);
		//_delay_ms(1000);

		printf("Hello \n\r");
  ec:	0f 2e       	mov	r0, r31
  ee:	f6 e0       	ldi	r31, 0x06	; 6
  f0:	8f 2e       	mov	r8, r31
  f2:	f1 e0       	ldi	r31, 0x01	; 1
  f4:	9f 2e       	mov	r9, r31
  f6:	f0 2d       	mov	r31, r0
		Message m;
		m.id = 1;
  f8:	22 24       	eor	r2, r2
  fa:	23 94       	inc	r2
		m.data[0] = c;
		m.data[1] = 'e';
  fc:	0f 2e       	mov	r0, r31
  fe:	f5 e6       	ldi	r31, 0x65	; 101
 100:	3f 2e       	mov	r3, r31
 102:	f0 2d       	mov	r31, r0
		m.data[2] = 'i';
 104:	0f 2e       	mov	r0, r31
 106:	f9 e6       	ldi	r31, 0x69	; 105
 108:	4f 2e       	mov	r4, r31
 10a:	f0 2d       	mov	r31, r0
		m.data[3] = '!';
		m.length = 4;
		
		CAN_transmit(&m);
		printf("message: %s \n\r", m.data);
 10c:	5e 01       	movw	r10, r28
 10e:	2d e0       	ldi	r18, 0x0D	; 13
 110:	a2 0e       	add	r10, r18
 112:	b1 1c       	adc	r11, r1
 114:	0f 2e       	mov	r0, r31
 116:	ff e0       	ldi	r31, 0x0F	; 15
 118:	cf 2e       	mov	r12, r31
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	df 2e       	mov	r13, r31
 11e:	f0 2d       	mov	r31, r0
		
		
		Message answer;
		memset(&answer, 0, sizeof(Message));
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	7c 01       	movw	r14, r24
		if (CAN_receive(&answer)){
			printf("err: no msg\n");
		}
		printf("answer: %s \n\r", answer.data);
 126:	8e 01       	movw	r16, r28
 128:	0d 5f       	subi	r16, 0xFD	; 253
 12a:	1f 4f       	sbci	r17, 0xFF	; 255
 12c:	0f 2e       	mov	r0, r31
 12e:	fa e2       	ldi	r31, 0x2A	; 42
 130:	6f 2e       	mov	r6, r31
 132:	f1 e0       	ldi	r31, 0x01	; 1
 134:	7f 2e       	mov	r7, r31
 136:	f0 2d       	mov	r31, r0
	
	char c = 'a';
	
    while(1)
    {
		c++;
 138:	53 94       	inc	r5
		//oled_print("Hello");
		//oled_sram_write_string(0, "Hello", 4);
		//flush_sram(0);
		//_delay_ms(1000);

		printf("Hello \n\r");
 13a:	9f 92       	push	r9
 13c:	8f 92       	push	r8
 13e:	0e 94 4a 04 	call	0x894	; 0x894 <printf>
		Message m;
		m.id = 1;
 142:	2b 86       	std	Y+11, r2	; 0x0b
		m.data[0] = c;
 144:	5d 86       	std	Y+13, r5	; 0x0d
		m.data[1] = 'e';
 146:	3e 86       	std	Y+14, r3	; 0x0e
		m.data[2] = 'i';
 148:	4f 86       	std	Y+15, r4	; 0x0f
		m.data[3] = '!';
 14a:	91 e2       	ldi	r25, 0x21	; 33
 14c:	98 8b       	std	Y+16, r25	; 0x10
		m.length = 4;
 14e:	e4 e0       	ldi	r30, 0x04	; 4
 150:	ec 87       	std	Y+12, r30	; 0x0c
		
		CAN_transmit(&m);
 152:	ce 01       	movw	r24, r28
 154:	0b 96       	adiw	r24, 0x0b	; 11
 156:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <CAN_transmit>
		printf("message: %s \n\r", m.data);
 15a:	bf 92       	push	r11
 15c:	af 92       	push	r10
 15e:	df 92       	push	r13
 160:	cf 92       	push	r12
 162:	0e 94 4a 04 	call	0x894	; 0x894 <printf>
		
		
		Message answer;
		memset(&answer, 0, sizeof(Message));
 166:	f7 01       	movw	r30, r14
 168:	2a e0       	ldi	r18, 0x0A	; 10
 16a:	11 92       	st	Z+, r1
 16c:	2a 95       	dec	r18
 16e:	e9 f7       	brne	.-6      	; 0x16a <main+0xae>
		if (CAN_receive(&answer)){
 170:	c7 01       	movw	r24, r14
 172:	0e 94 1f 01 	call	0x23e	; 0x23e <CAN_receive>
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	89 2b       	or	r24, r25
 184:	21 f0       	breq	.+8      	; 0x18e <main+0xd2>
			printf("err: no msg\n");
 186:	8e e1       	ldi	r24, 0x1E	; 30
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <puts>
		}
		printf("answer: %s \n\r", answer.data);
 18e:	1f 93       	push	r17
 190:	0f 93       	push	r16
 192:	7f 92       	push	r7
 194:	6f 92       	push	r6
 196:	0e 94 4a 04 	call	0x894	; 0x894 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	9f e7       	ldi	r25, 0x7F	; 127
 19e:	e6 e1       	ldi	r30, 0x16	; 22
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e0 40       	sbci	r30, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0xe4>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0xee>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0xf0>
		
		_delay_ms(1500);
    }
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	c1 cf       	rjmp	.-126    	; 0x138 <main+0x7c>

000001b6 <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"
#include "MCP2515.h"

int CAN_init(){
	MCP_init();
 1b6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <MCP_init>
	//Enter config mode
	MCP_reset();
 1ba:	0e 94 49 01 	call	0x292	; 0x292 <MCP_reset>
	//set loopback mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	60 ee       	ldi	r22, 0xE0	; 224
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	0e 94 b4 01 	call	0x368	; 0x368 <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
 1c8:	4f ef       	ldi	r20, 0xFF	; 255
 1ca:	63 e0       	ldi	r22, 0x03	; 3
 1cc:	8b e2       	ldi	r24, 0x2B	; 43
 1ce:	0e 94 b4 01 	call	0x368	; 0x368 <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
 1d2:	8e e0       	ldi	r24, 0x0E	; 14
 1d4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
 1d8:	80 7e       	andi	r24, 0xE0	; 224
 1da:	59 f0       	breq	.+22     	; 0x1f2 <CAN_init+0x3c>
		printf("System not in normal mode. Abandon ship.");
 1dc:	88 e3       	ldi	r24, 0x38	; 56
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	9f 93       	push	r25
 1e2:	8f 93       	push	r24
 1e4:	0e 94 4a 04 	call	0x894	; 0x894 <printf>
		return 1;
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	08 95       	ret
	}
	return 0;
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	90 e0       	ldi	r25, 0x00	; 0
}
 1f6:	08 95       	ret

000001f8 <CAN_transmit>:

void CAN_transmit(Message *m){
 1f8:	1f 93       	push	r17
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_write(MCP_TXB0SIDL,m->id);
 200:	68 81       	ld	r22, Y
 202:	82 e3       	ldi	r24, 0x32	; 50
 204:	0e 94 7f 01 	call	0x2fe	; 0x2fe <MCP_write>
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
 208:	69 81       	ldd	r22, Y+1	; 0x01
 20a:	85 e3       	ldi	r24, 0x35	; 53
 20c:	0e 94 7f 01 	call	0x2fe	; 0x2fe <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	88 23       	and	r24, r24
 214:	69 f0       	breq	.+26     	; 0x230 <CAN_transmit+0x38>
 216:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
 218:	fe 01       	movw	r30, r28
 21a:	e1 0f       	add	r30, r17
 21c:	f1 1d       	adc	r31, r1
 21e:	62 81       	ldd	r22, Z+2	; 0x02
 220:	86 e3       	ldi	r24, 0x36	; 54
 222:	81 0f       	add	r24, r17
 224:	0e 94 7f 01 	call	0x2fe	; 0x2fe <MCP_write>
	//Write id to register
	MCP_write(MCP_TXB0SIDL,m->id);
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
 228:	1f 5f       	subi	r17, 0xFF	; 255
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	18 17       	cp	r17, r24
 22e:	a0 f3       	brcs	.-24     	; 0x218 <CAN_transmit+0x20>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
 230:	80 e0       	ldi	r24, 0x00	; 0
 232:	0e 94 93 01 	call	0x326	; 0x326 <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	1f 91       	pop	r17
 23c:	08 95       	ret

0000023e <CAN_receive>:

int CAN_receive(Message *m){
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
 246:	8c e2       	ldi	r24, 0x2C	; 44
 248:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MCP_read>
 24c:	80 ff       	sbrs	r24, 0
 24e:	1b c0       	rjmp	.+54     	; 0x286 <CAN_receive+0x48>
		m->length = MCP_read(MCP_RBB0DLC);
 250:	85 e6       	ldi	r24, 0x65	; 101
 252:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MCP_read>
 256:	89 83       	std	Y+1, r24	; 0x01
		for(uint8_t i = 0; i < m->length; i++){
 258:	88 23       	and	r24, r24
 25a:	69 f0       	breq	.+26     	; 0x276 <CAN_receive+0x38>
 25c:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
 25e:	86 e6       	ldi	r24, 0x66	; 102
 260:	81 0f       	add	r24, r17
 262:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MCP_read>
 266:	fe 01       	movw	r30, r28
 268:	e1 0f       	add	r30, r17
 26a:	f1 1d       	adc	r31, r1
 26c:	82 83       	std	Z+2, r24	; 0x02

int CAN_receive(Message *m){
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		for(uint8_t i = 0; i < m->length; i++){
 26e:	1f 5f       	subi	r17, 0xFF	; 255
 270:	89 81       	ldd	r24, Y+1	; 0x01
 272:	18 17       	cp	r17, r24
 274:	a0 f3       	brcs	.-24     	; 0x25e <CAN_receive+0x20>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
 276:	40 e0       	ldi	r20, 0x00	; 0
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	8c e2       	ldi	r24, 0x2C	; 44
 27c:	0e 94 b4 01 	call	0x368	; 0x368 <MCP_bit_modify>
		return 0;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <CAN_receive+0x4c>
	}
	return 1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	1f 91       	pop	r17
 290:	08 95       	ret

00000292 <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 292:	0e 94 6f 02 	call	0x4de	; 0x4de <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
 296:	80 ec       	ldi	r24, 0xC0	; 192
 298:	0e 94 61 02 	call	0x4c2	; 0x4c2 <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 29c:	0e 94 6d 02 	call	0x4da	; 0x4da <SPI_ss_high>
 2a0:	08 95       	ret

000002a2 <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
 2a2:	cf 93       	push	r28
 2a4:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 2a6:	0e 94 6f 02 	call	0x4de	; 0x4de <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
 2aa:	83 e0       	ldi	r24, 0x03	; 3
 2ac:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	SPI_send(address);
 2b0:	8c 2f       	mov	r24, r28
 2b2:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	uint8_t data = SPI_receive();
 2b6:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPI_receive>
 2ba:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 2bc:	0e 94 6d 02 	call	0x4da	; 0x4da <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
 2c0:	8c 2f       	mov	r24, r28
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <MCP_init>:
#include "SPI_driver.h"
#include "MCP2515.h"

int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	95 e2       	ldi	r25, 0x25	; 37
 2ca:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <uartInit>
	
	//Start SPI driver
	SPI_init();
 2ce:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
 2d2:	0e 94 49 01 	call	0x292	; 0x292 <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
 2d6:	8e e0       	ldi	r24, 0x0E	; 14
 2d8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
 2dc:	80 7e       	andi	r24, 0xE0	; 224
 2de:	80 38       	cpi	r24, 0x80	; 128
 2e0:	59 f0       	breq	.+22     	; 0x2f8 <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
 2e2:	81 e6       	ldi	r24, 0x61	; 97
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	9f 93       	push	r25
 2e8:	8f 93       	push	r24
 2ea:	0e 94 4a 04 	call	0x894	; 0x894 <printf>
		return 1;
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	08 95       	ret
	}
	return 0;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	90 e0       	ldi	r25, 0x00	; 0
}
 2fc:	08 95       	ret

000002fe <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	d8 2f       	mov	r29, r24
 304:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 306:	0e 94 6f 02 	call	0x4de	; 0x4de <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	SPI_send(address);
 310:	8d 2f       	mov	r24, r29
 312:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	SPI_send(data);
 316:	8c 2f       	mov	r24, r28
 318:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 31c:	0e 94 6d 02 	call	0x4da	; 0x4da <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	08 95       	ret

00000326 <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
 326:	cf 93       	push	r28
 328:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 32a:	0e 94 6f 02 	call	0x4de	; 0x4de <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
 32e:	8c 2f       	mov	r24, r28
 330:	83 70       	andi	r24, 0x03	; 3
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	51 f0       	breq	.+20     	; 0x34a <MCP_rts+0x24>
 336:	28 f0       	brcs	.+10     	; 0x342 <MCP_rts+0x1c>
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	59 f0       	breq	.+22     	; 0x352 <MCP_rts+0x2c>
 33c:	83 30       	cpi	r24, 0x03	; 3
 33e:	69 f0       	breq	.+26     	; 0x35a <MCP_rts+0x34>
 340:	0f c0       	rjmp	.+30     	; 0x360 <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
 342:	81 e8       	ldi	r24, 0x81	; 129
 344:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
			break;
 348:	0b c0       	rjmp	.+22     	; 0x360 <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
 34a:	82 e8       	ldi	r24, 0x82	; 130
 34c:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
			break;
 350:	07 c0       	rjmp	.+14     	; 0x360 <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
 352:	84 e8       	ldi	r24, 0x84	; 132
 354:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
			break;
 358:	03 c0       	rjmp	.+6      	; 0x360 <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
 35a:	87 e8       	ldi	r24, 0x87	; 135
 35c:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 360:	0e 94 6d 02 	call	0x4da	; 0x4da <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
 364:	cf 91       	pop	r28
 366:	08 95       	ret

00000368 <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
 368:	1f 93       	push	r17
 36a:	cf 93       	push	r28
 36c:	df 93       	push	r29
 36e:	18 2f       	mov	r17, r24
 370:	d6 2f       	mov	r29, r22
 372:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
 374:	0e 94 6f 02 	call	0x4de	; 0x4de <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
 378:	85 e0       	ldi	r24, 0x05	; 5
 37a:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	SPI_send(address);
 37e:	81 2f       	mov	r24, r17
 380:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	SPI_send(mask);
 384:	8d 2f       	mov	r24, r29
 386:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	SPI_send(data);
 38a:	8c 2f       	mov	r24, r28
 38c:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
 390:	0e 94 6d 02 	call	0x4da	; 0x4da <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	08 95       	ret

0000039c <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 39c:	e0 e0       	ldi	r30, 0x00	; 0
 39e:	f0 e1       	ldi	r31, 0x10	; 16
 3a0:	8e ea       	ldi	r24, 0xAE	; 174
 3a2:	80 83       	st	Z, r24
 3a4:	81 ea       	ldi	r24, 0xA1	; 161
 3a6:	80 83       	st	Z, r24
 3a8:	8a ed       	ldi	r24, 0xDA	; 218
 3aa:	80 83       	st	Z, r24
 3ac:	82 e1       	ldi	r24, 0x12	; 18
 3ae:	80 83       	st	Z, r24
 3b0:	88 ec       	ldi	r24, 0xC8	; 200
 3b2:	80 83       	st	Z, r24
 3b4:	88 ea       	ldi	r24, 0xA8	; 168
 3b6:	80 83       	st	Z, r24
 3b8:	8f e3       	ldi	r24, 0x3F	; 63
 3ba:	80 83       	st	Z, r24
 3bc:	85 ed       	ldi	r24, 0xD5	; 213
 3be:	80 83       	st	Z, r24
 3c0:	80 e8       	ldi	r24, 0x80	; 128
 3c2:	80 83       	st	Z, r24
 3c4:	81 e8       	ldi	r24, 0x81	; 129
 3c6:	80 83       	st	Z, r24
 3c8:	80 e5       	ldi	r24, 0x50	; 80
 3ca:	80 83       	st	Z, r24
 3cc:	89 ed       	ldi	r24, 0xD9	; 217
 3ce:	80 83       	st	Z, r24
 3d0:	81 e2       	ldi	r24, 0x21	; 33
 3d2:	80 83       	st	Z, r24
 3d4:	80 e2       	ldi	r24, 0x20	; 32
 3d6:	80 83       	st	Z, r24
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	80 83       	st	Z, r24
 3dc:	8b ed       	ldi	r24, 0xDB	; 219
 3de:	80 83       	st	Z, r24
 3e0:	80 e3       	ldi	r24, 0x30	; 48
 3e2:	80 83       	st	Z, r24
 3e4:	8d ea       	ldi	r24, 0xAD	; 173
 3e6:	80 83       	st	Z, r24
 3e8:	10 82       	st	Z, r1
 3ea:	84 ea       	ldi	r24, 0xA4	; 164
 3ec:	80 83       	st	Z, r24
 3ee:	86 ea       	ldi	r24, 0xA6	; 166
 3f0:	80 83       	st	Z, r24
 3f2:	8f ea       	ldi	r24, 0xAF	; 175
 3f4:	80 83       	st	Z, r24
 3f6:	08 95       	ret

000003f8 <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
 3f8:	af 92       	push	r10
 3fa:	bf 92       	push	r11
 3fc:	cf 92       	push	r12
 3fe:	df 92       	push	r13
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
 40c:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
 40e:	c0 e0       	ldi	r28, 0x00	; 0
 410:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
 412:	e1 2c       	mov	r14, r1
 414:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 416:	c1 2c       	mov	r12, r1
 418:	68 94       	set
 41a:	dd 24       	eor	r13, r13
 41c:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
 41e:	00 e0       	ldi	r16, 0x00	; 0
 420:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
 422:	ce 01       	movw	r24, r28
 424:	9e 01       	movw	r18, r28
 426:	2f 77       	andi	r18, 0x7F	; 127
 428:	33 27       	eor	r19, r19
 42a:	23 2b       	or	r18, r19
 42c:	39 f4       	brne	.+14     	; 0x43c <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
 42e:	20 eb       	ldi	r18, 0xB0	; 176
 430:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
 432:	f6 01       	movw	r30, r12
 434:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
 436:	ff ef       	ldi	r31, 0xFF	; 255
 438:	ef 1a       	sub	r14, r31
 43a:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
 43c:	8a 0d       	add	r24, r10
 43e:	9b 1d       	adc	r25, r11
 440:	0e 94 71 02 	call	0x4e2	; 0x4e2 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
 444:	f8 01       	movw	r30, r16
 446:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
 448:	21 96       	adiw	r28, 0x01	; 1
 44a:	c1 15       	cp	r28, r1
 44c:	f4 e0       	ldi	r31, 0x04	; 4
 44e:	df 07       	cpc	r29, r31
 450:	41 f7       	brne	.-48     	; 0x422 <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	1f 91       	pop	r17
 458:	0f 91       	pop	r16
 45a:	ff 90       	pop	r15
 45c:	ef 90       	pop	r14
 45e:	df 90       	pop	r13
 460:	cf 90       	pop	r12
 462:	bf 90       	pop	r11
 464:	af 90       	pop	r10
 466:	08 95       	ret

00000468 <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
	oled_sram_flush(0);
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <oled_sram_flush>
	TCNT1 = 0;
 492:	1d bc       	out	0x2d, r1	; 45
 494:	1c bc       	out	0x2c, r1	; 44
}
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	bf 91       	pop	r27
 49c:	af 91       	pop	r26
 49e:	9f 91       	pop	r25
 4a0:	8f 91       	pop	r24
 4a2:	7f 91       	pop	r23
 4a4:	6f 91       	pop	r22
 4a6:	5f 91       	pop	r21
 4a8:	4f 91       	pop	r20
 4aa:	3f 91       	pop	r19
 4ac:	2f 91       	pop	r18
 4ae:	0f 90       	pop	r0
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	0f 90       	pop	r0
 4b4:	1f 90       	pop	r1
 4b6:	18 95       	reti

000004b8 <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
 4b8:	80 eb       	ldi	r24, 0xB0	; 176
 4ba:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 4bc:	81 e5       	ldi	r24, 0x51	; 81
 4be:	8d b9       	out	0x0d, r24	; 13
 4c0:	08 95       	ret

000004c2 <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
 4c2:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
 4c4:	77 9b       	sbis	0x0e, 7	; 14
 4c6:	fe cf       	rjmp	.-4      	; 0x4c4 <SPI_transmit+0x2>
	//Return answer
	return SPDR;
 4c8:	8f b1       	in	r24, 0x0f	; 15
}
 4ca:	08 95       	ret

000004cc <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
 4cc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <SPI_transmit>
 4d0:	08 95       	ret

000004d2 <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
 4d2:	8c ec       	ldi	r24, 0xCC	; 204
 4d4:	0e 94 61 02 	call	0x4c2	; 0x4c2 <SPI_transmit>
}
 4d8:	08 95       	ret

000004da <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
 4da:	c4 9a       	sbi	0x18, 4	; 24
 4dc:	08 95       	ret

000004de <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
 4de:	c4 98       	cbi	0x18, 4	; 24
 4e0:	08 95       	ret

000004e2 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
 4e2:	98 5e       	subi	r25, 0xE8	; 232
 4e4:	fc 01       	movw	r30, r24
 4e6:	80 81       	ld	r24, Z
}
 4e8:	08 95       	ret

000004ea <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
 4ea:	5d 9b       	sbis	0x0b, 5	; 11
 4ec:	fe cf       	rjmp	.-4      	; 0x4ea <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
 4ee:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	08 95       	ret

000004f6 <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
 4f6:	9c 01       	movw	r18, r24
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	70 eb       	ldi	r23, 0xB0	; 176
 500:	84 e0       	ldi	r24, 0x04	; 4
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 97 02 	call	0x52e	; 0x52e <__divmodsi4>
 508:	21 50       	subi	r18, 0x01	; 1
 50a:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 50c:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
 50e:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
 510:	8a b1       	in	r24, 0x0a	; 10
 512:	88 61       	ori	r24, 0x18	; 24
 514:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
 516:	80 b5       	in	r24, 0x20	; 32
 518:	86 68       	ori	r24, 0x86	; 134
 51a:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	85 e7       	ldi	r24, 0x75	; 117
 522:	92 e0       	ldi	r25, 0x02	; 2
 524:	0e 94 ff 03 	call	0x7fe	; 0x7fe <fdevopen>
	
	return 0;
}
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	08 95       	ret

0000052e <__divmodsi4>:
 52e:	05 2e       	mov	r0, r21
 530:	97 fb       	bst	r25, 7
 532:	1e f4       	brtc	.+6      	; 0x53a <__divmodsi4+0xc>
 534:	00 94       	com	r0
 536:	0e 94 ae 02 	call	0x55c	; 0x55c <__negsi2>
 53a:	57 fd       	sbrc	r21, 7
 53c:	07 d0       	rcall	.+14     	; 0x54c <__divmodsi4_neg2>
 53e:	0e 94 b6 02 	call	0x56c	; 0x56c <__udivmodsi4>
 542:	07 fc       	sbrc	r0, 7
 544:	03 d0       	rcall	.+6      	; 0x54c <__divmodsi4_neg2>
 546:	4e f4       	brtc	.+18     	; 0x55a <__divmodsi4_exit>
 548:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__negsi2>

0000054c <__divmodsi4_neg2>:
 54c:	50 95       	com	r21
 54e:	40 95       	com	r20
 550:	30 95       	com	r19
 552:	21 95       	neg	r18
 554:	3f 4f       	sbci	r19, 0xFF	; 255
 556:	4f 4f       	sbci	r20, 0xFF	; 255
 558:	5f 4f       	sbci	r21, 0xFF	; 255

0000055a <__divmodsi4_exit>:
 55a:	08 95       	ret

0000055c <__negsi2>:
 55c:	90 95       	com	r25
 55e:	80 95       	com	r24
 560:	70 95       	com	r23
 562:	61 95       	neg	r22
 564:	7f 4f       	sbci	r23, 0xFF	; 255
 566:	8f 4f       	sbci	r24, 0xFF	; 255
 568:	9f 4f       	sbci	r25, 0xFF	; 255
 56a:	08 95       	ret

0000056c <__udivmodsi4>:
 56c:	a1 e2       	ldi	r26, 0x21	; 33
 56e:	1a 2e       	mov	r1, r26
 570:	aa 1b       	sub	r26, r26
 572:	bb 1b       	sub	r27, r27
 574:	fd 01       	movw	r30, r26
 576:	0d c0       	rjmp	.+26     	; 0x592 <__udivmodsi4_ep>

00000578 <__udivmodsi4_loop>:
 578:	aa 1f       	adc	r26, r26
 57a:	bb 1f       	adc	r27, r27
 57c:	ee 1f       	adc	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	a2 17       	cp	r26, r18
 582:	b3 07       	cpc	r27, r19
 584:	e4 07       	cpc	r30, r20
 586:	f5 07       	cpc	r31, r21
 588:	20 f0       	brcs	.+8      	; 0x592 <__udivmodsi4_ep>
 58a:	a2 1b       	sub	r26, r18
 58c:	b3 0b       	sbc	r27, r19
 58e:	e4 0b       	sbc	r30, r20
 590:	f5 0b       	sbc	r31, r21

00000592 <__udivmodsi4_ep>:
 592:	66 1f       	adc	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	1a 94       	dec	r1
 59c:	69 f7       	brne	.-38     	; 0x578 <__udivmodsi4_loop>
 59e:	60 95       	com	r22
 5a0:	70 95       	com	r23
 5a2:	80 95       	com	r24
 5a4:	90 95       	com	r25
 5a6:	9b 01       	movw	r18, r22
 5a8:	ac 01       	movw	r20, r24
 5aa:	bd 01       	movw	r22, r26
 5ac:	cf 01       	movw	r24, r30
 5ae:	08 95       	ret

000005b0 <malloc>:
 5b0:	cf 93       	push	r28
 5b2:	df 93       	push	r29
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	91 05       	cpc	r25, r1
 5b8:	10 f4       	brcc	.+4      	; 0x5be <malloc+0xe>
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	e0 91 98 01 	lds	r30, 0x0198
 5c2:	f0 91 99 01 	lds	r31, 0x0199
 5c6:	20 e0       	ldi	r18, 0x00	; 0
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	a0 e0       	ldi	r26, 0x00	; 0
 5cc:	b0 e0       	ldi	r27, 0x00	; 0
 5ce:	30 97       	sbiw	r30, 0x00	; 0
 5d0:	39 f1       	breq	.+78     	; 0x620 <malloc+0x70>
 5d2:	40 81       	ld	r20, Z
 5d4:	51 81       	ldd	r21, Z+1	; 0x01
 5d6:	48 17       	cp	r20, r24
 5d8:	59 07       	cpc	r21, r25
 5da:	b8 f0       	brcs	.+46     	; 0x60a <malloc+0x5a>
 5dc:	48 17       	cp	r20, r24
 5de:	59 07       	cpc	r21, r25
 5e0:	71 f4       	brne	.+28     	; 0x5fe <malloc+0x4e>
 5e2:	82 81       	ldd	r24, Z+2	; 0x02
 5e4:	93 81       	ldd	r25, Z+3	; 0x03
 5e6:	10 97       	sbiw	r26, 0x00	; 0
 5e8:	29 f0       	breq	.+10     	; 0x5f4 <malloc+0x44>
 5ea:	13 96       	adiw	r26, 0x03	; 3
 5ec:	9c 93       	st	X, r25
 5ee:	8e 93       	st	-X, r24
 5f0:	12 97       	sbiw	r26, 0x02	; 2
 5f2:	2c c0       	rjmp	.+88     	; 0x64c <malloc+0x9c>
 5f4:	90 93 99 01 	sts	0x0199, r25
 5f8:	80 93 98 01 	sts	0x0198, r24
 5fc:	27 c0       	rjmp	.+78     	; 0x64c <malloc+0x9c>
 5fe:	21 15       	cp	r18, r1
 600:	31 05       	cpc	r19, r1
 602:	31 f0       	breq	.+12     	; 0x610 <malloc+0x60>
 604:	42 17       	cp	r20, r18
 606:	53 07       	cpc	r21, r19
 608:	18 f0       	brcs	.+6      	; 0x610 <malloc+0x60>
 60a:	a9 01       	movw	r20, r18
 60c:	db 01       	movw	r26, r22
 60e:	01 c0       	rjmp	.+2      	; 0x612 <malloc+0x62>
 610:	ef 01       	movw	r28, r30
 612:	9a 01       	movw	r18, r20
 614:	bd 01       	movw	r22, r26
 616:	df 01       	movw	r26, r30
 618:	02 80       	ldd	r0, Z+2	; 0x02
 61a:	f3 81       	ldd	r31, Z+3	; 0x03
 61c:	e0 2d       	mov	r30, r0
 61e:	d7 cf       	rjmp	.-82     	; 0x5ce <malloc+0x1e>
 620:	21 15       	cp	r18, r1
 622:	31 05       	cpc	r19, r1
 624:	f9 f0       	breq	.+62     	; 0x664 <malloc+0xb4>
 626:	28 1b       	sub	r18, r24
 628:	39 0b       	sbc	r19, r25
 62a:	24 30       	cpi	r18, 0x04	; 4
 62c:	31 05       	cpc	r19, r1
 62e:	80 f4       	brcc	.+32     	; 0x650 <malloc+0xa0>
 630:	8a 81       	ldd	r24, Y+2	; 0x02
 632:	9b 81       	ldd	r25, Y+3	; 0x03
 634:	61 15       	cp	r22, r1
 636:	71 05       	cpc	r23, r1
 638:	21 f0       	breq	.+8      	; 0x642 <malloc+0x92>
 63a:	fb 01       	movw	r30, r22
 63c:	93 83       	std	Z+3, r25	; 0x03
 63e:	82 83       	std	Z+2, r24	; 0x02
 640:	04 c0       	rjmp	.+8      	; 0x64a <malloc+0x9a>
 642:	90 93 99 01 	sts	0x0199, r25
 646:	80 93 98 01 	sts	0x0198, r24
 64a:	fe 01       	movw	r30, r28
 64c:	32 96       	adiw	r30, 0x02	; 2
 64e:	44 c0       	rjmp	.+136    	; 0x6d8 <malloc+0x128>
 650:	fe 01       	movw	r30, r28
 652:	e2 0f       	add	r30, r18
 654:	f3 1f       	adc	r31, r19
 656:	81 93       	st	Z+, r24
 658:	91 93       	st	Z+, r25
 65a:	22 50       	subi	r18, 0x02	; 2
 65c:	31 09       	sbc	r19, r1
 65e:	39 83       	std	Y+1, r19	; 0x01
 660:	28 83       	st	Y, r18
 662:	3a c0       	rjmp	.+116    	; 0x6d8 <malloc+0x128>
 664:	20 91 96 01 	lds	r18, 0x0196
 668:	30 91 97 01 	lds	r19, 0x0197
 66c:	23 2b       	or	r18, r19
 66e:	41 f4       	brne	.+16     	; 0x680 <malloc+0xd0>
 670:	20 91 02 01 	lds	r18, 0x0102
 674:	30 91 03 01 	lds	r19, 0x0103
 678:	30 93 97 01 	sts	0x0197, r19
 67c:	20 93 96 01 	sts	0x0196, r18
 680:	20 91 00 01 	lds	r18, 0x0100
 684:	30 91 01 01 	lds	r19, 0x0101
 688:	21 15       	cp	r18, r1
 68a:	31 05       	cpc	r19, r1
 68c:	41 f4       	brne	.+16     	; 0x69e <malloc+0xee>
 68e:	2d b7       	in	r18, 0x3d	; 61
 690:	3e b7       	in	r19, 0x3e	; 62
 692:	40 91 04 01 	lds	r20, 0x0104
 696:	50 91 05 01 	lds	r21, 0x0105
 69a:	24 1b       	sub	r18, r20
 69c:	35 0b       	sbc	r19, r21
 69e:	e0 91 96 01 	lds	r30, 0x0196
 6a2:	f0 91 97 01 	lds	r31, 0x0197
 6a6:	e2 17       	cp	r30, r18
 6a8:	f3 07       	cpc	r31, r19
 6aa:	a0 f4       	brcc	.+40     	; 0x6d4 <malloc+0x124>
 6ac:	2e 1b       	sub	r18, r30
 6ae:	3f 0b       	sbc	r19, r31
 6b0:	28 17       	cp	r18, r24
 6b2:	39 07       	cpc	r19, r25
 6b4:	78 f0       	brcs	.+30     	; 0x6d4 <malloc+0x124>
 6b6:	ac 01       	movw	r20, r24
 6b8:	4e 5f       	subi	r20, 0xFE	; 254
 6ba:	5f 4f       	sbci	r21, 0xFF	; 255
 6bc:	24 17       	cp	r18, r20
 6be:	35 07       	cpc	r19, r21
 6c0:	48 f0       	brcs	.+18     	; 0x6d4 <malloc+0x124>
 6c2:	4e 0f       	add	r20, r30
 6c4:	5f 1f       	adc	r21, r31
 6c6:	50 93 97 01 	sts	0x0197, r21
 6ca:	40 93 96 01 	sts	0x0196, r20
 6ce:	81 93       	st	Z+, r24
 6d0:	91 93       	st	Z+, r25
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <malloc+0x128>
 6d4:	e0 e0       	ldi	r30, 0x00	; 0
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	cf 01       	movw	r24, r30
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	08 95       	ret

000006e0 <free>:
 6e0:	cf 93       	push	r28
 6e2:	df 93       	push	r29
 6e4:	00 97       	sbiw	r24, 0x00	; 0
 6e6:	09 f4       	brne	.+2      	; 0x6ea <free+0xa>
 6e8:	87 c0       	rjmp	.+270    	; 0x7f8 <free+0x118>
 6ea:	fc 01       	movw	r30, r24
 6ec:	32 97       	sbiw	r30, 0x02	; 2
 6ee:	13 82       	std	Z+3, r1	; 0x03
 6f0:	12 82       	std	Z+2, r1	; 0x02
 6f2:	c0 91 98 01 	lds	r28, 0x0198
 6f6:	d0 91 99 01 	lds	r29, 0x0199
 6fa:	20 97       	sbiw	r28, 0x00	; 0
 6fc:	81 f4       	brne	.+32     	; 0x71e <free+0x3e>
 6fe:	20 81       	ld	r18, Z
 700:	31 81       	ldd	r19, Z+1	; 0x01
 702:	28 0f       	add	r18, r24
 704:	39 1f       	adc	r19, r25
 706:	80 91 96 01 	lds	r24, 0x0196
 70a:	90 91 97 01 	lds	r25, 0x0197
 70e:	82 17       	cp	r24, r18
 710:	93 07       	cpc	r25, r19
 712:	79 f5       	brne	.+94     	; 0x772 <free+0x92>
 714:	f0 93 97 01 	sts	0x0197, r31
 718:	e0 93 96 01 	sts	0x0196, r30
 71c:	6d c0       	rjmp	.+218    	; 0x7f8 <free+0x118>
 71e:	de 01       	movw	r26, r28
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	ae 17       	cp	r26, r30
 726:	bf 07       	cpc	r27, r31
 728:	50 f4       	brcc	.+20     	; 0x73e <free+0x5e>
 72a:	12 96       	adiw	r26, 0x02	; 2
 72c:	4d 91       	ld	r20, X+
 72e:	5c 91       	ld	r21, X
 730:	13 97       	sbiw	r26, 0x03	; 3
 732:	9d 01       	movw	r18, r26
 734:	41 15       	cp	r20, r1
 736:	51 05       	cpc	r21, r1
 738:	09 f1       	breq	.+66     	; 0x77c <free+0x9c>
 73a:	da 01       	movw	r26, r20
 73c:	f3 cf       	rjmp	.-26     	; 0x724 <free+0x44>
 73e:	b3 83       	std	Z+3, r27	; 0x03
 740:	a2 83       	std	Z+2, r26	; 0x02
 742:	40 81       	ld	r20, Z
 744:	51 81       	ldd	r21, Z+1	; 0x01
 746:	84 0f       	add	r24, r20
 748:	95 1f       	adc	r25, r21
 74a:	8a 17       	cp	r24, r26
 74c:	9b 07       	cpc	r25, r27
 74e:	71 f4       	brne	.+28     	; 0x76c <free+0x8c>
 750:	8d 91       	ld	r24, X+
 752:	9c 91       	ld	r25, X
 754:	11 97       	sbiw	r26, 0x01	; 1
 756:	84 0f       	add	r24, r20
 758:	95 1f       	adc	r25, r21
 75a:	02 96       	adiw	r24, 0x02	; 2
 75c:	91 83       	std	Z+1, r25	; 0x01
 75e:	80 83       	st	Z, r24
 760:	12 96       	adiw	r26, 0x02	; 2
 762:	8d 91       	ld	r24, X+
 764:	9c 91       	ld	r25, X
 766:	13 97       	sbiw	r26, 0x03	; 3
 768:	93 83       	std	Z+3, r25	; 0x03
 76a:	82 83       	std	Z+2, r24	; 0x02
 76c:	21 15       	cp	r18, r1
 76e:	31 05       	cpc	r19, r1
 770:	29 f4       	brne	.+10     	; 0x77c <free+0x9c>
 772:	f0 93 99 01 	sts	0x0199, r31
 776:	e0 93 98 01 	sts	0x0198, r30
 77a:	3e c0       	rjmp	.+124    	; 0x7f8 <free+0x118>
 77c:	d9 01       	movw	r26, r18
 77e:	13 96       	adiw	r26, 0x03	; 3
 780:	fc 93       	st	X, r31
 782:	ee 93       	st	-X, r30
 784:	12 97       	sbiw	r26, 0x02	; 2
 786:	4d 91       	ld	r20, X+
 788:	5d 91       	ld	r21, X+
 78a:	a4 0f       	add	r26, r20
 78c:	b5 1f       	adc	r27, r21
 78e:	ea 17       	cp	r30, r26
 790:	fb 07       	cpc	r31, r27
 792:	79 f4       	brne	.+30     	; 0x7b2 <free+0xd2>
 794:	80 81       	ld	r24, Z
 796:	91 81       	ldd	r25, Z+1	; 0x01
 798:	84 0f       	add	r24, r20
 79a:	95 1f       	adc	r25, r21
 79c:	02 96       	adiw	r24, 0x02	; 2
 79e:	d9 01       	movw	r26, r18
 7a0:	11 96       	adiw	r26, 0x01	; 1
 7a2:	9c 93       	st	X, r25
 7a4:	8e 93       	st	-X, r24
 7a6:	82 81       	ldd	r24, Z+2	; 0x02
 7a8:	93 81       	ldd	r25, Z+3	; 0x03
 7aa:	13 96       	adiw	r26, 0x03	; 3
 7ac:	9c 93       	st	X, r25
 7ae:	8e 93       	st	-X, r24
 7b0:	12 97       	sbiw	r26, 0x02	; 2
 7b2:	e0 e0       	ldi	r30, 0x00	; 0
 7b4:	f0 e0       	ldi	r31, 0x00	; 0
 7b6:	8a 81       	ldd	r24, Y+2	; 0x02
 7b8:	9b 81       	ldd	r25, Y+3	; 0x03
 7ba:	00 97       	sbiw	r24, 0x00	; 0
 7bc:	19 f0       	breq	.+6      	; 0x7c4 <free+0xe4>
 7be:	fe 01       	movw	r30, r28
 7c0:	ec 01       	movw	r28, r24
 7c2:	f9 cf       	rjmp	.-14     	; 0x7b6 <free+0xd6>
 7c4:	ce 01       	movw	r24, r28
 7c6:	02 96       	adiw	r24, 0x02	; 2
 7c8:	28 81       	ld	r18, Y
 7ca:	39 81       	ldd	r19, Y+1	; 0x01
 7cc:	82 0f       	add	r24, r18
 7ce:	93 1f       	adc	r25, r19
 7d0:	20 91 96 01 	lds	r18, 0x0196
 7d4:	30 91 97 01 	lds	r19, 0x0197
 7d8:	28 17       	cp	r18, r24
 7da:	39 07       	cpc	r19, r25
 7dc:	69 f4       	brne	.+26     	; 0x7f8 <free+0x118>
 7de:	30 97       	sbiw	r30, 0x00	; 0
 7e0:	29 f4       	brne	.+10     	; 0x7ec <free+0x10c>
 7e2:	10 92 99 01 	sts	0x0199, r1
 7e6:	10 92 98 01 	sts	0x0198, r1
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <free+0x110>
 7ec:	13 82       	std	Z+3, r1	; 0x03
 7ee:	12 82       	std	Z+2, r1	; 0x02
 7f0:	d0 93 97 01 	sts	0x0197, r29
 7f4:	c0 93 96 01 	sts	0x0196, r28
 7f8:	df 91       	pop	r29
 7fa:	cf 91       	pop	r28
 7fc:	08 95       	ret

000007fe <fdevopen>:
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	ec 01       	movw	r28, r24
 808:	8b 01       	movw	r16, r22
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	31 f4       	brne	.+12     	; 0x81a <fdevopen+0x1c>
 80e:	61 15       	cp	r22, r1
 810:	71 05       	cpc	r23, r1
 812:	19 f4       	brne	.+6      	; 0x81a <fdevopen+0x1c>
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	38 c0       	rjmp	.+112    	; 0x88a <fdevopen+0x8c>
 81a:	6e e0       	ldi	r22, 0x0E	; 14
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	81 e0       	ldi	r24, 0x01	; 1
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 94 5d 06 	call	0xcba	; 0xcba <calloc>
 826:	fc 01       	movw	r30, r24
 828:	00 97       	sbiw	r24, 0x00	; 0
 82a:	a1 f3       	breq	.-24     	; 0x814 <fdevopen+0x16>
 82c:	80 e8       	ldi	r24, 0x80	; 128
 82e:	83 83       	std	Z+3, r24	; 0x03
 830:	01 15       	cp	r16, r1
 832:	11 05       	cpc	r17, r1
 834:	71 f0       	breq	.+28     	; 0x852 <fdevopen+0x54>
 836:	13 87       	std	Z+11, r17	; 0x0b
 838:	02 87       	std	Z+10, r16	; 0x0a
 83a:	81 e8       	ldi	r24, 0x81	; 129
 83c:	83 83       	std	Z+3, r24	; 0x03
 83e:	80 91 9a 01 	lds	r24, 0x019A
 842:	90 91 9b 01 	lds	r25, 0x019B
 846:	89 2b       	or	r24, r25
 848:	21 f4       	brne	.+8      	; 0x852 <fdevopen+0x54>
 84a:	f0 93 9b 01 	sts	0x019B, r31
 84e:	e0 93 9a 01 	sts	0x019A, r30
 852:	20 97       	sbiw	r28, 0x00	; 0
 854:	c9 f0       	breq	.+50     	; 0x888 <fdevopen+0x8a>
 856:	d1 87       	std	Z+9, r29	; 0x09
 858:	c0 87       	std	Z+8, r28	; 0x08
 85a:	83 81       	ldd	r24, Z+3	; 0x03
 85c:	82 60       	ori	r24, 0x02	; 2
 85e:	83 83       	std	Z+3, r24	; 0x03
 860:	80 91 9c 01 	lds	r24, 0x019C
 864:	90 91 9d 01 	lds	r25, 0x019D
 868:	89 2b       	or	r24, r25
 86a:	71 f4       	brne	.+28     	; 0x888 <fdevopen+0x8a>
 86c:	f0 93 9d 01 	sts	0x019D, r31
 870:	e0 93 9c 01 	sts	0x019C, r30
 874:	80 91 9e 01 	lds	r24, 0x019E
 878:	90 91 9f 01 	lds	r25, 0x019F
 87c:	89 2b       	or	r24, r25
 87e:	21 f4       	brne	.+8      	; 0x888 <fdevopen+0x8a>
 880:	f0 93 9f 01 	sts	0x019F, r31
 884:	e0 93 9e 01 	sts	0x019E, r30
 888:	cf 01       	movw	r24, r30
 88a:	df 91       	pop	r29
 88c:	cf 91       	pop	r28
 88e:	1f 91       	pop	r17
 890:	0f 91       	pop	r16
 892:	08 95       	ret

00000894 <printf>:
 894:	a0 e0       	ldi	r26, 0x00	; 0
 896:	b0 e0       	ldi	r27, 0x00	; 0
 898:	e0 e5       	ldi	r30, 0x50	; 80
 89a:	f4 e0       	ldi	r31, 0x04	; 4
 89c:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__prologue_saves__+0x20>
 8a0:	fe 01       	movw	r30, r28
 8a2:	35 96       	adiw	r30, 0x05	; 5
 8a4:	61 91       	ld	r22, Z+
 8a6:	71 91       	ld	r23, Z+
 8a8:	af 01       	movw	r20, r30
 8aa:	80 91 9c 01 	lds	r24, 0x019C
 8ae:	90 91 9d 01 	lds	r25, 0x019D
 8b2:	0e 94 8b 04 	call	0x916	; 0x916 <vfprintf>
 8b6:	e2 e0       	ldi	r30, 0x02	; 2
 8b8:	0c 94 52 07 	jmp	0xea4	; 0xea4 <__epilogue_restores__+0x20>

000008bc <puts>:
 8bc:	0f 93       	push	r16
 8be:	1f 93       	push	r17
 8c0:	cf 93       	push	r28
 8c2:	df 93       	push	r29
 8c4:	e0 91 9c 01 	lds	r30, 0x019C
 8c8:	f0 91 9d 01 	lds	r31, 0x019D
 8cc:	23 81       	ldd	r18, Z+3	; 0x03
 8ce:	21 ff       	sbrs	r18, 1
 8d0:	1b c0       	rjmp	.+54     	; 0x908 <puts+0x4c>
 8d2:	ec 01       	movw	r28, r24
 8d4:	00 e0       	ldi	r16, 0x00	; 0
 8d6:	10 e0       	ldi	r17, 0x00	; 0
 8d8:	89 91       	ld	r24, Y+
 8da:	60 91 9c 01 	lds	r22, 0x019C
 8de:	70 91 9d 01 	lds	r23, 0x019D
 8e2:	db 01       	movw	r26, r22
 8e4:	18 96       	adiw	r26, 0x08	; 8
 8e6:	ed 91       	ld	r30, X+
 8e8:	fc 91       	ld	r31, X
 8ea:	19 97       	sbiw	r26, 0x09	; 9
 8ec:	88 23       	and	r24, r24
 8ee:	31 f0       	breq	.+12     	; 0x8fc <puts+0x40>
 8f0:	09 95       	icall
 8f2:	89 2b       	or	r24, r25
 8f4:	89 f3       	breq	.-30     	; 0x8d8 <puts+0x1c>
 8f6:	0f ef       	ldi	r16, 0xFF	; 255
 8f8:	1f ef       	ldi	r17, 0xFF	; 255
 8fa:	ee cf       	rjmp	.-36     	; 0x8d8 <puts+0x1c>
 8fc:	8a e0       	ldi	r24, 0x0A	; 10
 8fe:	09 95       	icall
 900:	89 2b       	or	r24, r25
 902:	11 f4       	brne	.+4      	; 0x908 <puts+0x4c>
 904:	c8 01       	movw	r24, r16
 906:	02 c0       	rjmp	.+4      	; 0x90c <puts+0x50>
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	9f ef       	ldi	r25, 0xFF	; 255
 90c:	df 91       	pop	r29
 90e:	cf 91       	pop	r28
 910:	1f 91       	pop	r17
 912:	0f 91       	pop	r16
 914:	08 95       	ret

00000916 <vfprintf>:
 916:	ac e0       	ldi	r26, 0x0C	; 12
 918:	b0 e0       	ldi	r27, 0x00	; 0
 91a:	e1 e9       	ldi	r30, 0x91	; 145
 91c:	f4 e0       	ldi	r31, 0x04	; 4
 91e:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__prologue_saves__>
 922:	7c 01       	movw	r14, r24
 924:	6b 01       	movw	r12, r22
 926:	8a 01       	movw	r16, r20
 928:	fc 01       	movw	r30, r24
 92a:	17 82       	std	Z+7, r1	; 0x07
 92c:	16 82       	std	Z+6, r1	; 0x06
 92e:	83 81       	ldd	r24, Z+3	; 0x03
 930:	81 ff       	sbrs	r24, 1
 932:	bd c1       	rjmp	.+890    	; 0xcae <vfprintf+0x398>
 934:	ce 01       	movw	r24, r28
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	4c 01       	movw	r8, r24
 93a:	f7 01       	movw	r30, r14
 93c:	93 81       	ldd	r25, Z+3	; 0x03
 93e:	f6 01       	movw	r30, r12
 940:	93 fd       	sbrc	r25, 3
 942:	85 91       	lpm	r24, Z+
 944:	93 ff       	sbrs	r25, 3
 946:	81 91       	ld	r24, Z+
 948:	6f 01       	movw	r12, r30
 94a:	88 23       	and	r24, r24
 94c:	09 f4       	brne	.+2      	; 0x950 <vfprintf+0x3a>
 94e:	ab c1       	rjmp	.+854    	; 0xca6 <vfprintf+0x390>
 950:	85 32       	cpi	r24, 0x25	; 37
 952:	39 f4       	brne	.+14     	; 0x962 <vfprintf+0x4c>
 954:	93 fd       	sbrc	r25, 3
 956:	85 91       	lpm	r24, Z+
 958:	93 ff       	sbrs	r25, 3
 95a:	81 91       	ld	r24, Z+
 95c:	6f 01       	movw	r12, r30
 95e:	85 32       	cpi	r24, 0x25	; 37
 960:	29 f4       	brne	.+10     	; 0x96c <vfprintf+0x56>
 962:	b7 01       	movw	r22, r14
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 96a:	e7 cf       	rjmp	.-50     	; 0x93a <vfprintf+0x24>
 96c:	51 2c       	mov	r5, r1
 96e:	31 2c       	mov	r3, r1
 970:	20 e0       	ldi	r18, 0x00	; 0
 972:	20 32       	cpi	r18, 0x20	; 32
 974:	a0 f4       	brcc	.+40     	; 0x99e <vfprintf+0x88>
 976:	8b 32       	cpi	r24, 0x2B	; 43
 978:	69 f0       	breq	.+26     	; 0x994 <vfprintf+0x7e>
 97a:	30 f4       	brcc	.+12     	; 0x988 <vfprintf+0x72>
 97c:	80 32       	cpi	r24, 0x20	; 32
 97e:	59 f0       	breq	.+22     	; 0x996 <vfprintf+0x80>
 980:	83 32       	cpi	r24, 0x23	; 35
 982:	69 f4       	brne	.+26     	; 0x99e <vfprintf+0x88>
 984:	20 61       	ori	r18, 0x10	; 16
 986:	2c c0       	rjmp	.+88     	; 0x9e0 <vfprintf+0xca>
 988:	8d 32       	cpi	r24, 0x2D	; 45
 98a:	39 f0       	breq	.+14     	; 0x99a <vfprintf+0x84>
 98c:	80 33       	cpi	r24, 0x30	; 48
 98e:	39 f4       	brne	.+14     	; 0x99e <vfprintf+0x88>
 990:	21 60       	ori	r18, 0x01	; 1
 992:	26 c0       	rjmp	.+76     	; 0x9e0 <vfprintf+0xca>
 994:	22 60       	ori	r18, 0x02	; 2
 996:	24 60       	ori	r18, 0x04	; 4
 998:	23 c0       	rjmp	.+70     	; 0x9e0 <vfprintf+0xca>
 99a:	28 60       	ori	r18, 0x08	; 8
 99c:	21 c0       	rjmp	.+66     	; 0x9e0 <vfprintf+0xca>
 99e:	27 fd       	sbrc	r18, 7
 9a0:	27 c0       	rjmp	.+78     	; 0x9f0 <vfprintf+0xda>
 9a2:	30 ed       	ldi	r19, 0xD0	; 208
 9a4:	38 0f       	add	r19, r24
 9a6:	3a 30       	cpi	r19, 0x0A	; 10
 9a8:	78 f4       	brcc	.+30     	; 0x9c8 <vfprintf+0xb2>
 9aa:	26 ff       	sbrs	r18, 6
 9ac:	06 c0       	rjmp	.+12     	; 0x9ba <vfprintf+0xa4>
 9ae:	fa e0       	ldi	r31, 0x0A	; 10
 9b0:	5f 9e       	mul	r5, r31
 9b2:	30 0d       	add	r19, r0
 9b4:	11 24       	eor	r1, r1
 9b6:	53 2e       	mov	r5, r19
 9b8:	13 c0       	rjmp	.+38     	; 0x9e0 <vfprintf+0xca>
 9ba:	8a e0       	ldi	r24, 0x0A	; 10
 9bc:	38 9e       	mul	r3, r24
 9be:	30 0d       	add	r19, r0
 9c0:	11 24       	eor	r1, r1
 9c2:	33 2e       	mov	r3, r19
 9c4:	20 62       	ori	r18, 0x20	; 32
 9c6:	0c c0       	rjmp	.+24     	; 0x9e0 <vfprintf+0xca>
 9c8:	8e 32       	cpi	r24, 0x2E	; 46
 9ca:	21 f4       	brne	.+8      	; 0x9d4 <vfprintf+0xbe>
 9cc:	26 fd       	sbrc	r18, 6
 9ce:	6b c1       	rjmp	.+726    	; 0xca6 <vfprintf+0x390>
 9d0:	20 64       	ori	r18, 0x40	; 64
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <vfprintf+0xca>
 9d4:	8c 36       	cpi	r24, 0x6C	; 108
 9d6:	11 f4       	brne	.+4      	; 0x9dc <vfprintf+0xc6>
 9d8:	20 68       	ori	r18, 0x80	; 128
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <vfprintf+0xca>
 9dc:	88 36       	cpi	r24, 0x68	; 104
 9de:	41 f4       	brne	.+16     	; 0x9f0 <vfprintf+0xda>
 9e0:	f6 01       	movw	r30, r12
 9e2:	93 fd       	sbrc	r25, 3
 9e4:	85 91       	lpm	r24, Z+
 9e6:	93 ff       	sbrs	r25, 3
 9e8:	81 91       	ld	r24, Z+
 9ea:	6f 01       	movw	r12, r30
 9ec:	81 11       	cpse	r24, r1
 9ee:	c1 cf       	rjmp	.-126    	; 0x972 <vfprintf+0x5c>
 9f0:	98 2f       	mov	r25, r24
 9f2:	9f 7d       	andi	r25, 0xDF	; 223
 9f4:	95 54       	subi	r25, 0x45	; 69
 9f6:	93 30       	cpi	r25, 0x03	; 3
 9f8:	28 f4       	brcc	.+10     	; 0xa04 <vfprintf+0xee>
 9fa:	0c 5f       	subi	r16, 0xFC	; 252
 9fc:	1f 4f       	sbci	r17, 0xFF	; 255
 9fe:	ff e3       	ldi	r31, 0x3F	; 63
 a00:	f9 83       	std	Y+1, r31	; 0x01
 a02:	0d c0       	rjmp	.+26     	; 0xa1e <vfprintf+0x108>
 a04:	83 36       	cpi	r24, 0x63	; 99
 a06:	31 f0       	breq	.+12     	; 0xa14 <vfprintf+0xfe>
 a08:	83 37       	cpi	r24, 0x73	; 115
 a0a:	71 f0       	breq	.+28     	; 0xa28 <vfprintf+0x112>
 a0c:	83 35       	cpi	r24, 0x53	; 83
 a0e:	09 f0       	breq	.+2      	; 0xa12 <vfprintf+0xfc>
 a10:	5b c0       	rjmp	.+182    	; 0xac8 <vfprintf+0x1b2>
 a12:	22 c0       	rjmp	.+68     	; 0xa58 <vfprintf+0x142>
 a14:	f8 01       	movw	r30, r16
 a16:	80 81       	ld	r24, Z
 a18:	89 83       	std	Y+1, r24	; 0x01
 a1a:	0e 5f       	subi	r16, 0xFE	; 254
 a1c:	1f 4f       	sbci	r17, 0xFF	; 255
 a1e:	44 24       	eor	r4, r4
 a20:	43 94       	inc	r4
 a22:	51 2c       	mov	r5, r1
 a24:	54 01       	movw	r10, r8
 a26:	15 c0       	rjmp	.+42     	; 0xa52 <vfprintf+0x13c>
 a28:	38 01       	movw	r6, r16
 a2a:	f2 e0       	ldi	r31, 0x02	; 2
 a2c:	6f 0e       	add	r6, r31
 a2e:	71 1c       	adc	r7, r1
 a30:	f8 01       	movw	r30, r16
 a32:	a0 80       	ld	r10, Z
 a34:	b1 80       	ldd	r11, Z+1	; 0x01
 a36:	26 ff       	sbrs	r18, 6
 a38:	03 c0       	rjmp	.+6      	; 0xa40 <vfprintf+0x12a>
 a3a:	65 2d       	mov	r22, r5
 a3c:	70 e0       	ldi	r23, 0x00	; 0
 a3e:	02 c0       	rjmp	.+4      	; 0xa44 <vfprintf+0x12e>
 a40:	6f ef       	ldi	r22, 0xFF	; 255
 a42:	7f ef       	ldi	r23, 0xFF	; 255
 a44:	c5 01       	movw	r24, r10
 a46:	2c 87       	std	Y+12, r18	; 0x0c
 a48:	0e 94 8b 06 	call	0xd16	; 0xd16 <strnlen>
 a4c:	2c 01       	movw	r4, r24
 a4e:	83 01       	movw	r16, r6
 a50:	2c 85       	ldd	r18, Y+12	; 0x0c
 a52:	2f 77       	andi	r18, 0x7F	; 127
 a54:	22 2e       	mov	r2, r18
 a56:	17 c0       	rjmp	.+46     	; 0xa86 <vfprintf+0x170>
 a58:	38 01       	movw	r6, r16
 a5a:	f2 e0       	ldi	r31, 0x02	; 2
 a5c:	6f 0e       	add	r6, r31
 a5e:	71 1c       	adc	r7, r1
 a60:	f8 01       	movw	r30, r16
 a62:	a0 80       	ld	r10, Z
 a64:	b1 80       	ldd	r11, Z+1	; 0x01
 a66:	26 ff       	sbrs	r18, 6
 a68:	03 c0       	rjmp	.+6      	; 0xa70 <vfprintf+0x15a>
 a6a:	65 2d       	mov	r22, r5
 a6c:	70 e0       	ldi	r23, 0x00	; 0
 a6e:	02 c0       	rjmp	.+4      	; 0xa74 <vfprintf+0x15e>
 a70:	6f ef       	ldi	r22, 0xFF	; 255
 a72:	7f ef       	ldi	r23, 0xFF	; 255
 a74:	c5 01       	movw	r24, r10
 a76:	2c 87       	std	Y+12, r18	; 0x0c
 a78:	0e 94 79 06 	call	0xcf2	; 0xcf2 <strnlen_P>
 a7c:	2c 01       	movw	r4, r24
 a7e:	2c 85       	ldd	r18, Y+12	; 0x0c
 a80:	20 68       	ori	r18, 0x80	; 128
 a82:	22 2e       	mov	r2, r18
 a84:	83 01       	movw	r16, r6
 a86:	23 fc       	sbrc	r2, 3
 a88:	1b c0       	rjmp	.+54     	; 0xac0 <vfprintf+0x1aa>
 a8a:	83 2d       	mov	r24, r3
 a8c:	90 e0       	ldi	r25, 0x00	; 0
 a8e:	48 16       	cp	r4, r24
 a90:	59 06       	cpc	r5, r25
 a92:	b0 f4       	brcc	.+44     	; 0xac0 <vfprintf+0x1aa>
 a94:	b7 01       	movw	r22, r14
 a96:	80 e2       	ldi	r24, 0x20	; 32
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 a9e:	3a 94       	dec	r3
 aa0:	f4 cf       	rjmp	.-24     	; 0xa8a <vfprintf+0x174>
 aa2:	f5 01       	movw	r30, r10
 aa4:	27 fc       	sbrc	r2, 7
 aa6:	85 91       	lpm	r24, Z+
 aa8:	27 fe       	sbrs	r2, 7
 aaa:	81 91       	ld	r24, Z+
 aac:	5f 01       	movw	r10, r30
 aae:	b7 01       	movw	r22, r14
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 ab6:	31 10       	cpse	r3, r1
 ab8:	3a 94       	dec	r3
 aba:	f1 e0       	ldi	r31, 0x01	; 1
 abc:	4f 1a       	sub	r4, r31
 abe:	51 08       	sbc	r5, r1
 ac0:	41 14       	cp	r4, r1
 ac2:	51 04       	cpc	r5, r1
 ac4:	71 f7       	brne	.-36     	; 0xaa2 <vfprintf+0x18c>
 ac6:	e5 c0       	rjmp	.+458    	; 0xc92 <vfprintf+0x37c>
 ac8:	84 36       	cpi	r24, 0x64	; 100
 aca:	11 f0       	breq	.+4      	; 0xad0 <vfprintf+0x1ba>
 acc:	89 36       	cpi	r24, 0x69	; 105
 ace:	39 f5       	brne	.+78     	; 0xb1e <vfprintf+0x208>
 ad0:	f8 01       	movw	r30, r16
 ad2:	27 ff       	sbrs	r18, 7
 ad4:	07 c0       	rjmp	.+14     	; 0xae4 <vfprintf+0x1ce>
 ad6:	60 81       	ld	r22, Z
 ad8:	71 81       	ldd	r23, Z+1	; 0x01
 ada:	82 81       	ldd	r24, Z+2	; 0x02
 adc:	93 81       	ldd	r25, Z+3	; 0x03
 ade:	0c 5f       	subi	r16, 0xFC	; 252
 ae0:	1f 4f       	sbci	r17, 0xFF	; 255
 ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <vfprintf+0x1de>
 ae4:	60 81       	ld	r22, Z
 ae6:	71 81       	ldd	r23, Z+1	; 0x01
 ae8:	88 27       	eor	r24, r24
 aea:	77 fd       	sbrc	r23, 7
 aec:	80 95       	com	r24
 aee:	98 2f       	mov	r25, r24
 af0:	0e 5f       	subi	r16, 0xFE	; 254
 af2:	1f 4f       	sbci	r17, 0xFF	; 255
 af4:	2f 76       	andi	r18, 0x6F	; 111
 af6:	b2 2e       	mov	r11, r18
 af8:	97 ff       	sbrs	r25, 7
 afa:	09 c0       	rjmp	.+18     	; 0xb0e <vfprintf+0x1f8>
 afc:	90 95       	com	r25
 afe:	80 95       	com	r24
 b00:	70 95       	com	r23
 b02:	61 95       	neg	r22
 b04:	7f 4f       	sbci	r23, 0xFF	; 255
 b06:	8f 4f       	sbci	r24, 0xFF	; 255
 b08:	9f 4f       	sbci	r25, 0xFF	; 255
 b0a:	20 68       	ori	r18, 0x80	; 128
 b0c:	b2 2e       	mov	r11, r18
 b0e:	2a e0       	ldi	r18, 0x0A	; 10
 b10:	30 e0       	ldi	r19, 0x00	; 0
 b12:	a4 01       	movw	r20, r8
 b14:	0e 94 c8 06 	call	0xd90	; 0xd90 <__ultoa_invert>
 b18:	a8 2e       	mov	r10, r24
 b1a:	a8 18       	sub	r10, r8
 b1c:	44 c0       	rjmp	.+136    	; 0xba6 <vfprintf+0x290>
 b1e:	85 37       	cpi	r24, 0x75	; 117
 b20:	29 f4       	brne	.+10     	; 0xb2c <vfprintf+0x216>
 b22:	2f 7e       	andi	r18, 0xEF	; 239
 b24:	b2 2e       	mov	r11, r18
 b26:	2a e0       	ldi	r18, 0x0A	; 10
 b28:	30 e0       	ldi	r19, 0x00	; 0
 b2a:	25 c0       	rjmp	.+74     	; 0xb76 <vfprintf+0x260>
 b2c:	f2 2f       	mov	r31, r18
 b2e:	f9 7f       	andi	r31, 0xF9	; 249
 b30:	bf 2e       	mov	r11, r31
 b32:	8f 36       	cpi	r24, 0x6F	; 111
 b34:	c1 f0       	breq	.+48     	; 0xb66 <vfprintf+0x250>
 b36:	18 f4       	brcc	.+6      	; 0xb3e <vfprintf+0x228>
 b38:	88 35       	cpi	r24, 0x58	; 88
 b3a:	79 f0       	breq	.+30     	; 0xb5a <vfprintf+0x244>
 b3c:	b4 c0       	rjmp	.+360    	; 0xca6 <vfprintf+0x390>
 b3e:	80 37       	cpi	r24, 0x70	; 112
 b40:	19 f0       	breq	.+6      	; 0xb48 <vfprintf+0x232>
 b42:	88 37       	cpi	r24, 0x78	; 120
 b44:	21 f0       	breq	.+8      	; 0xb4e <vfprintf+0x238>
 b46:	af c0       	rjmp	.+350    	; 0xca6 <vfprintf+0x390>
 b48:	2f 2f       	mov	r18, r31
 b4a:	20 61       	ori	r18, 0x10	; 16
 b4c:	b2 2e       	mov	r11, r18
 b4e:	b4 fe       	sbrs	r11, 4
 b50:	0d c0       	rjmp	.+26     	; 0xb6c <vfprintf+0x256>
 b52:	8b 2d       	mov	r24, r11
 b54:	84 60       	ori	r24, 0x04	; 4
 b56:	b8 2e       	mov	r11, r24
 b58:	09 c0       	rjmp	.+18     	; 0xb6c <vfprintf+0x256>
 b5a:	24 ff       	sbrs	r18, 4
 b5c:	0a c0       	rjmp	.+20     	; 0xb72 <vfprintf+0x25c>
 b5e:	9f 2f       	mov	r25, r31
 b60:	96 60       	ori	r25, 0x06	; 6
 b62:	b9 2e       	mov	r11, r25
 b64:	06 c0       	rjmp	.+12     	; 0xb72 <vfprintf+0x25c>
 b66:	28 e0       	ldi	r18, 0x08	; 8
 b68:	30 e0       	ldi	r19, 0x00	; 0
 b6a:	05 c0       	rjmp	.+10     	; 0xb76 <vfprintf+0x260>
 b6c:	20 e1       	ldi	r18, 0x10	; 16
 b6e:	30 e0       	ldi	r19, 0x00	; 0
 b70:	02 c0       	rjmp	.+4      	; 0xb76 <vfprintf+0x260>
 b72:	20 e1       	ldi	r18, 0x10	; 16
 b74:	32 e0       	ldi	r19, 0x02	; 2
 b76:	f8 01       	movw	r30, r16
 b78:	b7 fe       	sbrs	r11, 7
 b7a:	07 c0       	rjmp	.+14     	; 0xb8a <vfprintf+0x274>
 b7c:	60 81       	ld	r22, Z
 b7e:	71 81       	ldd	r23, Z+1	; 0x01
 b80:	82 81       	ldd	r24, Z+2	; 0x02
 b82:	93 81       	ldd	r25, Z+3	; 0x03
 b84:	0c 5f       	subi	r16, 0xFC	; 252
 b86:	1f 4f       	sbci	r17, 0xFF	; 255
 b88:	06 c0       	rjmp	.+12     	; 0xb96 <vfprintf+0x280>
 b8a:	60 81       	ld	r22, Z
 b8c:	71 81       	ldd	r23, Z+1	; 0x01
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	0e 5f       	subi	r16, 0xFE	; 254
 b94:	1f 4f       	sbci	r17, 0xFF	; 255
 b96:	a4 01       	movw	r20, r8
 b98:	0e 94 c8 06 	call	0xd90	; 0xd90 <__ultoa_invert>
 b9c:	a8 2e       	mov	r10, r24
 b9e:	a8 18       	sub	r10, r8
 ba0:	fb 2d       	mov	r31, r11
 ba2:	ff 77       	andi	r31, 0x7F	; 127
 ba4:	bf 2e       	mov	r11, r31
 ba6:	b6 fe       	sbrs	r11, 6
 ba8:	0b c0       	rjmp	.+22     	; 0xbc0 <vfprintf+0x2aa>
 baa:	2b 2d       	mov	r18, r11
 bac:	2e 7f       	andi	r18, 0xFE	; 254
 bae:	a5 14       	cp	r10, r5
 bb0:	50 f4       	brcc	.+20     	; 0xbc6 <vfprintf+0x2b0>
 bb2:	b4 fe       	sbrs	r11, 4
 bb4:	0a c0       	rjmp	.+20     	; 0xbca <vfprintf+0x2b4>
 bb6:	b2 fc       	sbrc	r11, 2
 bb8:	08 c0       	rjmp	.+16     	; 0xbca <vfprintf+0x2b4>
 bba:	2b 2d       	mov	r18, r11
 bbc:	2e 7e       	andi	r18, 0xEE	; 238
 bbe:	05 c0       	rjmp	.+10     	; 0xbca <vfprintf+0x2b4>
 bc0:	7a 2c       	mov	r7, r10
 bc2:	2b 2d       	mov	r18, r11
 bc4:	03 c0       	rjmp	.+6      	; 0xbcc <vfprintf+0x2b6>
 bc6:	7a 2c       	mov	r7, r10
 bc8:	01 c0       	rjmp	.+2      	; 0xbcc <vfprintf+0x2b6>
 bca:	75 2c       	mov	r7, r5
 bcc:	24 ff       	sbrs	r18, 4
 bce:	0d c0       	rjmp	.+26     	; 0xbea <vfprintf+0x2d4>
 bd0:	fe 01       	movw	r30, r28
 bd2:	ea 0d       	add	r30, r10
 bd4:	f1 1d       	adc	r31, r1
 bd6:	80 81       	ld	r24, Z
 bd8:	80 33       	cpi	r24, 0x30	; 48
 bda:	11 f4       	brne	.+4      	; 0xbe0 <vfprintf+0x2ca>
 bdc:	29 7e       	andi	r18, 0xE9	; 233
 bde:	09 c0       	rjmp	.+18     	; 0xbf2 <vfprintf+0x2dc>
 be0:	22 ff       	sbrs	r18, 2
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x2da>
 be4:	73 94       	inc	r7
 be6:	73 94       	inc	r7
 be8:	04 c0       	rjmp	.+8      	; 0xbf2 <vfprintf+0x2dc>
 bea:	82 2f       	mov	r24, r18
 bec:	86 78       	andi	r24, 0x86	; 134
 bee:	09 f0       	breq	.+2      	; 0xbf2 <vfprintf+0x2dc>
 bf0:	73 94       	inc	r7
 bf2:	23 fd       	sbrc	r18, 3
 bf4:	13 c0       	rjmp	.+38     	; 0xc1c <vfprintf+0x306>
 bf6:	20 ff       	sbrs	r18, 0
 bf8:	06 c0       	rjmp	.+12     	; 0xc06 <vfprintf+0x2f0>
 bfa:	5a 2c       	mov	r5, r10
 bfc:	73 14       	cp	r7, r3
 bfe:	18 f4       	brcc	.+6      	; 0xc06 <vfprintf+0x2f0>
 c00:	53 0c       	add	r5, r3
 c02:	57 18       	sub	r5, r7
 c04:	73 2c       	mov	r7, r3
 c06:	73 14       	cp	r7, r3
 c08:	68 f4       	brcc	.+26     	; 0xc24 <vfprintf+0x30e>
 c0a:	b7 01       	movw	r22, r14
 c0c:	80 e2       	ldi	r24, 0x20	; 32
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	2c 87       	std	Y+12, r18	; 0x0c
 c12:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 c16:	73 94       	inc	r7
 c18:	2c 85       	ldd	r18, Y+12	; 0x0c
 c1a:	f5 cf       	rjmp	.-22     	; 0xc06 <vfprintf+0x2f0>
 c1c:	73 14       	cp	r7, r3
 c1e:	10 f4       	brcc	.+4      	; 0xc24 <vfprintf+0x30e>
 c20:	37 18       	sub	r3, r7
 c22:	01 c0       	rjmp	.+2      	; 0xc26 <vfprintf+0x310>
 c24:	31 2c       	mov	r3, r1
 c26:	24 ff       	sbrs	r18, 4
 c28:	12 c0       	rjmp	.+36     	; 0xc4e <vfprintf+0x338>
 c2a:	b7 01       	movw	r22, r14
 c2c:	80 e3       	ldi	r24, 0x30	; 48
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	2c 87       	std	Y+12, r18	; 0x0c
 c32:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 c36:	2c 85       	ldd	r18, Y+12	; 0x0c
 c38:	22 ff       	sbrs	r18, 2
 c3a:	17 c0       	rjmp	.+46     	; 0xc6a <vfprintf+0x354>
 c3c:	21 ff       	sbrs	r18, 1
 c3e:	03 c0       	rjmp	.+6      	; 0xc46 <vfprintf+0x330>
 c40:	88 e5       	ldi	r24, 0x58	; 88
 c42:	90 e0       	ldi	r25, 0x00	; 0
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <vfprintf+0x334>
 c46:	88 e7       	ldi	r24, 0x78	; 120
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	b7 01       	movw	r22, r14
 c4c:	0c c0       	rjmp	.+24     	; 0xc66 <vfprintf+0x350>
 c4e:	82 2f       	mov	r24, r18
 c50:	86 78       	andi	r24, 0x86	; 134
 c52:	59 f0       	breq	.+22     	; 0xc6a <vfprintf+0x354>
 c54:	21 fd       	sbrc	r18, 1
 c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0x346>
 c58:	80 e2       	ldi	r24, 0x20	; 32
 c5a:	01 c0       	rjmp	.+2      	; 0xc5e <vfprintf+0x348>
 c5c:	8b e2       	ldi	r24, 0x2B	; 43
 c5e:	27 fd       	sbrc	r18, 7
 c60:	8d e2       	ldi	r24, 0x2D	; 45
 c62:	b7 01       	movw	r22, r14
 c64:	90 e0       	ldi	r25, 0x00	; 0
 c66:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 c6a:	a5 14       	cp	r10, r5
 c6c:	38 f4       	brcc	.+14     	; 0xc7c <vfprintf+0x366>
 c6e:	b7 01       	movw	r22, r14
 c70:	80 e3       	ldi	r24, 0x30	; 48
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 c78:	5a 94       	dec	r5
 c7a:	f7 cf       	rjmp	.-18     	; 0xc6a <vfprintf+0x354>
 c7c:	aa 94       	dec	r10
 c7e:	f4 01       	movw	r30, r8
 c80:	ea 0d       	add	r30, r10
 c82:	f1 1d       	adc	r31, r1
 c84:	80 81       	ld	r24, Z
 c86:	b7 01       	movw	r22, r14
 c88:	90 e0       	ldi	r25, 0x00	; 0
 c8a:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 c8e:	a1 10       	cpse	r10, r1
 c90:	f5 cf       	rjmp	.-22     	; 0xc7c <vfprintf+0x366>
 c92:	33 20       	and	r3, r3
 c94:	09 f4       	brne	.+2      	; 0xc98 <vfprintf+0x382>
 c96:	51 ce       	rjmp	.-862    	; 0x93a <vfprintf+0x24>
 c98:	b7 01       	movw	r22, r14
 c9a:	80 e2       	ldi	r24, 0x20	; 32
 c9c:	90 e0       	ldi	r25, 0x00	; 0
 c9e:	0e 94 96 06 	call	0xd2c	; 0xd2c <fputc>
 ca2:	3a 94       	dec	r3
 ca4:	f6 cf       	rjmp	.-20     	; 0xc92 <vfprintf+0x37c>
 ca6:	f7 01       	movw	r30, r14
 ca8:	86 81       	ldd	r24, Z+6	; 0x06
 caa:	97 81       	ldd	r25, Z+7	; 0x07
 cac:	02 c0       	rjmp	.+4      	; 0xcb2 <vfprintf+0x39c>
 cae:	8f ef       	ldi	r24, 0xFF	; 255
 cb0:	9f ef       	ldi	r25, 0xFF	; 255
 cb2:	2c 96       	adiw	r28, 0x0c	; 12
 cb4:	e2 e1       	ldi	r30, 0x12	; 18
 cb6:	0c 94 42 07 	jmp	0xe84	; 0xe84 <__epilogue_restores__>

00000cba <calloc>:
 cba:	0f 93       	push	r16
 cbc:	1f 93       	push	r17
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
 cc2:	86 9f       	mul	r24, r22
 cc4:	80 01       	movw	r16, r0
 cc6:	87 9f       	mul	r24, r23
 cc8:	10 0d       	add	r17, r0
 cca:	96 9f       	mul	r25, r22
 ccc:	10 0d       	add	r17, r0
 cce:	11 24       	eor	r1, r1
 cd0:	c8 01       	movw	r24, r16
 cd2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <malloc>
 cd6:	ec 01       	movw	r28, r24
 cd8:	00 97       	sbiw	r24, 0x00	; 0
 cda:	29 f0       	breq	.+10     	; 0xce6 <calloc+0x2c>
 cdc:	a8 01       	movw	r20, r16
 cde:	60 e0       	ldi	r22, 0x00	; 0
 ce0:	70 e0       	ldi	r23, 0x00	; 0
 ce2:	0e 94 84 06 	call	0xd08	; 0xd08 <memset>
 ce6:	ce 01       	movw	r24, r28
 ce8:	df 91       	pop	r29
 cea:	cf 91       	pop	r28
 cec:	1f 91       	pop	r17
 cee:	0f 91       	pop	r16
 cf0:	08 95       	ret

00000cf2 <strnlen_P>:
 cf2:	fc 01       	movw	r30, r24
 cf4:	05 90       	lpm	r0, Z+
 cf6:	61 50       	subi	r22, 0x01	; 1
 cf8:	70 40       	sbci	r23, 0x00	; 0
 cfa:	01 10       	cpse	r0, r1
 cfc:	d8 f7       	brcc	.-10     	; 0xcf4 <strnlen_P+0x2>
 cfe:	80 95       	com	r24
 d00:	90 95       	com	r25
 d02:	8e 0f       	add	r24, r30
 d04:	9f 1f       	adc	r25, r31
 d06:	08 95       	ret

00000d08 <memset>:
 d08:	dc 01       	movw	r26, r24
 d0a:	01 c0       	rjmp	.+2      	; 0xd0e <memset+0x6>
 d0c:	6d 93       	st	X+, r22
 d0e:	41 50       	subi	r20, 0x01	; 1
 d10:	50 40       	sbci	r21, 0x00	; 0
 d12:	e0 f7       	brcc	.-8      	; 0xd0c <memset+0x4>
 d14:	08 95       	ret

00000d16 <strnlen>:
 d16:	fc 01       	movw	r30, r24
 d18:	61 50       	subi	r22, 0x01	; 1
 d1a:	70 40       	sbci	r23, 0x00	; 0
 d1c:	01 90       	ld	r0, Z+
 d1e:	01 10       	cpse	r0, r1
 d20:	d8 f7       	brcc	.-10     	; 0xd18 <strnlen+0x2>
 d22:	80 95       	com	r24
 d24:	90 95       	com	r25
 d26:	8e 0f       	add	r24, r30
 d28:	9f 1f       	adc	r25, r31
 d2a:	08 95       	ret

00000d2c <fputc>:
 d2c:	0f 93       	push	r16
 d2e:	1f 93       	push	r17
 d30:	cf 93       	push	r28
 d32:	df 93       	push	r29
 d34:	18 2f       	mov	r17, r24
 d36:	09 2f       	mov	r16, r25
 d38:	eb 01       	movw	r28, r22
 d3a:	8b 81       	ldd	r24, Y+3	; 0x03
 d3c:	81 fd       	sbrc	r24, 1
 d3e:	03 c0       	rjmp	.+6      	; 0xd46 <fputc+0x1a>
 d40:	8f ef       	ldi	r24, 0xFF	; 255
 d42:	9f ef       	ldi	r25, 0xFF	; 255
 d44:	20 c0       	rjmp	.+64     	; 0xd86 <fputc+0x5a>
 d46:	82 ff       	sbrs	r24, 2
 d48:	10 c0       	rjmp	.+32     	; 0xd6a <fputc+0x3e>
 d4a:	4e 81       	ldd	r20, Y+6	; 0x06
 d4c:	5f 81       	ldd	r21, Y+7	; 0x07
 d4e:	2c 81       	ldd	r18, Y+4	; 0x04
 d50:	3d 81       	ldd	r19, Y+5	; 0x05
 d52:	42 17       	cp	r20, r18
 d54:	53 07       	cpc	r21, r19
 d56:	7c f4       	brge	.+30     	; 0xd76 <fputc+0x4a>
 d58:	e8 81       	ld	r30, Y
 d5a:	f9 81       	ldd	r31, Y+1	; 0x01
 d5c:	9f 01       	movw	r18, r30
 d5e:	2f 5f       	subi	r18, 0xFF	; 255
 d60:	3f 4f       	sbci	r19, 0xFF	; 255
 d62:	39 83       	std	Y+1, r19	; 0x01
 d64:	28 83       	st	Y, r18
 d66:	10 83       	st	Z, r17
 d68:	06 c0       	rjmp	.+12     	; 0xd76 <fputc+0x4a>
 d6a:	e8 85       	ldd	r30, Y+8	; 0x08
 d6c:	f9 85       	ldd	r31, Y+9	; 0x09
 d6e:	81 2f       	mov	r24, r17
 d70:	09 95       	icall
 d72:	89 2b       	or	r24, r25
 d74:	29 f7       	brne	.-54     	; 0xd40 <fputc+0x14>
 d76:	2e 81       	ldd	r18, Y+6	; 0x06
 d78:	3f 81       	ldd	r19, Y+7	; 0x07
 d7a:	2f 5f       	subi	r18, 0xFF	; 255
 d7c:	3f 4f       	sbci	r19, 0xFF	; 255
 d7e:	3f 83       	std	Y+7, r19	; 0x07
 d80:	2e 83       	std	Y+6, r18	; 0x06
 d82:	81 2f       	mov	r24, r17
 d84:	90 2f       	mov	r25, r16
 d86:	df 91       	pop	r29
 d88:	cf 91       	pop	r28
 d8a:	1f 91       	pop	r17
 d8c:	0f 91       	pop	r16
 d8e:	08 95       	ret

00000d90 <__ultoa_invert>:
 d90:	fa 01       	movw	r30, r20
 d92:	aa 27       	eor	r26, r26
 d94:	28 30       	cpi	r18, 0x08	; 8
 d96:	51 f1       	breq	.+84     	; 0xdec <__ultoa_invert+0x5c>
 d98:	20 31       	cpi	r18, 0x10	; 16
 d9a:	81 f1       	breq	.+96     	; 0xdfc <__ultoa_invert+0x6c>
 d9c:	e8 94       	clt
 d9e:	6f 93       	push	r22
 da0:	6e 7f       	andi	r22, 0xFE	; 254
 da2:	6e 5f       	subi	r22, 0xFE	; 254
 da4:	7f 4f       	sbci	r23, 0xFF	; 255
 da6:	8f 4f       	sbci	r24, 0xFF	; 255
 da8:	9f 4f       	sbci	r25, 0xFF	; 255
 daa:	af 4f       	sbci	r26, 0xFF	; 255
 dac:	b1 e0       	ldi	r27, 0x01	; 1
 dae:	3e d0       	rcall	.+124    	; 0xe2c <__ultoa_invert+0x9c>
 db0:	b4 e0       	ldi	r27, 0x04	; 4
 db2:	3c d0       	rcall	.+120    	; 0xe2c <__ultoa_invert+0x9c>
 db4:	67 0f       	add	r22, r23
 db6:	78 1f       	adc	r23, r24
 db8:	89 1f       	adc	r24, r25
 dba:	9a 1f       	adc	r25, r26
 dbc:	a1 1d       	adc	r26, r1
 dbe:	68 0f       	add	r22, r24
 dc0:	79 1f       	adc	r23, r25
 dc2:	8a 1f       	adc	r24, r26
 dc4:	91 1d       	adc	r25, r1
 dc6:	a1 1d       	adc	r26, r1
 dc8:	6a 0f       	add	r22, r26
 dca:	71 1d       	adc	r23, r1
 dcc:	81 1d       	adc	r24, r1
 dce:	91 1d       	adc	r25, r1
 dd0:	a1 1d       	adc	r26, r1
 dd2:	20 d0       	rcall	.+64     	; 0xe14 <__ultoa_invert+0x84>
 dd4:	09 f4       	brne	.+2      	; 0xdd8 <__ultoa_invert+0x48>
 dd6:	68 94       	set
 dd8:	3f 91       	pop	r19
 dda:	2a e0       	ldi	r18, 0x0A	; 10
 ddc:	26 9f       	mul	r18, r22
 dde:	11 24       	eor	r1, r1
 de0:	30 19       	sub	r19, r0
 de2:	30 5d       	subi	r19, 0xD0	; 208
 de4:	31 93       	st	Z+, r19
 de6:	de f6       	brtc	.-74     	; 0xd9e <__ultoa_invert+0xe>
 de8:	cf 01       	movw	r24, r30
 dea:	08 95       	ret
 dec:	46 2f       	mov	r20, r22
 dee:	47 70       	andi	r20, 0x07	; 7
 df0:	40 5d       	subi	r20, 0xD0	; 208
 df2:	41 93       	st	Z+, r20
 df4:	b3 e0       	ldi	r27, 0x03	; 3
 df6:	0f d0       	rcall	.+30     	; 0xe16 <__ultoa_invert+0x86>
 df8:	c9 f7       	brne	.-14     	; 0xdec <__ultoa_invert+0x5c>
 dfa:	f6 cf       	rjmp	.-20     	; 0xde8 <__ultoa_invert+0x58>
 dfc:	46 2f       	mov	r20, r22
 dfe:	4f 70       	andi	r20, 0x0F	; 15
 e00:	40 5d       	subi	r20, 0xD0	; 208
 e02:	4a 33       	cpi	r20, 0x3A	; 58
 e04:	18 f0       	brcs	.+6      	; 0xe0c <__ultoa_invert+0x7c>
 e06:	49 5d       	subi	r20, 0xD9	; 217
 e08:	31 fd       	sbrc	r19, 1
 e0a:	40 52       	subi	r20, 0x20	; 32
 e0c:	41 93       	st	Z+, r20
 e0e:	02 d0       	rcall	.+4      	; 0xe14 <__ultoa_invert+0x84>
 e10:	a9 f7       	brne	.-22     	; 0xdfc <__ultoa_invert+0x6c>
 e12:	ea cf       	rjmp	.-44     	; 0xde8 <__ultoa_invert+0x58>
 e14:	b4 e0       	ldi	r27, 0x04	; 4
 e16:	a6 95       	lsr	r26
 e18:	97 95       	ror	r25
 e1a:	87 95       	ror	r24
 e1c:	77 95       	ror	r23
 e1e:	67 95       	ror	r22
 e20:	ba 95       	dec	r27
 e22:	c9 f7       	brne	.-14     	; 0xe16 <__ultoa_invert+0x86>
 e24:	00 97       	sbiw	r24, 0x00	; 0
 e26:	61 05       	cpc	r22, r1
 e28:	71 05       	cpc	r23, r1
 e2a:	08 95       	ret
 e2c:	9b 01       	movw	r18, r22
 e2e:	ac 01       	movw	r20, r24
 e30:	0a 2e       	mov	r0, r26
 e32:	06 94       	lsr	r0
 e34:	57 95       	ror	r21
 e36:	47 95       	ror	r20
 e38:	37 95       	ror	r19
 e3a:	27 95       	ror	r18
 e3c:	ba 95       	dec	r27
 e3e:	c9 f7       	brne	.-14     	; 0xe32 <__ultoa_invert+0xa2>
 e40:	62 0f       	add	r22, r18
 e42:	73 1f       	adc	r23, r19
 e44:	84 1f       	adc	r24, r20
 e46:	95 1f       	adc	r25, r21
 e48:	a0 1d       	adc	r26, r0
 e4a:	08 95       	ret

00000e4c <__prologue_saves__>:
 e4c:	2f 92       	push	r2
 e4e:	3f 92       	push	r3
 e50:	4f 92       	push	r4
 e52:	5f 92       	push	r5
 e54:	6f 92       	push	r6
 e56:	7f 92       	push	r7
 e58:	8f 92       	push	r8
 e5a:	9f 92       	push	r9
 e5c:	af 92       	push	r10
 e5e:	bf 92       	push	r11
 e60:	cf 92       	push	r12
 e62:	df 92       	push	r13
 e64:	ef 92       	push	r14
 e66:	ff 92       	push	r15
 e68:	0f 93       	push	r16
 e6a:	1f 93       	push	r17
 e6c:	cf 93       	push	r28
 e6e:	df 93       	push	r29
 e70:	cd b7       	in	r28, 0x3d	; 61
 e72:	de b7       	in	r29, 0x3e	; 62
 e74:	ca 1b       	sub	r28, r26
 e76:	db 0b       	sbc	r29, r27
 e78:	0f b6       	in	r0, 0x3f	; 63
 e7a:	f8 94       	cli
 e7c:	de bf       	out	0x3e, r29	; 62
 e7e:	0f be       	out	0x3f, r0	; 63
 e80:	cd bf       	out	0x3d, r28	; 61
 e82:	09 94       	ijmp

00000e84 <__epilogue_restores__>:
 e84:	2a 88       	ldd	r2, Y+18	; 0x12
 e86:	39 88       	ldd	r3, Y+17	; 0x11
 e88:	48 88       	ldd	r4, Y+16	; 0x10
 e8a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e8c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e8e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e90:	8c 84       	ldd	r8, Y+12	; 0x0c
 e92:	9b 84       	ldd	r9, Y+11	; 0x0b
 e94:	aa 84       	ldd	r10, Y+10	; 0x0a
 e96:	b9 84       	ldd	r11, Y+9	; 0x09
 e98:	c8 84       	ldd	r12, Y+8	; 0x08
 e9a:	df 80       	ldd	r13, Y+7	; 0x07
 e9c:	ee 80       	ldd	r14, Y+6	; 0x06
 e9e:	fd 80       	ldd	r15, Y+5	; 0x05
 ea0:	0c 81       	ldd	r16, Y+4	; 0x04
 ea2:	1b 81       	ldd	r17, Y+3	; 0x03
 ea4:	aa 81       	ldd	r26, Y+2	; 0x02
 ea6:	b9 81       	ldd	r27, Y+1	; 0x01
 ea8:	ce 0f       	add	r28, r30
 eaa:	d1 1d       	adc	r29, r1
 eac:	0f b6       	in	r0, 0x3f	; 63
 eae:	f8 94       	cli
 eb0:	de bf       	out	0x3e, r29	; 62
 eb2:	0f be       	out	0x3f, r0	; 63
 eb4:	cd bf       	out	0x3d, r28	; 61
 eb6:	ed 01       	movw	r28, r26
 eb8:	08 95       	ret

00000eba <_exit>:
 eba:	f8 94       	cli

00000ebc <__stop_program>:
 ebc:	ff cf       	rjmp	.-2      	; 0xebc <__stop_program>
