
ByggernBellLund_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800100  000029a6  00002a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001de  008001de  00002b18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b18  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000398  00000000  00000000  00002b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003fa9  00000000  00000000  00002f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017d9  00000000  00000000  00006eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001814  00000000  00000000  0000868e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b30  00000000  00000000  00009ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c0  00000000  00000000  0000a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002ece  00000000  00000000  0000b394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e8  00000000  00000000  0000e262  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_14>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <__vector_14+0x30>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 ea       	ldi	r30, 0xA6	; 166
     37c:	f9 e2       	ldi	r31, 0x29	; 41
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 3d       	cpi	r26, 0xDE	; 222
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	ae ed       	ldi	r26, 0xDE	; 222
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a8 3e       	cpi	r26, 0xE8	; 232
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 45 02 	call	0x48a	; 0x48a <main>
     39e:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <init_handler>:

volatile int handelingMessage = 0;

void init_handler(){
	// Set pin as input (PD3 = INT1)
	DDRD &= ~(1 << PD3);
     3a6:	8b 98       	cbi	0x11, 3	; 17
	// Set internal pull-up
	PORTD |= (1 << PD3);
     3a8:	93 9a       	sbi	0x12, 3	; 18
	
	//initialize external interrupt on falling edge
	MCUCR |= (1<<ISC11);
     3aa:	85 b7       	in	r24, 0x35	; 53
     3ac:	88 60       	ori	r24, 0x08	; 8
     3ae:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     3b0:	85 b7       	in	r24, 0x35	; 53
     3b2:	8b 7f       	andi	r24, 0xFB	; 251
     3b4:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
     3b6:	80 e8       	ldi	r24, 0x80	; 128
     3b8:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     3ba:	78 94       	sei
     3bc:	08 95       	ret

000003be <handle_message>:
ISR(INT1_vect){
	handle_message();
}


void handle_message(){
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2a 97       	sbiw	r28, 0x0a	; 10
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
	Message m;
	CAN_receive(&m);
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	0e 94 bc 02 	call	0x578	; 0x578 <CAN_receive>
	
	Joystick J;
	
	//Decide what to do
	switch(m.id){
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	61 f4       	brne	.+24     	; 0x3f8 <handle_message+0x3a>
		case JOY:
			break;
		case JOYREQ:
			J = getJoystickPosition();
     3e0:	0e 94 77 03 	call	0x6ee	; 0x6ee <getJoystickPosition>
			m.id = JOY;
     3e4:	19 82       	std	Y+1, r1	; 0x01
			m.length = 3;
     3e6:	93 e0       	ldi	r25, 0x03	; 3
     3e8:	9a 83       	std	Y+2, r25	; 0x02
			m.data[0] = J.X;
     3ea:	6b 83       	std	Y+3, r22	; 0x03
			m.data[1] = J.Y;
     3ec:	7c 83       	std	Y+4, r23	; 0x04
			m.data[2] = J.D;
     3ee:	8d 83       	std	Y+5, r24	; 0x05
			CAN_transmit(&m);
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	0e 94 89 02 	call	0x512	; 0x512 <CAN_transmit>
			break;
		default:
			break;
	}
}
     3f8:	2a 96       	adiw	r28, 0x0a	; 10
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <__vector_2>:
	
	//Enable global interrupts
	sei();
}

ISR(INT1_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	5f 93       	push	r21
     41c:	6f 93       	push	r22
     41e:	7f 93       	push	r23
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
	handle_message();
     42c:	0e 94 df 01 	call	0x3be	; 0x3be <handle_message>
}
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	7f 91       	pop	r23
     43e:	6f 91       	pop	r22
     440:	5f 91       	pop	r21
     442:	4f 91       	pop	r20
     444:	3f 91       	pop	r19
     446:	2f 91       	pop	r18
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
     452:	80 eb       	ldi	r24, 0xB0	; 176
     454:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     456:	81 e5       	ldi	r24, 0x51	; 81
     458:	8d b9       	out	0x0d, r24	; 13
     45a:	08 95       	ret

0000045c <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
     45c:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
     45e:	77 9b       	sbis	0x0e, 7	; 14
     460:	fe cf       	rjmp	.-4      	; 0x45e <SPI_transmit+0x2>
	//Return answer
	return SPDR;
     462:	8f b1       	in	r24, 0x0f	; 15
}
     464:	08 95       	ret

00000466 <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
     466:	0e 94 2e 02 	call	0x45c	; 0x45c <SPI_transmit>
     46a:	08 95       	ret

0000046c <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
     46c:	8c ec       	ldi	r24, 0xCC	; 204
     46e:	0e 94 2e 02 	call	0x45c	; 0x45c <SPI_transmit>
}
     472:	08 95       	ret

00000474 <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
     474:	c4 9a       	sbi	0x18, 4	; 24
     476:	08 95       	ret

00000478 <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
     478:	c4 98       	cbi	0x18, 4	; 24
     47a:	08 95       	ret

0000047c <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     47c:	80 b7       	in	r24, 0x30	; 48
     47e:	80 62       	ori	r24, 0x20	; 32
     480:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     482:	85 b7       	in	r24, 0x35	; 53
     484:	80 68       	ori	r24, 0x80	; 128
     486:	85 bf       	out	0x35, r24	; 53
     488:	08 95       	ret

0000048a <main>:
#include "Driver_files/message_handler.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
     48a:	80 e8       	ldi	r24, 0x80	; 128
     48c:	95 e2       	ldi	r25, 0x25	; 37
     48e:	0e 94 b0 06 	call	0xd60	; 0xd60 <uartInit>
	bus_init();
     492:	0e 94 3e 02 	call	0x47c	; 0x47c <bus_init>
	oled_init();
     496:	0e 94 23 05 	call	0xa46	; 0xa46 <oled_init>
	init_handler();
     49a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <init_handler>
	//oled_sram_init();
	CAN_init();
     49e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <CAN_init>
	printf("Reset?");
     4a2:	82 e1       	ldi	r24, 0x12	; 18
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	0e 94 c9 11 	call	0x2392	; 0x2392 <printf>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
    while(1)
    {
		menuSystem();
     4b2:	0e 94 9a 0c 	call	0x1934	; 0x1934 <menuSystem>
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <main+0x28>

000004b8 <get_adc>:
uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc
	uint16_t adc_size = 0x400;
	
	
	adc[0] = 4 + (channel%4);
     4b8:	83 70       	andi	r24, 0x03	; 3
     4ba:	90 78       	andi	r25, 0x80	; 128
     4bc:	99 23       	and	r25, r25
     4be:	24 f4       	brge	.+8      	; 0x4c8 <get_adc+0x10>
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	8c 6f       	ori	r24, 0xFC	; 252
     4c4:	9f 6f       	ori	r25, 0xFF	; 255
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	8c 5f       	subi	r24, 0xFC	; 252
     4ca:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ce:	85 ef       	ldi	r24, 0xF5	; 245
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <get_adc+0x1a>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <get_adc+0x20>
     4d8:	00 00       	nop
	_delay_us(200);
	return adc[0];
     4da:	80 91 00 14 	lds	r24, 0x1400
     4de:	08 95       	ret

000004e0 <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
     4e0:	0e 94 b8 04 	call	0x970	; 0x970 <MCP_init>
	//Enter config mode
	MCP_reset();
     4e4:	0e 94 9e 04 	call	0x93c	; 0x93c <MCP_reset>
	//set normal mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	60 ee       	ldi	r22, 0xE0	; 224
     4ec:	8f e0       	ldi	r24, 0x0F	; 15
     4ee:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
     4f2:	4f ef       	ldi	r20, 0xFF	; 255
     4f4:	63 e0       	ldi	r22, 0x03	; 3
     4f6:	8b e2       	ldi	r24, 0x2B	; 43
     4f8:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
     4fc:	8e e0       	ldi	r24, 0x0E	; 14
     4fe:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     502:	28 2f       	mov	r18, r24
     504:	20 7e       	andi	r18, 0xE0	; 224
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	11 f4       	brne	.+4      	; 0x510 <__stack+0x11>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     510:	08 95       	ret

00000512 <CAN_transmit>:

void CAN_transmit(Message *m){
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_bit_modify(MCP_TXB0SIDL, 0xE0, m->id<<5);
     51a:	48 81       	ld	r20, Y
     51c:	42 95       	swap	r20
     51e:	44 0f       	add	r20, r20
     520:	40 7e       	andi	r20, 0xE0	; 224
     522:	60 ee       	ldi	r22, 0xE0	; 224
     524:	82 e3       	ldi	r24, 0x32	; 50
     526:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
	MCP_bit_modify(MCP_TXB0SIDH, 0xFF, m->id>>3);
     52a:	48 81       	ld	r20, Y
     52c:	46 95       	lsr	r20
     52e:	46 95       	lsr	r20
     530:	46 95       	lsr	r20
     532:	6f ef       	ldi	r22, 0xFF	; 255
     534:	81 e3       	ldi	r24, 0x31	; 49
     536:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     53a:	69 81       	ldd	r22, Y+1	; 0x01
     53c:	85 e3       	ldi	r24, 0x35	; 53
     53e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MCP_write>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     542:	69 81       	ldd	r22, Y+1	; 0x01
     544:	85 e3       	ldi	r24, 0x35	; 53
     546:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	88 23       	and	r24, r24
     54e:	69 f0       	breq	.+26     	; 0x56a <CAN_transmit+0x58>
     550:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
     552:	fe 01       	movw	r30, r28
     554:	e1 0f       	add	r30, r17
     556:	f1 1d       	adc	r31, r1
     558:	62 81       	ldd	r22, Z+2	; 0x02
     55a:	86 e3       	ldi	r24, 0x36	; 54
     55c:	81 0f       	add	r24, r17
     55e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MCP_write>
	MCP_write(MCP_TXB0DLC, m->length);
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     562:	1f 5f       	subi	r17, 0xFF	; 255
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	18 17       	cp	r17, r24
     568:	a0 f3       	brcs	.-24     	; 0x552 <CAN_transmit+0x40>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <CAN_receive>:

int CAN_receive(Message *m){
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
     580:	8c e2       	ldi	r24, 0x2C	; 44
     582:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     586:	80 ff       	sbrs	r24, 0
     588:	2c c0       	rjmp	.+88     	; 0x5e2 <CAN_receive+0x6a>
		m->length = MCP_read(MCP_RBB0DLC);
     58a:	85 e6       	ldi	r24, 0x65	; 101
     58c:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     590:	89 83       	std	Y+1, r24	; 0x01
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
     592:	82 e6       	ldi	r24, 0x62	; 98
     594:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     598:	18 2f       	mov	r17, r24
     59a:	12 95       	swap	r17
     59c:	16 95       	lsr	r17
     59e:	17 70       	andi	r17, 0x07	; 7
     5a0:	18 83       	st	Y, r17
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
     5a2:	81 e6       	ldi	r24, 0x61	; 97
     5a4:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     5a8:	88 0f       	add	r24, r24
     5aa:	88 0f       	add	r24, r24
     5ac:	88 0f       	add	r24, r24
     5ae:	18 0f       	add	r17, r24
     5b0:	18 83       	st	Y, r17
		for(uint8_t i = 0; i < m->length; i++){
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	88 23       	and	r24, r24
     5b6:	69 f0       	breq	.+26     	; 0x5d2 <CAN_receive+0x5a>
     5b8:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
     5ba:	86 e6       	ldi	r24, 0x66	; 102
     5bc:	81 0f       	add	r24, r17
     5be:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     5c2:	fe 01       	movw	r30, r28
     5c4:	e1 0f       	add	r30, r17
     5c6:	f1 1d       	adc	r31, r1
     5c8:	82 83       	std	Z+2, r24	; 0x02
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
		for(uint8_t i = 0; i < m->length; i++){
     5ca:	1f 5f       	subi	r17, 0xFF	; 255
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	18 17       	cp	r17, r24
     5d0:	a0 f3       	brcs	.-24     	; 0x5ba <CAN_receive+0x42>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	8c e2       	ldi	r24, 0x2C	; 44
     5d8:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
		return 0;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <CAN_receive+0x6e>
	}
	return 1;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	08 95       	ret

000005ee <getSliderPosition>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Slider getSliderPosition(){
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     5fe:	8c 01       	movw	r16, r24
	slide.right = ((get_adc(0))*100)/255;
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     608:	ec 01       	movw	r28, r24
float xMean = 127;
float yMean = 127;

Slider getSliderPosition(){
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     60a:	44 e6       	ldi	r20, 0x64	; 100
     60c:	40 9f       	mul	r20, r16
     60e:	c0 01       	movw	r24, r0
     610:	41 9f       	mul	r20, r17
     612:	90 0d       	add	r25, r0
     614:	11 24       	eor	r1, r1
     616:	ef ef       	ldi	r30, 0xFF	; 255
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	bf 01       	movw	r22, r30
     61c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
	slide.right = ((get_adc(0))*100)/255;
	return slide;
     620:	8b 01       	movw	r16, r22
float yMean = 127;

Slider getSliderPosition(){
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
	slide.right = ((get_adc(0))*100)/255;
     622:	4c 9f       	mul	r20, r28
     624:	c0 01       	movw	r24, r0
     626:	4d 9f       	mul	r20, r29
     628:	90 0d       	add	r25, r0
     62a:	11 24       	eor	r1, r1
	return slide;
     62c:	bf 01       	movw	r22, r30
     62e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
     632:	9b 01       	movw	r18, r22
}
     634:	c9 01       	movw	r24, r18
     636:	b8 01       	movw	r22, r16
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	08 95       	ret

00000642 <getJoystickDirection>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = getJoystickDirection(joy.X, joy.Y);
	return joy;
}

direction getJoystickDirection(int x, int y){
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	8c 01       	movw	r16, r24
     654:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
     656:	bc 01       	movw	r22, r24
     658:	88 27       	eor	r24, r24
     65a:	77 fd       	sbrc	r23, 7
     65c:	80 95       	com	r24
     65e:	98 2f       	mov	r25, r24
     660:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     664:	6b 01       	movw	r12, r22
     666:	7c 01       	movw	r14, r24
     668:	e8 94       	clt
     66a:	f7 f8       	bld	r15, 7
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	48 e4       	ldi	r20, 0x48	; 72
     672:	52 e4       	ldi	r21, 0x42	; 66
     674:	c7 01       	movw	r24, r14
     676:	b6 01       	movw	r22, r12
     678:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__cmpsf2>
     67c:	88 23       	and	r24, r24
     67e:	84 f4       	brge	.+32     	; 0x6a0 <getJoystickDirection+0x5e>
     680:	be 01       	movw	r22, r28
     682:	88 27       	eor	r24, r24
     684:	77 fd       	sbrc	r23, 7
     686:	80 95       	com	r24
     688:	98 2f       	mov	r25, r24
     68a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     68e:	9f 77       	andi	r25, 0x7F	; 127
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	48 e4       	ldi	r20, 0x48	; 72
     696:	52 e4       	ldi	r21, 0x42	; 66
     698:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__cmpsf2>
     69c:	88 23       	and	r24, r24
     69e:	dc f0       	brlt	.+54     	; 0x6d6 <getJoystickDirection+0x94>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
     6a0:	be 01       	movw	r22, r28
     6a2:	88 27       	eor	r24, r24
     6a4:	77 fd       	sbrc	r23, 7
     6a6:	80 95       	com	r24
     6a8:	98 2f       	mov	r25, r24
     6aa:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	5f 77       	andi	r21, 0x7F	; 127
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__cmpsf2>
     6bc:	88 23       	and	r24, r24
     6be:	2c f4       	brge	.+10     	; 0x6ca <getJoystickDirection+0x88>
		if(y > 0){
     6c0:	1c 16       	cp	r1, r28
     6c2:	1d 06       	cpc	r1, r29
     6c4:	54 f4       	brge	.+20     	; 0x6da <getJoystickDirection+0x98>
			return UP;
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <getJoystickDirection+0x9a>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	10 16       	cp	r1, r16
     6ce:	11 06       	cpc	r1, r17
     6d0:	2c f0       	brlt	.+10     	; 0x6dc <getJoystickDirection+0x9a>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <getJoystickDirection+0x9a>
}

direction getJoystickDirection(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <getJoystickDirection+0x9a>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
     6da:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <getJoystickPosition>:
	slide.left = ((get_adc(1))*100)/255;
	slide.right = ((get_adc(0))*100)/255;
	return slide;
}

Joystick getJoystickPosition(){
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	cf 93       	push	r28
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     700:	c0 90 0a 01 	lds	r12, 0x010A
     704:	d0 90 0b 01 	lds	r13, 0x010B
     708:	e0 90 0c 01 	lds	r14, 0x010C
     70c:	f0 90 0d 01 	lds	r15, 0x010D
     710:	bc 01       	movw	r22, r24
     712:	88 27       	eor	r24, r24
     714:	77 fd       	sbrc	r23, 7
     716:	80 95       	com	r24
     718:	98 2f       	mov	r25, r24
     71a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     71e:	a7 01       	movw	r20, r14
     720:	96 01       	movw	r18, r12
     722:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__subsf3>
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	48 ec       	ldi	r20, 0xC8	; 200
     72c:	52 e4       	ldi	r21, 0x42	; 66
     72e:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     732:	a7 01       	movw	r20, r14
     734:	96 01       	movw	r18, r12
     736:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     73a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__fixsfsi>
     73e:	c6 2f       	mov	r28, r22
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     748:	c0 90 0e 01 	lds	r12, 0x010E
     74c:	d0 90 0f 01 	lds	r13, 0x010F
     750:	e0 90 10 01 	lds	r14, 0x0110
     754:	f0 90 11 01 	lds	r15, 0x0111
     758:	bc 01       	movw	r22, r24
     75a:	88 27       	eor	r24, r24
     75c:	77 fd       	sbrc	r23, 7
     75e:	80 95       	com	r24
     760:	98 2f       	mov	r25, r24
     762:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     766:	a7 01       	movw	r20, r14
     768:	96 01       	movw	r18, r12
     76a:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__subsf3>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	48 ec       	ldi	r20, 0xC8	; 200
     774:	52 e4       	ldi	r21, 0x42	; 66
     776:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     77a:	a7 01       	movw	r20, r14
     77c:	96 01       	movw	r18, r12
     77e:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     782:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__fixsfsi>
     786:	f6 2e       	mov	r15, r22
	joy.D = getJoystickDirection(joy.X, joy.Y);
     788:	6c 2f       	mov	r22, r28
     78a:	77 27       	eor	r23, r23
     78c:	67 fd       	sbrc	r22, 7
     78e:	70 95       	com	r23
     790:	8f 2d       	mov	r24, r15
     792:	99 27       	eor	r25, r25
     794:	87 fd       	sbrc	r24, 7
     796:	90 95       	com	r25
     798:	0e 94 21 03 	call	0x642	; 0x642 <getJoystickDirection>
	return joy;
}
     79c:	6f 2d       	mov	r22, r15
     79e:	7c 2f       	mov	r23, r28
     7a0:	cf 91       	pop	r28
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	cf 90       	pop	r12
     7aa:	08 95       	ret

000007ac <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	1f 92       	push	r1
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
     7b6:	28 ee       	ldi	r18, 0xE8	; 232
     7b8:	33 e0       	ldi	r19, 0x03	; 3
     7ba:	a9 01       	movw	r20, r18
     7bc:	48 1b       	sub	r20, r24
     7be:	59 0b       	sbc	r21, r25
     7c0:	ca 01       	movw	r24, r20
     7c2:	68 ec       	ldi	r22, 0xC8	; 200
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
     7ca:	60 5d       	subi	r22, 0xD0	; 208
     7cc:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	69 e1       	ldi	r22, 0x19	; 25
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
     7e6:	42 e0       	ldi	r20, 0x02	; 2
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	67 e2       	ldi	r22, 0x27	; 39
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
     7f6:	20 e6       	ldi	r18, 0x60	; 96
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	42 e0       	ldi	r20, 0x02	; 2
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	be 01       	movw	r22, r28
     800:	6f 5f       	subi	r22, 0xFF	; 255
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
	oled_sram_flush(0);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
     814:	0f 90       	pop	r0
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <calibrateJoystick>:
			return LEFT;
		} 
	}
}

void calibrateJoystick(){
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     82e:	e1 2c       	mov	r14, r1
     830:	f1 2c       	mov	r15, r1

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
     832:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
     834:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
     836:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
     838:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
     83a:	0f 2e       	mov	r0, r31
     83c:	f8 ec       	ldi	r31, 0xC8	; 200
     83e:	cf 2e       	mov	r12, r31
     840:	d1 2c       	mov	r13, r1
     842:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     84c:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
     856:	bc 16       	cp	r11, r28
     858:	08 f4       	brcc	.+2      	; 0x85c <calibrateJoystick+0x40>
     85a:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
     85c:	81 17       	cp	r24, r17
     85e:	08 f4       	brcc	.+2      	; 0x862 <calibrateJoystick+0x46>
     860:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
     862:	08 17       	cp	r16, r24
     864:	08 f4       	brcc	.+2      	; 0x868 <calibrateJoystick+0x4c>
     866:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
     868:	db 15       	cp	r29, r11
     86a:	08 f4       	brcc	.+2      	; 0x86e <calibrateJoystick+0x52>
     86c:	db 2d       	mov	r29, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	97 e1       	ldi	r25, 0x17	; 23
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <calibrateJoystick+0x56>
     876:	00 c0       	rjmp	.+0      	; 0x878 <calibrateJoystick+0x5c>
     878:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
     882:	89 2b       	or	r24, r25
     884:	19 f4       	brne	.+6      	; 0x88c <calibrateJoystick+0x70>
			calibration_visual_countdown(i);
     886:	c7 01       	movw	r24, r14
     888:	0e 94 d6 03 	call	0x7ac	; 0x7ac <calibration_visual_countdown>
void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     88c:	9f ef       	ldi	r25, 0xFF	; 255
     88e:	e9 1a       	sub	r14, r25
     890:	f9 0a       	sbc	r15, r25
     892:	88 ee       	ldi	r24, 0xE8	; 232
     894:	e8 16       	cp	r14, r24
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	f8 06       	cpc	r15, r24
     89a:	a1 f6       	brne	.-88     	; 0x844 <calibrateJoystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
     89c:	6d 2f       	mov	r22, r29
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	6c 1b       	sub	r22, r28
     8a2:	71 09       	sbc	r23, r1
     8a4:	88 27       	eor	r24, r24
     8a6:	77 fd       	sbrc	r23, 7
     8a8:	80 95       	com	r24
     8aa:	98 2f       	mov	r25, r24
     8ac:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	5f e3       	ldi	r21, 0x3F	; 63
     8b8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     8bc:	60 93 0a 01 	sts	0x010A, r22
     8c0:	70 93 0b 01 	sts	0x010B, r23
     8c4:	80 93 0c 01 	sts	0x010C, r24
     8c8:	90 93 0d 01 	sts	0x010D, r25
	xMean = (xMax - xMin)/2.0;
     8cc:	60 2f       	mov	r22, r16
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	61 1b       	sub	r22, r17
     8d2:	71 09       	sbc	r23, r1
     8d4:	88 27       	eor	r24, r24
     8d6:	77 fd       	sbrc	r23, 7
     8d8:	80 95       	com	r24
     8da:	98 2f       	mov	r25, r24
     8dc:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     8ec:	60 93 0e 01 	sts	0x010E, r22
     8f0:	70 93 0f 01 	sts	0x010F, r23
     8f4:	80 93 10 01 	sts	0x0110, r24
     8f8:	90 93 11 01 	sts	0x0111, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
     8fc:	1f 92       	push	r1
     8fe:	0f 93       	push	r16
     900:	1f 92       	push	r1
     902:	1f 93       	push	r17
     904:	1f 92       	push	r1
     906:	df 93       	push	r29
     908:	1f 92       	push	r1
     90a:	cf 93       	push	r28
     90c:	83 e3       	ldi	r24, 0x33	; 51
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	0e 94 c9 11 	call	0x2392	; 0x2392 <printf>
     918:	8d b7       	in	r24, 0x3d	; 61
     91a:	9e b7       	in	r25, 0x3e	; 62
     91c:	0a 96       	adiw	r24, 0x0a	; 10
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	9e bf       	out	0x3e, r25	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	8d bf       	out	0x3d, r24	; 61
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	bf 90       	pop	r11
     93a:	08 95       	ret

0000093c <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     93c:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
     940:	80 ec       	ldi	r24, 0xC0	; 192
     942:	0e 94 2e 02 	call	0x45c	; 0x45c <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     946:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
     94a:	08 95       	ret

0000094c <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
     94c:	cf 93       	push	r28
     94e:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     950:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(address);
     95a:	8c 2f       	mov	r24, r28
     95c:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	uint8_t data = SPI_receive();
     960:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_receive>
     964:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     966:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
     96a:	8c 2f       	mov	r24, r28
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
     970:	80 e8       	ldi	r24, 0x80	; 128
     972:	95 e2       	ldi	r25, 0x25	; 37
     974:	0e 94 b0 06 	call	0xd60	; 0xd60 <uartInit>
	
	//Start SPI driver
	SPI_init();
     978:	0e 94 29 02 	call	0x452	; 0x452 <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
     97c:	0e 94 9e 04 	call	0x93c	; 0x93c <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
     980:	8e e0       	ldi	r24, 0x0E	; 14
     982:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
     986:	80 7e       	andi	r24, 0xE0	; 224
     988:	80 38       	cpi	r24, 0x80	; 128
     98a:	59 f0       	breq	.+22     	; 0x9a2 <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
     98c:	8f e3       	ldi	r24, 0x3F	; 63
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	9f 93       	push	r25
     992:	8f 93       	push	r24
     994:	0e 94 c9 11 	call	0x2392	; 0x2392 <printf>
		return 1;
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	08 95       	ret
	}
	return 0;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
}
     9a6:	08 95       	ret

000009a8 <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	d8 2f       	mov	r29, r24
     9ae:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     9b0:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(address);
     9ba:	8d 2f       	mov	r24, r29
     9bc:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(data);
     9c0:	8c 2f       	mov	r24, r28
     9c2:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     9c6:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
     9d0:	cf 93       	push	r28
     9d2:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     9d4:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
     9d8:	8c 2f       	mov	r24, r28
     9da:	83 70       	andi	r24, 0x03	; 3
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	51 f0       	breq	.+20     	; 0x9f4 <MCP_rts+0x24>
     9e0:	28 f0       	brcs	.+10     	; 0x9ec <MCP_rts+0x1c>
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	59 f0       	breq	.+22     	; 0x9fc <MCP_rts+0x2c>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	69 f0       	breq	.+26     	; 0xa04 <MCP_rts+0x34>
     9ea:	0f c0       	rjmp	.+30     	; 0xa0a <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
     9ec:	81 e8       	ldi	r24, 0x81	; 129
     9ee:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
			break;
     9f2:	0b c0       	rjmp	.+22     	; 0xa0a <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
     9f4:	82 e8       	ldi	r24, 0x82	; 130
     9f6:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
			break;
     9fa:	07 c0       	rjmp	.+14     	; 0xa0a <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
     9fc:	84 e8       	ldi	r24, 0x84	; 132
     9fe:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
			break;
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
     a04:	87 e8       	ldi	r24, 0x87	; 135
     a06:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     a0a:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	18 2f       	mov	r17, r24
     a1a:	d6 2f       	mov	r29, r22
     a1c:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     a1e:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
     a22:	85 e0       	ldi	r24, 0x05	; 5
     a24:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(address);
     a28:	81 2f       	mov	r24, r17
     a2a:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(mask);
     a2e:	8d 2f       	mov	r24, r29
     a30:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(data);
     a34:	8c 2f       	mov	r24, r28
     a36:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     a3a:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	08 95       	ret

00000a46 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     a46:	e0 e0       	ldi	r30, 0x00	; 0
     a48:	f0 e1       	ldi	r31, 0x10	; 16
     a4a:	8e ea       	ldi	r24, 0xAE	; 174
     a4c:	80 83       	st	Z, r24
     a4e:	81 ea       	ldi	r24, 0xA1	; 161
     a50:	80 83       	st	Z, r24
     a52:	8a ed       	ldi	r24, 0xDA	; 218
     a54:	80 83       	st	Z, r24
     a56:	82 e1       	ldi	r24, 0x12	; 18
     a58:	80 83       	st	Z, r24
     a5a:	88 ec       	ldi	r24, 0xC8	; 200
     a5c:	80 83       	st	Z, r24
     a5e:	88 ea       	ldi	r24, 0xA8	; 168
     a60:	80 83       	st	Z, r24
     a62:	8f e3       	ldi	r24, 0x3F	; 63
     a64:	80 83       	st	Z, r24
     a66:	85 ed       	ldi	r24, 0xD5	; 213
     a68:	80 83       	st	Z, r24
     a6a:	80 e8       	ldi	r24, 0x80	; 128
     a6c:	80 83       	st	Z, r24
     a6e:	81 e8       	ldi	r24, 0x81	; 129
     a70:	80 83       	st	Z, r24
     a72:	80 e5       	ldi	r24, 0x50	; 80
     a74:	80 83       	st	Z, r24
     a76:	89 ed       	ldi	r24, 0xD9	; 217
     a78:	80 83       	st	Z, r24
     a7a:	81 e2       	ldi	r24, 0x21	; 33
     a7c:	80 83       	st	Z, r24
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	80 83       	st	Z, r24
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	80 83       	st	Z, r24
     a86:	8b ed       	ldi	r24, 0xDB	; 219
     a88:	80 83       	st	Z, r24
     a8a:	80 e3       	ldi	r24, 0x30	; 48
     a8c:	80 83       	st	Z, r24
     a8e:	8d ea       	ldi	r24, 0xAD	; 173
     a90:	80 83       	st	Z, r24
     a92:	10 82       	st	Z, r1
     a94:	84 ea       	ldi	r24, 0xA4	; 164
     a96:	80 83       	st	Z, r24
     a98:	86 ea       	ldi	r24, 0xA6	; 166
     a9a:	80 83       	st	Z, r24
     a9c:	8f ea       	ldi	r24, 0xAF	; 175
     a9e:	80 83       	st	Z, r24
     aa0:	08 95       	ret

00000aa2 <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     ab8:	c0 e0       	ldi	r28, 0x00	; 0
     aba:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
     abc:	e1 2c       	mov	r14, r1
     abe:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     ac0:	c1 2c       	mov	r12, r1
     ac2:	68 94       	set
     ac4:	dd 24       	eor	r13, r13
     ac6:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ac8:	00 e0       	ldi	r16, 0x00	; 0
     aca:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
     acc:	ce 01       	movw	r24, r28
     ace:	9e 01       	movw	r18, r28
     ad0:	2f 77       	andi	r18, 0x7F	; 127
     ad2:	33 27       	eor	r19, r19
     ad4:	23 2b       	or	r18, r19
     ad6:	39 f4       	brne	.+14     	; 0xae6 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
     ad8:	20 eb       	ldi	r18, 0xB0	; 176
     ada:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     adc:	f6 01       	movw	r30, r12
     ade:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
     ae0:	ff ef       	ldi	r31, 0xFF	; 255
     ae2:	ef 1a       	sub	r14, r31
     ae4:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
     ae6:	8a 0d       	add	r24, r10
     ae8:	9b 1d       	adc	r25, r11
     aea:	0e 94 a1 06 	call	0xd42	; 0xd42 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     aee:	f8 01       	movw	r30, r16
     af0:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     af2:	21 96       	adiw	r28, 0x01	; 1
     af4:	c1 15       	cp	r28, r1
     af6:	f4 e0       	ldi	r31, 0x04	; 4
     af8:	df 07       	cpc	r29, r31
     afa:	41 f7       	brne	.-48     	; 0xacc <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	08 95       	ret

00000b12 <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
	oled_sram_flush(0);
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
	TCNT1 = 0;
     b3c:	1d bc       	out	0x2d, r1	; 45
     b3e:	1c bc       	out	0x2c, r1	; 44
}
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
     b76:	6a 01       	movw	r12, r20
     b78:	d6 94       	lsr	r13
     b7a:	dc 2c       	mov	r13, r12
     b7c:	cc 24       	eor	r12, r12
     b7e:	d7 94       	ror	r13
     b80:	c7 94       	ror	r12
     b82:	c8 0e       	add	r12, r24
     b84:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
     b86:	fb 01       	movw	r30, r22
     b88:	e0 80       	ld	r14, Z
	while(c != '\0'){
     b8a:	ee 20       	and	r14, r14
     b8c:	69 f1       	breq	.+90     	; 0xbe8 <oled_sram_write_string+0x86>
     b8e:	5b 01       	movw	r10, r22
     b90:	ff ef       	ldi	r31, 0xFF	; 255
     b92:	af 1a       	sub	r10, r31
     b94:	bf 0a       	sbc	r11, r31
     b96:	15 c0       	rjmp	.+42     	; 0xbc2 <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     b98:	ce 01       	movw	r24, r28
     b9a:	f7 01       	movw	r30, r14
     b9c:	e8 0f       	add	r30, r24
     b9e:	f9 1f       	adc	r31, r25
     ba0:	64 91       	lpm	r22, Z
     ba2:	ec 01       	movw	r28, r24
     ba4:	21 96       	adiw	r28, 0x01	; 1
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
     bac:	c0 17       	cp	r28, r16
     bae:	d1 07       	cpc	r29, r17
     bb0:	99 f7       	brne	.-26     	; 0xb98 <oled_sram_write_string+0x36>
     bb2:	48 e0       	ldi	r20, 0x08	; 8
     bb4:	c4 0e       	add	r12, r20
     bb6:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
     bb8:	f5 01       	movw	r30, r10
     bba:	e1 90       	ld	r14, Z+
     bbc:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
     bbe:	ee 20       	and	r14, r14
     bc0:	99 f0       	breq	.+38     	; 0xbe8 <oled_sram_write_string+0x86>
     bc2:	86 01       	movw	r16, r12
     bc4:	08 5f       	subi	r16, 0xF8	; 248
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
     bc8:	f1 2c       	mov	r15, r1
     bca:	ee 0c       	add	r14, r14
     bcc:	ff 1c       	adc	r15, r15
     bce:	ee 0c       	add	r14, r14
     bd0:	ff 1c       	adc	r15, r15
     bd2:	ee 0c       	add	r14, r14
     bd4:	ff 1c       	adc	r15, r15
     bd6:	97 01       	movw	r18, r14
     bd8:	2c 19       	sub	r18, r12
     bda:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     bdc:	c6 01       	movw	r24, r12
     bde:	a9 01       	movw	r20, r18
     be0:	40 59       	subi	r20, 0x90	; 144
     be2:	50 40       	sbci	r21, 0x00	; 0
     be4:	7a 01       	movw	r14, r20
     be6:	d9 cf       	rjmp	.-78     	; 0xb9a <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	cf 90       	pop	r12
     bf8:	bf 90       	pop	r11
     bfa:	af 90       	pop	r10
     bfc:	08 95       	ret

00000bfe <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	7b 01       	movw	r14, r22
	start = start + page*128+col;
     c0c:	8a 01       	movw	r16, r20
     c0e:	16 95       	lsr	r17
     c10:	10 2f       	mov	r17, r16
     c12:	00 27       	eor	r16, r16
     c14:	17 95       	ror	r17
     c16:	07 95       	ror	r16
     c18:	80 0f       	add	r24, r16
     c1a:	91 1f       	adc	r25, r17
     c1c:	8c 01       	movw	r16, r24
     c1e:	02 0f       	add	r16, r18
     c20:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
     c22:	c0 e0       	ldi	r28, 0x00	; 0
     c24:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
     c26:	d7 01       	movw	r26, r14
     c28:	ec 91       	ld	r30, X
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	b0 97       	sbiw	r30, 0x20	; 32
     c2e:	ee 0f       	add	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	ec 0f       	add	r30, r28
     c3c:	fd 1f       	adc	r31, r29
     c3e:	e0 59       	subi	r30, 0x90	; 144
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	64 91       	lpm	r22, Z
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	ce 01       	movw	r24, r28
     c48:	80 0f       	add	r24, r16
     c4a:	91 1f       	adc	r25, r17
     c4c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
     c50:	21 96       	adiw	r28, 0x01	; 1
     c52:	c8 30       	cpi	r28, 0x08	; 8
     c54:	d1 05       	cpc	r29, r1
     c56:	39 f7       	brne	.-50     	; 0xc26 <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	08 95       	ret

00000c66 <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
     c6e:	8b 01       	movw	r16, r22
     c70:	16 95       	lsr	r17
     c72:	10 2f       	mov	r17, r16
     c74:	00 27       	eor	r16, r16
     c76:	17 95       	ror	r17
     c78:	07 95       	ror	r16
     c7a:	08 0f       	add	r16, r24
     c7c:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
     c80:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	ce 01       	movw	r24, r28
     c88:	80 0f       	add	r24, r16
     c8a:	91 1f       	adc	r25, r17
     c8c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
     c90:	21 96       	adiw	r28, 0x01	; 1
     c92:	c0 38       	cpi	r28, 0x80	; 128
     c94:	d1 05       	cpc	r29, r1
     c96:	a9 f7       	brne	.-22     	; 0xc82 <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	08 95       	ret

00000ca2 <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
     cac:	c0 e0       	ldi	r28, 0x00	; 0
     cae:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
     cb0:	be 01       	movw	r22, r28
     cb2:	c8 01       	movw	r24, r16
     cb4:	0e 94 33 06 	call	0xc66	; 0xc66 <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
     cb8:	21 96       	adiw	r28, 0x01	; 1
     cba:	c8 30       	cpi	r28, 0x08	; 8
     cbc:	d1 05       	cpc	r29, r1
     cbe:	c1 f7       	brne	.-16     	; 0xcb0 <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ea 01       	movw	r28, r20
	int page = y/8;
     cd4:	9a 01       	movw	r18, r20
     cd6:	dd 23       	and	r29, r29
     cd8:	14 f4       	brge	.+4      	; 0xcde <oled_sram_write_bit+0x14>
     cda:	29 5f       	subi	r18, 0xF9	; 249
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	89 01       	movw	r16, r18
     ce0:	15 95       	asr	r17
     ce2:	07 95       	ror	r16
     ce4:	15 95       	asr	r17
     ce6:	07 95       	ror	r16
     ce8:	15 95       	asr	r17
     cea:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
     cec:	16 95       	lsr	r17
     cee:	10 2f       	mov	r17, r16
     cf0:	00 27       	eor	r16, r16
     cf2:	17 95       	ror	r17
     cf4:	07 95       	ror	r16
     cf6:	08 0f       	add	r16, r24
     cf8:	19 1f       	adc	r17, r25
     cfa:	06 0f       	add	r16, r22
     cfc:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
     cfe:	c8 01       	movw	r24, r16
     d00:	0e 94 a1 06 	call	0xd42	; 0xd42 <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
     d04:	ae 01       	movw	r20, r28
     d06:	47 70       	andi	r20, 0x07	; 7
     d08:	50 78       	andi	r21, 0x80	; 128
     d0a:	55 23       	and	r21, r21
     d0c:	34 f4       	brge	.+12     	; 0xd1a <oled_sram_write_bit+0x50>
     d0e:	41 50       	subi	r20, 0x01	; 1
     d10:	51 09       	sbc	r21, r1
     d12:	48 6f       	ori	r20, 0xF8	; 248
     d14:	5f 6f       	ori	r21, 0xFF	; 255
     d16:	4f 5f       	subi	r20, 0xFF	; 255
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	b9 01       	movw	r22, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <oled_sram_write_bit+0x5c>
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	4a 95       	dec	r20
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <oled_sram_write_bit+0x58>
     d2a:	ab 01       	movw	r20, r22
     d2c:	48 2b       	or	r20, r24
	setSRAM(index, temp);
     d2e:	64 2f       	mov	r22, r20
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	c8 01       	movw	r24, r16
     d34:	0e 94 a5 06 	call	0xd4a	; 0xd4a <setSRAM>
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
     d42:	98 5e       	subi	r25, 0xE8	; 232
     d44:	fc 01       	movw	r30, r24
     d46:	80 81       	ld	r24, Z
}
     d48:	08 95       	ret

00000d4a <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
     d4a:	fc 01       	movw	r30, r24
     d4c:	f8 5e       	subi	r31, 0xE8	; 232
     d4e:	80 81       	ld	r24, Z
		ext_ram[index] = value;
     d50:	60 83       	st	Z, r22
		return temp;
}
     d52:	08 95       	ret

00000d54 <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     d54:	5d 9b       	sbis	0x0b, 5	; 11
     d56:	fe cf       	rjmp	.-4      	; 0xd54 <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
     d58:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	08 95       	ret

00000d60 <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
     d60:	9c 01       	movw	r18, r24
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 eb       	ldi	r23, 0xB0	; 176
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__divmodsi4>
     d72:	21 50       	subi	r18, 0x01	; 1
     d74:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     d76:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
     d78:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     d7a:	8a b1       	in	r24, 0x0a	; 10
     d7c:	88 61       	ori	r24, 0x18	; 24
     d7e:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     d80:	80 b5       	in	r24, 0x20	; 32
     d82:	86 68       	ori	r24, 0x86	; 134
     d84:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	8a ea       	ldi	r24, 0xAA	; 170
     d8c:	96 e0       	ldi	r25, 0x06	; 6
     d8e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <fdevopen>
	
	return 0;
}
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 95       	ret

00000d98 <play_draw>:
#include "../Driver_files/oled_driver.h"
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
     da0:	0f e1       	ldi	r16, 0x1F	; 31
     da2:	10 e0       	ldi	r17, 0x00	; 0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
     da4:	cf e3       	ldi	r28, 0x3F	; 63
     da6:	d0 e0       	ldi	r29, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = getJoystickPosition();
     da8:	0e 94 77 03 	call	0x6ee	; 0x6ee <getJoystickPosition>
		switch(joy.D){
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	71 f0       	breq	.+28     	; 0xdcc <play_draw+0x34>
     db0:	58 f0       	brcs	.+22     	; 0xdc8 <play_draw+0x30>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	19 f0       	breq	.+6      	; 0xdbc <play_draw+0x24>
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	21 f0       	breq	.+8      	; 0xdc2 <play_draw+0x2a>
     dba:	09 c0       	rjmp	.+18     	; 0xdce <play_draw+0x36>
			case NEUTRAL:
				break;
			case UP:
				y--;
     dbc:	01 50       	subi	r16, 0x01	; 1
     dbe:	11 09       	sbc	r17, r1
				break;
     dc0:	06 c0       	rjmp	.+12     	; 0xdce <play_draw+0x36>
			case DOWN:
				y++;
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <play_draw+0x36>
			case LEFT:
				x--;
     dc8:	21 97       	sbiw	r28, 0x01	; 1
				break;
     dca:	01 c0       	rjmp	.+2      	; 0xdce <play_draw+0x36>
			case RIGHT:
				x++;
     dcc:	21 96       	adiw	r28, 0x01	; 1
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
     dce:	a8 01       	movw	r20, r16
     dd0:	be 01       	movw	r22, r28
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
		oled_sram_flush(0);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	8f e7       	ldi	r24, 0x7F	; 127
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	21 50       	subi	r18, 0x01	; 1
     dea:	80 40       	sbci	r24, 0x00	; 0
     dec:	90 40       	sbci	r25, 0x00	; 0
     dee:	e1 f7       	brne	.-8      	; 0xde8 <play_draw+0x50>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <play_draw+0x5a>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <play_draw+0x5c>
     df4:	d9 cf       	rjmp	.-78     	; 0xda8 <play_draw+0x10>

00000df6 <racketHit>:

typedef struct{
	int pos; // from 0 to 45 (16 in width)
} Racket;

int racketHit(Ball *ball, int racketPos){
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	eb 01       	movw	r28, r22
	if (ball->posY >= racketPos && ball->posY < racketPos + RACKETSIZE )
     e04:	fc 01       	movw	r30, r24
     e06:	c2 80       	ldd	r12, Z+2	; 0x02
     e08:	d3 80       	ldd	r13, Z+3	; 0x03
     e0a:	e4 80       	ldd	r14, Z+4	; 0x04
     e0c:	f5 80       	ldd	r15, Z+5	; 0x05
     e0e:	88 27       	eor	r24, r24
     e10:	77 fd       	sbrc	r23, 7
     e12:	80 95       	com	r24
     e14:	98 2f       	mov	r25, r24
     e16:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	c7 01       	movw	r24, r14
     e20:	b6 01       	movw	r22, r12
     e22:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__gesf2>
     e26:	88 23       	and	r24, r24
     e28:	bc f0       	brlt	.+46     	; 0xe58 <racketHit+0x62>
     e2a:	be 01       	movw	r22, r28
     e2c:	60 5f       	subi	r22, 0xF0	; 240
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	88 27       	eor	r24, r24
     e32:	77 fd       	sbrc	r23, 7
     e34:	80 95       	com	r24
     e36:	98 2f       	mov	r25, r24
     e38:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	d1 e0       	ldi	r29, 0x01	; 1
     e42:	c0 e0       	ldi	r28, 0x00	; 0
     e44:	c7 01       	movw	r24, r14
     e46:	b6 01       	movw	r22, r12
     e48:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__cmpsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	0c f0       	brlt	.+2      	; 0xe52 <racketHit+0x5c>
     e50:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
     e52:	8d 2f       	mov	r24, r29
     e54:	9c 2f       	mov	r25, r28
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <racketHit+0x66>
	return 0;
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	08 95       	ret

00000e6a <updateBallAngle>:

void updateBallAngle(Ball *ball, int racketPos){
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ec 01       	movw	r28, r24
     e7c:	8b 01       	movw	r16, r22
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
	int newBallAngle = ball->angle + hitPos * 45;
     e7e:	6e 81       	ldd	r22, Y+6	; 0x06
     e80:	7f 81       	ldd	r23, Y+7	; 0x07
     e82:	88 27       	eor	r24, r24
     e84:	77 fd       	sbrc	r23, 7
     e86:	80 95       	com	r24
     e88:	98 2f       	mov	r25, r24
     e8a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     e8e:	6b 01       	movw	r12, r22
     e90:	7c 01       	movw	r14, r24
		return 1;
	return 0;
}

void updateBallAngle(Ball *ball, int racketPos){
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
     e92:	b8 01       	movw	r22, r16
     e94:	88 27       	eor	r24, r24
     e96:	77 fd       	sbrc	r23, 7
     e98:	80 95       	com	r24
     e9a:	98 2f       	mov	r25, r24
     e9c:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     ea0:	9b 01       	movw	r18, r22
     ea2:	ac 01       	movw	r20, r24
     ea4:	6a 81       	ldd	r22, Y+2	; 0x02
     ea6:	7b 81       	ldd	r23, Y+3	; 0x03
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__subsf3>
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__subsf3>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	5e e3       	ldi	r21, 0x3E	; 62
     ec4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
	int newBallAngle = ball->angle + hitPos * 45;
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	44 e3       	ldi	r20, 0x34	; 52
     ece:	52 e4       	ldi	r21, 0x42	; 66
     ed0:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <__mulsf3>
     ed4:	9b 01       	movw	r18, r22
     ed6:	ac 01       	movw	r20, r24
     ed8:	c7 01       	movw	r24, r14
     eda:	b6 01       	movw	r22, r12
     edc:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__addsf3>
     ee0:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__fixsfsi>
	if(newBallAngle > 45) ball->angle = 45;
     ee4:	6e 32       	cpi	r22, 0x2E	; 46
     ee6:	71 05       	cpc	r23, r1
     ee8:	2c f0       	brlt	.+10     	; 0xef4 <updateBallAngle+0x8a>
     eea:	8d e2       	ldi	r24, 0x2D	; 45
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9f 83       	std	Y+7, r25	; 0x07
     ef0:	8e 83       	std	Y+6, r24	; 0x06
     ef2:	0b c0       	rjmp	.+22     	; 0xf0a <updateBallAngle+0xa0>
	else if(newBallAngle < -45) ball->angle = 45;
     ef4:	63 3d       	cpi	r22, 0xD3	; 211
     ef6:	4f ef       	ldi	r20, 0xFF	; 255
     ef8:	74 07       	cpc	r23, r20
     efa:	2c f4       	brge	.+10     	; 0xf06 <updateBallAngle+0x9c>
     efc:	8d e2       	ldi	r24, 0x2D	; 45
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9f 83       	std	Y+7, r25	; 0x07
     f02:	8e 83       	std	Y+6, r24	; 0x06
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <updateBallAngle+0xa0>
	else ball->angle = newBallAngle;
     f06:	7f 83       	std	Y+7, r23	; 0x07
     f08:	6e 83       	std	Y+6, r22	; 0x06
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	08 95       	ret

00000f1c <ballInit>:

void ballInit(Ball *ball){
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	ec 01       	movw	r28, r24
	ball->dir = rand() % 2;
     f22:	0e 94 6e 11 	call	0x22dc	; 0x22dc <rand>
     f26:	81 70       	andi	r24, 0x01	; 1
     f28:	90 78       	andi	r25, 0x80	; 128
     f2a:	99 23       	and	r25, r25
     f2c:	24 f4       	brge	.+8      	; 0xf36 <ballInit+0x1a>
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	8e 6f       	ori	r24, 0xFE	; 254
     f32:	9f 6f       	ori	r25, 0xFF	; 255
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	99 87       	std	Y+9, r25	; 0x09
     f38:	88 87       	std	Y+8, r24	; 0x08
	ball->angle = (rand() % 91) - 45;
     f3a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <rand>
     f3e:	6b e5       	ldi	r22, 0x5B	; 91
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
     f46:	8d 97       	sbiw	r24, 0x2d	; 45
     f48:	9f 83       	std	Y+7, r25	; 0x07
     f4a:	8e 83       	std	Y+6, r24	; 0x06
	ball->posX = 63;
     f4c:	8f e3       	ldi	r24, 0x3F	; 63
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	99 83       	std	Y+1, r25	; 0x01
     f52:	88 83       	st	Y, r24
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	08 95       	ret

00000f5a <updateBallPosition>:

void updateBallPosition(Ball *ball){
     f5a:	cf 92       	push	r12
     f5c:	df 92       	push	r13
     f5e:	ef 92       	push	r14
     f60:	ff 92       	push	r15
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	ec 01       	movw	r28, r24
	float tempPosY = ball->posY + ((float)(ball->angle)/45);
     f6c:	0e 81       	ldd	r16, Y+6	; 0x06
     f6e:	1f 81       	ldd	r17, Y+7	; 0x07
     f70:	b8 01       	movw	r22, r16
     f72:	88 27       	eor	r24, r24
     f74:	77 fd       	sbrc	r23, 7
     f76:	80 95       	com	r24
     f78:	98 2f       	mov	r25, r24
     f7a:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <__floatsisf>
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	44 e3       	ldi	r20, 0x34	; 52
     f84:	52 e4       	ldi	r21, 0x42	; 66
     f86:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <__divsf3>
     f8a:	2a 81       	ldd	r18, Y+2	; 0x02
     f8c:	3b 81       	ldd	r19, Y+3	; 0x03
     f8e:	4c 81       	ldd	r20, Y+4	; 0x04
     f90:	5d 81       	ldd	r21, Y+5	; 0x05
     f92:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__addsf3>
     f96:	6b 01       	movw	r12, r22
     f98:	7c 01       	movw	r14, r24
	
	//hits the wall
	if (tempPosY > 63){ 
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	4c e7       	ldi	r20, 0x7C	; 124
     fa0:	52 e4       	ldi	r21, 0x42	; 66
     fa2:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <__gesf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	d4 f4       	brge	.+52     	; 0xfde <updateBallPosition+0x84>
		ball->posY = 63 - (tempPosY - 63);
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	4c e7       	ldi	r20, 0x7C	; 124
     fb0:	52 e4       	ldi	r21, 0x42	; 66
     fb2:	c7 01       	movw	r24, r14
     fb4:	b6 01       	movw	r22, r12
     fb6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__subsf3>
     fba:	9b 01       	movw	r18, r22
     fbc:	ac 01       	movw	r20, r24
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	8c e7       	ldi	r24, 0x7C	; 124
     fc4:	92 e4       	ldi	r25, 0x42	; 66
     fc6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <__subsf3>
     fca:	6a 83       	std	Y+2, r22	; 0x02
     fcc:	7b 83       	std	Y+3, r23	; 0x03
     fce:	8c 83       	std	Y+4, r24	; 0x04
     fd0:	9d 83       	std	Y+5, r25	; 0x05
		ball->angle *= -1;
     fd2:	11 95       	neg	r17
     fd4:	01 95       	neg	r16
     fd6:	11 09       	sbc	r17, r1
     fd8:	1f 83       	std	Y+7, r17	; 0x07
     fda:	0e 83       	std	Y+6, r16	; 0x06
     fdc:	1b c0       	rjmp	.+54     	; 0x1014 <updateBallPosition+0xba>
	}
	else if (tempPosY < 0){
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	a9 01       	movw	r20, r18
     fe4:	c7 01       	movw	r24, r14
     fe6:	b6 01       	movw	r22, r12
     fe8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <__cmpsf2>
     fec:	88 23       	and	r24, r24
     fee:	74 f4       	brge	.+28     	; 0x100c <updateBallPosition+0xb2>
		ball->posY = -1*tempPosY;
     ff0:	f7 fa       	bst	r15, 7
     ff2:	f0 94       	com	r15
     ff4:	f7 f8       	bld	r15, 7
     ff6:	f0 94       	com	r15
     ff8:	ca 82       	std	Y+2, r12	; 0x02
     ffa:	db 82       	std	Y+3, r13	; 0x03
     ffc:	ec 82       	std	Y+4, r14	; 0x04
     ffe:	fd 82       	std	Y+5, r15	; 0x05
		ball->angle *= -1;
    1000:	11 95       	neg	r17
    1002:	01 95       	neg	r16
    1004:	11 09       	sbc	r17, r1
    1006:	1f 83       	std	Y+7, r17	; 0x07
    1008:	0e 83       	std	Y+6, r16	; 0x06
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <updateBallPosition+0xba>
	}
	else ball->posY = tempPosY;
    100c:	ca 82       	std	Y+2, r12	; 0x02
    100e:	db 82       	std	Y+3, r13	; 0x03
    1010:	ec 82       	std	Y+4, r14	; 0x04
    1012:	fd 82       	std	Y+5, r15	; 0x05
	if(ball->dir == RIGHT)
    1014:	88 85       	ldd	r24, Y+8	; 0x08
    1016:	99 85       	ldd	r25, Y+9	; 0x09
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	31 f4       	brne	.+12     	; 0x1028 <updateBallPosition+0xce>
		ball->posX++;
    101c:	88 81       	ld	r24, Y
    101e:	99 81       	ldd	r25, Y+1	; 0x01
    1020:	01 96       	adiw	r24, 0x01	; 1
    1022:	99 83       	std	Y+1, r25	; 0x01
    1024:	88 83       	st	Y, r24
    1026:	05 c0       	rjmp	.+10     	; 0x1032 <updateBallPosition+0xd8>
	else ball->posX--;
    1028:	88 81       	ld	r24, Y
    102a:	99 81       	ldd	r25, Y+1	; 0x01
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	99 83       	std	Y+1, r25	; 0x01
    1030:	88 83       	st	Y, r24
}
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	df 90       	pop	r13
    1040:	cf 90       	pop	r12
    1042:	08 95       	ret

00001044 <updateSliderPosition>:
void updateSliderPosition(Slider *slide){
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ec 01       	movw	r28, r24
	*slide = getSliderPosition();
    104a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <getSliderPosition>
    104e:	9b 01       	movw	r18, r22
    1050:	68 83       	st	Y, r22
    1052:	79 83       	std	Y+1, r23	; 0x01
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	9b 83       	std	Y+3, r25	; 0x03
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
    1058:	ef e2       	ldi	r30, 0x2F	; 47
    105a:	e2 9f       	mul	r30, r18
    105c:	c0 01       	movw	r24, r0
    105e:	e3 9f       	mul	r30, r19
    1060:	90 0d       	add	r25, r0
    1062:	11 24       	eor	r1, r1
    1064:	24 e6       	ldi	r18, 0x64	; 100
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	b9 01       	movw	r22, r18
    106a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
    106e:	79 83       	std	Y+1, r23	; 0x01
    1070:	68 83       	st	Y, r22
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
    1072:	4a 81       	ldd	r20, Y+2	; 0x02
    1074:	5b 81       	ldd	r21, Y+3	; 0x03
    1076:	e4 9f       	mul	r30, r20
    1078:	c0 01       	movw	r24, r0
    107a:	e5 9f       	mul	r30, r21
    107c:	90 0d       	add	r25, r0
    107e:	11 24       	eor	r1, r1
    1080:	b9 01       	movw	r22, r18
    1082:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
    1086:	7b 83       	std	Y+3, r23	; 0x03
    1088:	6a 83       	std	Y+2, r22	; 0x02
} 
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	08 95       	ret

00001090 <updateScreen>:
			printEndScreen("Player Left won!");
		}
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	2a 97       	sbiw	r28, 0x0a	; 10
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	09 83       	std	Y+1, r16	; 0x01
    10b2:	1a 83       	std	Y+2, r17	; 0x02
    10b4:	2b 83       	std	Y+3, r18	; 0x03
    10b6:	3c 83       	std	Y+4, r19	; 0x04
    10b8:	4d 83       	std	Y+5, r20	; 0x05
    10ba:	5e 83       	std	Y+6, r21	; 0x06
	oled_sram_clear_screen(0);
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	for (int i = 0; i < RACKETSIZE; i++){
    10c4:	00 e0       	ldi	r16, 0x00	; 0
    10c6:	10 e0       	ldi	r17, 0x00	; 0
    10c8:	a8 01       	movw	r20, r16
    10ca:	4e 0d       	add	r20, r14
    10cc:	5f 1d       	adc	r21, r15
		oled_sram_write_bit(0, 1, leftRacketPos + i);
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
    10da:	a8 01       	movw	r20, r16
    10dc:	4c 0d       	add	r20, r12
    10de:	5d 1d       	adc	r21, r13
		oled_sram_write_bit(0,127, rightRacketPos + i);
    10e0:	6f e7       	ldi	r22, 0x7F	; 127
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
    10ec:	0f 5f       	subi	r16, 0xFF	; 255
    10ee:	1f 4f       	sbci	r17, 0xFF	; 255
    10f0:	00 31       	cpi	r16, 0x10	; 16
    10f2:	11 05       	cpc	r17, r1
    10f4:	49 f7       	brne	.-46     	; 0x10c8 <updateScreen+0x38>
    10f6:	00 e0       	ldi	r16, 0x00	; 0
    10f8:	10 e0       	ldi	r17, 0x00	; 0
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	a9 01       	movw	r20, r18
    1100:	6b 81       	ldd	r22, Y+3	; 0x03
    1102:	7c 81       	ldd	r23, Y+4	; 0x04
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__addsf3>
    110c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__fixsfsi>
    1110:	29 81       	ldd	r18, Y+1	; 0x01
    1112:	3a 81       	ldd	r19, Y+2	; 0x02
    1114:	20 0f       	add	r18, r16
    1116:	31 1f       	adc	r19, r17
    1118:	ab 01       	movw	r20, r22
    111a:	b9 01       	movw	r22, r18
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	40 e8       	ldi	r20, 0x80	; 128
    112a:	5f e3       	ldi	r21, 0x3F	; 63
    112c:	6b 81       	ldd	r22, Y+3	; 0x03
    112e:	7c 81       	ldd	r23, Y+4	; 0x04
    1130:	8d 81       	ldd	r24, Y+5	; 0x05
    1132:	9e 81       	ldd	r25, Y+6	; 0x06
    1134:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__addsf3>
    1138:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__fixsfsi>
    113c:	29 81       	ldd	r18, Y+1	; 0x01
    113e:	3a 81       	ldd	r19, Y+2	; 0x02
    1140:	20 0f       	add	r18, r16
    1142:	31 1f       	adc	r19, r17
    1144:	ab 01       	movw	r20, r22
    1146:	b9 01       	movw	r22, r18
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
    1150:	0f 5f       	subi	r16, 0xFF	; 255
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
    1154:	02 30       	cpi	r16, 0x02	; 2
    1156:	11 05       	cpc	r17, r1
    1158:	81 f6       	brne	.-96     	; 0x10fa <updateScreen+0x6a>
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
}
    1162:	2a 96       	adiw	r28, 0x0a	; 10
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	de bf       	out	0x3e, r29	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	ff 90       	pop	r15
    1178:	ef 90       	pop	r14
    117a:	df 90       	pop	r13
    117c:	cf 90       	pop	r12
    117e:	08 95       	ret

00001180 <playRound>:
	*slide = getSliderPosition();
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
} 

int playRound(){
    1180:	af 92       	push	r10
    1182:	bf 92       	push	r11
    1184:	cf 92       	push	r12
    1186:	df 92       	push	r13
    1188:	ef 92       	push	r14
    118a:	ff 92       	push	r15
    118c:	0f 93       	push	r16
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	2e 97       	sbiw	r28, 0x0e	; 14
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
	Ball ball;
	Slider slide;
	ballInit(&ball);
    11a4:	ce 01       	movw	r24, r28
    11a6:	01 96       	adiw	r24, 0x01	; 1
    11a8:	0e 94 8e 07 	call	0xf1c	; 0xf1c <ballInit>
				return LEFT;
			}
		}
		else if (ball.posX == 1){
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
    11ac:	aa 24       	eor	r10, r10
    11ae:	a3 94       	inc	r10
    11b0:	b1 2c       	mov	r11, r1
	Ball ball;
	Slider slide;
	ballInit(&ball);
	int time = 25;
	while(1){
		updateSliderPosition(&slide);
    11b2:	ce 01       	movw	r24, r28
    11b4:	0b 96       	adiw	r24, 0x0b	; 11
    11b6:	0e 94 22 08 	call	0x1044	; 0x1044 <updateSliderPosition>
		if (ball.posX >= 126){
    11ba:	09 81       	ldd	r16, Y+1	; 0x01
    11bc:	1a 81       	ldd	r17, Y+2	; 0x02
    11be:	0e 37       	cpi	r16, 0x7E	; 126
    11c0:	11 05       	cpc	r17, r1
    11c2:	94 f0       	brlt	.+36     	; 0x11e8 <playRound+0x68>
			if (racketHit(&ball, slide.right) ){
    11c4:	ed 84       	ldd	r14, Y+13	; 0x0d
    11c6:	fe 84       	ldd	r15, Y+14	; 0x0e
    11c8:	b7 01       	movw	r22, r14
    11ca:	ce 01       	movw	r24, r28
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <racketHit>
    11d2:	8c 01       	movw	r16, r24
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	a9 f1       	breq	.+106    	; 0x1242 <playRound+0xc2>
				ball.dir = LEFT;
    11d8:	1a 86       	std	Y+10, r1	; 0x0a
    11da:	19 86       	std	Y+9, r1	; 0x09
				updateBallAngle(&ball, slide.right);
    11dc:	b7 01       	movw	r22, r14
    11de:	ce 01       	movw	r24, r28
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	0e 94 35 07 	call	0xe6a	; 0xe6a <updateBallAngle>
    11e6:	13 c0       	rjmp	.+38     	; 0x120e <playRound+0x8e>
			}
			else{
				return LEFT;
			}
		}
		else if (ball.posX == 1){
    11e8:	01 30       	cpi	r16, 0x01	; 1
    11ea:	11 05       	cpc	r17, r1
    11ec:	81 f4       	brne	.+32     	; 0x120e <playRound+0x8e>
			if (racketHit(&ball, slide.left) ){
    11ee:	eb 84       	ldd	r14, Y+11	; 0x0b
    11f0:	fc 84       	ldd	r15, Y+12	; 0x0c
    11f2:	b7 01       	movw	r22, r14
    11f4:	ce 01       	movw	r24, r28
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <racketHit>
    11fc:	89 2b       	or	r24, r25
    11fe:	09 f1       	breq	.+66     	; 0x1242 <playRound+0xc2>
				ball.dir = RIGHT;
    1200:	ba 86       	std	Y+10, r11	; 0x0a
    1202:	a9 86       	std	Y+9, r10	; 0x09
				updateBallAngle(&ball, slide.left);
    1204:	b7 01       	movw	r22, r14
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	0e 94 35 07 	call	0xe6a	; 0xe6a <updateBallAngle>
			}
			else {
				return RIGHT;
			}
		}
		updateBallPosition(&ball);
    120e:	ce 01       	movw	r24, r28
    1210:	01 96       	adiw	r24, 0x01	; 1
    1212:	0e 94 ad 07 	call	0xf5a	; 0xf5a <updateBallPosition>
		updateScreen(ball, slide.left, slide.right);
    1216:	cd 84       	ldd	r12, Y+13	; 0x0d
    1218:	de 84       	ldd	r13, Y+14	; 0x0e
    121a:	eb 84       	ldd	r14, Y+11	; 0x0b
    121c:	fc 84       	ldd	r15, Y+12	; 0x0c
    121e:	09 81       	ldd	r16, Y+1	; 0x01
    1220:	1a 81       	ldd	r17, Y+2	; 0x02
    1222:	2b 81       	ldd	r18, Y+3	; 0x03
    1224:	3c 81       	ldd	r19, Y+4	; 0x04
    1226:	4d 81       	ldd	r20, Y+5	; 0x05
    1228:	5e 81       	ldd	r21, Y+6	; 0x06
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	0e 94 48 08 	call	0x1090	; 0x1090 <updateScreen>
    1236:	89 e9       	ldi	r24, 0x99	; 153
    1238:	99 e0       	ldi	r25, 0x09	; 9
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	f1 f7       	brne	.-4      	; 0x123a <playRound+0xba>
    123e:	00 c0       	rjmp	.+0      	; 0x1240 <playRound+0xc0>
    1240:	b8 cf       	rjmp	.-144    	; 0x11b2 <playRound+0x32>
		_delay_ms(2);
	}
}
    1242:	c8 01       	movw	r24, r16
    1244:	2e 96       	adiw	r28, 0x0e	; 14
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	bf 90       	pop	r11
    1262:	af 90       	pop	r10
    1264:	08 95       	ret

00001266 <printScore>:
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
}
void printScore(int leftPoints, int rightPoints){
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	00 d0       	rcall	.+0      	; 0x1270 <printScore+0xa>
    1270:	1f 92       	push	r1
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	08 2f       	mov	r16, r24
    1278:	16 2f       	mov	r17, r22
	oled_sram_clear_screen(0);
    127a:	80 e0       	ldi	r24, 0x00	; 0
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	char lp = leftPoints + '0';
    1282:	00 5d       	subi	r16, 0xD0	; 208
    1284:	09 83       	std	Y+1, r16	; 0x01
	char mid = '-';
    1286:	8d e2       	ldi	r24, 0x2D	; 45
    1288:	8a 83       	std	Y+2, r24	; 0x02
	char rp = rightPoints + '0';
    128a:	10 5d       	subi	r17, 0xD0	; 208
    128c:	1b 83       	std	Y+3, r17	; 0x03
	oled_sram_write_char(0, &lp, 2, 56);
    128e:	28 e3       	ldi	r18, 0x38	; 56
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	42 e0       	ldi	r20, 0x02	; 2
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	be 01       	movw	r22, r28
    1298:	6f 5f       	subi	r22, 0xFF	; 255
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
	oled_sram_write_char(0, &mid, 2, 64);
    12a4:	20 e4       	ldi	r18, 0x40	; 64
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	42 e0       	ldi	r20, 0x02	; 2
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	be 01       	movw	r22, r28
    12ae:	6e 5f       	subi	r22, 0xFE	; 254
    12b0:	7f 4f       	sbci	r23, 0xFF	; 255
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
	oled_sram_write_char(0, &rp, 2, 72);
    12ba:	28 e4       	ldi	r18, 0x48	; 72
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	42 e0       	ldi	r20, 0x02	; 2
    12c0:	50 e0       	ldi	r21, 0x00	; 0
    12c2:	be 01       	movw	r22, r28
    12c4:	6d 5f       	subi	r22, 0xFD	; 253
    12c6:	7f 4f       	sbci	r23, 0xFF	; 255
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
	oled_sram_flush(0);	
    12d0:	80 e0       	ldi	r24, 0x00	; 0
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	df 91       	pop	r29
    12e0:	cf 91       	pop	r28
    12e2:	1f 91       	pop	r17
    12e4:	0f 91       	pop	r16
    12e6:	08 95       	ret

000012e8 <printEndScreen>:
void printEndScreen(char *endMessage){
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	8c 01       	movw	r16, r24
	oled_sram_clear_screen(0);
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	for(int i = 0; i < 10; i++){
    12fa:	c0 e0       	ldi	r28, 0x00	; 0
    12fc:	d0 e0       	ldi	r29, 0x00	; 0
		if( i % 2 ){
    12fe:	c0 ff       	sbrs	r28, 0
    1300:	11 c0       	rjmp	.+34     	; 0x1324 <printEndScreen+0x3c>
			oled_sram_write_string(0, endMessage, 2);
    1302:	42 e0       	ldi	r20, 0x02	; 2
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	b8 01       	movw	r22, r16
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_sram_write_string>
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	9f e7       	ldi	r25, 0x7F	; 127
    1314:	24 e0       	ldi	r18, 0x04	; 4
    1316:	81 50       	subi	r24, 0x01	; 1
    1318:	90 40       	sbci	r25, 0x00	; 0
    131a:	20 40       	sbci	r18, 0x00	; 0
    131c:	e1 f7       	brne	.-8      	; 0x1316 <printEndScreen+0x2e>
    131e:	00 c0       	rjmp	.+0      	; 0x1320 <printEndScreen+0x38>
    1320:	00 00       	nop
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <printEndScreen+0x4e>
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	9f e7       	ldi	r25, 0x7F	; 127
    1328:	24 e0       	ldi	r18, 0x04	; 4
    132a:	81 50       	subi	r24, 0x01	; 1
    132c:	90 40       	sbci	r25, 0x00	; 0
    132e:	20 40       	sbci	r18, 0x00	; 0
    1330:	e1 f7       	brne	.-8      	; 0x132a <printEndScreen+0x42>
    1332:	00 c0       	rjmp	.+0      	; 0x1334 <printEndScreen+0x4c>
    1334:	00 00       	nop
	oled_sram_write_char(0, &rp, 2, 72);
	oled_sram_flush(0);	
}
void printEndScreen(char *endMessage){
	oled_sram_clear_screen(0);
	for(int i = 0; i < 10; i++){
    1336:	21 96       	adiw	r28, 0x01	; 1
    1338:	ca 30       	cpi	r28, 0x0A	; 10
    133a:	d1 05       	cpc	r29, r1
    133c:	01 f7       	brne	.-64     	; 0x12fe <printEndScreen+0x16>
			oled_sram_write_string(0, endMessage, 2);
			_delay_ms(300);
		}
		else _delay_ms(300);
	}
	oled_sram_flush(0);	
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	08 95       	ret

00001350 <playPong>:

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	}
}

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
    1358:	00 e0       	ldi	r16, 0x00	; 0
    135a:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(2);
	}
}

void playPong(){
	int pointLeft = 0;
    135c:	c0 e0       	ldi	r28, 0x00	; 0
    135e:	d0 e0       	ldi	r29, 0x00	; 0
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
	while(1){
		printScore(pointLeft, pointRight);
    1360:	b8 01       	movw	r22, r16
    1362:	ce 01       	movw	r24, r28
    1364:	0e 94 33 09 	call	0x1266	; 0x1266 <printScore>
    1368:	2f ef       	ldi	r18, 0xFF	; 255
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	9d e1       	ldi	r25, 0x1D	; 29
    136e:	21 50       	subi	r18, 0x01	; 1
    1370:	80 40       	sbci	r24, 0x00	; 0
    1372:	90 40       	sbci	r25, 0x00	; 0
    1374:	e1 f7       	brne	.-8      	; 0x136e <playPong+0x1e>
    1376:	00 c0       	rjmp	.+0      	; 0x1378 <playPong+0x28>
    1378:	00 00       	nop
		_delay_ms(2000);
		point = playRound();
    137a:	0e 94 c0 08 	call	0x1180	; 0x1180 <playRound>
		if (point == LEFT) pointLeft++;
    137e:	89 2b       	or	r24, r25
    1380:	11 f4       	brne	.+4      	; 0x1386 <playPong+0x36>
    1382:	21 96       	adiw	r28, 0x01	; 1
    1384:	02 c0       	rjmp	.+4      	; 0x138a <playPong+0x3a>
		else pointRight++;
    1386:	0f 5f       	subi	r16, 0xFF	; 255
    1388:	1f 4f       	sbci	r17, 0xFF	; 255
		if(pointLeft == 5){
    138a:	c5 30       	cpi	r28, 0x05	; 5
    138c:	d1 05       	cpc	r29, r1
    138e:	29 f4       	brne	.+10     	; 0x139a <playPong+0x4a>
			printEndScreen("Player Right won!");
    1390:	83 e7       	ldi	r24, 0x73	; 115
    1392:	91 e0       	ldi	r25, 0x01	; 1
    1394:	0e 94 74 09 	call	0x12e8	; 0x12e8 <printEndScreen>
    1398:	e3 cf       	rjmp	.-58     	; 0x1360 <playPong+0x10>
		}
		else if(pointRight == 5){
    139a:	05 30       	cpi	r16, 0x05	; 5
    139c:	11 05       	cpc	r17, r1
    139e:	01 f7       	brne	.-64     	; 0x1360 <playPong+0x10>
			printEndScreen("Player Left won!");
    13a0:	85 e8       	ldi	r24, 0x85	; 133
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 74 09 	call	0x12e8	; 0x12e8 <printEndScreen>
    13a8:	db cf       	rjmp	.-74     	; 0x1360 <playPong+0x10>

000013aa <detectCollision>:
#include <util/delay.h>
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
    13aa:	fc 01       	movw	r30, r24
	while(s){
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	81 f0       	breq	.+32     	; 0x13d0 <detectCollision+0x26>
		if (s->x == x && s->y == y){
    13b0:	84 81       	ldd	r24, Z+4	; 0x04
    13b2:	95 81       	ldd	r25, Z+5	; 0x05
    13b4:	86 17       	cp	r24, r22
    13b6:	97 07       	cpc	r25, r23
    13b8:	29 f4       	brne	.+10     	; 0x13c4 <detectCollision+0x1a>
    13ba:	86 81       	ldd	r24, Z+6	; 0x06
    13bc:	97 81       	ldd	r25, Z+7	; 0x07
    13be:	84 17       	cp	r24, r20
    13c0:	95 07       	cpc	r25, r21
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <detectCollision+0x2c>
			return 1;
		}
		s = s->next;
    13c4:	01 90       	ld	r0, Z+
    13c6:	f0 81       	ld	r31, Z
    13c8:	e0 2d       	mov	r30, r0
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
	while(s){
    13ca:	30 97       	sbiw	r30, 0x00	; 0
    13cc:	89 f7       	brne	.-30     	; 0x13b0 <detectCollision+0x6>
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <detectCollision+0x32>
		if (s->x == x && s->y == y){
			return 1;
		}
		s = s->next;
	}
	return 0;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	08 95       	ret


int detectCollision(segment *s, int x, int y){
	while(s){
		if (s->x == x && s->y == y){
			return 1;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	08 95       	ret
		}
		s = s->next;
	}
	return 0;
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
}
    13e0:	08 95       	ret

000013e2 <placeFood>:

void placeFood(int food[], segment *first){
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	ec 01       	movw	r28, r24
    13ec:	8b 01       	movw	r16, r22
	do{
		food[0] = rand() % 64;
    13ee:	0e 94 6e 11 	call	0x22dc	; 0x22dc <rand>
    13f2:	8f 73       	andi	r24, 0x3F	; 63
    13f4:	90 78       	andi	r25, 0x80	; 128
    13f6:	99 23       	and	r25, r25
    13f8:	24 f4       	brge	.+8      	; 0x1402 <placeFood+0x20>
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	80 6c       	ori	r24, 0xC0	; 192
    13fe:	9f 6f       	ori	r25, 0xFF	; 255
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	99 83       	std	Y+1, r25	; 0x01
    1404:	88 83       	st	Y, r24
		food[1] = rand() % 32;
    1406:	0e 94 6e 11 	call	0x22dc	; 0x22dc <rand>
    140a:	ac 01       	movw	r20, r24
    140c:	4f 71       	andi	r20, 0x1F	; 31
    140e:	50 78       	andi	r21, 0x80	; 128
    1410:	55 23       	and	r21, r21
    1412:	34 f4       	brge	.+12     	; 0x1420 <placeFood+0x3e>
    1414:	41 50       	subi	r20, 0x01	; 1
    1416:	51 09       	sbc	r21, r1
    1418:	40 6e       	ori	r20, 0xE0	; 224
    141a:	5f 6f       	ori	r21, 0xFF	; 255
    141c:	4f 5f       	subi	r20, 0xFF	; 255
    141e:	5f 4f       	sbci	r21, 0xFF	; 255
    1420:	5b 83       	std	Y+3, r21	; 0x03
    1422:	4a 83       	std	Y+2, r20	; 0x02
	} while(detectCollision(first, food[0], food[1]));
    1424:	68 81       	ld	r22, Y
    1426:	79 81       	ldd	r23, Y+1	; 0x01
    1428:	c8 01       	movw	r24, r16
    142a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <detectCollision>
    142e:	89 2b       	or	r24, r25
    1430:	f1 f6       	brne	.-68     	; 0x13ee <placeFood+0xc>
}
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	08 95       	ret

0000143c <drawBoard>:

void drawBoard(segment *s, int food[]){
    143c:	cf 92       	push	r12
    143e:	df 92       	push	r13
    1440:	ef 92       	push	r14
    1442:	ff 92       	push	r15
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	8c 01       	movw	r16, r24
    144e:	7b 01       	movw	r14, r22
	oled_sram_clear_screen(0);
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	while(s){
    1458:	01 15       	cp	r16, r1
    145a:	11 05       	cpc	r17, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <drawBoard+0x24>
    145e:	59 c0       	rjmp	.+178    	; 0x1512 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1460:	c1 2c       	mov	r12, r1
    1462:	d1 2c       	mov	r13, r1
    1464:	2a c0       	rjmp	.+84     	; 0x14ba <drawBoard+0x7e>
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
    1466:	f8 01       	movw	r30, r16
    1468:	46 81       	ldd	r20, Z+6	; 0x06
    146a:	57 81       	ldd	r21, Z+7	; 0x07
    146c:	44 0f       	add	r20, r20
    146e:	55 1f       	adc	r21, r21
    1470:	64 81       	ldd	r22, Z+4	; 0x04
    1472:	75 81       	ldd	r23, Z+5	; 0x05
    1474:	66 0f       	add	r22, r22
    1476:	77 1f       	adc	r23, r23
    1478:	6c 0f       	add	r22, r28
    147a:	7d 1f       	adc	r23, r29
    147c:	8c 2d       	mov	r24, r12
    147e:	9d 2d       	mov	r25, r13
    1480:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
    1484:	f8 01       	movw	r30, r16
    1486:	46 81       	ldd	r20, Z+6	; 0x06
    1488:	57 81       	ldd	r21, Z+7	; 0x07
    148a:	44 0f       	add	r20, r20
    148c:	55 1f       	adc	r21, r21
    148e:	4f 5f       	subi	r20, 0xFF	; 255
    1490:	5f 4f       	sbci	r21, 0xFF	; 255
    1492:	64 81       	ldd	r22, Z+4	; 0x04
    1494:	75 81       	ldd	r23, Z+5	; 0x05
    1496:	66 0f       	add	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	6c 0f       	add	r22, r28
    149c:	7d 1f       	adc	r23, r29
    149e:	8c 2d       	mov	r24, r12
    14a0:	9d 2d       	mov	r25, r13
    14a2:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
    14a6:	21 96       	adiw	r28, 0x01	; 1
    14a8:	c2 30       	cpi	r28, 0x02	; 2
    14aa:	d1 05       	cpc	r29, r1
    14ac:	e1 f6       	brne	.-72     	; 0x1466 <drawBoard+0x2a>
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
    14ae:	f8 01       	movw	r30, r16
    14b0:	00 81       	ld	r16, Z
    14b2:	11 81       	ldd	r17, Z+1	; 0x01
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
    14b4:	01 15       	cp	r16, r1
    14b6:	11 05       	cpc	r17, r1
    14b8:	61 f1       	breq	.+88     	; 0x1512 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    14ba:	cc 2d       	mov	r28, r12
    14bc:	dd 2d       	mov	r29, r13
    14be:	d3 cf       	rjmp	.-90     	; 0x1466 <drawBoard+0x2a>
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
    14c0:	f7 01       	movw	r30, r14
    14c2:	42 81       	ldd	r20, Z+2	; 0x02
    14c4:	53 81       	ldd	r21, Z+3	; 0x03
    14c6:	44 0f       	add	r20, r20
    14c8:	55 1f       	adc	r21, r21
    14ca:	60 81       	ld	r22, Z
    14cc:	71 81       	ldd	r23, Z+1	; 0x01
    14ce:	66 0f       	add	r22, r22
    14d0:	77 1f       	adc	r23, r23
    14d2:	6c 0f       	add	r22, r28
    14d4:	7d 1f       	adc	r23, r29
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
    14de:	f7 01       	movw	r30, r14
    14e0:	42 81       	ldd	r20, Z+2	; 0x02
    14e2:	53 81       	ldd	r21, Z+3	; 0x03
    14e4:	44 0f       	add	r20, r20
    14e6:	55 1f       	adc	r21, r21
    14e8:	4f 5f       	subi	r20, 0xFF	; 255
    14ea:	5f 4f       	sbci	r21, 0xFF	; 255
    14ec:	60 81       	ld	r22, Z
    14ee:	71 81       	ldd	r23, Z+1	; 0x01
    14f0:	66 0f       	add	r22, r22
    14f2:	77 1f       	adc	r23, r23
    14f4:	6c 0f       	add	r22, r28
    14f6:	7d 1f       	adc	r23, r29
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
    1500:	21 96       	adiw	r28, 0x01	; 1
    1502:	c2 30       	cpi	r28, 0x02	; 2
    1504:	d1 05       	cpc	r29, r1
    1506:	e1 f6       	brne	.-72     	; 0x14c0 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <drawBoard+0xdc>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1512:	c0 e0       	ldi	r28, 0x00	; 0
    1514:	d0 e0       	ldi	r29, 0x00	; 0
    1516:	d4 cf       	rjmp	.-88     	; 0x14c0 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
}
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	ff 90       	pop	r15
    1522:	ef 90       	pop	r14
    1524:	df 90       	pop	r13
    1526:	cf 90       	pop	r12
    1528:	08 95       	ret

0000152a <playSnake>:

void playSnake(){
    152a:	af 92       	push	r10
    152c:	bf 92       	push	r11
    152e:	cf 92       	push	r12
    1530:	df 92       	push	r13
    1532:	ef 92       	push	r14
    1534:	ff 92       	push	r15
    1536:	0f 93       	push	r16
    1538:	1f 93       	push	r17
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	00 d0       	rcall	.+0      	; 0x1540 <playSnake+0x16>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <playSnake+0x18>
    1542:	cd b7       	in	r28, 0x3d	; 61
    1544:	de b7       	in	r29, 0x3e	; 62
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    1546:	88 e0       	ldi	r24, 0x08	; 8
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <malloc>
    154e:	6c 01       	movw	r12, r24
	first->x = 32;
    1550:	80 e2       	ldi	r24, 0x20	; 32
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	f6 01       	movw	r30, r12
    1556:	95 83       	std	Z+5, r25	; 0x05
    1558:	84 83       	std	Z+4, r24	; 0x04
	first->y = 16;
    155a:	80 e1       	ldi	r24, 0x10	; 16
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	97 83       	std	Z+7, r25	; 0x07
    1560:	86 83       	std	Z+6, r24	; 0x06
	segment *last = first;
	first->next = 0;
    1562:	11 82       	std	Z+1, r1	; 0x01
    1564:	10 82       	st	Z, r1
	first->prev = 0;
    1566:	13 82       	std	Z+3, r1	; 0x03
    1568:	12 82       	std	Z+2, r1	; 0x02
	oled_sram_flush(0);
}

void playSnake(){
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    156a:	86 01       	movw	r16, r12
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
    156c:	68 94       	set
    156e:	aa 24       	eor	r10, r10
    1570:	a2 f8       	bld	r10, 2
    1572:	b1 2c       	mov	r11, r1
	for(int i = 0; i < 4; i++){
		segment *temp = (segment*)malloc(sizeof(segment));
    1574:	88 e0       	ldi	r24, 0x08	; 8
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <malloc>
    157c:	7c 01       	movw	r14, r24
		temp->x = first->x + 1;
    157e:	f8 01       	movw	r30, r16
    1580:	84 81       	ldd	r24, Z+4	; 0x04
    1582:	95 81       	ldd	r25, Z+5	; 0x05
    1584:	01 96       	adiw	r24, 0x01	; 1
    1586:	f7 01       	movw	r30, r14
    1588:	95 83       	std	Z+5, r25	; 0x05
    158a:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    158c:	f8 01       	movw	r30, r16
    158e:	86 81       	ldd	r24, Z+6	; 0x06
    1590:	97 81       	ldd	r25, Z+7	; 0x07
    1592:	f7 01       	movw	r30, r14
    1594:	97 83       	std	Z+7, r25	; 0x07
    1596:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    1598:	11 83       	std	Z+1, r17	; 0x01
    159a:	00 83       	st	Z, r16
		temp->prev = 0;
    159c:	13 82       	std	Z+3, r1	; 0x03
    159e:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    15a0:	f8 01       	movw	r30, r16
    15a2:	f3 82       	std	Z+3, r15	; 0x03
    15a4:	e2 82       	std	Z+2, r14	; 0x02
    15a6:	f1 e0       	ldi	r31, 0x01	; 1
    15a8:	af 1a       	sub	r10, r31
    15aa:	b1 08       	sbc	r11, r1
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
	for(int i = 0; i < 4; i++){
    15ac:	a1 14       	cp	r10, r1
    15ae:	b1 04       	cpc	r11, r1
    15b0:	11 f0       	breq	.+4      	; 0x15b6 <playSnake+0x8c>
		segment *temp = (segment*)malloc(sizeof(segment));
    15b2:	87 01       	movw	r16, r14
    15b4:	df cf       	rjmp	.-66     	; 0x1574 <playSnake+0x4a>
	}


	//initalize food
	int food[2];
	placeFood(food, first);
    15b6:	b7 01       	movw	r22, r14
    15b8:	ce 01       	movw	r24, r28
    15ba:	01 96       	adiw	r24, 0x01	; 1
    15bc:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <placeFood>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	//initalize food
	int food[2];
	placeFood(food, first);

	//initialize direction of snake
	direction S = RIGHT;
    15c8:	aa 24       	eor	r10, r10
    15ca:	a3 94       	inc	r10
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    15cc:	70 c0       	rjmp	.+224    	; 0x16ae <playSnake+0x184>
		Joystick j = getJoystickPosition();
    15ce:	0e 94 77 03 	call	0x6ee	; 0x6ee <getJoystickPosition>
    15d2:	b8 2e       	mov	r11, r24
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    15d4:	24 e0       	ldi	r18, 0x04	; 4
    15d6:	82 13       	cpse	r24, r18
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <playSnake+0xb2>
    15da:	ba 2c       	mov	r11, r10
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    15dc:	88 e0       	ldi	r24, 0x08	; 8
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <malloc>
    15e4:	8c 01       	movw	r16, r24
		
		temp->x = first->x;
    15e6:	f7 01       	movw	r30, r14
    15e8:	24 81       	ldd	r18, Z+4	; 0x04
    15ea:	35 81       	ldd	r19, Z+5	; 0x05
    15ec:	fc 01       	movw	r30, r24
    15ee:	35 83       	std	Z+5, r19	; 0x05
    15f0:	24 83       	std	Z+4, r18	; 0x04
		temp->y = first->y;
    15f2:	f7 01       	movw	r30, r14
    15f4:	26 81       	ldd	r18, Z+6	; 0x06
    15f6:	37 81       	ldd	r19, Z+7	; 0x07
    15f8:	fc 01       	movw	r30, r24
    15fa:	37 83       	std	Z+7, r19	; 0x07
    15fc:	26 83       	std	Z+6, r18	; 0x06
		temp->next = first;
    15fe:	f1 82       	std	Z+1, r15	; 0x01
    1600:	e0 82       	st	Z, r14
		temp->prev = 0;
    1602:	13 82       	std	Z+3, r1	; 0x03
    1604:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1606:	f7 01       	movw	r30, r14
    1608:	93 83       	std	Z+3, r25	; 0x03
    160a:	82 83       	std	Z+2, r24	; 0x02

		//Find direction of snake movement
		switch (S){
    160c:	f1 e0       	ldi	r31, 0x01	; 1
    160e:	bf 16       	cp	r11, r31
    1610:	f1 f0       	breq	.+60     	; 0x164e <playSnake+0x124>
    1612:	bf 16       	cp	r11, r31
    1614:	a8 f0       	brcs	.+42     	; 0x1640 <playSnake+0x116>
    1616:	22 e0       	ldi	r18, 0x02	; 2
    1618:	b2 16       	cp	r11, r18
    161a:	21 f0       	breq	.+8      	; 0x1624 <playSnake+0xfa>
    161c:	83 e0       	ldi	r24, 0x03	; 3
    161e:	b8 16       	cp	r11, r24
    1620:	41 f0       	breq	.+16     	; 0x1632 <playSnake+0x108>
    1622:	1b c0       	rjmp	.+54     	; 0x165a <playSnake+0x130>
			case UP:
			temp->y--;
    1624:	fc 01       	movw	r30, r24
    1626:	86 81       	ldd	r24, Z+6	; 0x06
    1628:	97 81       	ldd	r25, Z+7	; 0x07
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	97 83       	std	Z+7, r25	; 0x07
    162e:	86 83       	std	Z+6, r24	; 0x06
			break;
    1630:	14 c0       	rjmp	.+40     	; 0x165a <playSnake+0x130>
			case DOWN:
			temp->y++;
    1632:	f8 01       	movw	r30, r16
    1634:	86 81       	ldd	r24, Z+6	; 0x06
    1636:	97 81       	ldd	r25, Z+7	; 0x07
    1638:	01 96       	adiw	r24, 0x01	; 1
    163a:	97 83       	std	Z+7, r25	; 0x07
    163c:	86 83       	std	Z+6, r24	; 0x06
			break;
    163e:	0d c0       	rjmp	.+26     	; 0x165a <playSnake+0x130>
			case LEFT:
			temp->x--;
    1640:	fc 01       	movw	r30, r24
    1642:	84 81       	ldd	r24, Z+4	; 0x04
    1644:	95 81       	ldd	r25, Z+5	; 0x05
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	95 83       	std	Z+5, r25	; 0x05
    164a:	84 83       	std	Z+4, r24	; 0x04
			break;
    164c:	06 c0       	rjmp	.+12     	; 0x165a <playSnake+0x130>
			case RIGHT:
			temp->x++;
    164e:	fc 01       	movw	r30, r24
    1650:	84 81       	ldd	r24, Z+4	; 0x04
    1652:	95 81       	ldd	r25, Z+5	; 0x05
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	95 83       	std	Z+5, r25	; 0x05
    1658:	84 83       	std	Z+4, r24	; 0x04
			break;
		}

		first = temp;
		
		if(detectCollision(first, food[0], food[1])){//hit food?
    165a:	4b 81       	ldd	r20, Y+3	; 0x03
    165c:	5c 81       	ldd	r21, Y+4	; 0x04
    165e:	69 81       	ldd	r22, Y+1	; 0x01
    1660:	7a 81       	ldd	r23, Y+2	; 0x02
    1662:	c8 01       	movw	r24, r16
    1664:	0e 94 d5 09 	call	0x13aa	; 0x13aa <detectCollision>
    1668:	89 2b       	or	r24, r25
    166a:	31 f0       	breq	.+12     	; 0x1678 <playSnake+0x14e>
			placeFood(food, first);
    166c:	b8 01       	movw	r22, r16
    166e:	ce 01       	movw	r24, r28
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	0e 94 f1 09 	call	0x13e2	; 0x13e2 <placeFood>
    1676:	0a c0       	rjmp	.+20     	; 0x168c <playSnake+0x162>
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    1678:	f6 01       	movw	r30, r12
    167a:	e2 80       	ldd	r14, Z+2	; 0x02
    167c:	f3 80       	ldd	r15, Z+3	; 0x03
			last->next = 0;
    167e:	f7 01       	movw	r30, r14
    1680:	11 82       	std	Z+1, r1	; 0x01
    1682:	10 82       	st	Z, r1
			free(temp);
    1684:	c6 01       	movw	r24, r12
    1686:	0e 94 91 10 	call	0x2122	; 0x2122 <free>
			placeFood(food, first);
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    168a:	67 01       	movw	r12, r14
			last->next = 0;
			free(temp);
		}
		drawBoard(first, food);
    168c:	be 01       	movw	r22, r28
    168e:	6f 5f       	subi	r22, 0xFF	; 255
    1690:	7f 4f       	sbci	r23, 0xFF	; 255
    1692:	c8 01       	movw	r24, r16
    1694:	0e 94 1e 0a 	call	0x143c	; 0x143c <drawBoard>
    1698:	ff ef       	ldi	r31, 0xFF	; 255
    169a:	2f e7       	ldi	r18, 0x7F	; 127
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	f1 50       	subi	r31, 0x01	; 1
    16a0:	20 40       	sbci	r18, 0x00	; 0
    16a2:	80 40       	sbci	r24, 0x00	; 0
    16a4:	e1 f7       	brne	.-8      	; 0x169e <playSnake+0x174>
    16a6:	00 c0       	rjmp	.+0      	; 0x16a8 <playSnake+0x17e>
    16a8:	00 c0       	rjmp	.+0      	; 0x16aa <playSnake+0x180>
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
		Joystick j = getJoystickPosition();
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    16aa:	ab 2c       	mov	r10, r11
			break;
			default:
			break;
		}

		first = temp;
    16ac:	78 01       	movw	r14, r16

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    16ae:	f7 01       	movw	r30, r14
    16b0:	46 81       	ldd	r20, Z+6	; 0x06
    16b2:	57 81       	ldd	r21, Z+7	; 0x07
    16b4:	64 81       	ldd	r22, Z+4	; 0x04
    16b6:	75 81       	ldd	r23, Z+5	; 0x05
    16b8:	80 81       	ld	r24, Z
    16ba:	91 81       	ldd	r25, Z+1	; 0x01
    16bc:	0e 94 d5 09 	call	0x13aa	; 0x13aa <detectCollision>
    16c0:	89 2b       	or	r24, r25
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <playSnake+0x19c>
    16c4:	84 cf       	rjmp	.-248    	; 0x15ce <playSnake+0xa4>
		}
		drawBoard(first, food);
		_delay_ms(100);
	}

    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	df 90       	pop	r13
    16dc:	cf 90       	pop	r12
    16de:	bf 90       	pop	r11
    16e0:	af 90       	pop	r10
    16e2:	08 95       	ret

000016e4 <make_screen>:
	}
	
	
}

make_screen(menu* m){
    16e4:	2f 92       	push	r2
    16e6:	3f 92       	push	r3
    16e8:	4f 92       	push	r4
    16ea:	5f 92       	push	r5
    16ec:	6f 92       	push	r6
    16ee:	7f 92       	push	r7
    16f0:	8f 92       	push	r8
    16f2:	9f 92       	push	r9
    16f4:	af 92       	push	r10
    16f6:	bf 92       	push	r11
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	0f 93       	push	r16
    1702:	1f 93       	push	r17
    1704:	cf 93       	push	r28
    1706:	df 93       	push	r29
    1708:	00 d0       	rcall	.+0      	; 0x170a <make_screen+0x26>
    170a:	1f 92       	push	r1
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
    171a:	d7 01       	movw	r26, r14
    171c:	6d 91       	ld	r22, X+
    171e:	7c 91       	ld	r23, X
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
    172c:	f7 01       	movw	r30, r14
    172e:	84 89       	ldd	r24, Z+20	; 0x14
    1730:	95 89       	ldd	r25, Z+21	; 0x15
    1732:	18 16       	cp	r1, r24
    1734:	19 06       	cpc	r1, r25
    1736:	0c f0       	brlt	.+2      	; 0x173a <make_screen+0x56>
    1738:	6d c0       	rjmp	.+218    	; 0x1814 <make_screen+0x130>
    173a:	c7 01       	movw	r24, r14
    173c:	04 96       	adiw	r24, 0x04	; 4
    173e:	9b 83       	std	Y+3, r25	; 0x03
    1740:	8a 83       	std	Y+2, r24	; 0x02
    1742:	cc 24       	eor	r12, r12
    1744:	c3 94       	inc	r12
    1746:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1748:	68 94       	set
    174a:	22 24       	eor	r2, r2
    174c:	23 f8       	bld	r2, 3
    174e:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
    1750:	aa 81       	ldd	r26, Y+2	; 0x02
    1752:	bb 81       	ldd	r27, Y+3	; 0x03
    1754:	6d 90       	ld	r6, X+
    1756:	7d 90       	ld	r7, X+
    1758:	bb 83       	std	Y+3, r27	; 0x03
    175a:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
    175c:	d3 01       	movw	r26, r6
    175e:	ed 91       	ld	r30, X+
    1760:	fc 91       	ld	r31, X
    1762:	80 81       	ld	r24, Z
    1764:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
    1766:	f7 01       	movw	r30, r14
    1768:	40 ad       	ldd	r20, Z+56	; 0x38
    176a:	51 ad       	ldd	r21, Z+57	; 0x39
    176c:	c6 01       	movw	r24, r12
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	48 17       	cp	r20, r24
    1772:	59 07       	cpc	r21, r25
    1774:	59 f4       	brne	.+22     	; 0x178c <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
    1776:	4f 5f       	subi	r20, 0xFF	; 255
    1778:	5f 4f       	sbci	r21, 0xFF	; 255
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	66 e9       	ldi	r22, 0x96	; 150
    1780:	71 e0       	ldi	r23, 0x01	; 1
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
    178a:	09 c0       	rjmp	.+18     	; 0x179e <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	a6 01       	movw	r20, r12
    1792:	61 e3       	ldi	r22, 0x31	; 49
    1794:	71 e0       	ldi	r23, 0x01	; 1
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
		}
		while(c != '\0'){
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	88 23       	and	r24, r24
    17a2:	59 f1       	breq	.+86     	; 0x17fa <make_screen+0x116>
    17a4:	68 94       	set
    17a6:	aa 24       	eor	r10, r10
    17a8:	a3 f8       	bld	r10, 3
    17aa:	b1 2c       	mov	r11, r1
    17ac:	88 24       	eor	r8, r8
    17ae:	83 94       	inc	r8
    17b0:	91 2c       	mov	r9, r1
    17b2:	1e c0       	rjmp	.+60     	; 0x17f0 <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    17b4:	24 2d       	mov	r18, r4
    17b6:	35 2d       	mov	r19, r5
    17b8:	a6 01       	movw	r20, r12
    17ba:	be 01       	movw	r22, r28
    17bc:	6f 5f       	subi	r22, 0xFF	; 255
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
    17c8:	01 50       	subi	r16, 0x01	; 1
    17ca:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    17cc:	01 15       	cp	r16, r1
    17ce:	11 05       	cpc	r17, r1
    17d0:	89 f7       	brne	.-30     	; 0x17b4 <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
    17d2:	d3 01       	movw	r26, r6
    17d4:	ed 91       	ld	r30, X+
    17d6:	fc 91       	ld	r31, X
    17d8:	e8 0d       	add	r30, r8
    17da:	f9 1d       	adc	r31, r9
    17dc:	80 81       	ld	r24, Z
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	bf ef       	ldi	r27, 0xFF	; 255
    17e2:	8b 1a       	sub	r8, r27
    17e4:	9b 0a       	sbc	r9, r27
    17e6:	e8 e0       	ldi	r30, 0x08	; 8
    17e8:	ae 0e       	add	r10, r30
    17ea:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
    17ec:	88 23       	and	r24, r24
    17ee:	29 f0       	breq	.+10     	; 0x17fa <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    17f0:	4a 2c       	mov	r4, r10
    17f2:	5b 2c       	mov	r5, r11
    17f4:	02 2d       	mov	r16, r2
    17f6:	13 2d       	mov	r17, r3
    17f8:	dd cf       	rjmp	.-70     	; 0x17b4 <make_screen+0xd0>
make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
    17fa:	c6 01       	movw	r24, r12
    17fc:	ff ef       	ldi	r31, 0xFF	; 255
    17fe:	cf 1a       	sub	r12, r31
    1800:	df 0a       	sbc	r13, r31
    1802:	d7 01       	movw	r26, r14
    1804:	54 96       	adiw	r26, 0x14	; 20
    1806:	2d 91       	ld	r18, X+
    1808:	3c 91       	ld	r19, X
    180a:	55 97       	sbiw	r26, 0x15	; 21
    180c:	82 17       	cp	r24, r18
    180e:	93 07       	cpc	r25, r19
    1810:	0c f4       	brge	.+2      	; 0x1814 <make_screen+0x130>
    1812:	9e cf       	rjmp	.-196    	; 0x1750 <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    1814:	f7 01       	movw	r30, r14
    1816:	86 a9       	ldd	r24, Z+54	; 0x36
    1818:	97 a9       	ldd	r25, Z+55	; 0x37
    181a:	18 16       	cp	r1, r24
    181c:	19 06       	cpc	r1, r25
    181e:	0c f0       	brlt	.+2      	; 0x1822 <make_screen+0x13e>
    1820:	6f c0       	rjmp	.+222    	; 0x1900 <make_screen+0x21c>
    1822:	37 01       	movw	r6, r14
    1824:	f6 e1       	ldi	r31, 0x16	; 22
    1826:	6f 0e       	add	r6, r31
    1828:	71 1c       	adc	r7, r1
    182a:	c1 2c       	mov	r12, r1
    182c:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    182e:	68 94       	set
    1830:	44 24       	eor	r4, r4
    1832:	43 f8       	bld	r4, 3
    1834:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
    1836:	d3 01       	movw	r26, r6
    1838:	8d 90       	ld	r8, X+
    183a:	9d 90       	ld	r9, X+
    183c:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
    183e:	f4 01       	movw	r30, r8
    1840:	80 81       	ld	r24, Z
    1842:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
    1844:	d7 01       	movw	r26, r14
    1846:	d8 96       	adiw	r26, 0x38	; 56
    1848:	8d 91       	ld	r24, X+
    184a:	9c 91       	ld	r25, X
    184c:	d9 97       	sbiw	r26, 0x39	; 57
    184e:	54 96       	adiw	r26, 0x14	; 20
    1850:	4d 91       	ld	r20, X+
    1852:	5c 91       	ld	r21, X
    1854:	55 97       	sbiw	r26, 0x15	; 21
    1856:	4c 0d       	add	r20, r12
    1858:	5d 1d       	adc	r21, r13
    185a:	84 17       	cp	r24, r20
    185c:	95 07       	cpc	r25, r21
    185e:	61 f4       	brne	.+24     	; 0x1878 <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
    1860:	ac 01       	movw	r20, r24
    1862:	4f 5f       	subi	r20, 0xFF	; 255
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	66 e9       	ldi	r22, 0x96	; 150
    186c:	71 e0       	ldi	r23, 0x01	; 1
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
    1876:	0a c0       	rjmp	.+20     	; 0x188c <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
    1878:	4f 5f       	subi	r20, 0xFF	; 255
    187a:	5f 4f       	sbci	r21, 0xFF	; 255
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	61 e3       	ldi	r22, 0x31	; 49
    1882:	71 e0       	ldi	r23, 0x01	; 1
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
		}
		while(c != '\0'){
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	88 23       	and	r24, r24
    1890:	59 f1       	breq	.+86     	; 0x18e8 <make_screen+0x204>
    1892:	bf ef       	ldi	r27, 0xFF	; 255
    1894:	8b 1a       	sub	r8, r27
    1896:	9b 0a       	sbc	r9, r27
    1898:	68 94       	set
    189a:	aa 24       	eor	r10, r10
    189c:	a3 f8       	bld	r10, 3
    189e:	b1 2c       	mov	r11, r1
    18a0:	1e c0       	rjmp	.+60     	; 0x18de <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    18a2:	f7 01       	movw	r30, r14
    18a4:	44 89       	ldd	r20, Z+20	; 0x14
    18a6:	55 89       	ldd	r21, Z+21	; 0x15
    18a8:	4c 0d       	add	r20, r12
    18aa:	5d 1d       	adc	r21, r13
    18ac:	4f 5f       	subi	r20, 0xFF	; 255
    18ae:	5f 4f       	sbci	r21, 0xFF	; 255
    18b0:	22 2d       	mov	r18, r2
    18b2:	33 2d       	mov	r19, r3
    18b4:	be 01       	movw	r22, r28
    18b6:	6f 5f       	subi	r22, 0xFF	; 255
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
    18c2:	01 50       	subi	r16, 0x01	; 1
    18c4:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    18c6:	01 15       	cp	r16, r1
    18c8:	11 05       	cpc	r17, r1
    18ca:	59 f7       	brne	.-42     	; 0x18a2 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
    18cc:	d4 01       	movw	r26, r8
    18ce:	8d 91       	ld	r24, X+
    18d0:	4d 01       	movw	r8, r26
    18d2:	89 83       	std	Y+1, r24	; 0x01
    18d4:	b8 e0       	ldi	r27, 0x08	; 8
    18d6:	ab 0e       	add	r10, r27
    18d8:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
    18da:	88 23       	and	r24, r24
    18dc:	29 f0       	breq	.+10     	; 0x18e8 <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    18de:	2a 2c       	mov	r2, r10
    18e0:	3b 2c       	mov	r3, r11
    18e2:	04 2d       	mov	r16, r4
    18e4:	15 2d       	mov	r17, r5
    18e6:	dd cf       	rjmp	.-70     	; 0x18a2 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    18e8:	ef ef       	ldi	r30, 0xFF	; 255
    18ea:	ce 1a       	sub	r12, r30
    18ec:	de 0a       	sbc	r13, r30
    18ee:	d7 01       	movw	r26, r14
    18f0:	d6 96       	adiw	r26, 0x36	; 54
    18f2:	8d 91       	ld	r24, X+
    18f4:	9c 91       	ld	r25, X
    18f6:	d7 97       	sbiw	r26, 0x37	; 55
    18f8:	c8 16       	cp	r12, r24
    18fa:	d9 06       	cpc	r13, r25
    18fc:	0c f4       	brge	.+2      	; 0x1900 <make_screen+0x21c>
    18fe:	9b cf       	rjmp	.-202    	; 0x1836 <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
} 
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	df 91       	pop	r29
    1910:	cf 91       	pop	r28
    1912:	1f 91       	pop	r17
    1914:	0f 91       	pop	r16
    1916:	ff 90       	pop	r15
    1918:	ef 90       	pop	r14
    191a:	df 90       	pop	r13
    191c:	cf 90       	pop	r12
    191e:	bf 90       	pop	r11
    1920:	af 90       	pop	r10
    1922:	9f 90       	pop	r9
    1924:	8f 90       	pop	r8
    1926:	7f 90       	pop	r7
    1928:	6f 90       	pop	r6
    192a:	5f 90       	pop	r5
    192c:	4f 90       	pop	r4
    192e:	3f 90       	pop	r3
    1930:	2f 90       	pop	r2
    1932:	08 95       	ret

00001934 <menuSystem>:
#include "../Game_files/draw.h"
#include "../Game_files/snake.h"
#include "../Game_files/pong.h"


void menuSystem(){
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	c8 5e       	subi	r28, 0xE8	; 232
    193e:	d1 09       	sbc	r29, r1
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 3};
    194a:	4a e3       	ldi	r20, 0x3A	; 58
    194c:	8e 01       	movw	r16, r28
    194e:	0f 5f       	subi	r16, 0xFF	; 255
    1950:	1f 4f       	sbci	r17, 0xFF	; 255
    1952:	d8 01       	movw	r26, r16
    1954:	e4 2f       	mov	r30, r20
    1956:	1d 92       	st	X+, r1
    1958:	ea 95       	dec	r30
    195a:	e9 f7       	brne	.-6      	; 0x1956 <menuSystem+0x22>
    195c:	88 e9       	ldi	r24, 0x98	; 152
    195e:	91 e0       	ldi	r25, 0x01	; 1
    1960:	9a 83       	std	Y+2, r25	; 0x02
    1962:	89 83       	std	Y+1, r24	; 0x01
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9e 8b       	std	Y+22, r25	; 0x16
    196a:	8d 8b       	std	Y+21, r24	; 0x15
		
	menu highscore = {.name = "Highscore", .parent = &mainMenu};
    196c:	de 01       	movw	r26, r28
    196e:	db 96       	adiw	r26, 0x3b	; 59
    1970:	fd 01       	movw	r30, r26
    1972:	24 2f       	mov	r18, r20
    1974:	11 92       	st	Z+, r1
    1976:	2a 95       	dec	r18
    1978:	e9 f7       	brne	.-6      	; 0x1974 <menuSystem+0x40>
    197a:	22 ea       	ldi	r18, 0xA2	; 162
    197c:	31 e0       	ldi	r19, 0x01	; 1
    197e:	3c af       	std	Y+60, r19	; 0x3c
    1980:	2b af       	std	Y+59, r18	; 0x3b
    1982:	1e af       	std	Y+62, r17	; 0x3e
    1984:	0d af       	std	Y+61, r16	; 0x3d
	mainMenu.submenues[1] = &highscore;
    1986:	b8 87       	std	Y+8, r27	; 0x08
    1988:	af 83       	std	Y+7, r26	; 0x07
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 3};
    198a:	fe 01       	movw	r30, r28
    198c:	eb 58       	subi	r30, 0x8B	; 139
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	df 01       	movw	r26, r30
    1992:	24 2f       	mov	r18, r20
    1994:	1d 92       	st	X+, r1
    1996:	2a 95       	dec	r18
    1998:	e9 f7       	brne	.-6      	; 0x1994 <menuSystem+0x60>
    199a:	2c ea       	ldi	r18, 0xAC	; 172
    199c:	31 e0       	ldi	r19, 0x01	; 1
    199e:	31 83       	std	Z+1, r19	; 0x01
    19a0:	20 83       	st	Z, r18
    19a2:	13 83       	std	Z+3, r17	; 0x03
    19a4:	02 83       	std	Z+2, r16	; 0x02
    19a6:	97 ab       	std	Z+55, r25	; 0x37
    19a8:	86 ab       	std	Z+54, r24	; 0x36
	playGame.functions[0] = &play_draw;
    19aa:	8c ec       	ldi	r24, 0xCC	; 204
    19ac:	96 e0       	ldi	r25, 0x06	; 6
    19ae:	97 a3       	std	Z+39, r25	; 0x27
    19b0:	86 a3       	std	Z+38, r24	; 0x26
	playGame.functions[1] = &playSnake;
    19b2:	85 e9       	ldi	r24, 0x95	; 149
    19b4:	9a e0       	ldi	r25, 0x0A	; 10
    19b6:	91 a7       	std	Z+41, r25	; 0x29
    19b8:	80 a7       	std	Z+40, r24	; 0x28
	playGame.functions[2] = &playPong;
    19ba:	88 ea       	ldi	r24, 0xA8	; 168
    19bc:	99 e0       	ldi	r25, 0x09	; 9
    19be:	93 a7       	std	Z+43, r25	; 0x2b
    19c0:	82 a7       	std	Z+42, r24	; 0x2a
	playGame.name_functions[0] = "Draw";
    19c2:	86 eb       	ldi	r24, 0xB6	; 182
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	97 8b       	std	Z+23, r25	; 0x17
    19c8:	86 8b       	std	Z+22, r24	; 0x16
	playGame.name_functions[1] = "Snake";
    19ca:	8b eb       	ldi	r24, 0xBB	; 187
    19cc:	91 e0       	ldi	r25, 0x01	; 1
    19ce:	91 8f       	std	Z+25, r25	; 0x19
    19d0:	80 8f       	std	Z+24, r24	; 0x18
	playGame.name_functions[2] = "Pong";
    19d2:	81 ec       	ldi	r24, 0xC1	; 193
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	93 8f       	std	Z+27, r25	; 0x1b
    19d8:	82 8f       	std	Z+26, r24	; 0x1a
	mainMenu.submenues[0] = &playGame;
    19da:	fe 83       	std	Y+6, r31	; 0x06
    19dc:	ed 83       	std	Y+5, r30	; 0x05
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 1};
    19de:	fa 96       	adiw	r30, 0x3a	; 58
    19e0:	df 01       	movw	r26, r30
    19e2:	1d 92       	st	X+, r1
    19e4:	4a 95       	dec	r20
    19e6:	e9 f7       	brne	.-6      	; 0x19e2 <menuSystem+0xae>
    19e8:	86 ec       	ldi	r24, 0xC6	; 198
    19ea:	91 e0       	ldi	r25, 0x01	; 1
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	13 83       	std	Z+3, r17	; 0x03
    19f2:	02 83       	std	Z+2, r16	; 0x02
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	97 ab       	std	Z+55, r25	; 0x37
    19fa:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrateJoystick;
    19fc:	8e e0       	ldi	r24, 0x0E	; 14
    19fe:	94 e0       	ldi	r25, 0x04	; 4
    1a00:	97 a3       	std	Z+39, r25	; 0x27
    1a02:	86 a3       	std	Z+38, r24	; 0x26
	settings.name_functions[0] = "Calibrate Joy";
    1a04:	8f ec       	ldi	r24, 0xCF	; 207
    1a06:	91 e0       	ldi	r25, 0x01	; 1
    1a08:	97 8b       	std	Z+23, r25	; 0x17
    1a0a:	86 8b       	std	Z+22, r24	; 0x16
	mainMenu.submenues[2] = &settings;
    1a0c:	fa 87       	std	Y+10, r31	; 0x0a
    1a0e:	e9 87       	std	Y+9, r30	; 0x09
	
	
	
	direction previousDirection = NEUTRAL;
    1a10:	68 94       	set
    1a12:	aa 24       	eor	r10, r10
    1a14:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1a16:	f8 01       	movw	r30, r16
    1a18:	c6 a8       	ldd	r12, Z+54	; 0x36
    1a1a:	d7 a8       	ldd	r13, Z+55	; 0x37
    1a1c:	e4 88       	ldd	r14, Z+20	; 0x14
    1a1e:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = getJoystickPosition();
    1a20:	0e 94 77 03 	call	0x6ee	; 0x6ee <getJoystickPosition>
    1a24:	b8 2e       	mov	r11, r24
		if (joy.D != previousDirection){
    1a26:	a8 16       	cp	r10, r24
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <menuSystem+0xf8>
    1a2a:	51 c0       	rjmp	.+162    	; 0x1ace <menuSystem+0x19a>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1a2c:	b6 01       	movw	r22, r12
    1a2e:	6e 0d       	add	r22, r14
    1a30:	7f 1d       	adc	r23, r15
		joy = getJoystickPosition();
		if (joy.D != previousDirection){
			switch(joy.D){
    1a32:	f1 e0       	ldi	r31, 0x01	; 1
    1a34:	8f 17       	cp	r24, r31
    1a36:	69 f1       	breq	.+90     	; 0x1a92 <menuSystem+0x15e>
    1a38:	8f 17       	cp	r24, r31
    1a3a:	08 f1       	brcs	.+66     	; 0x1a7e <menuSystem+0x14a>
    1a3c:	22 e0       	ldi	r18, 0x02	; 2
    1a3e:	82 17       	cp	r24, r18
    1a40:	21 f0       	breq	.+8      	; 0x1a4a <menuSystem+0x116>
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	b8 16       	cp	r11, r24
    1a46:	79 f0       	breq	.+30     	; 0x1a66 <menuSystem+0x132>
    1a48:	42 c0       	rjmp	.+132    	; 0x1ace <menuSystem+0x19a>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
    1a4a:	d8 01       	movw	r26, r16
    1a4c:	d8 96       	adiw	r26, 0x38	; 56
    1a4e:	8d 91       	ld	r24, X+
    1a50:	9c 91       	ld	r25, X
    1a52:	d9 97       	sbiw	r26, 0x39	; 57
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	86 0f       	add	r24, r22
    1a58:	97 1f       	adc	r25, r23
    1a5a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
    1a5e:	f8 01       	movw	r30, r16
    1a60:	91 af       	std	Z+57, r25	; 0x39
    1a62:	80 af       	std	Z+56, r24	; 0x38
					break;
    1a64:	34 c0       	rjmp	.+104    	; 0x1ace <menuSystem+0x19a>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
    1a66:	d8 01       	movw	r26, r16
    1a68:	d8 96       	adiw	r26, 0x38	; 56
    1a6a:	8d 91       	ld	r24, X+
    1a6c:	9c 91       	ld	r25, X
    1a6e:	d9 97       	sbiw	r26, 0x39	; 57
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__divmodhi4>
    1a76:	f8 01       	movw	r30, r16
    1a78:	91 af       	std	Z+57, r25	; 0x39
    1a7a:	80 af       	std	Z+56, r24	; 0x38
					break;
    1a7c:	28 c0       	rjmp	.+80     	; 0x1ace <menuSystem+0x19a>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
    1a7e:	d8 01       	movw	r26, r16
    1a80:	12 96       	adiw	r26, 0x02	; 2
    1a82:	2d 91       	ld	r18, X+
    1a84:	3c 91       	ld	r19, X
    1a86:	13 97       	sbiw	r26, 0x03	; 3
    1a88:	21 15       	cp	r18, r1
    1a8a:	31 05       	cpc	r19, r1
    1a8c:	01 f1       	breq	.+64     	; 0x1ace <menuSystem+0x19a>
    1a8e:	89 01       	movw	r16, r18
    1a90:	1e c0       	rjmp	.+60     	; 0x1ace <menuSystem+0x19a>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
    1a92:	f8 01       	movw	r30, r16
    1a94:	20 ad       	ldd	r18, Z+56	; 0x38
    1a96:	31 ad       	ldd	r19, Z+57	; 0x39
    1a98:	44 89       	ldd	r20, Z+20	; 0x14
    1a9a:	55 89       	ldd	r21, Z+21	; 0x15
    1a9c:	24 17       	cp	r18, r20
    1a9e:	35 07       	cpc	r19, r21
    1aa0:	4c f4       	brge	.+18     	; 0x1ab4 <menuSystem+0x180>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
    1aa2:	2e 5f       	subi	r18, 0xFE	; 254
    1aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa6:	22 0f       	add	r18, r18
    1aa8:	33 1f       	adc	r19, r19
    1aaa:	e2 0f       	add	r30, r18
    1aac:	f3 1f       	adc	r31, r19
    1aae:	00 81       	ld	r16, Z
    1ab0:	11 81       	ldd	r17, Z+1	; 0x01
    1ab2:	0d c0       	rjmp	.+26     	; 0x1ace <menuSystem+0x19a>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
    1ab4:	24 1b       	sub	r18, r20
    1ab6:	35 0b       	sbc	r19, r21
    1ab8:	2d 5e       	subi	r18, 0xED	; 237
    1aba:	3f 4f       	sbci	r19, 0xFF	; 255
    1abc:	f9 01       	movw	r30, r18
    1abe:	ee 0f       	add	r30, r30
    1ac0:	ff 1f       	adc	r31, r31
    1ac2:	e0 0f       	add	r30, r16
    1ac4:	f1 1f       	adc	r31, r17
    1ac6:	01 90       	ld	r0, Z+
    1ac8:	f0 81       	ld	r31, Z
    1aca:	e0 2d       	mov	r30, r0
    1acc:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
    1ace:	c8 01       	movw	r24, r16
    1ad0:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <make_screen>
    1ad4:	ff ef       	ldi	r31, 0xFF	; 255
    1ad6:	2f e7       	ldi	r18, 0x7F	; 127
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	f1 50       	subi	r31, 0x01	; 1
    1adc:	20 40       	sbci	r18, 0x00	; 0
    1ade:	80 40       	sbci	r24, 0x00	; 0
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <menuSystem+0x1a6>
    1ae2:	00 c0       	rjmp	.+0      	; 0x1ae4 <menuSystem+0x1b0>
    1ae4:	00 c0       	rjmp	.+0      	; 0x1ae6 <menuSystem+0x1b2>
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
    1ae6:	ab 2c       	mov	r10, r11
    1ae8:	96 cf       	rjmp	.-212    	; 0x1a16 <menuSystem+0xe2>

00001aea <__subsf3>:
    1aea:	50 58       	subi	r21, 0x80	; 128

00001aec <__addsf3>:
    1aec:	bb 27       	eor	r27, r27
    1aee:	aa 27       	eor	r26, r26
    1af0:	0e d0       	rcall	.+28     	; 0x1b0e <__addsf3x>
    1af2:	75 c1       	rjmp	.+746    	; 0x1dde <__fp_round>
    1af4:	66 d1       	rcall	.+716    	; 0x1dc2 <__fp_pscA>
    1af6:	30 f0       	brcs	.+12     	; 0x1b04 <__addsf3+0x18>
    1af8:	6b d1       	rcall	.+726    	; 0x1dd0 <__fp_pscB>
    1afa:	20 f0       	brcs	.+8      	; 0x1b04 <__addsf3+0x18>
    1afc:	31 f4       	brne	.+12     	; 0x1b0a <__addsf3+0x1e>
    1afe:	9f 3f       	cpi	r25, 0xFF	; 255
    1b00:	11 f4       	brne	.+4      	; 0x1b06 <__addsf3+0x1a>
    1b02:	1e f4       	brtc	.+6      	; 0x1b0a <__addsf3+0x1e>
    1b04:	5b c1       	rjmp	.+694    	; 0x1dbc <__fp_nan>
    1b06:	0e f4       	brtc	.+2      	; 0x1b0a <__addsf3+0x1e>
    1b08:	e0 95       	com	r30
    1b0a:	e7 fb       	bst	r30, 7
    1b0c:	51 c1       	rjmp	.+674    	; 0x1db0 <__fp_inf>

00001b0e <__addsf3x>:
    1b0e:	e9 2f       	mov	r30, r25
    1b10:	77 d1       	rcall	.+750    	; 0x1e00 <__fp_split3>
    1b12:	80 f3       	brcs	.-32     	; 0x1af4 <__addsf3+0x8>
    1b14:	ba 17       	cp	r27, r26
    1b16:	62 07       	cpc	r22, r18
    1b18:	73 07       	cpc	r23, r19
    1b1a:	84 07       	cpc	r24, r20
    1b1c:	95 07       	cpc	r25, r21
    1b1e:	18 f0       	brcs	.+6      	; 0x1b26 <__addsf3x+0x18>
    1b20:	71 f4       	brne	.+28     	; 0x1b3e <__addsf3x+0x30>
    1b22:	9e f5       	brtc	.+102    	; 0x1b8a <__addsf3x+0x7c>
    1b24:	8f c1       	rjmp	.+798    	; 0x1e44 <__fp_zero>
    1b26:	0e f4       	brtc	.+2      	; 0x1b2a <__addsf3x+0x1c>
    1b28:	e0 95       	com	r30
    1b2a:	0b 2e       	mov	r0, r27
    1b2c:	ba 2f       	mov	r27, r26
    1b2e:	a0 2d       	mov	r26, r0
    1b30:	0b 01       	movw	r0, r22
    1b32:	b9 01       	movw	r22, r18
    1b34:	90 01       	movw	r18, r0
    1b36:	0c 01       	movw	r0, r24
    1b38:	ca 01       	movw	r24, r20
    1b3a:	a0 01       	movw	r20, r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	ff 27       	eor	r31, r31
    1b40:	59 1b       	sub	r21, r25
    1b42:	99 f0       	breq	.+38     	; 0x1b6a <__addsf3x+0x5c>
    1b44:	59 3f       	cpi	r21, 0xF9	; 249
    1b46:	50 f4       	brcc	.+20     	; 0x1b5c <__addsf3x+0x4e>
    1b48:	50 3e       	cpi	r21, 0xE0	; 224
    1b4a:	68 f1       	brcs	.+90     	; 0x1ba6 <__addsf3x+0x98>
    1b4c:	1a 16       	cp	r1, r26
    1b4e:	f0 40       	sbci	r31, 0x00	; 0
    1b50:	a2 2f       	mov	r26, r18
    1b52:	23 2f       	mov	r18, r19
    1b54:	34 2f       	mov	r19, r20
    1b56:	44 27       	eor	r20, r20
    1b58:	58 5f       	subi	r21, 0xF8	; 248
    1b5a:	f3 cf       	rjmp	.-26     	; 0x1b42 <__addsf3x+0x34>
    1b5c:	46 95       	lsr	r20
    1b5e:	37 95       	ror	r19
    1b60:	27 95       	ror	r18
    1b62:	a7 95       	ror	r26
    1b64:	f0 40       	sbci	r31, 0x00	; 0
    1b66:	53 95       	inc	r21
    1b68:	c9 f7       	brne	.-14     	; 0x1b5c <__addsf3x+0x4e>
    1b6a:	7e f4       	brtc	.+30     	; 0x1b8a <__addsf3x+0x7c>
    1b6c:	1f 16       	cp	r1, r31
    1b6e:	ba 0b       	sbc	r27, r26
    1b70:	62 0b       	sbc	r22, r18
    1b72:	73 0b       	sbc	r23, r19
    1b74:	84 0b       	sbc	r24, r20
    1b76:	ba f0       	brmi	.+46     	; 0x1ba6 <__addsf3x+0x98>
    1b78:	91 50       	subi	r25, 0x01	; 1
    1b7a:	a1 f0       	breq	.+40     	; 0x1ba4 <__addsf3x+0x96>
    1b7c:	ff 0f       	add	r31, r31
    1b7e:	bb 1f       	adc	r27, r27
    1b80:	66 1f       	adc	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	88 1f       	adc	r24, r24
    1b86:	c2 f7       	brpl	.-16     	; 0x1b78 <__addsf3x+0x6a>
    1b88:	0e c0       	rjmp	.+28     	; 0x1ba6 <__addsf3x+0x98>
    1b8a:	ba 0f       	add	r27, r26
    1b8c:	62 1f       	adc	r22, r18
    1b8e:	73 1f       	adc	r23, r19
    1b90:	84 1f       	adc	r24, r20
    1b92:	48 f4       	brcc	.+18     	; 0x1ba6 <__addsf3x+0x98>
    1b94:	87 95       	ror	r24
    1b96:	77 95       	ror	r23
    1b98:	67 95       	ror	r22
    1b9a:	b7 95       	ror	r27
    1b9c:	f7 95       	ror	r31
    1b9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1ba0:	08 f0       	brcs	.+2      	; 0x1ba4 <__addsf3x+0x96>
    1ba2:	b3 cf       	rjmp	.-154    	; 0x1b0a <__addsf3+0x1e>
    1ba4:	93 95       	inc	r25
    1ba6:	88 0f       	add	r24, r24
    1ba8:	08 f0       	brcs	.+2      	; 0x1bac <__addsf3x+0x9e>
    1baa:	99 27       	eor	r25, r25
    1bac:	ee 0f       	add	r30, r30
    1bae:	97 95       	ror	r25
    1bb0:	87 95       	ror	r24
    1bb2:	08 95       	ret

00001bb4 <__cmpsf2>:
    1bb4:	d9 d0       	rcall	.+434    	; 0x1d68 <__fp_cmp>
    1bb6:	08 f4       	brcc	.+2      	; 0x1bba <__cmpsf2+0x6>
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	08 95       	ret

00001bbc <__divsf3>:
    1bbc:	0c d0       	rcall	.+24     	; 0x1bd6 <__divsf3x>
    1bbe:	0f c1       	rjmp	.+542    	; 0x1dde <__fp_round>
    1bc0:	07 d1       	rcall	.+526    	; 0x1dd0 <__fp_pscB>
    1bc2:	40 f0       	brcs	.+16     	; 0x1bd4 <__divsf3+0x18>
    1bc4:	fe d0       	rcall	.+508    	; 0x1dc2 <__fp_pscA>
    1bc6:	30 f0       	brcs	.+12     	; 0x1bd4 <__divsf3+0x18>
    1bc8:	21 f4       	brne	.+8      	; 0x1bd2 <__divsf3+0x16>
    1bca:	5f 3f       	cpi	r21, 0xFF	; 255
    1bcc:	19 f0       	breq	.+6      	; 0x1bd4 <__divsf3+0x18>
    1bce:	f0 c0       	rjmp	.+480    	; 0x1db0 <__fp_inf>
    1bd0:	51 11       	cpse	r21, r1
    1bd2:	39 c1       	rjmp	.+626    	; 0x1e46 <__fp_szero>
    1bd4:	f3 c0       	rjmp	.+486    	; 0x1dbc <__fp_nan>

00001bd6 <__divsf3x>:
    1bd6:	14 d1       	rcall	.+552    	; 0x1e00 <__fp_split3>
    1bd8:	98 f3       	brcs	.-26     	; 0x1bc0 <__divsf3+0x4>

00001bda <__divsf3_pse>:
    1bda:	99 23       	and	r25, r25
    1bdc:	c9 f3       	breq	.-14     	; 0x1bd0 <__divsf3+0x14>
    1bde:	55 23       	and	r21, r21
    1be0:	b1 f3       	breq	.-20     	; 0x1bce <__divsf3+0x12>
    1be2:	95 1b       	sub	r25, r21
    1be4:	55 0b       	sbc	r21, r21
    1be6:	bb 27       	eor	r27, r27
    1be8:	aa 27       	eor	r26, r26
    1bea:	62 17       	cp	r22, r18
    1bec:	73 07       	cpc	r23, r19
    1bee:	84 07       	cpc	r24, r20
    1bf0:	38 f0       	brcs	.+14     	; 0x1c00 <__divsf3_pse+0x26>
    1bf2:	9f 5f       	subi	r25, 0xFF	; 255
    1bf4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf6:	22 0f       	add	r18, r18
    1bf8:	33 1f       	adc	r19, r19
    1bfa:	44 1f       	adc	r20, r20
    1bfc:	aa 1f       	adc	r26, r26
    1bfe:	a9 f3       	breq	.-22     	; 0x1bea <__divsf3_pse+0x10>
    1c00:	33 d0       	rcall	.+102    	; 0x1c68 <__divsf3_pse+0x8e>
    1c02:	0e 2e       	mov	r0, r30
    1c04:	3a f0       	brmi	.+14     	; 0x1c14 <__divsf3_pse+0x3a>
    1c06:	e0 e8       	ldi	r30, 0x80	; 128
    1c08:	30 d0       	rcall	.+96     	; 0x1c6a <__divsf3_pse+0x90>
    1c0a:	91 50       	subi	r25, 0x01	; 1
    1c0c:	50 40       	sbci	r21, 0x00	; 0
    1c0e:	e6 95       	lsr	r30
    1c10:	00 1c       	adc	r0, r0
    1c12:	ca f7       	brpl	.-14     	; 0x1c06 <__divsf3_pse+0x2c>
    1c14:	29 d0       	rcall	.+82     	; 0x1c68 <__divsf3_pse+0x8e>
    1c16:	fe 2f       	mov	r31, r30
    1c18:	27 d0       	rcall	.+78     	; 0x1c68 <__divsf3_pse+0x8e>
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	bb 1f       	adc	r27, r27
    1c22:	26 17       	cp	r18, r22
    1c24:	37 07       	cpc	r19, r23
    1c26:	48 07       	cpc	r20, r24
    1c28:	ab 07       	cpc	r26, r27
    1c2a:	b0 e8       	ldi	r27, 0x80	; 128
    1c2c:	09 f0       	breq	.+2      	; 0x1c30 <__divsf3_pse+0x56>
    1c2e:	bb 0b       	sbc	r27, r27
    1c30:	80 2d       	mov	r24, r0
    1c32:	bf 01       	movw	r22, r30
    1c34:	ff 27       	eor	r31, r31
    1c36:	93 58       	subi	r25, 0x83	; 131
    1c38:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3a:	2a f0       	brmi	.+10     	; 0x1c46 <__divsf3_pse+0x6c>
    1c3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c3e:	51 05       	cpc	r21, r1
    1c40:	68 f0       	brcs	.+26     	; 0x1c5c <__divsf3_pse+0x82>
    1c42:	b6 c0       	rjmp	.+364    	; 0x1db0 <__fp_inf>
    1c44:	00 c1       	rjmp	.+512    	; 0x1e46 <__fp_szero>
    1c46:	5f 3f       	cpi	r21, 0xFF	; 255
    1c48:	ec f3       	brlt	.-6      	; 0x1c44 <__divsf3_pse+0x6a>
    1c4a:	98 3e       	cpi	r25, 0xE8	; 232
    1c4c:	dc f3       	brlt	.-10     	; 0x1c44 <__divsf3_pse+0x6a>
    1c4e:	86 95       	lsr	r24
    1c50:	77 95       	ror	r23
    1c52:	67 95       	ror	r22
    1c54:	b7 95       	ror	r27
    1c56:	f7 95       	ror	r31
    1c58:	9f 5f       	subi	r25, 0xFF	; 255
    1c5a:	c9 f7       	brne	.-14     	; 0x1c4e <__divsf3_pse+0x74>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	91 1d       	adc	r25, r1
    1c60:	96 95       	lsr	r25
    1c62:	87 95       	ror	r24
    1c64:	97 f9       	bld	r25, 7
    1c66:	08 95       	ret
    1c68:	e1 e0       	ldi	r30, 0x01	; 1
    1c6a:	66 0f       	add	r22, r22
    1c6c:	77 1f       	adc	r23, r23
    1c6e:	88 1f       	adc	r24, r24
    1c70:	bb 1f       	adc	r27, r27
    1c72:	62 17       	cp	r22, r18
    1c74:	73 07       	cpc	r23, r19
    1c76:	84 07       	cpc	r24, r20
    1c78:	ba 07       	cpc	r27, r26
    1c7a:	20 f0       	brcs	.+8      	; 0x1c84 <__divsf3_pse+0xaa>
    1c7c:	62 1b       	sub	r22, r18
    1c7e:	73 0b       	sbc	r23, r19
    1c80:	84 0b       	sbc	r24, r20
    1c82:	ba 0b       	sbc	r27, r26
    1c84:	ee 1f       	adc	r30, r30
    1c86:	88 f7       	brcc	.-30     	; 0x1c6a <__divsf3_pse+0x90>
    1c88:	e0 95       	com	r30
    1c8a:	08 95       	ret

00001c8c <__fixsfsi>:
    1c8c:	04 d0       	rcall	.+8      	; 0x1c96 <__fixunssfsi>
    1c8e:	68 94       	set
    1c90:	b1 11       	cpse	r27, r1
    1c92:	d9 c0       	rjmp	.+434    	; 0x1e46 <__fp_szero>
    1c94:	08 95       	ret

00001c96 <__fixunssfsi>:
    1c96:	bc d0       	rcall	.+376    	; 0x1e10 <__fp_splitA>
    1c98:	88 f0       	brcs	.+34     	; 0x1cbc <__fixunssfsi+0x26>
    1c9a:	9f 57       	subi	r25, 0x7F	; 127
    1c9c:	90 f0       	brcs	.+36     	; 0x1cc2 <__fixunssfsi+0x2c>
    1c9e:	b9 2f       	mov	r27, r25
    1ca0:	99 27       	eor	r25, r25
    1ca2:	b7 51       	subi	r27, 0x17	; 23
    1ca4:	a0 f0       	brcs	.+40     	; 0x1cce <__fixunssfsi+0x38>
    1ca6:	d1 f0       	breq	.+52     	; 0x1cdc <__fixunssfsi+0x46>
    1ca8:	66 0f       	add	r22, r22
    1caa:	77 1f       	adc	r23, r23
    1cac:	88 1f       	adc	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	1a f0       	brmi	.+6      	; 0x1cb8 <__fixunssfsi+0x22>
    1cb2:	ba 95       	dec	r27
    1cb4:	c9 f7       	brne	.-14     	; 0x1ca8 <__fixunssfsi+0x12>
    1cb6:	12 c0       	rjmp	.+36     	; 0x1cdc <__fixunssfsi+0x46>
    1cb8:	b1 30       	cpi	r27, 0x01	; 1
    1cba:	81 f0       	breq	.+32     	; 0x1cdc <__fixunssfsi+0x46>
    1cbc:	c3 d0       	rcall	.+390    	; 0x1e44 <__fp_zero>
    1cbe:	b1 e0       	ldi	r27, 0x01	; 1
    1cc0:	08 95       	ret
    1cc2:	c0 c0       	rjmp	.+384    	; 0x1e44 <__fp_zero>
    1cc4:	67 2f       	mov	r22, r23
    1cc6:	78 2f       	mov	r23, r24
    1cc8:	88 27       	eor	r24, r24
    1cca:	b8 5f       	subi	r27, 0xF8	; 248
    1ccc:	39 f0       	breq	.+14     	; 0x1cdc <__fixunssfsi+0x46>
    1cce:	b9 3f       	cpi	r27, 0xF9	; 249
    1cd0:	cc f3       	brlt	.-14     	; 0x1cc4 <__fixunssfsi+0x2e>
    1cd2:	86 95       	lsr	r24
    1cd4:	77 95       	ror	r23
    1cd6:	67 95       	ror	r22
    1cd8:	b3 95       	inc	r27
    1cda:	d9 f7       	brne	.-10     	; 0x1cd2 <__fixunssfsi+0x3c>
    1cdc:	3e f4       	brtc	.+14     	; 0x1cec <__fixunssfsi+0x56>
    1cde:	90 95       	com	r25
    1ce0:	80 95       	com	r24
    1ce2:	70 95       	com	r23
    1ce4:	61 95       	neg	r22
    1ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ce8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cea:	9f 4f       	sbci	r25, 0xFF	; 255
    1cec:	08 95       	ret

00001cee <__floatunsisf>:
    1cee:	e8 94       	clt
    1cf0:	09 c0       	rjmp	.+18     	; 0x1d04 <__floatsisf+0x12>

00001cf2 <__floatsisf>:
    1cf2:	97 fb       	bst	r25, 7
    1cf4:	3e f4       	brtc	.+14     	; 0x1d04 <__floatsisf+0x12>
    1cf6:	90 95       	com	r25
    1cf8:	80 95       	com	r24
    1cfa:	70 95       	com	r23
    1cfc:	61 95       	neg	r22
    1cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1d00:	8f 4f       	sbci	r24, 0xFF	; 255
    1d02:	9f 4f       	sbci	r25, 0xFF	; 255
    1d04:	99 23       	and	r25, r25
    1d06:	a9 f0       	breq	.+42     	; 0x1d32 <__floatsisf+0x40>
    1d08:	f9 2f       	mov	r31, r25
    1d0a:	96 e9       	ldi	r25, 0x96	; 150
    1d0c:	bb 27       	eor	r27, r27
    1d0e:	93 95       	inc	r25
    1d10:	f6 95       	lsr	r31
    1d12:	87 95       	ror	r24
    1d14:	77 95       	ror	r23
    1d16:	67 95       	ror	r22
    1d18:	b7 95       	ror	r27
    1d1a:	f1 11       	cpse	r31, r1
    1d1c:	f8 cf       	rjmp	.-16     	; 0x1d0e <__floatsisf+0x1c>
    1d1e:	fa f4       	brpl	.+62     	; 0x1d5e <__floatsisf+0x6c>
    1d20:	bb 0f       	add	r27, r27
    1d22:	11 f4       	brne	.+4      	; 0x1d28 <__floatsisf+0x36>
    1d24:	60 ff       	sbrs	r22, 0
    1d26:	1b c0       	rjmp	.+54     	; 0x1d5e <__floatsisf+0x6c>
    1d28:	6f 5f       	subi	r22, 0xFF	; 255
    1d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d30:	16 c0       	rjmp	.+44     	; 0x1d5e <__floatsisf+0x6c>
    1d32:	88 23       	and	r24, r24
    1d34:	11 f0       	breq	.+4      	; 0x1d3a <__floatsisf+0x48>
    1d36:	96 e9       	ldi	r25, 0x96	; 150
    1d38:	11 c0       	rjmp	.+34     	; 0x1d5c <__floatsisf+0x6a>
    1d3a:	77 23       	and	r23, r23
    1d3c:	21 f0       	breq	.+8      	; 0x1d46 <__floatsisf+0x54>
    1d3e:	9e e8       	ldi	r25, 0x8E	; 142
    1d40:	87 2f       	mov	r24, r23
    1d42:	76 2f       	mov	r23, r22
    1d44:	05 c0       	rjmp	.+10     	; 0x1d50 <__floatsisf+0x5e>
    1d46:	66 23       	and	r22, r22
    1d48:	71 f0       	breq	.+28     	; 0x1d66 <__floatsisf+0x74>
    1d4a:	96 e8       	ldi	r25, 0x86	; 134
    1d4c:	86 2f       	mov	r24, r22
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	2a f0       	brmi	.+10     	; 0x1d5e <__floatsisf+0x6c>
    1d54:	9a 95       	dec	r25
    1d56:	66 0f       	add	r22, r22
    1d58:	77 1f       	adc	r23, r23
    1d5a:	88 1f       	adc	r24, r24
    1d5c:	da f7       	brpl	.-10     	; 0x1d54 <__floatsisf+0x62>
    1d5e:	88 0f       	add	r24, r24
    1d60:	96 95       	lsr	r25
    1d62:	87 95       	ror	r24
    1d64:	97 f9       	bld	r25, 7
    1d66:	08 95       	ret

00001d68 <__fp_cmp>:
    1d68:	99 0f       	add	r25, r25
    1d6a:	00 08       	sbc	r0, r0
    1d6c:	55 0f       	add	r21, r21
    1d6e:	aa 0b       	sbc	r26, r26
    1d70:	e0 e8       	ldi	r30, 0x80	; 128
    1d72:	fe ef       	ldi	r31, 0xFE	; 254
    1d74:	16 16       	cp	r1, r22
    1d76:	17 06       	cpc	r1, r23
    1d78:	e8 07       	cpc	r30, r24
    1d7a:	f9 07       	cpc	r31, r25
    1d7c:	c0 f0       	brcs	.+48     	; 0x1dae <__fp_cmp+0x46>
    1d7e:	12 16       	cp	r1, r18
    1d80:	13 06       	cpc	r1, r19
    1d82:	e4 07       	cpc	r30, r20
    1d84:	f5 07       	cpc	r31, r21
    1d86:	98 f0       	brcs	.+38     	; 0x1dae <__fp_cmp+0x46>
    1d88:	62 1b       	sub	r22, r18
    1d8a:	73 0b       	sbc	r23, r19
    1d8c:	84 0b       	sbc	r24, r20
    1d8e:	95 0b       	sbc	r25, r21
    1d90:	39 f4       	brne	.+14     	; 0x1da0 <__fp_cmp+0x38>
    1d92:	0a 26       	eor	r0, r26
    1d94:	61 f0       	breq	.+24     	; 0x1dae <__fp_cmp+0x46>
    1d96:	23 2b       	or	r18, r19
    1d98:	24 2b       	or	r18, r20
    1d9a:	25 2b       	or	r18, r21
    1d9c:	21 f4       	brne	.+8      	; 0x1da6 <__fp_cmp+0x3e>
    1d9e:	08 95       	ret
    1da0:	0a 26       	eor	r0, r26
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <__fp_cmp+0x3e>
    1da4:	a1 40       	sbci	r26, 0x01	; 1
    1da6:	a6 95       	lsr	r26
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	81 1d       	adc	r24, r1
    1dac:	81 1d       	adc	r24, r1
    1dae:	08 95       	ret

00001db0 <__fp_inf>:
    1db0:	97 f9       	bld	r25, 7
    1db2:	9f 67       	ori	r25, 0x7F	; 127
    1db4:	80 e8       	ldi	r24, 0x80	; 128
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	08 95       	ret

00001dbc <__fp_nan>:
    1dbc:	9f ef       	ldi	r25, 0xFF	; 255
    1dbe:	80 ec       	ldi	r24, 0xC0	; 192
    1dc0:	08 95       	ret

00001dc2 <__fp_pscA>:
    1dc2:	00 24       	eor	r0, r0
    1dc4:	0a 94       	dec	r0
    1dc6:	16 16       	cp	r1, r22
    1dc8:	17 06       	cpc	r1, r23
    1dca:	18 06       	cpc	r1, r24
    1dcc:	09 06       	cpc	r0, r25
    1dce:	08 95       	ret

00001dd0 <__fp_pscB>:
    1dd0:	00 24       	eor	r0, r0
    1dd2:	0a 94       	dec	r0
    1dd4:	12 16       	cp	r1, r18
    1dd6:	13 06       	cpc	r1, r19
    1dd8:	14 06       	cpc	r1, r20
    1dda:	05 06       	cpc	r0, r21
    1ddc:	08 95       	ret

00001dde <__fp_round>:
    1dde:	09 2e       	mov	r0, r25
    1de0:	03 94       	inc	r0
    1de2:	00 0c       	add	r0, r0
    1de4:	11 f4       	brne	.+4      	; 0x1dea <__fp_round+0xc>
    1de6:	88 23       	and	r24, r24
    1de8:	52 f0       	brmi	.+20     	; 0x1dfe <__fp_round+0x20>
    1dea:	bb 0f       	add	r27, r27
    1dec:	40 f4       	brcc	.+16     	; 0x1dfe <__fp_round+0x20>
    1dee:	bf 2b       	or	r27, r31
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <__fp_round+0x18>
    1df2:	60 ff       	sbrs	r22, 0
    1df4:	04 c0       	rjmp	.+8      	; 0x1dfe <__fp_round+0x20>
    1df6:	6f 5f       	subi	r22, 0xFF	; 255
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dfe:	08 95       	ret

00001e00 <__fp_split3>:
    1e00:	57 fd       	sbrc	r21, 7
    1e02:	90 58       	subi	r25, 0x80	; 128
    1e04:	44 0f       	add	r20, r20
    1e06:	55 1f       	adc	r21, r21
    1e08:	59 f0       	breq	.+22     	; 0x1e20 <__fp_splitA+0x10>
    1e0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e0c:	71 f0       	breq	.+28     	; 0x1e2a <__fp_splitA+0x1a>
    1e0e:	47 95       	ror	r20

00001e10 <__fp_splitA>:
    1e10:	88 0f       	add	r24, r24
    1e12:	97 fb       	bst	r25, 7
    1e14:	99 1f       	adc	r25, r25
    1e16:	61 f0       	breq	.+24     	; 0x1e30 <__fp_splitA+0x20>
    1e18:	9f 3f       	cpi	r25, 0xFF	; 255
    1e1a:	79 f0       	breq	.+30     	; 0x1e3a <__fp_splitA+0x2a>
    1e1c:	87 95       	ror	r24
    1e1e:	08 95       	ret
    1e20:	12 16       	cp	r1, r18
    1e22:	13 06       	cpc	r1, r19
    1e24:	14 06       	cpc	r1, r20
    1e26:	55 1f       	adc	r21, r21
    1e28:	f2 cf       	rjmp	.-28     	; 0x1e0e <__fp_split3+0xe>
    1e2a:	46 95       	lsr	r20
    1e2c:	f1 df       	rcall	.-30     	; 0x1e10 <__fp_splitA>
    1e2e:	08 c0       	rjmp	.+16     	; 0x1e40 <__fp_splitA+0x30>
    1e30:	16 16       	cp	r1, r22
    1e32:	17 06       	cpc	r1, r23
    1e34:	18 06       	cpc	r1, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	f1 cf       	rjmp	.-30     	; 0x1e1c <__fp_splitA+0xc>
    1e3a:	86 95       	lsr	r24
    1e3c:	71 05       	cpc	r23, r1
    1e3e:	61 05       	cpc	r22, r1
    1e40:	08 94       	sec
    1e42:	08 95       	ret

00001e44 <__fp_zero>:
    1e44:	e8 94       	clt

00001e46 <__fp_szero>:
    1e46:	bb 27       	eor	r27, r27
    1e48:	66 27       	eor	r22, r22
    1e4a:	77 27       	eor	r23, r23
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	97 f9       	bld	r25, 7
    1e50:	08 95       	ret

00001e52 <__gesf2>:
    1e52:	8a df       	rcall	.-236    	; 0x1d68 <__fp_cmp>
    1e54:	08 f4       	brcc	.+2      	; 0x1e58 <__gesf2+0x6>
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	08 95       	ret

00001e5a <__mulsf3>:
    1e5a:	0b d0       	rcall	.+22     	; 0x1e72 <__mulsf3x>
    1e5c:	c0 cf       	rjmp	.-128    	; 0x1dde <__fp_round>
    1e5e:	b1 df       	rcall	.-158    	; 0x1dc2 <__fp_pscA>
    1e60:	28 f0       	brcs	.+10     	; 0x1e6c <__mulsf3+0x12>
    1e62:	b6 df       	rcall	.-148    	; 0x1dd0 <__fp_pscB>
    1e64:	18 f0       	brcs	.+6      	; 0x1e6c <__mulsf3+0x12>
    1e66:	95 23       	and	r25, r21
    1e68:	09 f0       	breq	.+2      	; 0x1e6c <__mulsf3+0x12>
    1e6a:	a2 cf       	rjmp	.-188    	; 0x1db0 <__fp_inf>
    1e6c:	a7 cf       	rjmp	.-178    	; 0x1dbc <__fp_nan>
    1e6e:	11 24       	eor	r1, r1
    1e70:	ea cf       	rjmp	.-44     	; 0x1e46 <__fp_szero>

00001e72 <__mulsf3x>:
    1e72:	c6 df       	rcall	.-116    	; 0x1e00 <__fp_split3>
    1e74:	a0 f3       	brcs	.-24     	; 0x1e5e <__mulsf3+0x4>

00001e76 <__mulsf3_pse>:
    1e76:	95 9f       	mul	r25, r21
    1e78:	d1 f3       	breq	.-12     	; 0x1e6e <__mulsf3+0x14>
    1e7a:	95 0f       	add	r25, r21
    1e7c:	50 e0       	ldi	r21, 0x00	; 0
    1e7e:	55 1f       	adc	r21, r21
    1e80:	62 9f       	mul	r22, r18
    1e82:	f0 01       	movw	r30, r0
    1e84:	72 9f       	mul	r23, r18
    1e86:	bb 27       	eor	r27, r27
    1e88:	f0 0d       	add	r31, r0
    1e8a:	b1 1d       	adc	r27, r1
    1e8c:	63 9f       	mul	r22, r19
    1e8e:	aa 27       	eor	r26, r26
    1e90:	f0 0d       	add	r31, r0
    1e92:	b1 1d       	adc	r27, r1
    1e94:	aa 1f       	adc	r26, r26
    1e96:	64 9f       	mul	r22, r20
    1e98:	66 27       	eor	r22, r22
    1e9a:	b0 0d       	add	r27, r0
    1e9c:	a1 1d       	adc	r26, r1
    1e9e:	66 1f       	adc	r22, r22
    1ea0:	82 9f       	mul	r24, r18
    1ea2:	22 27       	eor	r18, r18
    1ea4:	b0 0d       	add	r27, r0
    1ea6:	a1 1d       	adc	r26, r1
    1ea8:	62 1f       	adc	r22, r18
    1eaa:	73 9f       	mul	r23, r19
    1eac:	b0 0d       	add	r27, r0
    1eae:	a1 1d       	adc	r26, r1
    1eb0:	62 1f       	adc	r22, r18
    1eb2:	83 9f       	mul	r24, r19
    1eb4:	a0 0d       	add	r26, r0
    1eb6:	61 1d       	adc	r22, r1
    1eb8:	22 1f       	adc	r18, r18
    1eba:	74 9f       	mul	r23, r20
    1ebc:	33 27       	eor	r19, r19
    1ebe:	a0 0d       	add	r26, r0
    1ec0:	61 1d       	adc	r22, r1
    1ec2:	23 1f       	adc	r18, r19
    1ec4:	84 9f       	mul	r24, r20
    1ec6:	60 0d       	add	r22, r0
    1ec8:	21 1d       	adc	r18, r1
    1eca:	82 2f       	mov	r24, r18
    1ecc:	76 2f       	mov	r23, r22
    1ece:	6a 2f       	mov	r22, r26
    1ed0:	11 24       	eor	r1, r1
    1ed2:	9f 57       	subi	r25, 0x7F	; 127
    1ed4:	50 40       	sbci	r21, 0x00	; 0
    1ed6:	8a f0       	brmi	.+34     	; 0x1efa <__mulsf3_pse+0x84>
    1ed8:	e1 f0       	breq	.+56     	; 0x1f12 <__mulsf3_pse+0x9c>
    1eda:	88 23       	and	r24, r24
    1edc:	4a f0       	brmi	.+18     	; 0x1ef0 <__mulsf3_pse+0x7a>
    1ede:	ee 0f       	add	r30, r30
    1ee0:	ff 1f       	adc	r31, r31
    1ee2:	bb 1f       	adc	r27, r27
    1ee4:	66 1f       	adc	r22, r22
    1ee6:	77 1f       	adc	r23, r23
    1ee8:	88 1f       	adc	r24, r24
    1eea:	91 50       	subi	r25, 0x01	; 1
    1eec:	50 40       	sbci	r21, 0x00	; 0
    1eee:	a9 f7       	brne	.-22     	; 0x1eda <__mulsf3_pse+0x64>
    1ef0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef2:	51 05       	cpc	r21, r1
    1ef4:	70 f0       	brcs	.+28     	; 0x1f12 <__mulsf3_pse+0x9c>
    1ef6:	5c cf       	rjmp	.-328    	; 0x1db0 <__fp_inf>
    1ef8:	a6 cf       	rjmp	.-180    	; 0x1e46 <__fp_szero>
    1efa:	5f 3f       	cpi	r21, 0xFF	; 255
    1efc:	ec f3       	brlt	.-6      	; 0x1ef8 <__mulsf3_pse+0x82>
    1efe:	98 3e       	cpi	r25, 0xE8	; 232
    1f00:	dc f3       	brlt	.-10     	; 0x1ef8 <__mulsf3_pse+0x82>
    1f02:	86 95       	lsr	r24
    1f04:	77 95       	ror	r23
    1f06:	67 95       	ror	r22
    1f08:	b7 95       	ror	r27
    1f0a:	f7 95       	ror	r31
    1f0c:	e7 95       	ror	r30
    1f0e:	9f 5f       	subi	r25, 0xFF	; 255
    1f10:	c1 f7       	brne	.-16     	; 0x1f02 <__mulsf3_pse+0x8c>
    1f12:	fe 2b       	or	r31, r30
    1f14:	88 0f       	add	r24, r24
    1f16:	91 1d       	adc	r25, r1
    1f18:	96 95       	lsr	r25
    1f1a:	87 95       	ror	r24
    1f1c:	97 f9       	bld	r25, 7
    1f1e:	08 95       	ret

00001f20 <__divmodhi4>:
    1f20:	97 fb       	bst	r25, 7
    1f22:	07 2e       	mov	r0, r23
    1f24:	16 f4       	brtc	.+4      	; 0x1f2a <__divmodhi4+0xa>
    1f26:	00 94       	com	r0
    1f28:	07 d0       	rcall	.+14     	; 0x1f38 <__divmodhi4_neg1>
    1f2a:	77 fd       	sbrc	r23, 7
    1f2c:	09 d0       	rcall	.+18     	; 0x1f40 <__divmodhi4_neg2>
    1f2e:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__udivmodhi4>
    1f32:	07 fc       	sbrc	r0, 7
    1f34:	05 d0       	rcall	.+10     	; 0x1f40 <__divmodhi4_neg2>
    1f36:	3e f4       	brtc	.+14     	; 0x1f46 <__divmodhi4_exit>

00001f38 <__divmodhi4_neg1>:
    1f38:	90 95       	com	r25
    1f3a:	81 95       	neg	r24
    1f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f3e:	08 95       	ret

00001f40 <__divmodhi4_neg2>:
    1f40:	70 95       	com	r23
    1f42:	61 95       	neg	r22
    1f44:	7f 4f       	sbci	r23, 0xFF	; 255

00001f46 <__divmodhi4_exit>:
    1f46:	08 95       	ret

00001f48 <__divmodsi4>:
    1f48:	05 2e       	mov	r0, r21
    1f4a:	97 fb       	bst	r25, 7
    1f4c:	1e f4       	brtc	.+6      	; 0x1f54 <__divmodsi4+0xc>
    1f4e:	00 94       	com	r0
    1f50:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__negsi2>
    1f54:	57 fd       	sbrc	r21, 7
    1f56:	07 d0       	rcall	.+14     	; 0x1f66 <__divmodsi4_neg2>
    1f58:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <__udivmodsi4>
    1f5c:	07 fc       	sbrc	r0, 7
    1f5e:	03 d0       	rcall	.+6      	; 0x1f66 <__divmodsi4_neg2>
    1f60:	4e f4       	brtc	.+18     	; 0x1f74 <__divmodsi4_exit>
    1f62:	0c 94 bb 0f 	jmp	0x1f76	; 0x1f76 <__negsi2>

00001f66 <__divmodsi4_neg2>:
    1f66:	50 95       	com	r21
    1f68:	40 95       	com	r20
    1f6a:	30 95       	com	r19
    1f6c:	21 95       	neg	r18
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	4f 4f       	sbci	r20, 0xFF	; 255
    1f72:	5f 4f       	sbci	r21, 0xFF	; 255

00001f74 <__divmodsi4_exit>:
    1f74:	08 95       	ret

00001f76 <__negsi2>:
    1f76:	90 95       	com	r25
    1f78:	80 95       	com	r24
    1f7a:	70 95       	com	r23
    1f7c:	61 95       	neg	r22
    1f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f80:	8f 4f       	sbci	r24, 0xFF	; 255
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	08 95       	ret

00001f86 <__udivmodhi4>:
    1f86:	aa 1b       	sub	r26, r26
    1f88:	bb 1b       	sub	r27, r27
    1f8a:	51 e1       	ldi	r21, 0x11	; 17
    1f8c:	07 c0       	rjmp	.+14     	; 0x1f9c <__udivmodhi4_ep>

00001f8e <__udivmodhi4_loop>:
    1f8e:	aa 1f       	adc	r26, r26
    1f90:	bb 1f       	adc	r27, r27
    1f92:	a6 17       	cp	r26, r22
    1f94:	b7 07       	cpc	r27, r23
    1f96:	10 f0       	brcs	.+4      	; 0x1f9c <__udivmodhi4_ep>
    1f98:	a6 1b       	sub	r26, r22
    1f9a:	b7 0b       	sbc	r27, r23

00001f9c <__udivmodhi4_ep>:
    1f9c:	88 1f       	adc	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	5a 95       	dec	r21
    1fa2:	a9 f7       	brne	.-22     	; 0x1f8e <__udivmodhi4_loop>
    1fa4:	80 95       	com	r24
    1fa6:	90 95       	com	r25
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	08 95       	ret

00001fae <__udivmodsi4>:
    1fae:	a1 e2       	ldi	r26, 0x21	; 33
    1fb0:	1a 2e       	mov	r1, r26
    1fb2:	aa 1b       	sub	r26, r26
    1fb4:	bb 1b       	sub	r27, r27
    1fb6:	fd 01       	movw	r30, r26
    1fb8:	0d c0       	rjmp	.+26     	; 0x1fd4 <__udivmodsi4_ep>

00001fba <__udivmodsi4_loop>:
    1fba:	aa 1f       	adc	r26, r26
    1fbc:	bb 1f       	adc	r27, r27
    1fbe:	ee 1f       	adc	r30, r30
    1fc0:	ff 1f       	adc	r31, r31
    1fc2:	a2 17       	cp	r26, r18
    1fc4:	b3 07       	cpc	r27, r19
    1fc6:	e4 07       	cpc	r30, r20
    1fc8:	f5 07       	cpc	r31, r21
    1fca:	20 f0       	brcs	.+8      	; 0x1fd4 <__udivmodsi4_ep>
    1fcc:	a2 1b       	sub	r26, r18
    1fce:	b3 0b       	sbc	r27, r19
    1fd0:	e4 0b       	sbc	r30, r20
    1fd2:	f5 0b       	sbc	r31, r21

00001fd4 <__udivmodsi4_ep>:
    1fd4:	66 1f       	adc	r22, r22
    1fd6:	77 1f       	adc	r23, r23
    1fd8:	88 1f       	adc	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	1a 94       	dec	r1
    1fde:	69 f7       	brne	.-38     	; 0x1fba <__udivmodsi4_loop>
    1fe0:	60 95       	com	r22
    1fe2:	70 95       	com	r23
    1fe4:	80 95       	com	r24
    1fe6:	90 95       	com	r25
    1fe8:	9b 01       	movw	r18, r22
    1fea:	ac 01       	movw	r20, r24
    1fec:	bd 01       	movw	r22, r26
    1fee:	cf 01       	movw	r24, r30
    1ff0:	08 95       	ret

00001ff2 <malloc>:
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	82 30       	cpi	r24, 0x02	; 2
    1ff8:	91 05       	cpc	r25, r1
    1ffa:	10 f4       	brcc	.+4      	; 0x2000 <malloc+0xe>
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	e0 91 e0 01 	lds	r30, 0x01E0
    2004:	f0 91 e1 01 	lds	r31, 0x01E1
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	a0 e0       	ldi	r26, 0x00	; 0
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	30 97       	sbiw	r30, 0x00	; 0
    2012:	39 f1       	breq	.+78     	; 0x2062 <malloc+0x70>
    2014:	40 81       	ld	r20, Z
    2016:	51 81       	ldd	r21, Z+1	; 0x01
    2018:	48 17       	cp	r20, r24
    201a:	59 07       	cpc	r21, r25
    201c:	b8 f0       	brcs	.+46     	; 0x204c <malloc+0x5a>
    201e:	48 17       	cp	r20, r24
    2020:	59 07       	cpc	r21, r25
    2022:	71 f4       	brne	.+28     	; 0x2040 <malloc+0x4e>
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	10 97       	sbiw	r26, 0x00	; 0
    202a:	29 f0       	breq	.+10     	; 0x2036 <malloc+0x44>
    202c:	13 96       	adiw	r26, 0x03	; 3
    202e:	9c 93       	st	X, r25
    2030:	8e 93       	st	-X, r24
    2032:	12 97       	sbiw	r26, 0x02	; 2
    2034:	2c c0       	rjmp	.+88     	; 0x208e <malloc+0x9c>
    2036:	90 93 e1 01 	sts	0x01E1, r25
    203a:	80 93 e0 01 	sts	0x01E0, r24
    203e:	27 c0       	rjmp	.+78     	; 0x208e <malloc+0x9c>
    2040:	21 15       	cp	r18, r1
    2042:	31 05       	cpc	r19, r1
    2044:	31 f0       	breq	.+12     	; 0x2052 <malloc+0x60>
    2046:	42 17       	cp	r20, r18
    2048:	53 07       	cpc	r21, r19
    204a:	18 f0       	brcs	.+6      	; 0x2052 <malloc+0x60>
    204c:	a9 01       	movw	r20, r18
    204e:	db 01       	movw	r26, r22
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <malloc+0x62>
    2052:	ef 01       	movw	r28, r30
    2054:	9a 01       	movw	r18, r20
    2056:	bd 01       	movw	r22, r26
    2058:	df 01       	movw	r26, r30
    205a:	02 80       	ldd	r0, Z+2	; 0x02
    205c:	f3 81       	ldd	r31, Z+3	; 0x03
    205e:	e0 2d       	mov	r30, r0
    2060:	d7 cf       	rjmp	.-82     	; 0x2010 <malloc+0x1e>
    2062:	21 15       	cp	r18, r1
    2064:	31 05       	cpc	r19, r1
    2066:	f9 f0       	breq	.+62     	; 0x20a6 <malloc+0xb4>
    2068:	28 1b       	sub	r18, r24
    206a:	39 0b       	sbc	r19, r25
    206c:	24 30       	cpi	r18, 0x04	; 4
    206e:	31 05       	cpc	r19, r1
    2070:	80 f4       	brcc	.+32     	; 0x2092 <malloc+0xa0>
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	9b 81       	ldd	r25, Y+3	; 0x03
    2076:	61 15       	cp	r22, r1
    2078:	71 05       	cpc	r23, r1
    207a:	21 f0       	breq	.+8      	; 0x2084 <malloc+0x92>
    207c:	fb 01       	movw	r30, r22
    207e:	93 83       	std	Z+3, r25	; 0x03
    2080:	82 83       	std	Z+2, r24	; 0x02
    2082:	04 c0       	rjmp	.+8      	; 0x208c <malloc+0x9a>
    2084:	90 93 e1 01 	sts	0x01E1, r25
    2088:	80 93 e0 01 	sts	0x01E0, r24
    208c:	fe 01       	movw	r30, r28
    208e:	32 96       	adiw	r30, 0x02	; 2
    2090:	44 c0       	rjmp	.+136    	; 0x211a <malloc+0x128>
    2092:	fe 01       	movw	r30, r28
    2094:	e2 0f       	add	r30, r18
    2096:	f3 1f       	adc	r31, r19
    2098:	81 93       	st	Z+, r24
    209a:	91 93       	st	Z+, r25
    209c:	22 50       	subi	r18, 0x02	; 2
    209e:	31 09       	sbc	r19, r1
    20a0:	39 83       	std	Y+1, r19	; 0x01
    20a2:	28 83       	st	Y, r18
    20a4:	3a c0       	rjmp	.+116    	; 0x211a <malloc+0x128>
    20a6:	20 91 de 01 	lds	r18, 0x01DE
    20aa:	30 91 df 01 	lds	r19, 0x01DF
    20ae:	23 2b       	or	r18, r19
    20b0:	41 f4       	brne	.+16     	; 0x20c2 <malloc+0xd0>
    20b2:	20 91 02 01 	lds	r18, 0x0102
    20b6:	30 91 03 01 	lds	r19, 0x0103
    20ba:	30 93 df 01 	sts	0x01DF, r19
    20be:	20 93 de 01 	sts	0x01DE, r18
    20c2:	20 91 00 01 	lds	r18, 0x0100
    20c6:	30 91 01 01 	lds	r19, 0x0101
    20ca:	21 15       	cp	r18, r1
    20cc:	31 05       	cpc	r19, r1
    20ce:	41 f4       	brne	.+16     	; 0x20e0 <malloc+0xee>
    20d0:	2d b7       	in	r18, 0x3d	; 61
    20d2:	3e b7       	in	r19, 0x3e	; 62
    20d4:	40 91 04 01 	lds	r20, 0x0104
    20d8:	50 91 05 01 	lds	r21, 0x0105
    20dc:	24 1b       	sub	r18, r20
    20de:	35 0b       	sbc	r19, r21
    20e0:	e0 91 de 01 	lds	r30, 0x01DE
    20e4:	f0 91 df 01 	lds	r31, 0x01DF
    20e8:	e2 17       	cp	r30, r18
    20ea:	f3 07       	cpc	r31, r19
    20ec:	a0 f4       	brcc	.+40     	; 0x2116 <malloc+0x124>
    20ee:	2e 1b       	sub	r18, r30
    20f0:	3f 0b       	sbc	r19, r31
    20f2:	28 17       	cp	r18, r24
    20f4:	39 07       	cpc	r19, r25
    20f6:	78 f0       	brcs	.+30     	; 0x2116 <malloc+0x124>
    20f8:	ac 01       	movw	r20, r24
    20fa:	4e 5f       	subi	r20, 0xFE	; 254
    20fc:	5f 4f       	sbci	r21, 0xFF	; 255
    20fe:	24 17       	cp	r18, r20
    2100:	35 07       	cpc	r19, r21
    2102:	48 f0       	brcs	.+18     	; 0x2116 <malloc+0x124>
    2104:	4e 0f       	add	r20, r30
    2106:	5f 1f       	adc	r21, r31
    2108:	50 93 df 01 	sts	0x01DF, r21
    210c:	40 93 de 01 	sts	0x01DE, r20
    2110:	81 93       	st	Z+, r24
    2112:	91 93       	st	Z+, r25
    2114:	02 c0       	rjmp	.+4      	; 0x211a <malloc+0x128>
    2116:	e0 e0       	ldi	r30, 0x00	; 0
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	cf 01       	movw	r24, r30
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	08 95       	ret

00002122 <free>:
    2122:	cf 93       	push	r28
    2124:	df 93       	push	r29
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	09 f4       	brne	.+2      	; 0x212c <free+0xa>
    212a:	87 c0       	rjmp	.+270    	; 0x223a <free+0x118>
    212c:	fc 01       	movw	r30, r24
    212e:	32 97       	sbiw	r30, 0x02	; 2
    2130:	13 82       	std	Z+3, r1	; 0x03
    2132:	12 82       	std	Z+2, r1	; 0x02
    2134:	c0 91 e0 01 	lds	r28, 0x01E0
    2138:	d0 91 e1 01 	lds	r29, 0x01E1
    213c:	20 97       	sbiw	r28, 0x00	; 0
    213e:	81 f4       	brne	.+32     	; 0x2160 <free+0x3e>
    2140:	20 81       	ld	r18, Z
    2142:	31 81       	ldd	r19, Z+1	; 0x01
    2144:	28 0f       	add	r18, r24
    2146:	39 1f       	adc	r19, r25
    2148:	80 91 de 01 	lds	r24, 0x01DE
    214c:	90 91 df 01 	lds	r25, 0x01DF
    2150:	82 17       	cp	r24, r18
    2152:	93 07       	cpc	r25, r19
    2154:	79 f5       	brne	.+94     	; 0x21b4 <free+0x92>
    2156:	f0 93 df 01 	sts	0x01DF, r31
    215a:	e0 93 de 01 	sts	0x01DE, r30
    215e:	6d c0       	rjmp	.+218    	; 0x223a <free+0x118>
    2160:	de 01       	movw	r26, r28
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	ae 17       	cp	r26, r30
    2168:	bf 07       	cpc	r27, r31
    216a:	50 f4       	brcc	.+20     	; 0x2180 <free+0x5e>
    216c:	12 96       	adiw	r26, 0x02	; 2
    216e:	4d 91       	ld	r20, X+
    2170:	5c 91       	ld	r21, X
    2172:	13 97       	sbiw	r26, 0x03	; 3
    2174:	9d 01       	movw	r18, r26
    2176:	41 15       	cp	r20, r1
    2178:	51 05       	cpc	r21, r1
    217a:	09 f1       	breq	.+66     	; 0x21be <free+0x9c>
    217c:	da 01       	movw	r26, r20
    217e:	f3 cf       	rjmp	.-26     	; 0x2166 <free+0x44>
    2180:	b3 83       	std	Z+3, r27	; 0x03
    2182:	a2 83       	std	Z+2, r26	; 0x02
    2184:	40 81       	ld	r20, Z
    2186:	51 81       	ldd	r21, Z+1	; 0x01
    2188:	84 0f       	add	r24, r20
    218a:	95 1f       	adc	r25, r21
    218c:	8a 17       	cp	r24, r26
    218e:	9b 07       	cpc	r25, r27
    2190:	71 f4       	brne	.+28     	; 0x21ae <free+0x8c>
    2192:	8d 91       	ld	r24, X+
    2194:	9c 91       	ld	r25, X
    2196:	11 97       	sbiw	r26, 0x01	; 1
    2198:	84 0f       	add	r24, r20
    219a:	95 1f       	adc	r25, r21
    219c:	02 96       	adiw	r24, 0x02	; 2
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
    21a2:	12 96       	adiw	r26, 0x02	; 2
    21a4:	8d 91       	ld	r24, X+
    21a6:	9c 91       	ld	r25, X
    21a8:	13 97       	sbiw	r26, 0x03	; 3
    21aa:	93 83       	std	Z+3, r25	; 0x03
    21ac:	82 83       	std	Z+2, r24	; 0x02
    21ae:	21 15       	cp	r18, r1
    21b0:	31 05       	cpc	r19, r1
    21b2:	29 f4       	brne	.+10     	; 0x21be <free+0x9c>
    21b4:	f0 93 e1 01 	sts	0x01E1, r31
    21b8:	e0 93 e0 01 	sts	0x01E0, r30
    21bc:	3e c0       	rjmp	.+124    	; 0x223a <free+0x118>
    21be:	d9 01       	movw	r26, r18
    21c0:	13 96       	adiw	r26, 0x03	; 3
    21c2:	fc 93       	st	X, r31
    21c4:	ee 93       	st	-X, r30
    21c6:	12 97       	sbiw	r26, 0x02	; 2
    21c8:	4d 91       	ld	r20, X+
    21ca:	5d 91       	ld	r21, X+
    21cc:	a4 0f       	add	r26, r20
    21ce:	b5 1f       	adc	r27, r21
    21d0:	ea 17       	cp	r30, r26
    21d2:	fb 07       	cpc	r31, r27
    21d4:	79 f4       	brne	.+30     	; 0x21f4 <free+0xd2>
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	84 0f       	add	r24, r20
    21dc:	95 1f       	adc	r25, r21
    21de:	02 96       	adiw	r24, 0x02	; 2
    21e0:	d9 01       	movw	r26, r18
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	9c 93       	st	X, r25
    21e6:	8e 93       	st	-X, r24
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	13 96       	adiw	r26, 0x03	; 3
    21ee:	9c 93       	st	X, r25
    21f0:	8e 93       	st	-X, r24
    21f2:	12 97       	sbiw	r26, 0x02	; 2
    21f4:	e0 e0       	ldi	r30, 0x00	; 0
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	9b 81       	ldd	r25, Y+3	; 0x03
    21fc:	00 97       	sbiw	r24, 0x00	; 0
    21fe:	19 f0       	breq	.+6      	; 0x2206 <free+0xe4>
    2200:	fe 01       	movw	r30, r28
    2202:	ec 01       	movw	r28, r24
    2204:	f9 cf       	rjmp	.-14     	; 0x21f8 <free+0xd6>
    2206:	ce 01       	movw	r24, r28
    2208:	02 96       	adiw	r24, 0x02	; 2
    220a:	28 81       	ld	r18, Y
    220c:	39 81       	ldd	r19, Y+1	; 0x01
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	20 91 de 01 	lds	r18, 0x01DE
    2216:	30 91 df 01 	lds	r19, 0x01DF
    221a:	28 17       	cp	r18, r24
    221c:	39 07       	cpc	r19, r25
    221e:	69 f4       	brne	.+26     	; 0x223a <free+0x118>
    2220:	30 97       	sbiw	r30, 0x00	; 0
    2222:	29 f4       	brne	.+10     	; 0x222e <free+0x10c>
    2224:	10 92 e1 01 	sts	0x01E1, r1
    2228:	10 92 e0 01 	sts	0x01E0, r1
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <free+0x110>
    222e:	13 82       	std	Z+3, r1	; 0x03
    2230:	12 82       	std	Z+2, r1	; 0x02
    2232:	d0 93 df 01 	sts	0x01DF, r29
    2236:	c0 93 de 01 	sts	0x01DE, r28
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	08 95       	ret

00002240 <do_rand>:
    2240:	8f 92       	push	r8
    2242:	9f 92       	push	r9
    2244:	af 92       	push	r10
    2246:	bf 92       	push	r11
    2248:	cf 92       	push	r12
    224a:	df 92       	push	r13
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	cf 93       	push	r28
    2252:	df 93       	push	r29
    2254:	ec 01       	movw	r28, r24
    2256:	68 81       	ld	r22, Y
    2258:	79 81       	ldd	r23, Y+1	; 0x01
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	9b 81       	ldd	r25, Y+3	; 0x03
    225e:	61 15       	cp	r22, r1
    2260:	71 05       	cpc	r23, r1
    2262:	81 05       	cpc	r24, r1
    2264:	91 05       	cpc	r25, r1
    2266:	21 f4       	brne	.+8      	; 0x2270 <do_rand+0x30>
    2268:	64 e2       	ldi	r22, 0x24	; 36
    226a:	79 ed       	ldi	r23, 0xD9	; 217
    226c:	8b e5       	ldi	r24, 0x5B	; 91
    226e:	97 e0       	ldi	r25, 0x07	; 7
    2270:	2d e1       	ldi	r18, 0x1D	; 29
    2272:	33 ef       	ldi	r19, 0xF3	; 243
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	50 e0       	ldi	r21, 0x00	; 0
    2278:	0e 94 a4 0f 	call	0x1f48	; 0x1f48 <__divmodsi4>
    227c:	49 01       	movw	r8, r18
    227e:	5a 01       	movw	r10, r20
    2280:	9b 01       	movw	r18, r22
    2282:	ac 01       	movw	r20, r24
    2284:	a7 ea       	ldi	r26, 0xA7	; 167
    2286:	b1 e4       	ldi	r27, 0x41	; 65
    2288:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__muluhisi3>
    228c:	6b 01       	movw	r12, r22
    228e:	7c 01       	movw	r14, r24
    2290:	ac ee       	ldi	r26, 0xEC	; 236
    2292:	b4 ef       	ldi	r27, 0xF4	; 244
    2294:	a5 01       	movw	r20, r10
    2296:	94 01       	movw	r18, r8
    2298:	0e 94 86 14 	call	0x290c	; 0x290c <__mulohisi3>
    229c:	c6 0e       	add	r12, r22
    229e:	d7 1e       	adc	r13, r23
    22a0:	e8 1e       	adc	r14, r24
    22a2:	f9 1e       	adc	r15, r25
    22a4:	f7 fe       	sbrs	r15, 7
    22a6:	06 c0       	rjmp	.+12     	; 0x22b4 <do_rand+0x74>
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	c8 1a       	sub	r12, r24
    22ac:	d1 08       	sbc	r13, r1
    22ae:	e1 08       	sbc	r14, r1
    22b0:	80 e8       	ldi	r24, 0x80	; 128
    22b2:	f8 0a       	sbc	r15, r24
    22b4:	c8 82       	st	Y, r12
    22b6:	d9 82       	std	Y+1, r13	; 0x01
    22b8:	ea 82       	std	Y+2, r14	; 0x02
    22ba:	fb 82       	std	Y+3, r15	; 0x03
    22bc:	c6 01       	movw	r24, r12
    22be:	9f 77       	andi	r25, 0x7F	; 127
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	ff 90       	pop	r15
    22c6:	ef 90       	pop	r14
    22c8:	df 90       	pop	r13
    22ca:	cf 90       	pop	r12
    22cc:	bf 90       	pop	r11
    22ce:	af 90       	pop	r10
    22d0:	9f 90       	pop	r9
    22d2:	8f 90       	pop	r8
    22d4:	08 95       	ret

000022d6 <rand_r>:
    22d6:	0e 94 20 11 	call	0x2240	; 0x2240 <do_rand>
    22da:	08 95       	ret

000022dc <rand>:
    22dc:	86 e0       	ldi	r24, 0x06	; 6
    22de:	91 e0       	ldi	r25, 0x01	; 1
    22e0:	0e 94 20 11 	call	0x2240	; 0x2240 <do_rand>
    22e4:	08 95       	ret

000022e6 <srand>:
    22e6:	a0 e0       	ldi	r26, 0x00	; 0
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	80 93 06 01 	sts	0x0106, r24
    22ee:	90 93 07 01 	sts	0x0107, r25
    22f2:	a0 93 08 01 	sts	0x0108, r26
    22f6:	b0 93 09 01 	sts	0x0109, r27
    22fa:	08 95       	ret

000022fc <fdevopen>:
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	cf 93       	push	r28
    2302:	df 93       	push	r29
    2304:	ec 01       	movw	r28, r24
    2306:	8b 01       	movw	r16, r22
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	31 f4       	brne	.+12     	; 0x2318 <fdevopen+0x1c>
    230c:	61 15       	cp	r22, r1
    230e:	71 05       	cpc	r23, r1
    2310:	19 f4       	brne	.+6      	; 0x2318 <fdevopen+0x1c>
    2312:	80 e0       	ldi	r24, 0x00	; 0
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	38 c0       	rjmp	.+112    	; 0x2388 <fdevopen+0x8c>
    2318:	6e e0       	ldi	r22, 0x0E	; 14
    231a:	70 e0       	ldi	r23, 0x00	; 0
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	0e 94 af 13 	call	0x275e	; 0x275e <calloc>
    2324:	fc 01       	movw	r30, r24
    2326:	00 97       	sbiw	r24, 0x00	; 0
    2328:	a1 f3       	breq	.-24     	; 0x2312 <fdevopen+0x16>
    232a:	80 e8       	ldi	r24, 0x80	; 128
    232c:	83 83       	std	Z+3, r24	; 0x03
    232e:	01 15       	cp	r16, r1
    2330:	11 05       	cpc	r17, r1
    2332:	71 f0       	breq	.+28     	; 0x2350 <fdevopen+0x54>
    2334:	13 87       	std	Z+11, r17	; 0x0b
    2336:	02 87       	std	Z+10, r16	; 0x0a
    2338:	81 e8       	ldi	r24, 0x81	; 129
    233a:	83 83       	std	Z+3, r24	; 0x03
    233c:	80 91 e2 01 	lds	r24, 0x01E2
    2340:	90 91 e3 01 	lds	r25, 0x01E3
    2344:	89 2b       	or	r24, r25
    2346:	21 f4       	brne	.+8      	; 0x2350 <fdevopen+0x54>
    2348:	f0 93 e3 01 	sts	0x01E3, r31
    234c:	e0 93 e2 01 	sts	0x01E2, r30
    2350:	20 97       	sbiw	r28, 0x00	; 0
    2352:	c9 f0       	breq	.+50     	; 0x2386 <fdevopen+0x8a>
    2354:	d1 87       	std	Z+9, r29	; 0x09
    2356:	c0 87       	std	Z+8, r28	; 0x08
    2358:	83 81       	ldd	r24, Z+3	; 0x03
    235a:	82 60       	ori	r24, 0x02	; 2
    235c:	83 83       	std	Z+3, r24	; 0x03
    235e:	80 91 e4 01 	lds	r24, 0x01E4
    2362:	90 91 e5 01 	lds	r25, 0x01E5
    2366:	89 2b       	or	r24, r25
    2368:	71 f4       	brne	.+28     	; 0x2386 <fdevopen+0x8a>
    236a:	f0 93 e5 01 	sts	0x01E5, r31
    236e:	e0 93 e4 01 	sts	0x01E4, r30
    2372:	80 91 e6 01 	lds	r24, 0x01E6
    2376:	90 91 e7 01 	lds	r25, 0x01E7
    237a:	89 2b       	or	r24, r25
    237c:	21 f4       	brne	.+8      	; 0x2386 <fdevopen+0x8a>
    237e:	f0 93 e7 01 	sts	0x01E7, r31
    2382:	e0 93 e6 01 	sts	0x01E6, r30
    2386:	cf 01       	movw	r24, r30
    2388:	df 91       	pop	r29
    238a:	cf 91       	pop	r28
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	08 95       	ret

00002392 <printf>:
    2392:	a0 e0       	ldi	r26, 0x00	; 0
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	ef ec       	ldi	r30, 0xCF	; 207
    2398:	f1 e1       	ldi	r31, 0x11	; 17
    239a:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__prologue_saves__+0x20>
    239e:	fe 01       	movw	r30, r28
    23a0:	35 96       	adiw	r30, 0x05	; 5
    23a2:	61 91       	ld	r22, Z+
    23a4:	71 91       	ld	r23, Z+
    23a6:	af 01       	movw	r20, r30
    23a8:	80 91 e4 01 	lds	r24, 0x01E4
    23ac:	90 91 e5 01 	lds	r25, 0x01E5
    23b0:	0e 94 dd 11 	call	0x23ba	; 0x23ba <vfprintf>
    23b4:	e2 e0       	ldi	r30, 0x02	; 2
    23b6:	0c 94 b7 14 	jmp	0x296e	; 0x296e <__epilogue_restores__+0x20>

000023ba <vfprintf>:
    23ba:	ac e0       	ldi	r26, 0x0C	; 12
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e3 ee       	ldi	r30, 0xE3	; 227
    23c0:	f1 e1       	ldi	r31, 0x11	; 17
    23c2:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__prologue_saves__>
    23c6:	7c 01       	movw	r14, r24
    23c8:	6b 01       	movw	r12, r22
    23ca:	8a 01       	movw	r16, r20
    23cc:	fc 01       	movw	r30, r24
    23ce:	17 82       	std	Z+7, r1	; 0x07
    23d0:	16 82       	std	Z+6, r1	; 0x06
    23d2:	83 81       	ldd	r24, Z+3	; 0x03
    23d4:	81 ff       	sbrs	r24, 1
    23d6:	bd c1       	rjmp	.+890    	; 0x2752 <vfprintf+0x398>
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	4c 01       	movw	r8, r24
    23de:	f7 01       	movw	r30, r14
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	f6 01       	movw	r30, r12
    23e4:	93 fd       	sbrc	r25, 3
    23e6:	85 91       	lpm	r24, Z+
    23e8:	93 ff       	sbrs	r25, 3
    23ea:	81 91       	ld	r24, Z+
    23ec:	6f 01       	movw	r12, r30
    23ee:	88 23       	and	r24, r24
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <vfprintf+0x3a>
    23f2:	ab c1       	rjmp	.+854    	; 0x274a <vfprintf+0x390>
    23f4:	85 32       	cpi	r24, 0x25	; 37
    23f6:	39 f4       	brne	.+14     	; 0x2406 <vfprintf+0x4c>
    23f8:	93 fd       	sbrc	r25, 3
    23fa:	85 91       	lpm	r24, Z+
    23fc:	93 ff       	sbrs	r25, 3
    23fe:	81 91       	ld	r24, Z+
    2400:	6f 01       	movw	r12, r30
    2402:	85 32       	cpi	r24, 0x25	; 37
    2404:	29 f4       	brne	.+10     	; 0x2410 <vfprintf+0x56>
    2406:	b7 01       	movw	r22, r14
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    240e:	e7 cf       	rjmp	.-50     	; 0x23de <vfprintf+0x24>
    2410:	51 2c       	mov	r5, r1
    2412:	31 2c       	mov	r3, r1
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	20 32       	cpi	r18, 0x20	; 32
    2418:	a0 f4       	brcc	.+40     	; 0x2442 <vfprintf+0x88>
    241a:	8b 32       	cpi	r24, 0x2B	; 43
    241c:	69 f0       	breq	.+26     	; 0x2438 <vfprintf+0x7e>
    241e:	30 f4       	brcc	.+12     	; 0x242c <vfprintf+0x72>
    2420:	80 32       	cpi	r24, 0x20	; 32
    2422:	59 f0       	breq	.+22     	; 0x243a <vfprintf+0x80>
    2424:	83 32       	cpi	r24, 0x23	; 35
    2426:	69 f4       	brne	.+26     	; 0x2442 <vfprintf+0x88>
    2428:	20 61       	ori	r18, 0x10	; 16
    242a:	2c c0       	rjmp	.+88     	; 0x2484 <vfprintf+0xca>
    242c:	8d 32       	cpi	r24, 0x2D	; 45
    242e:	39 f0       	breq	.+14     	; 0x243e <vfprintf+0x84>
    2430:	80 33       	cpi	r24, 0x30	; 48
    2432:	39 f4       	brne	.+14     	; 0x2442 <vfprintf+0x88>
    2434:	21 60       	ori	r18, 0x01	; 1
    2436:	26 c0       	rjmp	.+76     	; 0x2484 <vfprintf+0xca>
    2438:	22 60       	ori	r18, 0x02	; 2
    243a:	24 60       	ori	r18, 0x04	; 4
    243c:	23 c0       	rjmp	.+70     	; 0x2484 <vfprintf+0xca>
    243e:	28 60       	ori	r18, 0x08	; 8
    2440:	21 c0       	rjmp	.+66     	; 0x2484 <vfprintf+0xca>
    2442:	27 fd       	sbrc	r18, 7
    2444:	27 c0       	rjmp	.+78     	; 0x2494 <vfprintf+0xda>
    2446:	30 ed       	ldi	r19, 0xD0	; 208
    2448:	38 0f       	add	r19, r24
    244a:	3a 30       	cpi	r19, 0x0A	; 10
    244c:	78 f4       	brcc	.+30     	; 0x246c <vfprintf+0xb2>
    244e:	26 ff       	sbrs	r18, 6
    2450:	06 c0       	rjmp	.+12     	; 0x245e <vfprintf+0xa4>
    2452:	fa e0       	ldi	r31, 0x0A	; 10
    2454:	5f 9e       	mul	r5, r31
    2456:	30 0d       	add	r19, r0
    2458:	11 24       	eor	r1, r1
    245a:	53 2e       	mov	r5, r19
    245c:	13 c0       	rjmp	.+38     	; 0x2484 <vfprintf+0xca>
    245e:	8a e0       	ldi	r24, 0x0A	; 10
    2460:	38 9e       	mul	r3, r24
    2462:	30 0d       	add	r19, r0
    2464:	11 24       	eor	r1, r1
    2466:	33 2e       	mov	r3, r19
    2468:	20 62       	ori	r18, 0x20	; 32
    246a:	0c c0       	rjmp	.+24     	; 0x2484 <vfprintf+0xca>
    246c:	8e 32       	cpi	r24, 0x2E	; 46
    246e:	21 f4       	brne	.+8      	; 0x2478 <vfprintf+0xbe>
    2470:	26 fd       	sbrc	r18, 6
    2472:	6b c1       	rjmp	.+726    	; 0x274a <vfprintf+0x390>
    2474:	20 64       	ori	r18, 0x40	; 64
    2476:	06 c0       	rjmp	.+12     	; 0x2484 <vfprintf+0xca>
    2478:	8c 36       	cpi	r24, 0x6C	; 108
    247a:	11 f4       	brne	.+4      	; 0x2480 <vfprintf+0xc6>
    247c:	20 68       	ori	r18, 0x80	; 128
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <vfprintf+0xca>
    2480:	88 36       	cpi	r24, 0x68	; 104
    2482:	41 f4       	brne	.+16     	; 0x2494 <vfprintf+0xda>
    2484:	f6 01       	movw	r30, r12
    2486:	93 fd       	sbrc	r25, 3
    2488:	85 91       	lpm	r24, Z+
    248a:	93 ff       	sbrs	r25, 3
    248c:	81 91       	ld	r24, Z+
    248e:	6f 01       	movw	r12, r30
    2490:	81 11       	cpse	r24, r1
    2492:	c1 cf       	rjmp	.-126    	; 0x2416 <vfprintf+0x5c>
    2494:	98 2f       	mov	r25, r24
    2496:	9f 7d       	andi	r25, 0xDF	; 223
    2498:	95 54       	subi	r25, 0x45	; 69
    249a:	93 30       	cpi	r25, 0x03	; 3
    249c:	28 f4       	brcc	.+10     	; 0x24a8 <vfprintf+0xee>
    249e:	0c 5f       	subi	r16, 0xFC	; 252
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	ff e3       	ldi	r31, 0x3F	; 63
    24a4:	f9 83       	std	Y+1, r31	; 0x01
    24a6:	0d c0       	rjmp	.+26     	; 0x24c2 <vfprintf+0x108>
    24a8:	83 36       	cpi	r24, 0x63	; 99
    24aa:	31 f0       	breq	.+12     	; 0x24b8 <vfprintf+0xfe>
    24ac:	83 37       	cpi	r24, 0x73	; 115
    24ae:	71 f0       	breq	.+28     	; 0x24cc <vfprintf+0x112>
    24b0:	83 35       	cpi	r24, 0x53	; 83
    24b2:	09 f0       	breq	.+2      	; 0x24b6 <vfprintf+0xfc>
    24b4:	5b c0       	rjmp	.+182    	; 0x256c <vfprintf+0x1b2>
    24b6:	22 c0       	rjmp	.+68     	; 0x24fc <vfprintf+0x142>
    24b8:	f8 01       	movw	r30, r16
    24ba:	80 81       	ld	r24, Z
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	0e 5f       	subi	r16, 0xFE	; 254
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	44 24       	eor	r4, r4
    24c4:	43 94       	inc	r4
    24c6:	51 2c       	mov	r5, r1
    24c8:	54 01       	movw	r10, r8
    24ca:	15 c0       	rjmp	.+42     	; 0x24f6 <vfprintf+0x13c>
    24cc:	38 01       	movw	r6, r16
    24ce:	f2 e0       	ldi	r31, 0x02	; 2
    24d0:	6f 0e       	add	r6, r31
    24d2:	71 1c       	adc	r7, r1
    24d4:	f8 01       	movw	r30, r16
    24d6:	a0 80       	ld	r10, Z
    24d8:	b1 80       	ldd	r11, Z+1	; 0x01
    24da:	26 ff       	sbrs	r18, 6
    24dc:	03 c0       	rjmp	.+6      	; 0x24e4 <vfprintf+0x12a>
    24de:	65 2d       	mov	r22, r5
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <vfprintf+0x12e>
    24e4:	6f ef       	ldi	r22, 0xFF	; 255
    24e6:	7f ef       	ldi	r23, 0xFF	; 255
    24e8:	c5 01       	movw	r24, r10
    24ea:	2c 87       	std	Y+12, r18	; 0x0c
    24ec:	0e 94 dd 13 	call	0x27ba	; 0x27ba <strnlen>
    24f0:	2c 01       	movw	r4, r24
    24f2:	83 01       	movw	r16, r6
    24f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    24f6:	2f 77       	andi	r18, 0x7F	; 127
    24f8:	22 2e       	mov	r2, r18
    24fa:	17 c0       	rjmp	.+46     	; 0x252a <vfprintf+0x170>
    24fc:	38 01       	movw	r6, r16
    24fe:	f2 e0       	ldi	r31, 0x02	; 2
    2500:	6f 0e       	add	r6, r31
    2502:	71 1c       	adc	r7, r1
    2504:	f8 01       	movw	r30, r16
    2506:	a0 80       	ld	r10, Z
    2508:	b1 80       	ldd	r11, Z+1	; 0x01
    250a:	26 ff       	sbrs	r18, 6
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <vfprintf+0x15a>
    250e:	65 2d       	mov	r22, r5
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	02 c0       	rjmp	.+4      	; 0x2518 <vfprintf+0x15e>
    2514:	6f ef       	ldi	r22, 0xFF	; 255
    2516:	7f ef       	ldi	r23, 0xFF	; 255
    2518:	c5 01       	movw	r24, r10
    251a:	2c 87       	std	Y+12, r18	; 0x0c
    251c:	0e 94 cb 13 	call	0x2796	; 0x2796 <strnlen_P>
    2520:	2c 01       	movw	r4, r24
    2522:	2c 85       	ldd	r18, Y+12	; 0x0c
    2524:	20 68       	ori	r18, 0x80	; 128
    2526:	22 2e       	mov	r2, r18
    2528:	83 01       	movw	r16, r6
    252a:	23 fc       	sbrc	r2, 3
    252c:	1b c0       	rjmp	.+54     	; 0x2564 <vfprintf+0x1aa>
    252e:	83 2d       	mov	r24, r3
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	48 16       	cp	r4, r24
    2534:	59 06       	cpc	r5, r25
    2536:	b0 f4       	brcc	.+44     	; 0x2564 <vfprintf+0x1aa>
    2538:	b7 01       	movw	r22, r14
    253a:	80 e2       	ldi	r24, 0x20	; 32
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    2542:	3a 94       	dec	r3
    2544:	f4 cf       	rjmp	.-24     	; 0x252e <vfprintf+0x174>
    2546:	f5 01       	movw	r30, r10
    2548:	27 fc       	sbrc	r2, 7
    254a:	85 91       	lpm	r24, Z+
    254c:	27 fe       	sbrs	r2, 7
    254e:	81 91       	ld	r24, Z+
    2550:	5f 01       	movw	r10, r30
    2552:	b7 01       	movw	r22, r14
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    255a:	31 10       	cpse	r3, r1
    255c:	3a 94       	dec	r3
    255e:	f1 e0       	ldi	r31, 0x01	; 1
    2560:	4f 1a       	sub	r4, r31
    2562:	51 08       	sbc	r5, r1
    2564:	41 14       	cp	r4, r1
    2566:	51 04       	cpc	r5, r1
    2568:	71 f7       	brne	.-36     	; 0x2546 <vfprintf+0x18c>
    256a:	e5 c0       	rjmp	.+458    	; 0x2736 <vfprintf+0x37c>
    256c:	84 36       	cpi	r24, 0x64	; 100
    256e:	11 f0       	breq	.+4      	; 0x2574 <vfprintf+0x1ba>
    2570:	89 36       	cpi	r24, 0x69	; 105
    2572:	39 f5       	brne	.+78     	; 0x25c2 <vfprintf+0x208>
    2574:	f8 01       	movw	r30, r16
    2576:	27 ff       	sbrs	r18, 7
    2578:	07 c0       	rjmp	.+14     	; 0x2588 <vfprintf+0x1ce>
    257a:	60 81       	ld	r22, Z
    257c:	71 81       	ldd	r23, Z+1	; 0x01
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	93 81       	ldd	r25, Z+3	; 0x03
    2582:	0c 5f       	subi	r16, 0xFC	; 252
    2584:	1f 4f       	sbci	r17, 0xFF	; 255
    2586:	08 c0       	rjmp	.+16     	; 0x2598 <vfprintf+0x1de>
    2588:	60 81       	ld	r22, Z
    258a:	71 81       	ldd	r23, Z+1	; 0x01
    258c:	88 27       	eor	r24, r24
    258e:	77 fd       	sbrc	r23, 7
    2590:	80 95       	com	r24
    2592:	98 2f       	mov	r25, r24
    2594:	0e 5f       	subi	r16, 0xFE	; 254
    2596:	1f 4f       	sbci	r17, 0xFF	; 255
    2598:	2f 76       	andi	r18, 0x6F	; 111
    259a:	b2 2e       	mov	r11, r18
    259c:	97 ff       	sbrs	r25, 7
    259e:	09 c0       	rjmp	.+18     	; 0x25b2 <vfprintf+0x1f8>
    25a0:	90 95       	com	r25
    25a2:	80 95       	com	r24
    25a4:	70 95       	com	r23
    25a6:	61 95       	neg	r22
    25a8:	7f 4f       	sbci	r23, 0xFF	; 255
    25aa:	8f 4f       	sbci	r24, 0xFF	; 255
    25ac:	9f 4f       	sbci	r25, 0xFF	; 255
    25ae:	20 68       	ori	r18, 0x80	; 128
    25b0:	b2 2e       	mov	r11, r18
    25b2:	2a e0       	ldi	r18, 0x0A	; 10
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	a4 01       	movw	r20, r8
    25b8:	0e 94 1a 14 	call	0x2834	; 0x2834 <__ultoa_invert>
    25bc:	a8 2e       	mov	r10, r24
    25be:	a8 18       	sub	r10, r8
    25c0:	44 c0       	rjmp	.+136    	; 0x264a <vfprintf+0x290>
    25c2:	85 37       	cpi	r24, 0x75	; 117
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <vfprintf+0x216>
    25c6:	2f 7e       	andi	r18, 0xEF	; 239
    25c8:	b2 2e       	mov	r11, r18
    25ca:	2a e0       	ldi	r18, 0x0A	; 10
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	25 c0       	rjmp	.+74     	; 0x261a <vfprintf+0x260>
    25d0:	f2 2f       	mov	r31, r18
    25d2:	f9 7f       	andi	r31, 0xF9	; 249
    25d4:	bf 2e       	mov	r11, r31
    25d6:	8f 36       	cpi	r24, 0x6F	; 111
    25d8:	c1 f0       	breq	.+48     	; 0x260a <vfprintf+0x250>
    25da:	18 f4       	brcc	.+6      	; 0x25e2 <vfprintf+0x228>
    25dc:	88 35       	cpi	r24, 0x58	; 88
    25de:	79 f0       	breq	.+30     	; 0x25fe <vfprintf+0x244>
    25e0:	b4 c0       	rjmp	.+360    	; 0x274a <vfprintf+0x390>
    25e2:	80 37       	cpi	r24, 0x70	; 112
    25e4:	19 f0       	breq	.+6      	; 0x25ec <vfprintf+0x232>
    25e6:	88 37       	cpi	r24, 0x78	; 120
    25e8:	21 f0       	breq	.+8      	; 0x25f2 <vfprintf+0x238>
    25ea:	af c0       	rjmp	.+350    	; 0x274a <vfprintf+0x390>
    25ec:	2f 2f       	mov	r18, r31
    25ee:	20 61       	ori	r18, 0x10	; 16
    25f0:	b2 2e       	mov	r11, r18
    25f2:	b4 fe       	sbrs	r11, 4
    25f4:	0d c0       	rjmp	.+26     	; 0x2610 <vfprintf+0x256>
    25f6:	8b 2d       	mov	r24, r11
    25f8:	84 60       	ori	r24, 0x04	; 4
    25fa:	b8 2e       	mov	r11, r24
    25fc:	09 c0       	rjmp	.+18     	; 0x2610 <vfprintf+0x256>
    25fe:	24 ff       	sbrs	r18, 4
    2600:	0a c0       	rjmp	.+20     	; 0x2616 <vfprintf+0x25c>
    2602:	9f 2f       	mov	r25, r31
    2604:	96 60       	ori	r25, 0x06	; 6
    2606:	b9 2e       	mov	r11, r25
    2608:	06 c0       	rjmp	.+12     	; 0x2616 <vfprintf+0x25c>
    260a:	28 e0       	ldi	r18, 0x08	; 8
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	05 c0       	rjmp	.+10     	; 0x261a <vfprintf+0x260>
    2610:	20 e1       	ldi	r18, 0x10	; 16
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	02 c0       	rjmp	.+4      	; 0x261a <vfprintf+0x260>
    2616:	20 e1       	ldi	r18, 0x10	; 16
    2618:	32 e0       	ldi	r19, 0x02	; 2
    261a:	f8 01       	movw	r30, r16
    261c:	b7 fe       	sbrs	r11, 7
    261e:	07 c0       	rjmp	.+14     	; 0x262e <vfprintf+0x274>
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	0c 5f       	subi	r16, 0xFC	; 252
    262a:	1f 4f       	sbci	r17, 0xFF	; 255
    262c:	06 c0       	rjmp	.+12     	; 0x263a <vfprintf+0x280>
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	0e 5f       	subi	r16, 0xFE	; 254
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	a4 01       	movw	r20, r8
    263c:	0e 94 1a 14 	call	0x2834	; 0x2834 <__ultoa_invert>
    2640:	a8 2e       	mov	r10, r24
    2642:	a8 18       	sub	r10, r8
    2644:	fb 2d       	mov	r31, r11
    2646:	ff 77       	andi	r31, 0x7F	; 127
    2648:	bf 2e       	mov	r11, r31
    264a:	b6 fe       	sbrs	r11, 6
    264c:	0b c0       	rjmp	.+22     	; 0x2664 <vfprintf+0x2aa>
    264e:	2b 2d       	mov	r18, r11
    2650:	2e 7f       	andi	r18, 0xFE	; 254
    2652:	a5 14       	cp	r10, r5
    2654:	50 f4       	brcc	.+20     	; 0x266a <vfprintf+0x2b0>
    2656:	b4 fe       	sbrs	r11, 4
    2658:	0a c0       	rjmp	.+20     	; 0x266e <vfprintf+0x2b4>
    265a:	b2 fc       	sbrc	r11, 2
    265c:	08 c0       	rjmp	.+16     	; 0x266e <vfprintf+0x2b4>
    265e:	2b 2d       	mov	r18, r11
    2660:	2e 7e       	andi	r18, 0xEE	; 238
    2662:	05 c0       	rjmp	.+10     	; 0x266e <vfprintf+0x2b4>
    2664:	7a 2c       	mov	r7, r10
    2666:	2b 2d       	mov	r18, r11
    2668:	03 c0       	rjmp	.+6      	; 0x2670 <vfprintf+0x2b6>
    266a:	7a 2c       	mov	r7, r10
    266c:	01 c0       	rjmp	.+2      	; 0x2670 <vfprintf+0x2b6>
    266e:	75 2c       	mov	r7, r5
    2670:	24 ff       	sbrs	r18, 4
    2672:	0d c0       	rjmp	.+26     	; 0x268e <vfprintf+0x2d4>
    2674:	fe 01       	movw	r30, r28
    2676:	ea 0d       	add	r30, r10
    2678:	f1 1d       	adc	r31, r1
    267a:	80 81       	ld	r24, Z
    267c:	80 33       	cpi	r24, 0x30	; 48
    267e:	11 f4       	brne	.+4      	; 0x2684 <vfprintf+0x2ca>
    2680:	29 7e       	andi	r18, 0xE9	; 233
    2682:	09 c0       	rjmp	.+18     	; 0x2696 <vfprintf+0x2dc>
    2684:	22 ff       	sbrs	r18, 2
    2686:	06 c0       	rjmp	.+12     	; 0x2694 <vfprintf+0x2da>
    2688:	73 94       	inc	r7
    268a:	73 94       	inc	r7
    268c:	04 c0       	rjmp	.+8      	; 0x2696 <vfprintf+0x2dc>
    268e:	82 2f       	mov	r24, r18
    2690:	86 78       	andi	r24, 0x86	; 134
    2692:	09 f0       	breq	.+2      	; 0x2696 <vfprintf+0x2dc>
    2694:	73 94       	inc	r7
    2696:	23 fd       	sbrc	r18, 3
    2698:	13 c0       	rjmp	.+38     	; 0x26c0 <vfprintf+0x306>
    269a:	20 ff       	sbrs	r18, 0
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <vfprintf+0x2f0>
    269e:	5a 2c       	mov	r5, r10
    26a0:	73 14       	cp	r7, r3
    26a2:	18 f4       	brcc	.+6      	; 0x26aa <vfprintf+0x2f0>
    26a4:	53 0c       	add	r5, r3
    26a6:	57 18       	sub	r5, r7
    26a8:	73 2c       	mov	r7, r3
    26aa:	73 14       	cp	r7, r3
    26ac:	68 f4       	brcc	.+26     	; 0x26c8 <vfprintf+0x30e>
    26ae:	b7 01       	movw	r22, r14
    26b0:	80 e2       	ldi	r24, 0x20	; 32
    26b2:	90 e0       	ldi	r25, 0x00	; 0
    26b4:	2c 87       	std	Y+12, r18	; 0x0c
    26b6:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    26ba:	73 94       	inc	r7
    26bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    26be:	f5 cf       	rjmp	.-22     	; 0x26aa <vfprintf+0x2f0>
    26c0:	73 14       	cp	r7, r3
    26c2:	10 f4       	brcc	.+4      	; 0x26c8 <vfprintf+0x30e>
    26c4:	37 18       	sub	r3, r7
    26c6:	01 c0       	rjmp	.+2      	; 0x26ca <vfprintf+0x310>
    26c8:	31 2c       	mov	r3, r1
    26ca:	24 ff       	sbrs	r18, 4
    26cc:	12 c0       	rjmp	.+36     	; 0x26f2 <vfprintf+0x338>
    26ce:	b7 01       	movw	r22, r14
    26d0:	80 e3       	ldi	r24, 0x30	; 48
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	2c 87       	std	Y+12, r18	; 0x0c
    26d6:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    26da:	2c 85       	ldd	r18, Y+12	; 0x0c
    26dc:	22 ff       	sbrs	r18, 2
    26de:	17 c0       	rjmp	.+46     	; 0x270e <vfprintf+0x354>
    26e0:	21 ff       	sbrs	r18, 1
    26e2:	03 c0       	rjmp	.+6      	; 0x26ea <vfprintf+0x330>
    26e4:	88 e5       	ldi	r24, 0x58	; 88
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	02 c0       	rjmp	.+4      	; 0x26ee <vfprintf+0x334>
    26ea:	88 e7       	ldi	r24, 0x78	; 120
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	b7 01       	movw	r22, r14
    26f0:	0c c0       	rjmp	.+24     	; 0x270a <vfprintf+0x350>
    26f2:	82 2f       	mov	r24, r18
    26f4:	86 78       	andi	r24, 0x86	; 134
    26f6:	59 f0       	breq	.+22     	; 0x270e <vfprintf+0x354>
    26f8:	21 fd       	sbrc	r18, 1
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <vfprintf+0x346>
    26fc:	80 e2       	ldi	r24, 0x20	; 32
    26fe:	01 c0       	rjmp	.+2      	; 0x2702 <vfprintf+0x348>
    2700:	8b e2       	ldi	r24, 0x2B	; 43
    2702:	27 fd       	sbrc	r18, 7
    2704:	8d e2       	ldi	r24, 0x2D	; 45
    2706:	b7 01       	movw	r22, r14
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    270e:	a5 14       	cp	r10, r5
    2710:	38 f4       	brcc	.+14     	; 0x2720 <vfprintf+0x366>
    2712:	b7 01       	movw	r22, r14
    2714:	80 e3       	ldi	r24, 0x30	; 48
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    271c:	5a 94       	dec	r5
    271e:	f7 cf       	rjmp	.-18     	; 0x270e <vfprintf+0x354>
    2720:	aa 94       	dec	r10
    2722:	f4 01       	movw	r30, r8
    2724:	ea 0d       	add	r30, r10
    2726:	f1 1d       	adc	r31, r1
    2728:	80 81       	ld	r24, Z
    272a:	b7 01       	movw	r22, r14
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    2732:	a1 10       	cpse	r10, r1
    2734:	f5 cf       	rjmp	.-22     	; 0x2720 <vfprintf+0x366>
    2736:	33 20       	and	r3, r3
    2738:	09 f4       	brne	.+2      	; 0x273c <vfprintf+0x382>
    273a:	51 ce       	rjmp	.-862    	; 0x23de <vfprintf+0x24>
    273c:	b7 01       	movw	r22, r14
    273e:	80 e2       	ldi	r24, 0x20	; 32
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <fputc>
    2746:	3a 94       	dec	r3
    2748:	f6 cf       	rjmp	.-20     	; 0x2736 <vfprintf+0x37c>
    274a:	f7 01       	movw	r30, r14
    274c:	86 81       	ldd	r24, Z+6	; 0x06
    274e:	97 81       	ldd	r25, Z+7	; 0x07
    2750:	02 c0       	rjmp	.+4      	; 0x2756 <vfprintf+0x39c>
    2752:	8f ef       	ldi	r24, 0xFF	; 255
    2754:	9f ef       	ldi	r25, 0xFF	; 255
    2756:	2c 96       	adiw	r28, 0x0c	; 12
    2758:	e2 e1       	ldi	r30, 0x12	; 18
    275a:	0c 94 a7 14 	jmp	0x294e	; 0x294e <__epilogue_restores__>

0000275e <calloc>:
    275e:	0f 93       	push	r16
    2760:	1f 93       	push	r17
    2762:	cf 93       	push	r28
    2764:	df 93       	push	r29
    2766:	86 9f       	mul	r24, r22
    2768:	80 01       	movw	r16, r0
    276a:	87 9f       	mul	r24, r23
    276c:	10 0d       	add	r17, r0
    276e:	96 9f       	mul	r25, r22
    2770:	10 0d       	add	r17, r0
    2772:	11 24       	eor	r1, r1
    2774:	c8 01       	movw	r24, r16
    2776:	0e 94 f9 0f 	call	0x1ff2	; 0x1ff2 <malloc>
    277a:	ec 01       	movw	r28, r24
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	29 f0       	breq	.+10     	; 0x278a <calloc+0x2c>
    2780:	a8 01       	movw	r20, r16
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	0e 94 d6 13 	call	0x27ac	; 0x27ac <memset>
    278a:	ce 01       	movw	r24, r28
    278c:	df 91       	pop	r29
    278e:	cf 91       	pop	r28
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	08 95       	ret

00002796 <strnlen_P>:
    2796:	fc 01       	movw	r30, r24
    2798:	05 90       	lpm	r0, Z+
    279a:	61 50       	subi	r22, 0x01	; 1
    279c:	70 40       	sbci	r23, 0x00	; 0
    279e:	01 10       	cpse	r0, r1
    27a0:	d8 f7       	brcc	.-10     	; 0x2798 <strnlen_P+0x2>
    27a2:	80 95       	com	r24
    27a4:	90 95       	com	r25
    27a6:	8e 0f       	add	r24, r30
    27a8:	9f 1f       	adc	r25, r31
    27aa:	08 95       	ret

000027ac <memset>:
    27ac:	dc 01       	movw	r26, r24
    27ae:	01 c0       	rjmp	.+2      	; 0x27b2 <memset+0x6>
    27b0:	6d 93       	st	X+, r22
    27b2:	41 50       	subi	r20, 0x01	; 1
    27b4:	50 40       	sbci	r21, 0x00	; 0
    27b6:	e0 f7       	brcc	.-8      	; 0x27b0 <memset+0x4>
    27b8:	08 95       	ret

000027ba <strnlen>:
    27ba:	fc 01       	movw	r30, r24
    27bc:	61 50       	subi	r22, 0x01	; 1
    27be:	70 40       	sbci	r23, 0x00	; 0
    27c0:	01 90       	ld	r0, Z+
    27c2:	01 10       	cpse	r0, r1
    27c4:	d8 f7       	brcc	.-10     	; 0x27bc <strnlen+0x2>
    27c6:	80 95       	com	r24
    27c8:	90 95       	com	r25
    27ca:	8e 0f       	add	r24, r30
    27cc:	9f 1f       	adc	r25, r31
    27ce:	08 95       	ret

000027d0 <fputc>:
    27d0:	0f 93       	push	r16
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	18 2f       	mov	r17, r24
    27da:	09 2f       	mov	r16, r25
    27dc:	eb 01       	movw	r28, r22
    27de:	8b 81       	ldd	r24, Y+3	; 0x03
    27e0:	81 fd       	sbrc	r24, 1
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <fputc+0x1a>
    27e4:	8f ef       	ldi	r24, 0xFF	; 255
    27e6:	9f ef       	ldi	r25, 0xFF	; 255
    27e8:	20 c0       	rjmp	.+64     	; 0x282a <fputc+0x5a>
    27ea:	82 ff       	sbrs	r24, 2
    27ec:	10 c0       	rjmp	.+32     	; 0x280e <fputc+0x3e>
    27ee:	4e 81       	ldd	r20, Y+6	; 0x06
    27f0:	5f 81       	ldd	r21, Y+7	; 0x07
    27f2:	2c 81       	ldd	r18, Y+4	; 0x04
    27f4:	3d 81       	ldd	r19, Y+5	; 0x05
    27f6:	42 17       	cp	r20, r18
    27f8:	53 07       	cpc	r21, r19
    27fa:	7c f4       	brge	.+30     	; 0x281a <fputc+0x4a>
    27fc:	e8 81       	ld	r30, Y
    27fe:	f9 81       	ldd	r31, Y+1	; 0x01
    2800:	9f 01       	movw	r18, r30
    2802:	2f 5f       	subi	r18, 0xFF	; 255
    2804:	3f 4f       	sbci	r19, 0xFF	; 255
    2806:	39 83       	std	Y+1, r19	; 0x01
    2808:	28 83       	st	Y, r18
    280a:	10 83       	st	Z, r17
    280c:	06 c0       	rjmp	.+12     	; 0x281a <fputc+0x4a>
    280e:	e8 85       	ldd	r30, Y+8	; 0x08
    2810:	f9 85       	ldd	r31, Y+9	; 0x09
    2812:	81 2f       	mov	r24, r17
    2814:	09 95       	icall
    2816:	89 2b       	or	r24, r25
    2818:	29 f7       	brne	.-54     	; 0x27e4 <fputc+0x14>
    281a:	2e 81       	ldd	r18, Y+6	; 0x06
    281c:	3f 81       	ldd	r19, Y+7	; 0x07
    281e:	2f 5f       	subi	r18, 0xFF	; 255
    2820:	3f 4f       	sbci	r19, 0xFF	; 255
    2822:	3f 83       	std	Y+7, r19	; 0x07
    2824:	2e 83       	std	Y+6, r18	; 0x06
    2826:	81 2f       	mov	r24, r17
    2828:	90 2f       	mov	r25, r16
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	08 95       	ret

00002834 <__ultoa_invert>:
    2834:	fa 01       	movw	r30, r20
    2836:	aa 27       	eor	r26, r26
    2838:	28 30       	cpi	r18, 0x08	; 8
    283a:	51 f1       	breq	.+84     	; 0x2890 <__ultoa_invert+0x5c>
    283c:	20 31       	cpi	r18, 0x10	; 16
    283e:	81 f1       	breq	.+96     	; 0x28a0 <__ultoa_invert+0x6c>
    2840:	e8 94       	clt
    2842:	6f 93       	push	r22
    2844:	6e 7f       	andi	r22, 0xFE	; 254
    2846:	6e 5f       	subi	r22, 0xFE	; 254
    2848:	7f 4f       	sbci	r23, 0xFF	; 255
    284a:	8f 4f       	sbci	r24, 0xFF	; 255
    284c:	9f 4f       	sbci	r25, 0xFF	; 255
    284e:	af 4f       	sbci	r26, 0xFF	; 255
    2850:	b1 e0       	ldi	r27, 0x01	; 1
    2852:	3e d0       	rcall	.+124    	; 0x28d0 <__ultoa_invert+0x9c>
    2854:	b4 e0       	ldi	r27, 0x04	; 4
    2856:	3c d0       	rcall	.+120    	; 0x28d0 <__ultoa_invert+0x9c>
    2858:	67 0f       	add	r22, r23
    285a:	78 1f       	adc	r23, r24
    285c:	89 1f       	adc	r24, r25
    285e:	9a 1f       	adc	r25, r26
    2860:	a1 1d       	adc	r26, r1
    2862:	68 0f       	add	r22, r24
    2864:	79 1f       	adc	r23, r25
    2866:	8a 1f       	adc	r24, r26
    2868:	91 1d       	adc	r25, r1
    286a:	a1 1d       	adc	r26, r1
    286c:	6a 0f       	add	r22, r26
    286e:	71 1d       	adc	r23, r1
    2870:	81 1d       	adc	r24, r1
    2872:	91 1d       	adc	r25, r1
    2874:	a1 1d       	adc	r26, r1
    2876:	20 d0       	rcall	.+64     	; 0x28b8 <__ultoa_invert+0x84>
    2878:	09 f4       	brne	.+2      	; 0x287c <__ultoa_invert+0x48>
    287a:	68 94       	set
    287c:	3f 91       	pop	r19
    287e:	2a e0       	ldi	r18, 0x0A	; 10
    2880:	26 9f       	mul	r18, r22
    2882:	11 24       	eor	r1, r1
    2884:	30 19       	sub	r19, r0
    2886:	30 5d       	subi	r19, 0xD0	; 208
    2888:	31 93       	st	Z+, r19
    288a:	de f6       	brtc	.-74     	; 0x2842 <__ultoa_invert+0xe>
    288c:	cf 01       	movw	r24, r30
    288e:	08 95       	ret
    2890:	46 2f       	mov	r20, r22
    2892:	47 70       	andi	r20, 0x07	; 7
    2894:	40 5d       	subi	r20, 0xD0	; 208
    2896:	41 93       	st	Z+, r20
    2898:	b3 e0       	ldi	r27, 0x03	; 3
    289a:	0f d0       	rcall	.+30     	; 0x28ba <__ultoa_invert+0x86>
    289c:	c9 f7       	brne	.-14     	; 0x2890 <__ultoa_invert+0x5c>
    289e:	f6 cf       	rjmp	.-20     	; 0x288c <__ultoa_invert+0x58>
    28a0:	46 2f       	mov	r20, r22
    28a2:	4f 70       	andi	r20, 0x0F	; 15
    28a4:	40 5d       	subi	r20, 0xD0	; 208
    28a6:	4a 33       	cpi	r20, 0x3A	; 58
    28a8:	18 f0       	brcs	.+6      	; 0x28b0 <__ultoa_invert+0x7c>
    28aa:	49 5d       	subi	r20, 0xD9	; 217
    28ac:	31 fd       	sbrc	r19, 1
    28ae:	40 52       	subi	r20, 0x20	; 32
    28b0:	41 93       	st	Z+, r20
    28b2:	02 d0       	rcall	.+4      	; 0x28b8 <__ultoa_invert+0x84>
    28b4:	a9 f7       	brne	.-22     	; 0x28a0 <__ultoa_invert+0x6c>
    28b6:	ea cf       	rjmp	.-44     	; 0x288c <__ultoa_invert+0x58>
    28b8:	b4 e0       	ldi	r27, 0x04	; 4
    28ba:	a6 95       	lsr	r26
    28bc:	97 95       	ror	r25
    28be:	87 95       	ror	r24
    28c0:	77 95       	ror	r23
    28c2:	67 95       	ror	r22
    28c4:	ba 95       	dec	r27
    28c6:	c9 f7       	brne	.-14     	; 0x28ba <__ultoa_invert+0x86>
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	61 05       	cpc	r22, r1
    28cc:	71 05       	cpc	r23, r1
    28ce:	08 95       	ret
    28d0:	9b 01       	movw	r18, r22
    28d2:	ac 01       	movw	r20, r24
    28d4:	0a 2e       	mov	r0, r26
    28d6:	06 94       	lsr	r0
    28d8:	57 95       	ror	r21
    28da:	47 95       	ror	r20
    28dc:	37 95       	ror	r19
    28de:	27 95       	ror	r18
    28e0:	ba 95       	dec	r27
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <__ultoa_invert+0xa2>
    28e4:	62 0f       	add	r22, r18
    28e6:	73 1f       	adc	r23, r19
    28e8:	84 1f       	adc	r24, r20
    28ea:	95 1f       	adc	r25, r21
    28ec:	a0 1d       	adc	r26, r0
    28ee:	08 95       	ret

000028f0 <__muluhisi3>:
    28f0:	0e 94 c2 14 	call	0x2984	; 0x2984 <__umulhisi3>
    28f4:	a5 9f       	mul	r26, r21
    28f6:	90 0d       	add	r25, r0
    28f8:	b4 9f       	mul	r27, r20
    28fa:	90 0d       	add	r25, r0
    28fc:	a4 9f       	mul	r26, r20
    28fe:	80 0d       	add	r24, r0
    2900:	91 1d       	adc	r25, r1
    2902:	11 24       	eor	r1, r1
    2904:	08 95       	ret

00002906 <__mulshisi3>:
    2906:	b7 ff       	sbrs	r27, 7
    2908:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__muluhisi3>

0000290c <__mulohisi3>:
    290c:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__muluhisi3>
    2910:	82 1b       	sub	r24, r18
    2912:	93 0b       	sbc	r25, r19
    2914:	08 95       	ret

00002916 <__prologue_saves__>:
    2916:	2f 92       	push	r2
    2918:	3f 92       	push	r3
    291a:	4f 92       	push	r4
    291c:	5f 92       	push	r5
    291e:	6f 92       	push	r6
    2920:	7f 92       	push	r7
    2922:	8f 92       	push	r8
    2924:	9f 92       	push	r9
    2926:	af 92       	push	r10
    2928:	bf 92       	push	r11
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	ca 1b       	sub	r28, r26
    2940:	db 0b       	sbc	r29, r27
    2942:	0f b6       	in	r0, 0x3f	; 63
    2944:	f8 94       	cli
    2946:	de bf       	out	0x3e, r29	; 62
    2948:	0f be       	out	0x3f, r0	; 63
    294a:	cd bf       	out	0x3d, r28	; 61
    294c:	09 94       	ijmp

0000294e <__epilogue_restores__>:
    294e:	2a 88       	ldd	r2, Y+18	; 0x12
    2950:	39 88       	ldd	r3, Y+17	; 0x11
    2952:	48 88       	ldd	r4, Y+16	; 0x10
    2954:	5f 84       	ldd	r5, Y+15	; 0x0f
    2956:	6e 84       	ldd	r6, Y+14	; 0x0e
    2958:	7d 84       	ldd	r7, Y+13	; 0x0d
    295a:	8c 84       	ldd	r8, Y+12	; 0x0c
    295c:	9b 84       	ldd	r9, Y+11	; 0x0b
    295e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2960:	b9 84       	ldd	r11, Y+9	; 0x09
    2962:	c8 84       	ldd	r12, Y+8	; 0x08
    2964:	df 80       	ldd	r13, Y+7	; 0x07
    2966:	ee 80       	ldd	r14, Y+6	; 0x06
    2968:	fd 80       	ldd	r15, Y+5	; 0x05
    296a:	0c 81       	ldd	r16, Y+4	; 0x04
    296c:	1b 81       	ldd	r17, Y+3	; 0x03
    296e:	aa 81       	ldd	r26, Y+2	; 0x02
    2970:	b9 81       	ldd	r27, Y+1	; 0x01
    2972:	ce 0f       	add	r28, r30
    2974:	d1 1d       	adc	r29, r1
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	ed 01       	movw	r28, r26
    2982:	08 95       	ret

00002984 <__umulhisi3>:
    2984:	a2 9f       	mul	r26, r18
    2986:	b0 01       	movw	r22, r0
    2988:	b3 9f       	mul	r27, r19
    298a:	c0 01       	movw	r24, r0
    298c:	a3 9f       	mul	r26, r19
    298e:	70 0d       	add	r23, r0
    2990:	81 1d       	adc	r24, r1
    2992:	11 24       	eor	r1, r1
    2994:	91 1d       	adc	r25, r1
    2996:	b2 9f       	mul	r27, r18
    2998:	70 0d       	add	r23, r0
    299a:	81 1d       	adc	r24, r1
    299c:	11 24       	eor	r1, r1
    299e:	91 1d       	adc	r25, r1
    29a0:	08 95       	ret

000029a2 <_exit>:
    29a2:	f8 94       	cli

000029a4 <__stop_program>:
    29a4:	ff cf       	rjmp	.-2      	; 0x29a4 <__stop_program>
