
ByggernBellLund_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800100  000026ec  00002780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001ba  008001ba  0000283a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000283a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000388  00000000  00000000  00002896  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c86  00000000  00000000  00002c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017bc  00000000  00000000  000068a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017c4  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000afc  00000000  00000000  00009824  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000962  00000000  00000000  0000a320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002d99  00000000  00000000  0000ac82  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003d8  00000000  00000000  0000da1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 05 02 	jmp	0x40a	; 0x40a <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 89 05 	jmp	0xb12	; 0xb12 <__vector_14>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <__vector_14+0x30>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec ee       	ldi	r30, 0xEC	; 236
     37c:	f6 e2       	ldi	r31, 0x26	; 38
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 3b       	cpi	r26, 0xBA	; 186
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	aa eb       	ldi	r26, 0xBA	; 186
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 3c       	cpi	r26, 0xC4	; 196
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 45 02 	call	0x48a	; 0x48a <main>
     39e:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <init_handler>:

volatile int handelingMessage = 0;

void init_handler(){
	// Set pin as input (PD3 = INT1)
	DDRD &= ~(1 << PD3);
     3a6:	8b 98       	cbi	0x11, 3	; 17
	// Set internal pull-up
	PORTD |= (1 << PD3);
     3a8:	93 9a       	sbi	0x12, 3	; 18
	
	//initialize external interrupt on falling edge
	MCUCR |= (1<<ISC11);
     3aa:	85 b7       	in	r24, 0x35	; 53
     3ac:	88 60       	ori	r24, 0x08	; 8
     3ae:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     3b0:	85 b7       	in	r24, 0x35	; 53
     3b2:	8b 7f       	andi	r24, 0xFB	; 251
     3b4:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
     3b6:	80 e8       	ldi	r24, 0x80	; 128
     3b8:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     3ba:	78 94       	sei
     3bc:	08 95       	ret

000003be <handle_message>:
ISR(INT1_vect){
	handle_message();
}


void handle_message(){
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2a 97       	sbiw	r28, 0x0a	; 10
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
	Message m;
	CAN_receive(&m);
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	0e 94 bc 02 	call	0x578	; 0x578 <CAN_receive>
	
	Joystick J;
	
	//Decide what to do
	switch(m.id){
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	61 f4       	brne	.+24     	; 0x3f8 <handle_message+0x3a>
		case JOY:
			break;
		case JOYREQ:
			J = getJoystickPosition();
     3e0:	0e 94 77 03 	call	0x6ee	; 0x6ee <getJoystickPosition>
			m.id = JOY;
     3e4:	19 82       	std	Y+1, r1	; 0x01
			m.length = 3;
     3e6:	93 e0       	ldi	r25, 0x03	; 3
     3e8:	9a 83       	std	Y+2, r25	; 0x02
			m.data[0] = J.X;
     3ea:	6b 83       	std	Y+3, r22	; 0x03
			m.data[1] = J.Y;
     3ec:	7c 83       	std	Y+4, r23	; 0x04
			m.data[2] = J.D;
     3ee:	8d 83       	std	Y+5, r24	; 0x05
			CAN_transmit(&m);
     3f0:	ce 01       	movw	r24, r28
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	0e 94 89 02 	call	0x512	; 0x512 <CAN_transmit>
			break;
		default:
			break;
 		
	}
}
     3f8:	2a 96       	adiw	r28, 0x0a	; 10
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	de bf       	out	0x3e, r29	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	cd bf       	out	0x3d, r28	; 61
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	08 95       	ret

0000040a <__vector_2>:
	//Enable global interrupts
	sei();
	 
}

ISR(INT1_vect){
     40a:	1f 92       	push	r1
     40c:	0f 92       	push	r0
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	0f 92       	push	r0
     412:	11 24       	eor	r1, r1
     414:	2f 93       	push	r18
     416:	3f 93       	push	r19
     418:	4f 93       	push	r20
     41a:	5f 93       	push	r21
     41c:	6f 93       	push	r22
     41e:	7f 93       	push	r23
     420:	8f 93       	push	r24
     422:	9f 93       	push	r25
     424:	af 93       	push	r26
     426:	bf 93       	push	r27
     428:	ef 93       	push	r30
     42a:	ff 93       	push	r31
	handle_message();
     42c:	0e 94 df 01 	call	0x3be	; 0x3be <handle_message>
}
     430:	ff 91       	pop	r31
     432:	ef 91       	pop	r30
     434:	bf 91       	pop	r27
     436:	af 91       	pop	r26
     438:	9f 91       	pop	r25
     43a:	8f 91       	pop	r24
     43c:	7f 91       	pop	r23
     43e:	6f 91       	pop	r22
     440:	5f 91       	pop	r21
     442:	4f 91       	pop	r20
     444:	3f 91       	pop	r19
     446:	2f 91       	pop	r18
     448:	0f 90       	pop	r0
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	0f 90       	pop	r0
     44e:	1f 90       	pop	r1
     450:	18 95       	reti

00000452 <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
     452:	80 eb       	ldi	r24, 0xB0	; 176
     454:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     456:	81 e5       	ldi	r24, 0x51	; 81
     458:	8d b9       	out	0x0d, r24	; 13
     45a:	08 95       	ret

0000045c <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
     45c:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
     45e:	77 9b       	sbis	0x0e, 7	; 14
     460:	fe cf       	rjmp	.-4      	; 0x45e <SPI_transmit+0x2>
	//Return answer
	return SPDR;
     462:	8f b1       	in	r24, 0x0f	; 15
}
     464:	08 95       	ret

00000466 <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
     466:	0e 94 2e 02 	call	0x45c	; 0x45c <SPI_transmit>
     46a:	08 95       	ret

0000046c <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
     46c:	8c ec       	ldi	r24, 0xCC	; 204
     46e:	0e 94 2e 02 	call	0x45c	; 0x45c <SPI_transmit>
}
     472:	08 95       	ret

00000474 <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
     474:	c4 9a       	sbi	0x18, 4	; 24
     476:	08 95       	ret

00000478 <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
     478:	c4 98       	cbi	0x18, 4	; 24
     47a:	08 95       	ret

0000047c <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     47c:	80 b7       	in	r24, 0x30	; 48
     47e:	80 62       	ori	r24, 0x20	; 32
     480:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     482:	85 b7       	in	r24, 0x35	; 53
     484:	80 68       	ori	r24, 0x80	; 128
     486:	85 bf       	out	0x35, r24	; 53
     488:	08 95       	ret

0000048a <main>:
#include "Driver_files/message_handler.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
     48a:	80 e8       	ldi	r24, 0x80	; 128
     48c:	95 e2       	ldi	r25, 0x25	; 37
     48e:	0e 94 b0 06 	call	0xd60	; 0xd60 <uartInit>
	bus_init();
     492:	0e 94 3e 02 	call	0x47c	; 0x47c <bus_init>
	oled_init();
     496:	0e 94 23 05 	call	0xa46	; 0xa46 <oled_init>
	init_handler();
     49a:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <init_handler>
	//oled_sram_init();
	CAN_init();
     49e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <CAN_init>
	printf("Reset?");
     4a2:	82 e1       	ldi	r24, 0x12	; 18
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	9f 93       	push	r25
     4a8:	8f 93       	push	r24
     4aa:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <printf>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
    while(1)
    {
		menuSystem();
     4b2:	0e 94 3d 0b 	call	0x167a	; 0x167a <menuSystem>
     4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <main+0x28>

000004b8 <get_adc>:
uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc
	uint16_t adc_size = 0x400;
	
	
	adc[0] = 4 + (channel%4);
     4b8:	83 70       	andi	r24, 0x03	; 3
     4ba:	90 78       	andi	r25, 0x80	; 128
     4bc:	99 23       	and	r25, r25
     4be:	24 f4       	brge	.+8      	; 0x4c8 <get_adc+0x10>
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	8c 6f       	ori	r24, 0xFC	; 252
     4c4:	9f 6f       	ori	r25, 0xFF	; 255
     4c6:	01 96       	adiw	r24, 0x01	; 1
     4c8:	8c 5f       	subi	r24, 0xFC	; 252
     4ca:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ce:	85 ef       	ldi	r24, 0xF5	; 245
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	01 97       	sbiw	r24, 0x01	; 1
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <get_adc+0x1a>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <get_adc+0x20>
     4d8:	00 00       	nop
	_delay_us(200);
	return adc[0];
     4da:	80 91 00 14 	lds	r24, 0x1400
     4de:	08 95       	ret

000004e0 <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
     4e0:	0e 94 b8 04 	call	0x970	; 0x970 <MCP_init>
	//Enter config mode
	MCP_reset();
     4e4:	0e 94 9e 04 	call	0x93c	; 0x93c <MCP_reset>
	//set normal mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	60 ee       	ldi	r22, 0xE0	; 224
     4ec:	8f e0       	ldi	r24, 0x0F	; 15
     4ee:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
     4f2:	4f ef       	ldi	r20, 0xFF	; 255
     4f4:	63 e0       	ldi	r22, 0x03	; 3
     4f6:	8b e2       	ldi	r24, 0x2B	; 43
     4f8:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
     4fc:	8e e0       	ldi	r24, 0x0E	; 14
     4fe:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     502:	28 2f       	mov	r18, r24
     504:	20 7e       	andi	r18, 0xE0	; 224
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	11 f4       	brne	.+4      	; 0x510 <__stack+0x11>
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     510:	08 95       	ret

00000512 <CAN_transmit>:

void CAN_transmit(Message *m){
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
     518:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_bit_modify(MCP_TXB0SIDL, 0xE0, m->id<<5);
     51a:	48 81       	ld	r20, Y
     51c:	42 95       	swap	r20
     51e:	44 0f       	add	r20, r20
     520:	40 7e       	andi	r20, 0xE0	; 224
     522:	60 ee       	ldi	r22, 0xE0	; 224
     524:	82 e3       	ldi	r24, 0x32	; 50
     526:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
	MCP_bit_modify(MCP_TXB0SIDH, 0xFF, m->id>>3);
     52a:	48 81       	ld	r20, Y
     52c:	46 95       	lsr	r20
     52e:	46 95       	lsr	r20
     530:	46 95       	lsr	r20
     532:	6f ef       	ldi	r22, 0xFF	; 255
     534:	81 e3       	ldi	r24, 0x31	; 49
     536:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     53a:	69 81       	ldd	r22, Y+1	; 0x01
     53c:	85 e3       	ldi	r24, 0x35	; 53
     53e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MCP_write>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     542:	69 81       	ldd	r22, Y+1	; 0x01
     544:	85 e3       	ldi	r24, 0x35	; 53
     546:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	88 23       	and	r24, r24
     54e:	69 f0       	breq	.+26     	; 0x56a <CAN_transmit+0x58>
     550:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
     552:	fe 01       	movw	r30, r28
     554:	e1 0f       	add	r30, r17
     556:	f1 1d       	adc	r31, r1
     558:	62 81       	ldd	r22, Z+2	; 0x02
     55a:	86 e3       	ldi	r24, 0x36	; 54
     55c:	81 0f       	add	r24, r17
     55e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <MCP_write>
	MCP_write(MCP_TXB0DLC, m->length);
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     562:	1f 5f       	subi	r17, 0xFF	; 255
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	18 17       	cp	r17, r24
     568:	a0 f3       	brcs	.-24     	; 0x552 <CAN_transmit+0x40>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <CAN_receive>:

int CAN_receive(Message *m){
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
     580:	8c e2       	ldi	r24, 0x2C	; 44
     582:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     586:	80 ff       	sbrs	r24, 0
     588:	2c c0       	rjmp	.+88     	; 0x5e2 <CAN_receive+0x6a>
		m->length = MCP_read(MCP_RBB0DLC);
     58a:	85 e6       	ldi	r24, 0x65	; 101
     58c:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     590:	89 83       	std	Y+1, r24	; 0x01
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
     592:	82 e6       	ldi	r24, 0x62	; 98
     594:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     598:	18 2f       	mov	r17, r24
     59a:	12 95       	swap	r17
     59c:	16 95       	lsr	r17
     59e:	17 70       	andi	r17, 0x07	; 7
     5a0:	18 83       	st	Y, r17
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
     5a2:	81 e6       	ldi	r24, 0x61	; 97
     5a4:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     5a8:	88 0f       	add	r24, r24
     5aa:	88 0f       	add	r24, r24
     5ac:	88 0f       	add	r24, r24
     5ae:	18 0f       	add	r17, r24
     5b0:	18 83       	st	Y, r17
		for(uint8_t i = 0; i < m->length; i++){
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	88 23       	and	r24, r24
     5b6:	69 f0       	breq	.+26     	; 0x5d2 <CAN_receive+0x5a>
     5b8:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
     5ba:	86 e6       	ldi	r24, 0x66	; 102
     5bc:	81 0f       	add	r24, r17
     5be:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
     5c2:	fe 01       	movw	r30, r28
     5c4:	e1 0f       	add	r30, r17
     5c6:	f1 1d       	adc	r31, r1
     5c8:	82 83       	std	Z+2, r24	; 0x02
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
		for(uint8_t i = 0; i < m->length; i++){
     5ca:	1f 5f       	subi	r17, 0xFF	; 255
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	18 17       	cp	r17, r24
     5d0:	a0 f3       	brcs	.-24     	; 0x5ba <CAN_receive+0x42>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     5d2:	40 e0       	ldi	r20, 0x00	; 0
     5d4:	61 e0       	ldi	r22, 0x01	; 1
     5d6:	8c e2       	ldi	r24, 0x2C	; 44
     5d8:	0e 94 09 05 	call	0xa12	; 0xa12 <MCP_bit_modify>
		return 0;
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <CAN_receive+0x6e>
	}
	return 1;
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	08 95       	ret

000005ee <getSliderPosition>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Slider getSliderPosition(){
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
	Slider slide;
	slide.left = ((get_adc(0))*100)/255;
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     5fe:	8c 01       	movw	r16, r24
	slide.right = ((get_adc(1))*100)/255;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     608:	ec 01       	movw	r28, r24
float xMean = 127;
float yMean = 127;

Slider getSliderPosition(){
	Slider slide;
	slide.left = ((get_adc(0))*100)/255;
     60a:	44 e6       	ldi	r20, 0x64	; 100
     60c:	40 9f       	mul	r20, r16
     60e:	c0 01       	movw	r24, r0
     610:	41 9f       	mul	r20, r17
     612:	90 0d       	add	r25, r0
     614:	11 24       	eor	r1, r1
     616:	ef ef       	ldi	r30, 0xFF	; 255
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	bf 01       	movw	r22, r30
     61c:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__divmodhi4>
	slide.right = ((get_adc(1))*100)/255;
	return slide;
     620:	8b 01       	movw	r16, r22
float yMean = 127;

Slider getSliderPosition(){
	Slider slide;
	slide.left = ((get_adc(0))*100)/255;
	slide.right = ((get_adc(1))*100)/255;
     622:	4c 9f       	mul	r20, r28
     624:	c0 01       	movw	r24, r0
     626:	4d 9f       	mul	r20, r29
     628:	90 0d       	add	r25, r0
     62a:	11 24       	eor	r1, r1
	return slide;
     62c:	bf 01       	movw	r22, r30
     62e:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__divmodhi4>
     632:	9b 01       	movw	r18, r22
}
     634:	c9 01       	movw	r24, r18
     636:	b8 01       	movw	r22, r16
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	08 95       	ret

00000642 <getJoystickDirection>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = getJoystickDirection(joy.X, joy.Y);
	return joy;
}

direction getJoystickDirection(int x, int y){
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	8c 01       	movw	r16, r24
     654:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
     656:	bc 01       	movw	r22, r24
     658:	88 27       	eor	r24, r24
     65a:	77 fd       	sbrc	r23, 7
     65c:	80 95       	com	r24
     65e:	98 2f       	mov	r25, r24
     660:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     664:	6b 01       	movw	r12, r22
     666:	7c 01       	movw	r14, r24
     668:	e8 94       	clt
     66a:	f7 f8       	bld	r15, 7
     66c:	20 e0       	ldi	r18, 0x00	; 0
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	48 e4       	ldi	r20, 0x48	; 72
     672:	52 e4       	ldi	r21, 0x42	; 66
     674:	c7 01       	movw	r24, r14
     676:	b6 01       	movw	r22, r12
     678:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__cmpsf2>
     67c:	88 23       	and	r24, r24
     67e:	84 f4       	brge	.+32     	; 0x6a0 <getJoystickDirection+0x5e>
     680:	be 01       	movw	r22, r28
     682:	88 27       	eor	r24, r24
     684:	77 fd       	sbrc	r23, 7
     686:	80 95       	com	r24
     688:	98 2f       	mov	r25, r24
     68a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     68e:	9f 77       	andi	r25, 0x7F	; 127
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	48 e4       	ldi	r20, 0x48	; 72
     696:	52 e4       	ldi	r21, 0x42	; 66
     698:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__cmpsf2>
     69c:	88 23       	and	r24, r24
     69e:	dc f0       	brlt	.+54     	; 0x6d6 <getJoystickDirection+0x94>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
     6a0:	be 01       	movw	r22, r28
     6a2:	88 27       	eor	r24, r24
     6a4:	77 fd       	sbrc	r23, 7
     6a6:	80 95       	com	r24
     6a8:	98 2f       	mov	r25, r24
     6aa:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     6ae:	9b 01       	movw	r18, r22
     6b0:	ac 01       	movw	r20, r24
     6b2:	5f 77       	andi	r21, 0x7F	; 127
     6b4:	c7 01       	movw	r24, r14
     6b6:	b6 01       	movw	r22, r12
     6b8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__cmpsf2>
     6bc:	88 23       	and	r24, r24
     6be:	2c f4       	brge	.+10     	; 0x6ca <getJoystickDirection+0x88>
		if(y > 0){
     6c0:	1c 16       	cp	r1, r28
     6c2:	1d 06       	cpc	r1, r29
     6c4:	54 f4       	brge	.+20     	; 0x6da <getJoystickDirection+0x98>
			return UP;
     6c6:	82 e0       	ldi	r24, 0x02	; 2
     6c8:	09 c0       	rjmp	.+18     	; 0x6dc <getJoystickDirection+0x9a>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	10 16       	cp	r1, r16
     6ce:	11 06       	cpc	r1, r17
     6d0:	2c f0       	brlt	.+10     	; 0x6dc <getJoystickDirection+0x9a>
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	03 c0       	rjmp	.+6      	; 0x6dc <getJoystickDirection+0x9a>
}

direction getJoystickDirection(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <getJoystickDirection+0x9a>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
     6da:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <getJoystickPosition>:
	slide.left = ((get_adc(0))*100)/255;
	slide.right = ((get_adc(1))*100)/255;
	return slide;
}

Joystick getJoystickPosition(){
     6ee:	cf 92       	push	r12
     6f0:	df 92       	push	r13
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	cf 93       	push	r28
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
     6f8:	82 e0       	ldi	r24, 0x02	; 2
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     700:	c0 90 0a 01 	lds	r12, 0x010A
     704:	d0 90 0b 01 	lds	r13, 0x010B
     708:	e0 90 0c 01 	lds	r14, 0x010C
     70c:	f0 90 0d 01 	lds	r15, 0x010D
     710:	bc 01       	movw	r22, r24
     712:	88 27       	eor	r24, r24
     714:	77 fd       	sbrc	r23, 7
     716:	80 95       	com	r24
     718:	98 2f       	mov	r25, r24
     71a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     71e:	a7 01       	movw	r20, r14
     720:	96 01       	movw	r18, r12
     722:	0e 94 18 0c 	call	0x1830	; 0x1830 <__subsf3>
     726:	20 e0       	ldi	r18, 0x00	; 0
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	48 ec       	ldi	r20, 0xC8	; 200
     72c:	52 e4       	ldi	r21, 0x42	; 66
     72e:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__mulsf3>
     732:	a7 01       	movw	r20, r14
     734:	96 01       	movw	r18, r12
     736:	0e 94 81 0c 	call	0x1902	; 0x1902 <__divsf3>
     73a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fixsfsi>
     73e:	c6 2f       	mov	r28, r22
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     748:	c0 90 0e 01 	lds	r12, 0x010E
     74c:	d0 90 0f 01 	lds	r13, 0x010F
     750:	e0 90 10 01 	lds	r14, 0x0110
     754:	f0 90 11 01 	lds	r15, 0x0111
     758:	bc 01       	movw	r22, r24
     75a:	88 27       	eor	r24, r24
     75c:	77 fd       	sbrc	r23, 7
     75e:	80 95       	com	r24
     760:	98 2f       	mov	r25, r24
     762:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     766:	a7 01       	movw	r20, r14
     768:	96 01       	movw	r18, r12
     76a:	0e 94 18 0c 	call	0x1830	; 0x1830 <__subsf3>
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	48 ec       	ldi	r20, 0xC8	; 200
     774:	52 e4       	ldi	r21, 0x42	; 66
     776:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__mulsf3>
     77a:	a7 01       	movw	r20, r14
     77c:	96 01       	movw	r18, r12
     77e:	0e 94 81 0c 	call	0x1902	; 0x1902 <__divsf3>
     782:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fixsfsi>
     786:	f6 2e       	mov	r15, r22
	joy.D = getJoystickDirection(joy.X, joy.Y);
     788:	6c 2f       	mov	r22, r28
     78a:	77 27       	eor	r23, r23
     78c:	67 fd       	sbrc	r22, 7
     78e:	70 95       	com	r23
     790:	8f 2d       	mov	r24, r15
     792:	99 27       	eor	r25, r25
     794:	87 fd       	sbrc	r24, 7
     796:	90 95       	com	r25
     798:	0e 94 21 03 	call	0x642	; 0x642 <getJoystickDirection>
	return joy;
}
     79c:	6f 2d       	mov	r22, r15
     79e:	7c 2f       	mov	r23, r28
     7a0:	cf 91       	pop	r28
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	cf 90       	pop	r12
     7aa:	08 95       	ret

000007ac <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	1f 92       	push	r1
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
     7b6:	28 ee       	ldi	r18, 0xE8	; 232
     7b8:	33 e0       	ldi	r19, 0x03	; 3
     7ba:	a9 01       	movw	r20, r18
     7bc:	48 1b       	sub	r20, r24
     7be:	59 0b       	sbc	r21, r25
     7c0:	ca 01       	movw	r24, r20
     7c2:	68 ec       	ldi	r22, 0xC8	; 200
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__divmodhi4>
     7ca:	60 5d       	subi	r22, 0xD0	; 208
     7cc:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	69 e1       	ldi	r22, 0x19	; 25
     7dc:	71 e0       	ldi	r23, 0x01	; 1
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
     7e6:	42 e0       	ldi	r20, 0x02	; 2
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	67 e2       	ldi	r22, 0x27	; 39
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
     7f6:	20 e6       	ldi	r18, 0x60	; 96
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	42 e0       	ldi	r20, 0x02	; 2
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	be 01       	movw	r22, r28
     800:	6f 5f       	subi	r22, 0xFF	; 255
     802:	7f 4f       	sbci	r23, 0xFF	; 255
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
	oled_sram_flush(0);
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
     814:	0f 90       	pop	r0
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <calibrateJoystick>:
			return LEFT;
		} 
	}
}

void calibrateJoystick(){
     81c:	bf 92       	push	r11
     81e:	cf 92       	push	r12
     820:	df 92       	push	r13
     822:	ef 92       	push	r14
     824:	ff 92       	push	r15
     826:	0f 93       	push	r16
     828:	1f 93       	push	r17
     82a:	cf 93       	push	r28
     82c:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     82e:	e1 2c       	mov	r14, r1
     830:	f1 2c       	mov	r15, r1

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
     832:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
     834:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
     836:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
     838:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
     83a:	0f 2e       	mov	r0, r31
     83c:	f8 ec       	ldi	r31, 0xC8	; 200
     83e:	cf 2e       	mov	r12, r31
     840:	d1 2c       	mov	r13, r1
     842:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
     84c:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
     856:	bc 16       	cp	r11, r28
     858:	08 f4       	brcc	.+2      	; 0x85c <calibrateJoystick+0x40>
     85a:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
     85c:	81 17       	cp	r24, r17
     85e:	08 f4       	brcc	.+2      	; 0x862 <calibrateJoystick+0x46>
     860:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
     862:	08 17       	cp	r16, r24
     864:	08 f4       	brcc	.+2      	; 0x868 <calibrateJoystick+0x4c>
     866:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
     868:	db 15       	cp	r29, r11
     86a:	08 f4       	brcc	.+2      	; 0x86e <calibrateJoystick+0x52>
     86c:	db 2d       	mov	r29, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	97 e1       	ldi	r25, 0x17	; 23
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <calibrateJoystick+0x56>
     876:	00 c0       	rjmp	.+0      	; 0x878 <calibrateJoystick+0x5c>
     878:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
     87a:	c7 01       	movw	r24, r14
     87c:	b6 01       	movw	r22, r12
     87e:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__divmodhi4>
     882:	89 2b       	or	r24, r25
     884:	19 f4       	brne	.+6      	; 0x88c <calibrateJoystick+0x70>
			calibration_visual_countdown(i);
     886:	c7 01       	movw	r24, r14
     888:	0e 94 d6 03 	call	0x7ac	; 0x7ac <calibration_visual_countdown>
void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     88c:	9f ef       	ldi	r25, 0xFF	; 255
     88e:	e9 1a       	sub	r14, r25
     890:	f9 0a       	sbc	r15, r25
     892:	88 ee       	ldi	r24, 0xE8	; 232
     894:	e8 16       	cp	r14, r24
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	f8 06       	cpc	r15, r24
     89a:	a1 f6       	brne	.-88     	; 0x844 <calibrateJoystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
     89c:	6d 2f       	mov	r22, r29
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	6c 1b       	sub	r22, r28
     8a2:	71 09       	sbc	r23, r1
     8a4:	88 27       	eor	r24, r24
     8a6:	77 fd       	sbrc	r23, 7
     8a8:	80 95       	com	r24
     8aa:	98 2f       	mov	r25, r24
     8ac:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 e0       	ldi	r20, 0x00	; 0
     8b6:	5f e3       	ldi	r21, 0x3F	; 63
     8b8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__mulsf3>
     8bc:	60 93 0a 01 	sts	0x010A, r22
     8c0:	70 93 0b 01 	sts	0x010B, r23
     8c4:	80 93 0c 01 	sts	0x010C, r24
     8c8:	90 93 0d 01 	sts	0x010D, r25
	xMean = (xMax - xMin)/2.0;
     8cc:	60 2f       	mov	r22, r16
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	61 1b       	sub	r22, r17
     8d2:	71 09       	sbc	r23, r1
     8d4:	88 27       	eor	r24, r24
     8d6:	77 fd       	sbrc	r23, 7
     8d8:	80 95       	com	r24
     8da:	98 2f       	mov	r25, r24
     8dc:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	30 e0       	ldi	r19, 0x00	; 0
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	5f e3       	ldi	r21, 0x3F	; 63
     8e8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__mulsf3>
     8ec:	60 93 0e 01 	sts	0x010E, r22
     8f0:	70 93 0f 01 	sts	0x010F, r23
     8f4:	80 93 10 01 	sts	0x0110, r24
     8f8:	90 93 11 01 	sts	0x0111, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
     8fc:	1f 92       	push	r1
     8fe:	0f 93       	push	r16
     900:	1f 92       	push	r1
     902:	1f 93       	push	r17
     904:	1f 92       	push	r1
     906:	df 93       	push	r29
     908:	1f 92       	push	r1
     90a:	cf 93       	push	r28
     90c:	83 e3       	ldi	r24, 0x33	; 51
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <printf>
     918:	8d b7       	in	r24, 0x3d	; 61
     91a:	9e b7       	in	r25, 0x3e	; 62
     91c:	0a 96       	adiw	r24, 0x0a	; 10
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	9e bf       	out	0x3e, r25	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	8d bf       	out	0x3d, r24	; 61
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	bf 90       	pop	r11
     93a:	08 95       	ret

0000093c <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     93c:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
     940:	80 ec       	ldi	r24, 0xC0	; 192
     942:	0e 94 2e 02 	call	0x45c	; 0x45c <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     946:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
     94a:	08 95       	ret

0000094c <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
     94c:	cf 93       	push	r28
     94e:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     950:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
     954:	83 e0       	ldi	r24, 0x03	; 3
     956:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(address);
     95a:	8c 2f       	mov	r24, r28
     95c:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	uint8_t data = SPI_receive();
     960:	0e 94 36 02 	call	0x46c	; 0x46c <SPI_receive>
     964:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     966:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
     96a:	8c 2f       	mov	r24, r28
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
     970:	80 e8       	ldi	r24, 0x80	; 128
     972:	95 e2       	ldi	r25, 0x25	; 37
     974:	0e 94 b0 06 	call	0xd60	; 0xd60 <uartInit>
	
	//Start SPI driver
	SPI_init();
     978:	0e 94 29 02 	call	0x452	; 0x452 <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
     97c:	0e 94 9e 04 	call	0x93c	; 0x93c <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
     980:	8e e0       	ldi	r24, 0x0E	; 14
     982:	0e 94 a6 04 	call	0x94c	; 0x94c <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
     986:	80 7e       	andi	r24, 0xE0	; 224
     988:	80 38       	cpi	r24, 0x80	; 128
     98a:	59 f0       	breq	.+22     	; 0x9a2 <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
     98c:	8f e3       	ldi	r24, 0x3F	; 63
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	9f 93       	push	r25
     992:	8f 93       	push	r24
     994:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <printf>
		return 1;
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	08 95       	ret
	}
	return 0;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
}
     9a6:	08 95       	ret

000009a8 <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	d8 2f       	mov	r29, r24
     9ae:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     9b0:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
     9b4:	82 e0       	ldi	r24, 0x02	; 2
     9b6:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(address);
     9ba:	8d 2f       	mov	r24, r29
     9bc:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(data);
     9c0:	8c 2f       	mov	r24, r28
     9c2:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     9c6:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
     9d0:	cf 93       	push	r28
     9d2:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     9d4:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
     9d8:	8c 2f       	mov	r24, r28
     9da:	83 70       	andi	r24, 0x03	; 3
     9dc:	81 30       	cpi	r24, 0x01	; 1
     9de:	51 f0       	breq	.+20     	; 0x9f4 <MCP_rts+0x24>
     9e0:	28 f0       	brcs	.+10     	; 0x9ec <MCP_rts+0x1c>
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	59 f0       	breq	.+22     	; 0x9fc <MCP_rts+0x2c>
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	69 f0       	breq	.+26     	; 0xa04 <MCP_rts+0x34>
     9ea:	0f c0       	rjmp	.+30     	; 0xa0a <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
     9ec:	81 e8       	ldi	r24, 0x81	; 129
     9ee:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
			break;
     9f2:	0b c0       	rjmp	.+22     	; 0xa0a <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
     9f4:	82 e8       	ldi	r24, 0x82	; 130
     9f6:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
			break;
     9fa:	07 c0       	rjmp	.+14     	; 0xa0a <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
     9fc:	84 e8       	ldi	r24, 0x84	; 132
     9fe:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
			break;
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
     a04:	87 e8       	ldi	r24, 0x87	; 135
     a06:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     a0a:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	18 2f       	mov	r17, r24
     a1a:	d6 2f       	mov	r29, r22
     a1c:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     a1e:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
     a22:	85 e0       	ldi	r24, 0x05	; 5
     a24:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(address);
     a28:	81 2f       	mov	r24, r17
     a2a:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(mask);
     a2e:	8d 2f       	mov	r24, r29
     a30:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	SPI_send(data);
     a34:	8c 2f       	mov	r24, r28
     a36:	0e 94 33 02 	call	0x466	; 0x466 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     a3a:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	08 95       	ret

00000a46 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     a46:	e0 e0       	ldi	r30, 0x00	; 0
     a48:	f0 e1       	ldi	r31, 0x10	; 16
     a4a:	8e ea       	ldi	r24, 0xAE	; 174
     a4c:	80 83       	st	Z, r24
     a4e:	81 ea       	ldi	r24, 0xA1	; 161
     a50:	80 83       	st	Z, r24
     a52:	8a ed       	ldi	r24, 0xDA	; 218
     a54:	80 83       	st	Z, r24
     a56:	82 e1       	ldi	r24, 0x12	; 18
     a58:	80 83       	st	Z, r24
     a5a:	88 ec       	ldi	r24, 0xC8	; 200
     a5c:	80 83       	st	Z, r24
     a5e:	88 ea       	ldi	r24, 0xA8	; 168
     a60:	80 83       	st	Z, r24
     a62:	8f e3       	ldi	r24, 0x3F	; 63
     a64:	80 83       	st	Z, r24
     a66:	85 ed       	ldi	r24, 0xD5	; 213
     a68:	80 83       	st	Z, r24
     a6a:	80 e8       	ldi	r24, 0x80	; 128
     a6c:	80 83       	st	Z, r24
     a6e:	81 e8       	ldi	r24, 0x81	; 129
     a70:	80 83       	st	Z, r24
     a72:	80 e5       	ldi	r24, 0x50	; 80
     a74:	80 83       	st	Z, r24
     a76:	89 ed       	ldi	r24, 0xD9	; 217
     a78:	80 83       	st	Z, r24
     a7a:	81 e2       	ldi	r24, 0x21	; 33
     a7c:	80 83       	st	Z, r24
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	80 83       	st	Z, r24
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	80 83       	st	Z, r24
     a86:	8b ed       	ldi	r24, 0xDB	; 219
     a88:	80 83       	st	Z, r24
     a8a:	80 e3       	ldi	r24, 0x30	; 48
     a8c:	80 83       	st	Z, r24
     a8e:	8d ea       	ldi	r24, 0xAD	; 173
     a90:	80 83       	st	Z, r24
     a92:	10 82       	st	Z, r1
     a94:	84 ea       	ldi	r24, 0xA4	; 164
     a96:	80 83       	st	Z, r24
     a98:	86 ea       	ldi	r24, 0xA6	; 166
     a9a:	80 83       	st	Z, r24
     a9c:	8f ea       	ldi	r24, 0xAF	; 175
     a9e:	80 83       	st	Z, r24
     aa0:	08 95       	ret

00000aa2 <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
     aa2:	af 92       	push	r10
     aa4:	bf 92       	push	r11
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     ab8:	c0 e0       	ldi	r28, 0x00	; 0
     aba:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
     abc:	e1 2c       	mov	r14, r1
     abe:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     ac0:	c1 2c       	mov	r12, r1
     ac2:	68 94       	set
     ac4:	dd 24       	eor	r13, r13
     ac6:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     ac8:	00 e0       	ldi	r16, 0x00	; 0
     aca:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
     acc:	ce 01       	movw	r24, r28
     ace:	9e 01       	movw	r18, r28
     ad0:	2f 77       	andi	r18, 0x7F	; 127
     ad2:	33 27       	eor	r19, r19
     ad4:	23 2b       	or	r18, r19
     ad6:	39 f4       	brne	.+14     	; 0xae6 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
     ad8:	20 eb       	ldi	r18, 0xB0	; 176
     ada:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     adc:	f6 01       	movw	r30, r12
     ade:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
     ae0:	ff ef       	ldi	r31, 0xFF	; 255
     ae2:	ef 1a       	sub	r14, r31
     ae4:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
     ae6:	8a 0d       	add	r24, r10
     ae8:	9b 1d       	adc	r25, r11
     aea:	0e 94 a1 06 	call	0xd42	; 0xd42 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     aee:	f8 01       	movw	r30, r16
     af0:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     af2:	21 96       	adiw	r28, 0x01	; 1
     af4:	c1 15       	cp	r28, r1
     af6:	f4 e0       	ldi	r31, 0x04	; 4
     af8:	df 07       	cpc	r29, r31
     afa:	41 f7       	brne	.-48     	; 0xacc <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	1f 91       	pop	r17
     b02:	0f 91       	pop	r16
     b04:	ff 90       	pop	r15
     b06:	ef 90       	pop	r14
     b08:	df 90       	pop	r13
     b0a:	cf 90       	pop	r12
     b0c:	bf 90       	pop	r11
     b0e:	af 90       	pop	r10
     b10:	08 95       	ret

00000b12 <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
	oled_sram_flush(0);
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
	TCNT1 = 0;
     b3c:	1d bc       	out	0x2d, r1	; 45
     b3e:	1c bc       	out	0x2c, r1	; 44
}
     b40:	ff 91       	pop	r31
     b42:	ef 91       	pop	r30
     b44:	bf 91       	pop	r27
     b46:	af 91       	pop	r26
     b48:	9f 91       	pop	r25
     b4a:	8f 91       	pop	r24
     b4c:	7f 91       	pop	r23
     b4e:	6f 91       	pop	r22
     b50:	5f 91       	pop	r21
     b52:	4f 91       	pop	r20
     b54:	3f 91       	pop	r19
     b56:	2f 91       	pop	r18
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
     b76:	6a 01       	movw	r12, r20
     b78:	d6 94       	lsr	r13
     b7a:	dc 2c       	mov	r13, r12
     b7c:	cc 24       	eor	r12, r12
     b7e:	d7 94       	ror	r13
     b80:	c7 94       	ror	r12
     b82:	c8 0e       	add	r12, r24
     b84:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
     b86:	fb 01       	movw	r30, r22
     b88:	e0 80       	ld	r14, Z
	while(c != '\0'){
     b8a:	ee 20       	and	r14, r14
     b8c:	69 f1       	breq	.+90     	; 0xbe8 <oled_sram_write_string+0x86>
     b8e:	5b 01       	movw	r10, r22
     b90:	ff ef       	ldi	r31, 0xFF	; 255
     b92:	af 1a       	sub	r10, r31
     b94:	bf 0a       	sbc	r11, r31
     b96:	15 c0       	rjmp	.+42     	; 0xbc2 <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     b98:	ce 01       	movw	r24, r28
     b9a:	f7 01       	movw	r30, r14
     b9c:	e8 0f       	add	r30, r24
     b9e:	f9 1f       	adc	r31, r25
     ba0:	64 91       	lpm	r22, Z
     ba2:	ec 01       	movw	r28, r24
     ba4:	21 96       	adiw	r28, 0x01	; 1
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	0e 94 a5 06 	call	0xd4a	; 0xd4a <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
     bac:	c0 17       	cp	r28, r16
     bae:	d1 07       	cpc	r29, r17
     bb0:	99 f7       	brne	.-26     	; 0xb98 <oled_sram_write_string+0x36>
     bb2:	48 e0       	ldi	r20, 0x08	; 8
     bb4:	c4 0e       	add	r12, r20
     bb6:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
     bb8:	f5 01       	movw	r30, r10
     bba:	e1 90       	ld	r14, Z+
     bbc:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
     bbe:	ee 20       	and	r14, r14
     bc0:	99 f0       	breq	.+38     	; 0xbe8 <oled_sram_write_string+0x86>
     bc2:	86 01       	movw	r16, r12
     bc4:	08 5f       	subi	r16, 0xF8	; 248
     bc6:	1f 4f       	sbci	r17, 0xFF	; 255
     bc8:	f1 2c       	mov	r15, r1
     bca:	ee 0c       	add	r14, r14
     bcc:	ff 1c       	adc	r15, r15
     bce:	ee 0c       	add	r14, r14
     bd0:	ff 1c       	adc	r15, r15
     bd2:	ee 0c       	add	r14, r14
     bd4:	ff 1c       	adc	r15, r15
     bd6:	97 01       	movw	r18, r14
     bd8:	2c 19       	sub	r18, r12
     bda:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     bdc:	c6 01       	movw	r24, r12
     bde:	a9 01       	movw	r20, r18
     be0:	40 59       	subi	r20, 0x90	; 144
     be2:	50 40       	sbci	r21, 0x00	; 0
     be4:	7a 01       	movw	r14, r20
     be6:	d9 cf       	rjmp	.-78     	; 0xb9a <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	ff 90       	pop	r15
     bf2:	ef 90       	pop	r14
     bf4:	df 90       	pop	r13
     bf6:	cf 90       	pop	r12
     bf8:	bf 90       	pop	r11
     bfa:	af 90       	pop	r10
     bfc:	08 95       	ret

00000bfe <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	7b 01       	movw	r14, r22
	start = start + page*128+col;
     c0c:	8a 01       	movw	r16, r20
     c0e:	16 95       	lsr	r17
     c10:	10 2f       	mov	r17, r16
     c12:	00 27       	eor	r16, r16
     c14:	17 95       	ror	r17
     c16:	07 95       	ror	r16
     c18:	80 0f       	add	r24, r16
     c1a:	91 1f       	adc	r25, r17
     c1c:	8c 01       	movw	r16, r24
     c1e:	02 0f       	add	r16, r18
     c20:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
     c22:	c0 e0       	ldi	r28, 0x00	; 0
     c24:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
     c26:	d7 01       	movw	r26, r14
     c28:	ec 91       	ld	r30, X
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	b0 97       	sbiw	r30, 0x20	; 32
     c2e:	ee 0f       	add	r30, r30
     c30:	ff 1f       	adc	r31, r31
     c32:	ee 0f       	add	r30, r30
     c34:	ff 1f       	adc	r31, r31
     c36:	ee 0f       	add	r30, r30
     c38:	ff 1f       	adc	r31, r31
     c3a:	ec 0f       	add	r30, r28
     c3c:	fd 1f       	adc	r31, r29
     c3e:	e0 59       	subi	r30, 0x90	; 144
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	64 91       	lpm	r22, Z
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	ce 01       	movw	r24, r28
     c48:	80 0f       	add	r24, r16
     c4a:	91 1f       	adc	r25, r17
     c4c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
     c50:	21 96       	adiw	r28, 0x01	; 1
     c52:	c8 30       	cpi	r28, 0x08	; 8
     c54:	d1 05       	cpc	r29, r1
     c56:	39 f7       	brne	.-50     	; 0xc26 <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	ff 90       	pop	r15
     c62:	ef 90       	pop	r14
     c64:	08 95       	ret

00000c66 <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
     c6e:	8b 01       	movw	r16, r22
     c70:	16 95       	lsr	r17
     c72:	10 2f       	mov	r17, r16
     c74:	00 27       	eor	r16, r16
     c76:	17 95       	ror	r17
     c78:	07 95       	ror	r16
     c7a:	08 0f       	add	r16, r24
     c7c:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
     c7e:	c0 e0       	ldi	r28, 0x00	; 0
     c80:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	ce 01       	movw	r24, r28
     c88:	80 0f       	add	r24, r16
     c8a:	91 1f       	adc	r25, r17
     c8c:	0e 94 a5 06 	call	0xd4a	; 0xd4a <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
     c90:	21 96       	adiw	r28, 0x01	; 1
     c92:	c0 38       	cpi	r28, 0x80	; 128
     c94:	d1 05       	cpc	r29, r1
     c96:	a9 f7       	brne	.-22     	; 0xc82 <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	08 95       	ret

00000ca2 <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
     cac:	c0 e0       	ldi	r28, 0x00	; 0
     cae:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
     cb0:	be 01       	movw	r22, r28
     cb2:	c8 01       	movw	r24, r16
     cb4:	0e 94 33 06 	call	0xc66	; 0xc66 <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
     cb8:	21 96       	adiw	r28, 0x01	; 1
     cba:	c8 30       	cpi	r28, 0x08	; 8
     cbc:	d1 05       	cpc	r29, r1
     cbe:	c1 f7       	brne	.-16     	; 0xcb0 <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
     cc0:	df 91       	pop	r29
     cc2:	cf 91       	pop	r28
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	08 95       	ret

00000cca <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	ea 01       	movw	r28, r20
	int page = y/8;
     cd4:	9a 01       	movw	r18, r20
     cd6:	dd 23       	and	r29, r29
     cd8:	14 f4       	brge	.+4      	; 0xcde <oled_sram_write_bit+0x14>
     cda:	29 5f       	subi	r18, 0xF9	; 249
     cdc:	3f 4f       	sbci	r19, 0xFF	; 255
     cde:	89 01       	movw	r16, r18
     ce0:	15 95       	asr	r17
     ce2:	07 95       	ror	r16
     ce4:	15 95       	asr	r17
     ce6:	07 95       	ror	r16
     ce8:	15 95       	asr	r17
     cea:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
     cec:	16 95       	lsr	r17
     cee:	10 2f       	mov	r17, r16
     cf0:	00 27       	eor	r16, r16
     cf2:	17 95       	ror	r17
     cf4:	07 95       	ror	r16
     cf6:	08 0f       	add	r16, r24
     cf8:	19 1f       	adc	r17, r25
     cfa:	06 0f       	add	r16, r22
     cfc:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
     cfe:	c8 01       	movw	r24, r16
     d00:	0e 94 a1 06 	call	0xd42	; 0xd42 <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
     d04:	ae 01       	movw	r20, r28
     d06:	47 70       	andi	r20, 0x07	; 7
     d08:	50 78       	andi	r21, 0x80	; 128
     d0a:	55 23       	and	r21, r21
     d0c:	34 f4       	brge	.+12     	; 0xd1a <oled_sram_write_bit+0x50>
     d0e:	41 50       	subi	r20, 0x01	; 1
     d10:	51 09       	sbc	r21, r1
     d12:	48 6f       	ori	r20, 0xF8	; 248
     d14:	5f 6f       	ori	r21, 0xFF	; 255
     d16:	4f 5f       	subi	r20, 0xFF	; 255
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
     d1a:	21 e0       	ldi	r18, 0x01	; 1
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	b9 01       	movw	r22, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <oled_sram_write_bit+0x5c>
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	4a 95       	dec	r20
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <oled_sram_write_bit+0x58>
     d2a:	ab 01       	movw	r20, r22
     d2c:	48 2b       	or	r20, r24
	setSRAM(index, temp);
     d2e:	64 2f       	mov	r22, r20
     d30:	70 e0       	ldi	r23, 0x00	; 0
     d32:	c8 01       	movw	r24, r16
     d34:	0e 94 a5 06 	call	0xd4a	; 0xd4a <setSRAM>
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
     d42:	98 5e       	subi	r25, 0xE8	; 232
     d44:	fc 01       	movw	r30, r24
     d46:	80 81       	ld	r24, Z
}
     d48:	08 95       	ret

00000d4a <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
     d4a:	fc 01       	movw	r30, r24
     d4c:	f8 5e       	subi	r31, 0xE8	; 232
     d4e:	80 81       	ld	r24, Z
		ext_ram[index] = value;
     d50:	60 83       	st	Z, r22
		return temp;
}
     d52:	08 95       	ret

00000d54 <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     d54:	5d 9b       	sbis	0x0b, 5	; 11
     d56:	fe cf       	rjmp	.-4      	; 0xd54 <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
     d58:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	08 95       	ret

00000d60 <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
     d60:	9c 01       	movw	r18, r24
     d62:	40 e0       	ldi	r20, 0x00	; 0
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 eb       	ldi	r23, 0xB0	; 176
     d6a:	84 e0       	ldi	r24, 0x04	; 4
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__divmodsi4>
     d72:	21 50       	subi	r18, 0x01	; 1
     d74:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     d76:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
     d78:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     d7a:	8a b1       	in	r24, 0x0a	; 10
     d7c:	88 61       	ori	r24, 0x18	; 24
     d7e:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     d80:	80 b5       	in	r24, 0x20	; 32
     d82:	86 68       	ori	r24, 0x86	; 134
     d84:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	8a ea       	ldi	r24, 0xAA	; 170
     d8c:	96 e0       	ldi	r25, 0x06	; 6
     d8e:	0e 94 21 10 	call	0x2042	; 0x2042 <fdevopen>
	
	return 0;
}
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	08 95       	ret

00000d98 <play_draw>:
#include "../Driver_files/oled_driver.h"
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
     da0:	0f e1       	ldi	r16, 0x1F	; 31
     da2:	10 e0       	ldi	r17, 0x00	; 0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
     da4:	cf e3       	ldi	r28, 0x3F	; 63
     da6:	d0 e0       	ldi	r29, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = getJoystickPosition();
     da8:	0e 94 77 03 	call	0x6ee	; 0x6ee <getJoystickPosition>
		switch(joy.D){
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	71 f0       	breq	.+28     	; 0xdcc <play_draw+0x34>
     db0:	58 f0       	brcs	.+22     	; 0xdc8 <play_draw+0x30>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	19 f0       	breq	.+6      	; 0xdbc <play_draw+0x24>
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	21 f0       	breq	.+8      	; 0xdc2 <play_draw+0x2a>
     dba:	09 c0       	rjmp	.+18     	; 0xdce <play_draw+0x36>
			case NEUTRAL:
				break;
			case UP:
				y--;
     dbc:	01 50       	subi	r16, 0x01	; 1
     dbe:	11 09       	sbc	r17, r1
				break;
     dc0:	06 c0       	rjmp	.+12     	; 0xdce <play_draw+0x36>
			case DOWN:
				y++;
     dc2:	0f 5f       	subi	r16, 0xFF	; 255
     dc4:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <play_draw+0x36>
			case LEFT:
				x--;
     dc8:	21 97       	sbiw	r28, 0x01	; 1
				break;
     dca:	01 c0       	rjmp	.+2      	; 0xdce <play_draw+0x36>
			case RIGHT:
				x++;
     dcc:	21 96       	adiw	r28, 0x01	; 1
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
     dce:	a8 01       	movw	r20, r16
     dd0:	be 01       	movw	r22, r28
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
		oled_sram_flush(0);
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	8f e7       	ldi	r24, 0x7F	; 127
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	21 50       	subi	r18, 0x01	; 1
     dea:	80 40       	sbci	r24, 0x00	; 0
     dec:	90 40       	sbci	r25, 0x00	; 0
     dee:	e1 f7       	brne	.-8      	; 0xde8 <play_draw+0x50>
     df0:	00 c0       	rjmp	.+0      	; 0xdf2 <play_draw+0x5a>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <play_draw+0x5c>
     df4:	d9 cf       	rjmp	.-78     	; 0xda8 <play_draw+0x10>

00000df6 <racketHit>:

typedef struct{
	int pos; // from 0 to 45 (16 in width)
} Racket;

int racketHit(Ball *ball, int racketPos){
     df6:	cf 92       	push	r12
     df8:	df 92       	push	r13
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	eb 01       	movw	r28, r22
	if (ball->posY >= racketPos && ball->posY < racketPos + RACKETSIZE )
     e04:	fc 01       	movw	r30, r24
     e06:	c2 80       	ldd	r12, Z+2	; 0x02
     e08:	d3 80       	ldd	r13, Z+3	; 0x03
     e0a:	e4 80       	ldd	r14, Z+4	; 0x04
     e0c:	f5 80       	ldd	r15, Z+5	; 0x05
     e0e:	88 27       	eor	r24, r24
     e10:	77 fd       	sbrc	r23, 7
     e12:	80 95       	com	r24
     e14:	98 2f       	mov	r25, r24
     e16:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     e1a:	9b 01       	movw	r18, r22
     e1c:	ac 01       	movw	r20, r24
     e1e:	c7 01       	movw	r24, r14
     e20:	b6 01       	movw	r22, r12
     e22:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <__gesf2>
     e26:	88 23       	and	r24, r24
     e28:	bc f0       	brlt	.+46     	; 0xe58 <racketHit+0x62>
     e2a:	be 01       	movw	r22, r28
     e2c:	60 5f       	subi	r22, 0xF0	; 240
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	88 27       	eor	r24, r24
     e32:	77 fd       	sbrc	r23, 7
     e34:	80 95       	com	r24
     e36:	98 2f       	mov	r25, r24
     e38:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	d1 e0       	ldi	r29, 0x01	; 1
     e42:	c0 e0       	ldi	r28, 0x00	; 0
     e44:	c7 01       	movw	r24, r14
     e46:	b6 01       	movw	r22, r12
     e48:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__cmpsf2>
     e4c:	88 23       	and	r24, r24
     e4e:	0c f0       	brlt	.+2      	; 0xe52 <racketHit+0x5c>
     e50:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
     e52:	8d 2f       	mov	r24, r29
     e54:	9c 2f       	mov	r25, r28
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <racketHit+0x66>
	return 0;
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	90 e0       	ldi	r25, 0x00	; 0
}
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	ff 90       	pop	r15
     e62:	ef 90       	pop	r14
     e64:	df 90       	pop	r13
     e66:	cf 90       	pop	r12
     e68:	08 95       	ret

00000e6a <updateBallAngle>:

void updateBallAngle(Ball *ball, int racketPos){
     e6a:	cf 92       	push	r12
     e6c:	df 92       	push	r13
     e6e:	ef 92       	push	r14
     e70:	ff 92       	push	r15
     e72:	0f 93       	push	r16
     e74:	1f 93       	push	r17
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	ec 01       	movw	r28, r24
     e7c:	8b 01       	movw	r16, r22
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
	int newBallAngle = ball->angle + hitPos * 45;
     e7e:	6e 81       	ldd	r22, Y+6	; 0x06
     e80:	7f 81       	ldd	r23, Y+7	; 0x07
     e82:	88 27       	eor	r24, r24
     e84:	77 fd       	sbrc	r23, 7
     e86:	80 95       	com	r24
     e88:	98 2f       	mov	r25, r24
     e8a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     e8e:	6b 01       	movw	r12, r22
     e90:	7c 01       	movw	r14, r24
		return 1;
	return 0;
}

void updateBallAngle(Ball *ball, int racketPos){
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
     e92:	b8 01       	movw	r22, r16
     e94:	88 27       	eor	r24, r24
     e96:	77 fd       	sbrc	r23, 7
     e98:	80 95       	com	r24
     e9a:	98 2f       	mov	r25, r24
     e9c:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__floatsisf>
     ea0:	9b 01       	movw	r18, r22
     ea2:	ac 01       	movw	r20, r24
     ea4:	6a 81       	ldd	r22, Y+2	; 0x02
     ea6:	7b 81       	ldd	r23, Y+3	; 0x03
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	0e 94 18 0c 	call	0x1830	; 0x1830 <__subsf3>
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	0e 94 18 0c 	call	0x1830	; 0x1830 <__subsf3>
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	5e e3       	ldi	r21, 0x3E	; 62
     ec4:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__mulsf3>
	int newBallAngle = ball->angle + hitPos * 45;
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	44 e3       	ldi	r20, 0x34	; 52
     ece:	52 e4       	ldi	r21, 0x42	; 66
     ed0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <__mulsf3>
     ed4:	9b 01       	movw	r18, r22
     ed6:	ac 01       	movw	r20, r24
     ed8:	c7 01       	movw	r24, r14
     eda:	b6 01       	movw	r22, r12
     edc:	0e 94 19 0c 	call	0x1832	; 0x1832 <__addsf3>
     ee0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fixsfsi>
	if(newBallAngle > 45) ball->angle = 45;
     ee4:	6e 32       	cpi	r22, 0x2E	; 46
     ee6:	71 05       	cpc	r23, r1
     ee8:	2c f0       	brlt	.+10     	; 0xef4 <updateBallAngle+0x8a>
     eea:	8d e2       	ldi	r24, 0x2D	; 45
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9f 83       	std	Y+7, r25	; 0x07
     ef0:	8e 83       	std	Y+6, r24	; 0x06
     ef2:	0b c0       	rjmp	.+22     	; 0xf0a <updateBallAngle+0xa0>
	else if(newBallAngle < -45) ball->angle = 45;
     ef4:	63 3d       	cpi	r22, 0xD3	; 211
     ef6:	4f ef       	ldi	r20, 0xFF	; 255
     ef8:	74 07       	cpc	r23, r20
     efa:	2c f4       	brge	.+10     	; 0xf06 <updateBallAngle+0x9c>
     efc:	8d e2       	ldi	r24, 0x2D	; 45
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	9f 83       	std	Y+7, r25	; 0x07
     f02:	8e 83       	std	Y+6, r24	; 0x06
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <updateBallAngle+0xa0>
	else ball->angle = newBallAngle;
     f06:	7f 83       	std	Y+7, r23	; 0x07
     f08:	6e 83       	std	Y+6, r22	; 0x06
}
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	08 95       	ret

00000f1c <ballInit>:

void ballInit(Ball *ball){
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	ec 01       	movw	r28, r24
	ball->dir = rand() % 2;
     f22:	0e 94 11 10 	call	0x2022	; 0x2022 <rand>
     f26:	81 70       	andi	r24, 0x01	; 1
     f28:	90 78       	andi	r25, 0x80	; 128
     f2a:	99 23       	and	r25, r25
     f2c:	24 f4       	brge	.+8      	; 0xf36 <ballInit+0x1a>
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	8e 6f       	ori	r24, 0xFE	; 254
     f32:	9f 6f       	ori	r25, 0xFF	; 255
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	99 87       	std	Y+9, r25	; 0x09
     f38:	88 87       	std	Y+8, r24	; 0x08
	ball->angle = (rand() % 91) - 45;
     f3a:	0e 94 11 10 	call	0x2022	; 0x2022 <rand>
     f3e:	6b e5       	ldi	r22, 0x5B	; 91
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__divmodhi4>
     f46:	8d 97       	sbiw	r24, 0x2d	; 45
     f48:	9f 83       	std	Y+7, r25	; 0x07
     f4a:	8e 83       	std	Y+6, r24	; 0x06
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <updateScreen>:
			printEndScreen("Player Left won!");
		}
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
     f52:	cf 92       	push	r12
     f54:	df 92       	push	r13
     f56:	ef 92       	push	r14
     f58:	ff 92       	push	r15
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	cf 93       	push	r28
     f60:	df 93       	push	r29
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	2a 97       	sbiw	r28, 0x0a	; 10
     f68:	0f b6       	in	r0, 0x3f	; 63
     f6a:	f8 94       	cli
     f6c:	de bf       	out	0x3e, r29	; 62
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	cd bf       	out	0x3d, r28	; 61
     f72:	09 83       	std	Y+1, r16	; 0x01
     f74:	1a 83       	std	Y+2, r17	; 0x02
     f76:	2b 83       	std	Y+3, r18	; 0x03
     f78:	3c 83       	std	Y+4, r19	; 0x04
     f7a:	4d 83       	std	Y+5, r20	; 0x05
     f7c:	5e 83       	std	Y+6, r21	; 0x06
	oled_sram_clear_screen(0);
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	for (int i = 0; i < RACKETSIZE; i++){
     f86:	00 e0       	ldi	r16, 0x00	; 0
     f88:	10 e0       	ldi	r17, 0x00	; 0
     f8a:	a8 01       	movw	r20, r16
     f8c:	4e 0d       	add	r20, r14
     f8e:	5f 1d       	adc	r21, r15
		oled_sram_write_bit(0, 0, leftRacketPos + i);
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
     f9c:	a8 01       	movw	r20, r16
     f9e:	4c 0d       	add	r20, r12
     fa0:	5d 1d       	adc	r21, r13
		oled_sram_write_bit(0,126, rightRacketPos + i);
     fa2:	6e e7       	ldi	r22, 0x7E	; 126
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
     fae:	0f 5f       	subi	r16, 0xFF	; 255
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	00 31       	cpi	r16, 0x10	; 16
     fb4:	11 05       	cpc	r17, r1
     fb6:	49 f7       	brne	.-46     	; 0xf8a <updateScreen+0x38>
		oled_sram_write_bit(0, 0, leftRacketPos + i);
		oled_sram_write_bit(0,126, rightRacketPos + i);
	}
	oled_sram_write_bit(0, ball.posX, ball.posY);
     fb8:	6b 81       	ldd	r22, Y+3	; 0x03
     fba:	7c 81       	ldd	r23, Y+4	; 0x04
     fbc:	8d 81       	ldd	r24, Y+5	; 0x05
     fbe:	9e 81       	ldd	r25, Y+6	; 0x06
     fc0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__fixsfsi>
     fc4:	29 81       	ldd	r18, Y+1	; 0x01
     fc6:	3a 81       	ldd	r19, Y+2	; 0x02
     fc8:	ab 01       	movw	r20, r22
     fca:	b9 01       	movw	r22, r18
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
	oled_sram_flush(0);
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
}
     fdc:	2a 96       	adiw	r28, 0x0a	; 10
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	cd bf       	out	0x3d, r28	; 61
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	1f 91       	pop	r17
     fee:	0f 91       	pop	r16
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	08 95       	ret

00000ffa <playRound>:
	else ball->posY = tempPosY;
	if(ball->dir == RIGHT) ball->dir++;
	else ball->dir--;
}

int playRound(){
     ffa:	6f 92       	push	r6
     ffc:	7f 92       	push	r7
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	2a 97       	sbiw	r28, 0x0a	; 10
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
	Ball ball;
	Slider slide;
	ballInit(&ball);
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <ballInit>
				return LEFT;
			}
		}
		else if (ball.posX == 0){
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
    102e:	66 24       	eor	r6, r6
    1030:	63 94       	inc	r6
    1032:	71 2c       	mov	r7, r1
	Ball ball;
	Slider slide;
	ballInit(&ball);
	
	while(1){
		slide = getSliderPosition();
    1034:	0e 94 f7 02 	call	0x5ee	; 0x5ee <getSliderPosition>
    1038:	4b 01       	movw	r8, r22
    103a:	5c 01       	movw	r10, r24
		updateScreen:	

		if (ball.posX >= 127){
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	9a 81       	ldd	r25, Y+2	; 0x02
    1040:	8f 37       	cpi	r24, 0x7F	; 127
    1042:	91 05       	cpc	r25, r1
    1044:	7c f0       	brlt	.+30     	; 0x1064 <playRound+0x6a>
			if (racketHit(&ball, slide.right) ){
    1046:	b5 01       	movw	r22, r10
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <racketHit>
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	91 f1       	breq	.+100    	; 0x10b8 <playRound+0xbe>
				ball.dir = LEFT;
    1054:	1a 86       	std	Y+10, r1	; 0x0a
    1056:	19 86       	std	Y+9, r1	; 0x09
				updateBallAngle(&ball, slide.right);
    1058:	b5 01       	movw	r22, r10
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	0e 94 35 07 	call	0xe6a	; 0xe6a <updateBallAngle>
    1062:	10 c0       	rjmp	.+32     	; 0x1084 <playRound+0x8a>
			}
			else{
				return LEFT;
			}
		}
		else if (ball.posX == 0){
    1064:	89 2b       	or	r24, r25
    1066:	71 f4       	brne	.+28     	; 0x1084 <playRound+0x8a>
			if (racketHit(&ball, slide.left) ){
    1068:	b4 01       	movw	r22, r8
    106a:	ce 01       	movw	r24, r28
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <racketHit>
    1072:	89 2b       	or	r24, r25
    1074:	f9 f0       	breq	.+62     	; 0x10b4 <playRound+0xba>
				ball.dir = RIGHT;
    1076:	7a 86       	std	Y+10, r7	; 0x0a
    1078:	69 86       	std	Y+9, r6	; 0x09
				updateBallAngle(&ball, slide.left);
    107a:	b4 01       	movw	r22, r8
    107c:	ce 01       	movw	r24, r28
    107e:	01 96       	adiw	r24, 0x01	; 1
    1080:	0e 94 35 07 	call	0xe6a	; 0xe6a <updateBallAngle>
			}
			else {
				return RIGHT;
			}
		}
		updateScreen(ball, slide.left, slide.right);
    1084:	65 01       	movw	r12, r10
    1086:	74 01       	movw	r14, r8
    1088:	09 81       	ldd	r16, Y+1	; 0x01
    108a:	1a 81       	ldd	r17, Y+2	; 0x02
    108c:	2b 81       	ldd	r18, Y+3	; 0x03
    108e:	3c 81       	ldd	r19, Y+4	; 0x04
    1090:	4d 81       	ldd	r20, Y+5	; 0x05
    1092:	5e 81       	ldd	r21, Y+6	; 0x06
    1094:	6f 81       	ldd	r22, Y+7	; 0x07
    1096:	78 85       	ldd	r23, Y+8	; 0x08
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	9a 85       	ldd	r25, Y+10	; 0x0a
    109c:	0e 94 a9 07 	call	0xf52	; 0xf52 <updateScreen>
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	92 e0       	ldi	r25, 0x02	; 2
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	80 40       	sbci	r24, 0x00	; 0
    10aa:	90 40       	sbci	r25, 0x00	; 0
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <playRound+0xac>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <playRound+0xb6>
    10b0:	00 c0       	rjmp	.+0      	; 0x10b2 <playRound+0xb8>
    10b2:	c0 cf       	rjmp	.-128    	; 0x1034 <playRound+0x3a>
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
				updateBallAngle(&ball, slide.left);
			}
			else {
				return RIGHT;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		updateScreen(ball, slide.left, slide.right);
		_delay_ms(200);
	}
}
    10b8:	2a 96       	adiw	r28, 0x0a	; 10
    10ba:	0f b6       	in	r0, 0x3f	; 63
    10bc:	f8 94       	cli
    10be:	de bf       	out	0x3e, r29	; 62
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	9f 90       	pop	r9
    10da:	8f 90       	pop	r8
    10dc:	7f 90       	pop	r7
    10de:	6f 90       	pop	r6
    10e0:	08 95       	ret

000010e2 <playPong>:

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	while(1){
		point = playRound();
    10ea:	0e 94 fd 07 	call	0xffa	; 0xffa <playRound>
    10ee:	fd cf       	rjmp	.-6      	; 0x10ea <playPong+0x8>

000010f0 <detectCollision>:
#include <util/delay.h>
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
    10f0:	fc 01       	movw	r30, r24
	while(s){
    10f2:	00 97       	sbiw	r24, 0x00	; 0
    10f4:	81 f0       	breq	.+32     	; 0x1116 <detectCollision+0x26>
		if (s->x == x && s->y == y){
    10f6:	84 81       	ldd	r24, Z+4	; 0x04
    10f8:	95 81       	ldd	r25, Z+5	; 0x05
    10fa:	86 17       	cp	r24, r22
    10fc:	97 07       	cpc	r25, r23
    10fe:	29 f4       	brne	.+10     	; 0x110a <detectCollision+0x1a>
    1100:	86 81       	ldd	r24, Z+6	; 0x06
    1102:	97 81       	ldd	r25, Z+7	; 0x07
    1104:	84 17       	cp	r24, r20
    1106:	95 07       	cpc	r25, r21
    1108:	49 f0       	breq	.+18     	; 0x111c <detectCollision+0x2c>
			return 1;
		}
		s = s->next;
    110a:	01 90       	ld	r0, Z+
    110c:	f0 81       	ld	r31, Z
    110e:	e0 2d       	mov	r30, r0
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
	while(s){
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	89 f7       	brne	.-30     	; 0x10f6 <detectCollision+0x6>
    1114:	06 c0       	rjmp	.+12     	; 0x1122 <detectCollision+0x32>
		if (s->x == x && s->y == y){
			return 1;
		}
		s = s->next;
	}
	return 0;
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	08 95       	ret


int detectCollision(segment *s, int x, int y){
	while(s){
		if (s->x == x && s->y == y){
			return 1;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	08 95       	ret
		}
		s = s->next;
	}
	return 0;
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	90 e0       	ldi	r25, 0x00	; 0
}
    1126:	08 95       	ret

00001128 <placeFood>:

void placeFood(int food[], segment *first){
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
    1132:	8b 01       	movw	r16, r22
	do{
		food[0] = rand() % 64;
    1134:	0e 94 11 10 	call	0x2022	; 0x2022 <rand>
    1138:	8f 73       	andi	r24, 0x3F	; 63
    113a:	90 78       	andi	r25, 0x80	; 128
    113c:	99 23       	and	r25, r25
    113e:	24 f4       	brge	.+8      	; 0x1148 <placeFood+0x20>
    1140:	01 97       	sbiw	r24, 0x01	; 1
    1142:	80 6c       	ori	r24, 0xC0	; 192
    1144:	9f 6f       	ori	r25, 0xFF	; 255
    1146:	01 96       	adiw	r24, 0x01	; 1
    1148:	99 83       	std	Y+1, r25	; 0x01
    114a:	88 83       	st	Y, r24
		food[1] = rand() % 32;
    114c:	0e 94 11 10 	call	0x2022	; 0x2022 <rand>
    1150:	ac 01       	movw	r20, r24
    1152:	4f 71       	andi	r20, 0x1F	; 31
    1154:	50 78       	andi	r21, 0x80	; 128
    1156:	55 23       	and	r21, r21
    1158:	34 f4       	brge	.+12     	; 0x1166 <placeFood+0x3e>
    115a:	41 50       	subi	r20, 0x01	; 1
    115c:	51 09       	sbc	r21, r1
    115e:	40 6e       	ori	r20, 0xE0	; 224
    1160:	5f 6f       	ori	r21, 0xFF	; 255
    1162:	4f 5f       	subi	r20, 0xFF	; 255
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	5b 83       	std	Y+3, r21	; 0x03
    1168:	4a 83       	std	Y+2, r20	; 0x02
	} while(detectCollision(first, food[0], food[1]));
    116a:	68 81       	ld	r22, Y
    116c:	79 81       	ldd	r23, Y+1	; 0x01
    116e:	c8 01       	movw	r24, r16
    1170:	0e 94 78 08 	call	0x10f0	; 0x10f0 <detectCollision>
    1174:	89 2b       	or	r24, r25
    1176:	f1 f6       	brne	.-68     	; 0x1134 <placeFood+0xc>
}
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	08 95       	ret

00001182 <drawBoard>:

void drawBoard(segment *s, int food[]){
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	8c 01       	movw	r16, r24
    1194:	7b 01       	movw	r14, r22
	oled_sram_clear_screen(0);
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	while(s){
    119e:	01 15       	cp	r16, r1
    11a0:	11 05       	cpc	r17, r1
    11a2:	09 f4       	brne	.+2      	; 0x11a6 <drawBoard+0x24>
    11a4:	59 c0       	rjmp	.+178    	; 0x1258 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    11a6:	c1 2c       	mov	r12, r1
    11a8:	d1 2c       	mov	r13, r1
    11aa:	2a c0       	rjmp	.+84     	; 0x1200 <drawBoard+0x7e>
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
    11ac:	f8 01       	movw	r30, r16
    11ae:	46 81       	ldd	r20, Z+6	; 0x06
    11b0:	57 81       	ldd	r21, Z+7	; 0x07
    11b2:	44 0f       	add	r20, r20
    11b4:	55 1f       	adc	r21, r21
    11b6:	64 81       	ldd	r22, Z+4	; 0x04
    11b8:	75 81       	ldd	r23, Z+5	; 0x05
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	6c 0f       	add	r22, r28
    11c0:	7d 1f       	adc	r23, r29
    11c2:	8c 2d       	mov	r24, r12
    11c4:	9d 2d       	mov	r25, r13
    11c6:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
    11ca:	f8 01       	movw	r30, r16
    11cc:	46 81       	ldd	r20, Z+6	; 0x06
    11ce:	57 81       	ldd	r21, Z+7	; 0x07
    11d0:	44 0f       	add	r20, r20
    11d2:	55 1f       	adc	r21, r21
    11d4:	4f 5f       	subi	r20, 0xFF	; 255
    11d6:	5f 4f       	sbci	r21, 0xFF	; 255
    11d8:	64 81       	ldd	r22, Z+4	; 0x04
    11da:	75 81       	ldd	r23, Z+5	; 0x05
    11dc:	66 0f       	add	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	6c 0f       	add	r22, r28
    11e2:	7d 1f       	adc	r23, r29
    11e4:	8c 2d       	mov	r24, r12
    11e6:	9d 2d       	mov	r25, r13
    11e8:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
    11ec:	21 96       	adiw	r28, 0x01	; 1
    11ee:	c2 30       	cpi	r28, 0x02	; 2
    11f0:	d1 05       	cpc	r29, r1
    11f2:	e1 f6       	brne	.-72     	; 0x11ac <drawBoard+0x2a>
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
    11f4:	f8 01       	movw	r30, r16
    11f6:	00 81       	ld	r16, Z
    11f8:	11 81       	ldd	r17, Z+1	; 0x01
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
    11fa:	01 15       	cp	r16, r1
    11fc:	11 05       	cpc	r17, r1
    11fe:	61 f1       	breq	.+88     	; 0x1258 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1200:	cc 2d       	mov	r28, r12
    1202:	dd 2d       	mov	r29, r13
    1204:	d3 cf       	rjmp	.-90     	; 0x11ac <drawBoard+0x2a>
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
    1206:	f7 01       	movw	r30, r14
    1208:	42 81       	ldd	r20, Z+2	; 0x02
    120a:	53 81       	ldd	r21, Z+3	; 0x03
    120c:	44 0f       	add	r20, r20
    120e:	55 1f       	adc	r21, r21
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	66 0f       	add	r22, r22
    1216:	77 1f       	adc	r23, r23
    1218:	6c 0f       	add	r22, r28
    121a:	7d 1f       	adc	r23, r29
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
    1224:	f7 01       	movw	r30, r14
    1226:	42 81       	ldd	r20, Z+2	; 0x02
    1228:	53 81       	ldd	r21, Z+3	; 0x03
    122a:	44 0f       	add	r20, r20
    122c:	55 1f       	adc	r21, r21
    122e:	4f 5f       	subi	r20, 0xFF	; 255
    1230:	5f 4f       	sbci	r21, 0xFF	; 255
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	66 0f       	add	r22, r22
    1238:	77 1f       	adc	r23, r23
    123a:	6c 0f       	add	r22, r28
    123c:	7d 1f       	adc	r23, r29
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	0e 94 65 06 	call	0xcca	; 0xcca <oled_sram_write_bit>
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
    1246:	21 96       	adiw	r28, 0x01	; 1
    1248:	c2 30       	cpi	r28, 0x02	; 2
    124a:	d1 05       	cpc	r29, r1
    124c:	e1 f6       	brne	.-72     	; 0x1206 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
    1256:	03 c0       	rjmp	.+6      	; 0x125e <drawBoard+0xdc>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1258:	c0 e0       	ldi	r28, 0x00	; 0
    125a:	d0 e0       	ldi	r29, 0x00	; 0
    125c:	d4 cf       	rjmp	.-88     	; 0x1206 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	08 95       	ret

00001270 <playSnake>:

void playSnake(){
    1270:	af 92       	push	r10
    1272:	bf 92       	push	r11
    1274:	cf 92       	push	r12
    1276:	df 92       	push	r13
    1278:	ef 92       	push	r14
    127a:	ff 92       	push	r15
    127c:	0f 93       	push	r16
    127e:	1f 93       	push	r17
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
    1284:	00 d0       	rcall	.+0      	; 0x1286 <playSnake+0x16>
    1286:	00 d0       	rcall	.+0      	; 0x1288 <playSnake+0x18>
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    128c:	88 e0       	ldi	r24, 0x08	; 8
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <malloc>
    1294:	6c 01       	movw	r12, r24
	first->x = 32;
    1296:	80 e2       	ldi	r24, 0x20	; 32
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	f6 01       	movw	r30, r12
    129c:	95 83       	std	Z+5, r25	; 0x05
    129e:	84 83       	std	Z+4, r24	; 0x04
	first->y = 16;
    12a0:	80 e1       	ldi	r24, 0x10	; 16
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	97 83       	std	Z+7, r25	; 0x07
    12a6:	86 83       	std	Z+6, r24	; 0x06
	segment *last = first;
	first->next = 0;
    12a8:	11 82       	std	Z+1, r1	; 0x01
    12aa:	10 82       	st	Z, r1
	first->prev = 0;
    12ac:	13 82       	std	Z+3, r1	; 0x03
    12ae:	12 82       	std	Z+2, r1	; 0x02
	oled_sram_flush(0);
}

void playSnake(){
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    12b0:	86 01       	movw	r16, r12
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
    12b2:	68 94       	set
    12b4:	aa 24       	eor	r10, r10
    12b6:	a2 f8       	bld	r10, 2
    12b8:	b1 2c       	mov	r11, r1
	for(int i = 0; i < 4; i++){
		segment *temp = (segment*)malloc(sizeof(segment));
    12ba:	88 e0       	ldi	r24, 0x08	; 8
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <malloc>
    12c2:	7c 01       	movw	r14, r24
		temp->x = first->x + 1;
    12c4:	f8 01       	movw	r30, r16
    12c6:	84 81       	ldd	r24, Z+4	; 0x04
    12c8:	95 81       	ldd	r25, Z+5	; 0x05
    12ca:	01 96       	adiw	r24, 0x01	; 1
    12cc:	f7 01       	movw	r30, r14
    12ce:	95 83       	std	Z+5, r25	; 0x05
    12d0:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    12d2:	f8 01       	movw	r30, r16
    12d4:	86 81       	ldd	r24, Z+6	; 0x06
    12d6:	97 81       	ldd	r25, Z+7	; 0x07
    12d8:	f7 01       	movw	r30, r14
    12da:	97 83       	std	Z+7, r25	; 0x07
    12dc:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    12de:	11 83       	std	Z+1, r17	; 0x01
    12e0:	00 83       	st	Z, r16
		temp->prev = 0;
    12e2:	13 82       	std	Z+3, r1	; 0x03
    12e4:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    12e6:	f8 01       	movw	r30, r16
    12e8:	f3 82       	std	Z+3, r15	; 0x03
    12ea:	e2 82       	std	Z+2, r14	; 0x02
    12ec:	f1 e0       	ldi	r31, 0x01	; 1
    12ee:	af 1a       	sub	r10, r31
    12f0:	b1 08       	sbc	r11, r1
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
	for(int i = 0; i < 4; i++){
    12f2:	a1 14       	cp	r10, r1
    12f4:	b1 04       	cpc	r11, r1
    12f6:	11 f0       	breq	.+4      	; 0x12fc <playSnake+0x8c>
		segment *temp = (segment*)malloc(sizeof(segment));
    12f8:	87 01       	movw	r16, r14
    12fa:	df cf       	rjmp	.-66     	; 0x12ba <playSnake+0x4a>
	}


	//initalize food
	int food[2];
	placeFood(food, first);
    12fc:	b7 01       	movw	r22, r14
    12fe:	ce 01       	movw	r24, r28
    1300:	01 96       	adiw	r24, 0x01	; 1
    1302:	0e 94 94 08 	call	0x1128	; 0x1128 <placeFood>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	//initalize food
	int food[2];
	placeFood(food, first);

	//initialize direction of snake
	direction S = RIGHT;
    130e:	aa 24       	eor	r10, r10
    1310:	a3 94       	inc	r10
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    1312:	70 c0       	rjmp	.+224    	; 0x13f4 <playSnake+0x184>
		Joystick j = getJoystickPosition();
    1314:	0e 94 77 03 	call	0x6ee	; 0x6ee <getJoystickPosition>
    1318:	b8 2e       	mov	r11, r24
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    131a:	24 e0       	ldi	r18, 0x04	; 4
    131c:	82 13       	cpse	r24, r18
    131e:	01 c0       	rjmp	.+2      	; 0x1322 <playSnake+0xb2>
    1320:	ba 2c       	mov	r11, r10
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    1322:	88 e0       	ldi	r24, 0x08	; 8
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <malloc>
    132a:	8c 01       	movw	r16, r24
		
		temp->x = first->x;
    132c:	f7 01       	movw	r30, r14
    132e:	24 81       	ldd	r18, Z+4	; 0x04
    1330:	35 81       	ldd	r19, Z+5	; 0x05
    1332:	fc 01       	movw	r30, r24
    1334:	35 83       	std	Z+5, r19	; 0x05
    1336:	24 83       	std	Z+4, r18	; 0x04
		temp->y = first->y;
    1338:	f7 01       	movw	r30, r14
    133a:	26 81       	ldd	r18, Z+6	; 0x06
    133c:	37 81       	ldd	r19, Z+7	; 0x07
    133e:	fc 01       	movw	r30, r24
    1340:	37 83       	std	Z+7, r19	; 0x07
    1342:	26 83       	std	Z+6, r18	; 0x06
		temp->next = first;
    1344:	f1 82       	std	Z+1, r15	; 0x01
    1346:	e0 82       	st	Z, r14
		temp->prev = 0;
    1348:	13 82       	std	Z+3, r1	; 0x03
    134a:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    134c:	f7 01       	movw	r30, r14
    134e:	93 83       	std	Z+3, r25	; 0x03
    1350:	82 83       	std	Z+2, r24	; 0x02

		//Find direction of snake movement
		switch (S){
    1352:	f1 e0       	ldi	r31, 0x01	; 1
    1354:	bf 16       	cp	r11, r31
    1356:	f1 f0       	breq	.+60     	; 0x1394 <playSnake+0x124>
    1358:	bf 16       	cp	r11, r31
    135a:	a8 f0       	brcs	.+42     	; 0x1386 <playSnake+0x116>
    135c:	22 e0       	ldi	r18, 0x02	; 2
    135e:	b2 16       	cp	r11, r18
    1360:	21 f0       	breq	.+8      	; 0x136a <playSnake+0xfa>
    1362:	83 e0       	ldi	r24, 0x03	; 3
    1364:	b8 16       	cp	r11, r24
    1366:	41 f0       	breq	.+16     	; 0x1378 <playSnake+0x108>
    1368:	1b c0       	rjmp	.+54     	; 0x13a0 <playSnake+0x130>
			case UP:
			temp->y--;
    136a:	fc 01       	movw	r30, r24
    136c:	86 81       	ldd	r24, Z+6	; 0x06
    136e:	97 81       	ldd	r25, Z+7	; 0x07
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	97 83       	std	Z+7, r25	; 0x07
    1374:	86 83       	std	Z+6, r24	; 0x06
			break;
    1376:	14 c0       	rjmp	.+40     	; 0x13a0 <playSnake+0x130>
			case DOWN:
			temp->y++;
    1378:	f8 01       	movw	r30, r16
    137a:	86 81       	ldd	r24, Z+6	; 0x06
    137c:	97 81       	ldd	r25, Z+7	; 0x07
    137e:	01 96       	adiw	r24, 0x01	; 1
    1380:	97 83       	std	Z+7, r25	; 0x07
    1382:	86 83       	std	Z+6, r24	; 0x06
			break;
    1384:	0d c0       	rjmp	.+26     	; 0x13a0 <playSnake+0x130>
			case LEFT:
			temp->x--;
    1386:	fc 01       	movw	r30, r24
    1388:	84 81       	ldd	r24, Z+4	; 0x04
    138a:	95 81       	ldd	r25, Z+5	; 0x05
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	95 83       	std	Z+5, r25	; 0x05
    1390:	84 83       	std	Z+4, r24	; 0x04
			break;
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <playSnake+0x130>
			case RIGHT:
			temp->x++;
    1394:	fc 01       	movw	r30, r24
    1396:	84 81       	ldd	r24, Z+4	; 0x04
    1398:	95 81       	ldd	r25, Z+5	; 0x05
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	95 83       	std	Z+5, r25	; 0x05
    139e:	84 83       	std	Z+4, r24	; 0x04
			break;
		}

		first = temp;
		
		if(detectCollision(first, food[0], food[1])){//hit food?
    13a0:	4b 81       	ldd	r20, Y+3	; 0x03
    13a2:	5c 81       	ldd	r21, Y+4	; 0x04
    13a4:	69 81       	ldd	r22, Y+1	; 0x01
    13a6:	7a 81       	ldd	r23, Y+2	; 0x02
    13a8:	c8 01       	movw	r24, r16
    13aa:	0e 94 78 08 	call	0x10f0	; 0x10f0 <detectCollision>
    13ae:	89 2b       	or	r24, r25
    13b0:	31 f0       	breq	.+12     	; 0x13be <playSnake+0x14e>
			placeFood(food, first);
    13b2:	b8 01       	movw	r22, r16
    13b4:	ce 01       	movw	r24, r28
    13b6:	01 96       	adiw	r24, 0x01	; 1
    13b8:	0e 94 94 08 	call	0x1128	; 0x1128 <placeFood>
    13bc:	0a c0       	rjmp	.+20     	; 0x13d2 <playSnake+0x162>
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    13be:	f6 01       	movw	r30, r12
    13c0:	e2 80       	ldd	r14, Z+2	; 0x02
    13c2:	f3 80       	ldd	r15, Z+3	; 0x03
			last->next = 0;
    13c4:	f7 01       	movw	r30, r14
    13c6:	11 82       	std	Z+1, r1	; 0x01
    13c8:	10 82       	st	Z, r1
			free(temp);
    13ca:	c6 01       	movw	r24, r12
    13cc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <free>
			placeFood(food, first);
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    13d0:	67 01       	movw	r12, r14
			last->next = 0;
			free(temp);
		}
		drawBoard(first, food);
    13d2:	be 01       	movw	r22, r28
    13d4:	6f 5f       	subi	r22, 0xFF	; 255
    13d6:	7f 4f       	sbci	r23, 0xFF	; 255
    13d8:	c8 01       	movw	r24, r16
    13da:	0e 94 c1 08 	call	0x1182	; 0x1182 <drawBoard>
    13de:	ff ef       	ldi	r31, 0xFF	; 255
    13e0:	2f e7       	ldi	r18, 0x7F	; 127
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	f1 50       	subi	r31, 0x01	; 1
    13e6:	20 40       	sbci	r18, 0x00	; 0
    13e8:	80 40       	sbci	r24, 0x00	; 0
    13ea:	e1 f7       	brne	.-8      	; 0x13e4 <playSnake+0x174>
    13ec:	00 c0       	rjmp	.+0      	; 0x13ee <playSnake+0x17e>
    13ee:	00 c0       	rjmp	.+0      	; 0x13f0 <playSnake+0x180>
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
		Joystick j = getJoystickPosition();
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    13f0:	ab 2c       	mov	r10, r11
			break;
			default:
			break;
		}

		first = temp;
    13f2:	78 01       	movw	r14, r16

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    13f4:	f7 01       	movw	r30, r14
    13f6:	46 81       	ldd	r20, Z+6	; 0x06
    13f8:	57 81       	ldd	r21, Z+7	; 0x07
    13fa:	64 81       	ldd	r22, Z+4	; 0x04
    13fc:	75 81       	ldd	r23, Z+5	; 0x05
    13fe:	80 81       	ld	r24, Z
    1400:	91 81       	ldd	r25, Z+1	; 0x01
    1402:	0e 94 78 08 	call	0x10f0	; 0x10f0 <detectCollision>
    1406:	89 2b       	or	r24, r25
    1408:	09 f4       	brne	.+2      	; 0x140c <playSnake+0x19c>
    140a:	84 cf       	rjmp	.-248    	; 0x1314 <playSnake+0xa4>
		}
		drawBoard(first, food);
		_delay_ms(100);
	}

    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	bf 90       	pop	r11
    1426:	af 90       	pop	r10
    1428:	08 95       	ret

0000142a <make_screen>:
	}
	
	
}

make_screen(menu* m){
    142a:	2f 92       	push	r2
    142c:	3f 92       	push	r3
    142e:	4f 92       	push	r4
    1430:	5f 92       	push	r5
    1432:	6f 92       	push	r6
    1434:	7f 92       	push	r7
    1436:	8f 92       	push	r8
    1438:	9f 92       	push	r9
    143a:	af 92       	push	r10
    143c:	bf 92       	push	r11
    143e:	cf 92       	push	r12
    1440:	df 92       	push	r13
    1442:	ef 92       	push	r14
    1444:	ff 92       	push	r15
    1446:	0f 93       	push	r16
    1448:	1f 93       	push	r17
    144a:	cf 93       	push	r28
    144c:	df 93       	push	r29
    144e:	00 d0       	rcall	.+0      	; 0x1450 <make_screen+0x26>
    1450:	1f 92       	push	r1
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	0e 94 51 06 	call	0xca2	; 0xca2 <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
    1460:	d7 01       	movw	r26, r14
    1462:	6d 91       	ld	r22, X+
    1464:	7c 91       	ld	r23, X
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 b1 05 	call	0xb62	; 0xb62 <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
    1472:	f7 01       	movw	r30, r14
    1474:	84 89       	ldd	r24, Z+20	; 0x14
    1476:	95 89       	ldd	r25, Z+21	; 0x15
    1478:	18 16       	cp	r1, r24
    147a:	19 06       	cpc	r1, r25
    147c:	0c f0       	brlt	.+2      	; 0x1480 <make_screen+0x56>
    147e:	6d c0       	rjmp	.+218    	; 0x155a <make_screen+0x130>
    1480:	c7 01       	movw	r24, r14
    1482:	04 96       	adiw	r24, 0x04	; 4
    1484:	9b 83       	std	Y+3, r25	; 0x03
    1486:	8a 83       	std	Y+2, r24	; 0x02
    1488:	cc 24       	eor	r12, r12
    148a:	c3 94       	inc	r12
    148c:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    148e:	68 94       	set
    1490:	22 24       	eor	r2, r2
    1492:	23 f8       	bld	r2, 3
    1494:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
    1496:	aa 81       	ldd	r26, Y+2	; 0x02
    1498:	bb 81       	ldd	r27, Y+3	; 0x03
    149a:	6d 90       	ld	r6, X+
    149c:	7d 90       	ld	r7, X+
    149e:	bb 83       	std	Y+3, r27	; 0x03
    14a0:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
    14a2:	d3 01       	movw	r26, r6
    14a4:	ed 91       	ld	r30, X+
    14a6:	fc 91       	ld	r31, X
    14a8:	80 81       	ld	r24, Z
    14aa:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
    14ac:	f7 01       	movw	r30, r14
    14ae:	40 ad       	ldd	r20, Z+56	; 0x38
    14b0:	51 ad       	ldd	r21, Z+57	; 0x39
    14b2:	c6 01       	movw	r24, r12
    14b4:	01 97       	sbiw	r24, 0x01	; 1
    14b6:	48 17       	cp	r20, r24
    14b8:	59 07       	cpc	r21, r25
    14ba:	59 f4       	brne	.+22     	; 0x14d2 <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
    14bc:	4f 5f       	subi	r20, 0xFF	; 255
    14be:	5f 4f       	sbci	r21, 0xFF	; 255
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	63 e7       	ldi	r22, 0x73	; 115
    14c6:	71 e0       	ldi	r23, 0x01	; 1
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	a6 01       	movw	r20, r12
    14d8:	61 e3       	ldi	r22, 0x31	; 49
    14da:	71 e0       	ldi	r23, 0x01	; 1
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
		}
		while(c != '\0'){
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	88 23       	and	r24, r24
    14e8:	59 f1       	breq	.+86     	; 0x1540 <make_screen+0x116>
    14ea:	68 94       	set
    14ec:	aa 24       	eor	r10, r10
    14ee:	a3 f8       	bld	r10, 3
    14f0:	b1 2c       	mov	r11, r1
    14f2:	88 24       	eor	r8, r8
    14f4:	83 94       	inc	r8
    14f6:	91 2c       	mov	r9, r1
    14f8:	1e c0       	rjmp	.+60     	; 0x1536 <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    14fa:	24 2d       	mov	r18, r4
    14fc:	35 2d       	mov	r19, r5
    14fe:	a6 01       	movw	r20, r12
    1500:	be 01       	movw	r22, r28
    1502:	6f 5f       	subi	r22, 0xFF	; 255
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
    150e:	01 50       	subi	r16, 0x01	; 1
    1510:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    1512:	01 15       	cp	r16, r1
    1514:	11 05       	cpc	r17, r1
    1516:	89 f7       	brne	.-30     	; 0x14fa <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
    1518:	d3 01       	movw	r26, r6
    151a:	ed 91       	ld	r30, X+
    151c:	fc 91       	ld	r31, X
    151e:	e8 0d       	add	r30, r8
    1520:	f9 1d       	adc	r31, r9
    1522:	80 81       	ld	r24, Z
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	bf ef       	ldi	r27, 0xFF	; 255
    1528:	8b 1a       	sub	r8, r27
    152a:	9b 0a       	sbc	r9, r27
    152c:	e8 e0       	ldi	r30, 0x08	; 8
    152e:	ae 0e       	add	r10, r30
    1530:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
    1532:	88 23       	and	r24, r24
    1534:	29 f0       	breq	.+10     	; 0x1540 <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1536:	4a 2c       	mov	r4, r10
    1538:	5b 2c       	mov	r5, r11
    153a:	02 2d       	mov	r16, r2
    153c:	13 2d       	mov	r17, r3
    153e:	dd cf       	rjmp	.-70     	; 0x14fa <make_screen+0xd0>
make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
    1540:	c6 01       	movw	r24, r12
    1542:	ff ef       	ldi	r31, 0xFF	; 255
    1544:	cf 1a       	sub	r12, r31
    1546:	df 0a       	sbc	r13, r31
    1548:	d7 01       	movw	r26, r14
    154a:	54 96       	adiw	r26, 0x14	; 20
    154c:	2d 91       	ld	r18, X+
    154e:	3c 91       	ld	r19, X
    1550:	55 97       	sbiw	r26, 0x15	; 21
    1552:	82 17       	cp	r24, r18
    1554:	93 07       	cpc	r25, r19
    1556:	0c f4       	brge	.+2      	; 0x155a <make_screen+0x130>
    1558:	9e cf       	rjmp	.-196    	; 0x1496 <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    155a:	f7 01       	movw	r30, r14
    155c:	86 a9       	ldd	r24, Z+54	; 0x36
    155e:	97 a9       	ldd	r25, Z+55	; 0x37
    1560:	18 16       	cp	r1, r24
    1562:	19 06       	cpc	r1, r25
    1564:	0c f0       	brlt	.+2      	; 0x1568 <make_screen+0x13e>
    1566:	6f c0       	rjmp	.+222    	; 0x1646 <make_screen+0x21c>
    1568:	37 01       	movw	r6, r14
    156a:	f6 e1       	ldi	r31, 0x16	; 22
    156c:	6f 0e       	add	r6, r31
    156e:	71 1c       	adc	r7, r1
    1570:	c1 2c       	mov	r12, r1
    1572:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    1574:	68 94       	set
    1576:	44 24       	eor	r4, r4
    1578:	43 f8       	bld	r4, 3
    157a:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
    157c:	d3 01       	movw	r26, r6
    157e:	8d 90       	ld	r8, X+
    1580:	9d 90       	ld	r9, X+
    1582:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
    1584:	f4 01       	movw	r30, r8
    1586:	80 81       	ld	r24, Z
    1588:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
    158a:	d7 01       	movw	r26, r14
    158c:	d8 96       	adiw	r26, 0x38	; 56
    158e:	8d 91       	ld	r24, X+
    1590:	9c 91       	ld	r25, X
    1592:	d9 97       	sbiw	r26, 0x39	; 57
    1594:	54 96       	adiw	r26, 0x14	; 20
    1596:	4d 91       	ld	r20, X+
    1598:	5c 91       	ld	r21, X
    159a:	55 97       	sbiw	r26, 0x15	; 21
    159c:	4c 0d       	add	r20, r12
    159e:	5d 1d       	adc	r21, r13
    15a0:	84 17       	cp	r24, r20
    15a2:	95 07       	cpc	r25, r21
    15a4:	61 f4       	brne	.+24     	; 0x15be <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
    15a6:	ac 01       	movw	r20, r24
    15a8:	4f 5f       	subi	r20, 0xFF	; 255
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	63 e7       	ldi	r22, 0x73	; 115
    15b2:	71 e0       	ldi	r23, 0x01	; 1
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
    15bc:	0a c0       	rjmp	.+20     	; 0x15d2 <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
    15be:	4f 5f       	subi	r20, 0xFF	; 255
    15c0:	5f 4f       	sbci	r21, 0xFF	; 255
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	61 e3       	ldi	r22, 0x31	; 49
    15c8:	71 e0       	ldi	r23, 0x01	; 1
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
		}
		while(c != '\0'){
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	88 23       	and	r24, r24
    15d6:	59 f1       	breq	.+86     	; 0x162e <make_screen+0x204>
    15d8:	bf ef       	ldi	r27, 0xFF	; 255
    15da:	8b 1a       	sub	r8, r27
    15dc:	9b 0a       	sbc	r9, r27
    15de:	68 94       	set
    15e0:	aa 24       	eor	r10, r10
    15e2:	a3 f8       	bld	r10, 3
    15e4:	b1 2c       	mov	r11, r1
    15e6:	1e c0       	rjmp	.+60     	; 0x1624 <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    15e8:	f7 01       	movw	r30, r14
    15ea:	44 89       	ldd	r20, Z+20	; 0x14
    15ec:	55 89       	ldd	r21, Z+21	; 0x15
    15ee:	4c 0d       	add	r20, r12
    15f0:	5d 1d       	adc	r21, r13
    15f2:	4f 5f       	subi	r20, 0xFF	; 255
    15f4:	5f 4f       	sbci	r21, 0xFF	; 255
    15f6:	22 2d       	mov	r18, r2
    15f8:	33 2d       	mov	r19, r3
    15fa:	be 01       	movw	r22, r28
    15fc:	6f 5f       	subi	r22, 0xFF	; 255
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 ff 05 	call	0xbfe	; 0xbfe <oled_sram_write_char>
    1608:	01 50       	subi	r16, 0x01	; 1
    160a:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    160c:	01 15       	cp	r16, r1
    160e:	11 05       	cpc	r17, r1
    1610:	59 f7       	brne	.-42     	; 0x15e8 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
    1612:	d4 01       	movw	r26, r8
    1614:	8d 91       	ld	r24, X+
    1616:	4d 01       	movw	r8, r26
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	b8 e0       	ldi	r27, 0x08	; 8
    161c:	ab 0e       	add	r10, r27
    161e:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
    1620:	88 23       	and	r24, r24
    1622:	29 f0       	breq	.+10     	; 0x162e <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    1624:	2a 2c       	mov	r2, r10
    1626:	3b 2c       	mov	r3, r11
    1628:	04 2d       	mov	r16, r4
    162a:	15 2d       	mov	r17, r5
    162c:	dd cf       	rjmp	.-70     	; 0x15e8 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    162e:	ef ef       	ldi	r30, 0xFF	; 255
    1630:	ce 1a       	sub	r12, r30
    1632:	de 0a       	sbc	r13, r30
    1634:	d7 01       	movw	r26, r14
    1636:	d6 96       	adiw	r26, 0x36	; 54
    1638:	8d 91       	ld	r24, X+
    163a:	9c 91       	ld	r25, X
    163c:	d7 97       	sbiw	r26, 0x37	; 55
    163e:	c8 16       	cp	r12, r24
    1640:	d9 06       	cpc	r13, r25
    1642:	0c f4       	brge	.+2      	; 0x1646 <make_screen+0x21c>
    1644:	9b cf       	rjmp	.-202    	; 0x157c <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 51 05 	call	0xaa2	; 0xaa2 <oled_sram_flush>
} 
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	0f 90       	pop	r0
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	1f 91       	pop	r17
    165a:	0f 91       	pop	r16
    165c:	ff 90       	pop	r15
    165e:	ef 90       	pop	r14
    1660:	df 90       	pop	r13
    1662:	cf 90       	pop	r12
    1664:	bf 90       	pop	r11
    1666:	af 90       	pop	r10
    1668:	9f 90       	pop	r9
    166a:	8f 90       	pop	r8
    166c:	7f 90       	pop	r7
    166e:	6f 90       	pop	r6
    1670:	5f 90       	pop	r5
    1672:	4f 90       	pop	r4
    1674:	3f 90       	pop	r3
    1676:	2f 90       	pop	r2
    1678:	08 95       	ret

0000167a <menuSystem>:
#include "../Game_files/draw.h"
#include "../Game_files/snake.h"
#include "../Game_files/pong.h"


void menuSystem(){
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	cd b7       	in	r28, 0x3d	; 61
    1680:	de b7       	in	r29, 0x3e	; 62
    1682:	c8 5e       	subi	r28, 0xE8	; 232
    1684:	d1 09       	sbc	r29, r1
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	f8 94       	cli
    168a:	de bf       	out	0x3e, r29	; 62
    168c:	0f be       	out	0x3f, r0	; 63
    168e:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 3};
    1690:	4a e3       	ldi	r20, 0x3A	; 58
    1692:	8e 01       	movw	r16, r28
    1694:	0f 5f       	subi	r16, 0xFF	; 255
    1696:	1f 4f       	sbci	r17, 0xFF	; 255
    1698:	d8 01       	movw	r26, r16
    169a:	e4 2f       	mov	r30, r20
    169c:	1d 92       	st	X+, r1
    169e:	ea 95       	dec	r30
    16a0:	e9 f7       	brne	.-6      	; 0x169c <menuSystem+0x22>
    16a2:	85 e7       	ldi	r24, 0x75	; 117
    16a4:	91 e0       	ldi	r25, 0x01	; 1
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	83 e0       	ldi	r24, 0x03	; 3
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9e 8b       	std	Y+22, r25	; 0x16
    16b0:	8d 8b       	std	Y+21, r24	; 0x15
		
	menu highscore = {.name = "Highscore", .parent = &mainMenu};
    16b2:	de 01       	movw	r26, r28
    16b4:	db 96       	adiw	r26, 0x3b	; 59
    16b6:	fd 01       	movw	r30, r26
    16b8:	24 2f       	mov	r18, r20
    16ba:	11 92       	st	Z+, r1
    16bc:	2a 95       	dec	r18
    16be:	e9 f7       	brne	.-6      	; 0x16ba <menuSystem+0x40>
    16c0:	2f e7       	ldi	r18, 0x7F	; 127
    16c2:	31 e0       	ldi	r19, 0x01	; 1
    16c4:	3c af       	std	Y+60, r19	; 0x3c
    16c6:	2b af       	std	Y+59, r18	; 0x3b
    16c8:	1e af       	std	Y+62, r17	; 0x3e
    16ca:	0d af       	std	Y+61, r16	; 0x3d
	mainMenu.submenues[1] = &highscore;
    16cc:	b8 87       	std	Y+8, r27	; 0x08
    16ce:	af 83       	std	Y+7, r26	; 0x07
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 3};
    16d0:	fe 01       	movw	r30, r28
    16d2:	eb 58       	subi	r30, 0x8B	; 139
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	df 01       	movw	r26, r30
    16d8:	24 2f       	mov	r18, r20
    16da:	1d 92       	st	X+, r1
    16dc:	2a 95       	dec	r18
    16de:	e9 f7       	brne	.-6      	; 0x16da <menuSystem+0x60>
    16e0:	29 e8       	ldi	r18, 0x89	; 137
    16e2:	31 e0       	ldi	r19, 0x01	; 1
    16e4:	31 83       	std	Z+1, r19	; 0x01
    16e6:	20 83       	st	Z, r18
    16e8:	13 83       	std	Z+3, r17	; 0x03
    16ea:	02 83       	std	Z+2, r16	; 0x02
    16ec:	97 ab       	std	Z+55, r25	; 0x37
    16ee:	86 ab       	std	Z+54, r24	; 0x36
	playGame.functions[0] = &play_draw;
    16f0:	8c ec       	ldi	r24, 0xCC	; 204
    16f2:	96 e0       	ldi	r25, 0x06	; 6
    16f4:	97 a3       	std	Z+39, r25	; 0x27
    16f6:	86 a3       	std	Z+38, r24	; 0x26
	playGame.functions[1] = &playSnake;
    16f8:	88 e3       	ldi	r24, 0x38	; 56
    16fa:	99 e0       	ldi	r25, 0x09	; 9
    16fc:	91 a7       	std	Z+41, r25	; 0x29
    16fe:	80 a7       	std	Z+40, r24	; 0x28
	playGame.functions[2] = &playPong;
    1700:	81 e7       	ldi	r24, 0x71	; 113
    1702:	98 e0       	ldi	r25, 0x08	; 8
    1704:	93 a7       	std	Z+43, r25	; 0x2b
    1706:	82 a7       	std	Z+42, r24	; 0x2a
	playGame.name_functions[0] = "Draw";
    1708:	83 e9       	ldi	r24, 0x93	; 147
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	97 8b       	std	Z+23, r25	; 0x17
    170e:	86 8b       	std	Z+22, r24	; 0x16
	playGame.name_functions[1] = "Snake";
    1710:	88 e9       	ldi	r24, 0x98	; 152
    1712:	91 e0       	ldi	r25, 0x01	; 1
    1714:	91 8f       	std	Z+25, r25	; 0x19
    1716:	80 8f       	std	Z+24, r24	; 0x18
	playGame.name_functions[2] = "Pong";
    1718:	8e e9       	ldi	r24, 0x9E	; 158
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	93 8f       	std	Z+27, r25	; 0x1b
    171e:	82 8f       	std	Z+26, r24	; 0x1a
	mainMenu.submenues[0] = &playGame;
    1720:	fe 83       	std	Y+6, r31	; 0x06
    1722:	ed 83       	std	Y+5, r30	; 0x05
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 1};
    1724:	fa 96       	adiw	r30, 0x3a	; 58
    1726:	df 01       	movw	r26, r30
    1728:	1d 92       	st	X+, r1
    172a:	4a 95       	dec	r20
    172c:	e9 f7       	brne	.-6      	; 0x1728 <menuSystem+0xae>
    172e:	83 ea       	ldi	r24, 0xA3	; 163
    1730:	91 e0       	ldi	r25, 0x01	; 1
    1732:	91 83       	std	Z+1, r25	; 0x01
    1734:	80 83       	st	Z, r24
    1736:	13 83       	std	Z+3, r17	; 0x03
    1738:	02 83       	std	Z+2, r16	; 0x02
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	97 ab       	std	Z+55, r25	; 0x37
    1740:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrateJoystick;
    1742:	8e e0       	ldi	r24, 0x0E	; 14
    1744:	94 e0       	ldi	r25, 0x04	; 4
    1746:	97 a3       	std	Z+39, r25	; 0x27
    1748:	86 a3       	std	Z+38, r24	; 0x26
	settings.name_functions[0] = "Calibrate Joy";
    174a:	8c ea       	ldi	r24, 0xAC	; 172
    174c:	91 e0       	ldi	r25, 0x01	; 1
    174e:	97 8b       	std	Z+23, r25	; 0x17
    1750:	86 8b       	std	Z+22, r24	; 0x16
	mainMenu.submenues[2] = &settings;
    1752:	fa 87       	std	Y+10, r31	; 0x0a
    1754:	e9 87       	std	Y+9, r30	; 0x09
	
	
	
	direction previousDirection = NEUTRAL;
    1756:	68 94       	set
    1758:	aa 24       	eor	r10, r10
    175a:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    175c:	f8 01       	movw	r30, r16
    175e:	c6 a8       	ldd	r12, Z+54	; 0x36
    1760:	d7 a8       	ldd	r13, Z+55	; 0x37
    1762:	e4 88       	ldd	r14, Z+20	; 0x14
    1764:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = getJoystickPosition();
    1766:	0e 94 77 03 	call	0x6ee	; 0x6ee <getJoystickPosition>
    176a:	b8 2e       	mov	r11, r24
		if (joy.D != previousDirection){
    176c:	a8 16       	cp	r10, r24
    176e:	09 f4       	brne	.+2      	; 0x1772 <menuSystem+0xf8>
    1770:	51 c0       	rjmp	.+162    	; 0x1814 <menuSystem+0x19a>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1772:	b6 01       	movw	r22, r12
    1774:	6e 0d       	add	r22, r14
    1776:	7f 1d       	adc	r23, r15
		joy = getJoystickPosition();
		if (joy.D != previousDirection){
			switch(joy.D){
    1778:	f1 e0       	ldi	r31, 0x01	; 1
    177a:	8f 17       	cp	r24, r31
    177c:	69 f1       	breq	.+90     	; 0x17d8 <menuSystem+0x15e>
    177e:	8f 17       	cp	r24, r31
    1780:	08 f1       	brcs	.+66     	; 0x17c4 <menuSystem+0x14a>
    1782:	22 e0       	ldi	r18, 0x02	; 2
    1784:	82 17       	cp	r24, r18
    1786:	21 f0       	breq	.+8      	; 0x1790 <menuSystem+0x116>
    1788:	83 e0       	ldi	r24, 0x03	; 3
    178a:	b8 16       	cp	r11, r24
    178c:	79 f0       	breq	.+30     	; 0x17ac <menuSystem+0x132>
    178e:	42 c0       	rjmp	.+132    	; 0x1814 <menuSystem+0x19a>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
    1790:	d8 01       	movw	r26, r16
    1792:	d8 96       	adiw	r26, 0x38	; 56
    1794:	8d 91       	ld	r24, X+
    1796:	9c 91       	ld	r25, X
    1798:	d9 97       	sbiw	r26, 0x39	; 57
    179a:	01 97       	sbiw	r24, 0x01	; 1
    179c:	86 0f       	add	r24, r22
    179e:	97 1f       	adc	r25, r23
    17a0:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__divmodhi4>
    17a4:	f8 01       	movw	r30, r16
    17a6:	91 af       	std	Z+57, r25	; 0x39
    17a8:	80 af       	std	Z+56, r24	; 0x38
					break;
    17aa:	34 c0       	rjmp	.+104    	; 0x1814 <menuSystem+0x19a>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
    17ac:	d8 01       	movw	r26, r16
    17ae:	d8 96       	adiw	r26, 0x38	; 56
    17b0:	8d 91       	ld	r24, X+
    17b2:	9c 91       	ld	r25, X
    17b4:	d9 97       	sbiw	r26, 0x39	; 57
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <__divmodhi4>
    17bc:	f8 01       	movw	r30, r16
    17be:	91 af       	std	Z+57, r25	; 0x39
    17c0:	80 af       	std	Z+56, r24	; 0x38
					break;
    17c2:	28 c0       	rjmp	.+80     	; 0x1814 <menuSystem+0x19a>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
    17c4:	d8 01       	movw	r26, r16
    17c6:	12 96       	adiw	r26, 0x02	; 2
    17c8:	2d 91       	ld	r18, X+
    17ca:	3c 91       	ld	r19, X
    17cc:	13 97       	sbiw	r26, 0x03	; 3
    17ce:	21 15       	cp	r18, r1
    17d0:	31 05       	cpc	r19, r1
    17d2:	01 f1       	breq	.+64     	; 0x1814 <menuSystem+0x19a>
    17d4:	89 01       	movw	r16, r18
    17d6:	1e c0       	rjmp	.+60     	; 0x1814 <menuSystem+0x19a>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
    17d8:	f8 01       	movw	r30, r16
    17da:	20 ad       	ldd	r18, Z+56	; 0x38
    17dc:	31 ad       	ldd	r19, Z+57	; 0x39
    17de:	44 89       	ldd	r20, Z+20	; 0x14
    17e0:	55 89       	ldd	r21, Z+21	; 0x15
    17e2:	24 17       	cp	r18, r20
    17e4:	35 07       	cpc	r19, r21
    17e6:	4c f4       	brge	.+18     	; 0x17fa <menuSystem+0x180>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
    17e8:	2e 5f       	subi	r18, 0xFE	; 254
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	e2 0f       	add	r30, r18
    17f2:	f3 1f       	adc	r31, r19
    17f4:	00 81       	ld	r16, Z
    17f6:	11 81       	ldd	r17, Z+1	; 0x01
    17f8:	0d c0       	rjmp	.+26     	; 0x1814 <menuSystem+0x19a>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
    17fa:	24 1b       	sub	r18, r20
    17fc:	35 0b       	sbc	r19, r21
    17fe:	2d 5e       	subi	r18, 0xED	; 237
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	f9 01       	movw	r30, r18
    1804:	ee 0f       	add	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	e0 0f       	add	r30, r16
    180a:	f1 1f       	adc	r31, r17
    180c:	01 90       	ld	r0, Z+
    180e:	f0 81       	ld	r31, Z
    1810:	e0 2d       	mov	r30, r0
    1812:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
    1814:	c8 01       	movw	r24, r16
    1816:	0e 94 15 0a 	call	0x142a	; 0x142a <make_screen>
    181a:	ff ef       	ldi	r31, 0xFF	; 255
    181c:	2f e7       	ldi	r18, 0x7F	; 127
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	f1 50       	subi	r31, 0x01	; 1
    1822:	20 40       	sbci	r18, 0x00	; 0
    1824:	80 40       	sbci	r24, 0x00	; 0
    1826:	e1 f7       	brne	.-8      	; 0x1820 <menuSystem+0x1a6>
    1828:	00 c0       	rjmp	.+0      	; 0x182a <menuSystem+0x1b0>
    182a:	00 c0       	rjmp	.+0      	; 0x182c <menuSystem+0x1b2>
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
    182c:	ab 2c       	mov	r10, r11
    182e:	96 cf       	rjmp	.-212    	; 0x175c <menuSystem+0xe2>

00001830 <__subsf3>:
    1830:	50 58       	subi	r21, 0x80	; 128

00001832 <__addsf3>:
    1832:	bb 27       	eor	r27, r27
    1834:	aa 27       	eor	r26, r26
    1836:	0e d0       	rcall	.+28     	; 0x1854 <__addsf3x>
    1838:	75 c1       	rjmp	.+746    	; 0x1b24 <__fp_round>
    183a:	66 d1       	rcall	.+716    	; 0x1b08 <__fp_pscA>
    183c:	30 f0       	brcs	.+12     	; 0x184a <__addsf3+0x18>
    183e:	6b d1       	rcall	.+726    	; 0x1b16 <__fp_pscB>
    1840:	20 f0       	brcs	.+8      	; 0x184a <__addsf3+0x18>
    1842:	31 f4       	brne	.+12     	; 0x1850 <__addsf3+0x1e>
    1844:	9f 3f       	cpi	r25, 0xFF	; 255
    1846:	11 f4       	brne	.+4      	; 0x184c <__addsf3+0x1a>
    1848:	1e f4       	brtc	.+6      	; 0x1850 <__addsf3+0x1e>
    184a:	5b c1       	rjmp	.+694    	; 0x1b02 <__fp_nan>
    184c:	0e f4       	brtc	.+2      	; 0x1850 <__addsf3+0x1e>
    184e:	e0 95       	com	r30
    1850:	e7 fb       	bst	r30, 7
    1852:	51 c1       	rjmp	.+674    	; 0x1af6 <__fp_inf>

00001854 <__addsf3x>:
    1854:	e9 2f       	mov	r30, r25
    1856:	77 d1       	rcall	.+750    	; 0x1b46 <__fp_split3>
    1858:	80 f3       	brcs	.-32     	; 0x183a <__addsf3+0x8>
    185a:	ba 17       	cp	r27, r26
    185c:	62 07       	cpc	r22, r18
    185e:	73 07       	cpc	r23, r19
    1860:	84 07       	cpc	r24, r20
    1862:	95 07       	cpc	r25, r21
    1864:	18 f0       	brcs	.+6      	; 0x186c <__addsf3x+0x18>
    1866:	71 f4       	brne	.+28     	; 0x1884 <__addsf3x+0x30>
    1868:	9e f5       	brtc	.+102    	; 0x18d0 <__addsf3x+0x7c>
    186a:	8f c1       	rjmp	.+798    	; 0x1b8a <__fp_zero>
    186c:	0e f4       	brtc	.+2      	; 0x1870 <__addsf3x+0x1c>
    186e:	e0 95       	com	r30
    1870:	0b 2e       	mov	r0, r27
    1872:	ba 2f       	mov	r27, r26
    1874:	a0 2d       	mov	r26, r0
    1876:	0b 01       	movw	r0, r22
    1878:	b9 01       	movw	r22, r18
    187a:	90 01       	movw	r18, r0
    187c:	0c 01       	movw	r0, r24
    187e:	ca 01       	movw	r24, r20
    1880:	a0 01       	movw	r20, r0
    1882:	11 24       	eor	r1, r1
    1884:	ff 27       	eor	r31, r31
    1886:	59 1b       	sub	r21, r25
    1888:	99 f0       	breq	.+38     	; 0x18b0 <__addsf3x+0x5c>
    188a:	59 3f       	cpi	r21, 0xF9	; 249
    188c:	50 f4       	brcc	.+20     	; 0x18a2 <__addsf3x+0x4e>
    188e:	50 3e       	cpi	r21, 0xE0	; 224
    1890:	68 f1       	brcs	.+90     	; 0x18ec <__addsf3x+0x98>
    1892:	1a 16       	cp	r1, r26
    1894:	f0 40       	sbci	r31, 0x00	; 0
    1896:	a2 2f       	mov	r26, r18
    1898:	23 2f       	mov	r18, r19
    189a:	34 2f       	mov	r19, r20
    189c:	44 27       	eor	r20, r20
    189e:	58 5f       	subi	r21, 0xF8	; 248
    18a0:	f3 cf       	rjmp	.-26     	; 0x1888 <__addsf3x+0x34>
    18a2:	46 95       	lsr	r20
    18a4:	37 95       	ror	r19
    18a6:	27 95       	ror	r18
    18a8:	a7 95       	ror	r26
    18aa:	f0 40       	sbci	r31, 0x00	; 0
    18ac:	53 95       	inc	r21
    18ae:	c9 f7       	brne	.-14     	; 0x18a2 <__addsf3x+0x4e>
    18b0:	7e f4       	brtc	.+30     	; 0x18d0 <__addsf3x+0x7c>
    18b2:	1f 16       	cp	r1, r31
    18b4:	ba 0b       	sbc	r27, r26
    18b6:	62 0b       	sbc	r22, r18
    18b8:	73 0b       	sbc	r23, r19
    18ba:	84 0b       	sbc	r24, r20
    18bc:	ba f0       	brmi	.+46     	; 0x18ec <__addsf3x+0x98>
    18be:	91 50       	subi	r25, 0x01	; 1
    18c0:	a1 f0       	breq	.+40     	; 0x18ea <__addsf3x+0x96>
    18c2:	ff 0f       	add	r31, r31
    18c4:	bb 1f       	adc	r27, r27
    18c6:	66 1f       	adc	r22, r22
    18c8:	77 1f       	adc	r23, r23
    18ca:	88 1f       	adc	r24, r24
    18cc:	c2 f7       	brpl	.-16     	; 0x18be <__addsf3x+0x6a>
    18ce:	0e c0       	rjmp	.+28     	; 0x18ec <__addsf3x+0x98>
    18d0:	ba 0f       	add	r27, r26
    18d2:	62 1f       	adc	r22, r18
    18d4:	73 1f       	adc	r23, r19
    18d6:	84 1f       	adc	r24, r20
    18d8:	48 f4       	brcc	.+18     	; 0x18ec <__addsf3x+0x98>
    18da:	87 95       	ror	r24
    18dc:	77 95       	ror	r23
    18de:	67 95       	ror	r22
    18e0:	b7 95       	ror	r27
    18e2:	f7 95       	ror	r31
    18e4:	9e 3f       	cpi	r25, 0xFE	; 254
    18e6:	08 f0       	brcs	.+2      	; 0x18ea <__addsf3x+0x96>
    18e8:	b3 cf       	rjmp	.-154    	; 0x1850 <__addsf3+0x1e>
    18ea:	93 95       	inc	r25
    18ec:	88 0f       	add	r24, r24
    18ee:	08 f0       	brcs	.+2      	; 0x18f2 <__addsf3x+0x9e>
    18f0:	99 27       	eor	r25, r25
    18f2:	ee 0f       	add	r30, r30
    18f4:	97 95       	ror	r25
    18f6:	87 95       	ror	r24
    18f8:	08 95       	ret

000018fa <__cmpsf2>:
    18fa:	d9 d0       	rcall	.+434    	; 0x1aae <__fp_cmp>
    18fc:	08 f4       	brcc	.+2      	; 0x1900 <__cmpsf2+0x6>
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	08 95       	ret

00001902 <__divsf3>:
    1902:	0c d0       	rcall	.+24     	; 0x191c <__divsf3x>
    1904:	0f c1       	rjmp	.+542    	; 0x1b24 <__fp_round>
    1906:	07 d1       	rcall	.+526    	; 0x1b16 <__fp_pscB>
    1908:	40 f0       	brcs	.+16     	; 0x191a <__divsf3+0x18>
    190a:	fe d0       	rcall	.+508    	; 0x1b08 <__fp_pscA>
    190c:	30 f0       	brcs	.+12     	; 0x191a <__divsf3+0x18>
    190e:	21 f4       	brne	.+8      	; 0x1918 <__divsf3+0x16>
    1910:	5f 3f       	cpi	r21, 0xFF	; 255
    1912:	19 f0       	breq	.+6      	; 0x191a <__divsf3+0x18>
    1914:	f0 c0       	rjmp	.+480    	; 0x1af6 <__fp_inf>
    1916:	51 11       	cpse	r21, r1
    1918:	39 c1       	rjmp	.+626    	; 0x1b8c <__fp_szero>
    191a:	f3 c0       	rjmp	.+486    	; 0x1b02 <__fp_nan>

0000191c <__divsf3x>:
    191c:	14 d1       	rcall	.+552    	; 0x1b46 <__fp_split3>
    191e:	98 f3       	brcs	.-26     	; 0x1906 <__divsf3+0x4>

00001920 <__divsf3_pse>:
    1920:	99 23       	and	r25, r25
    1922:	c9 f3       	breq	.-14     	; 0x1916 <__divsf3+0x14>
    1924:	55 23       	and	r21, r21
    1926:	b1 f3       	breq	.-20     	; 0x1914 <__divsf3+0x12>
    1928:	95 1b       	sub	r25, r21
    192a:	55 0b       	sbc	r21, r21
    192c:	bb 27       	eor	r27, r27
    192e:	aa 27       	eor	r26, r26
    1930:	62 17       	cp	r22, r18
    1932:	73 07       	cpc	r23, r19
    1934:	84 07       	cpc	r24, r20
    1936:	38 f0       	brcs	.+14     	; 0x1946 <__divsf3_pse+0x26>
    1938:	9f 5f       	subi	r25, 0xFF	; 255
    193a:	5f 4f       	sbci	r21, 0xFF	; 255
    193c:	22 0f       	add	r18, r18
    193e:	33 1f       	adc	r19, r19
    1940:	44 1f       	adc	r20, r20
    1942:	aa 1f       	adc	r26, r26
    1944:	a9 f3       	breq	.-22     	; 0x1930 <__divsf3_pse+0x10>
    1946:	33 d0       	rcall	.+102    	; 0x19ae <__divsf3_pse+0x8e>
    1948:	0e 2e       	mov	r0, r30
    194a:	3a f0       	brmi	.+14     	; 0x195a <__divsf3_pse+0x3a>
    194c:	e0 e8       	ldi	r30, 0x80	; 128
    194e:	30 d0       	rcall	.+96     	; 0x19b0 <__divsf3_pse+0x90>
    1950:	91 50       	subi	r25, 0x01	; 1
    1952:	50 40       	sbci	r21, 0x00	; 0
    1954:	e6 95       	lsr	r30
    1956:	00 1c       	adc	r0, r0
    1958:	ca f7       	brpl	.-14     	; 0x194c <__divsf3_pse+0x2c>
    195a:	29 d0       	rcall	.+82     	; 0x19ae <__divsf3_pse+0x8e>
    195c:	fe 2f       	mov	r31, r30
    195e:	27 d0       	rcall	.+78     	; 0x19ae <__divsf3_pse+0x8e>
    1960:	66 0f       	add	r22, r22
    1962:	77 1f       	adc	r23, r23
    1964:	88 1f       	adc	r24, r24
    1966:	bb 1f       	adc	r27, r27
    1968:	26 17       	cp	r18, r22
    196a:	37 07       	cpc	r19, r23
    196c:	48 07       	cpc	r20, r24
    196e:	ab 07       	cpc	r26, r27
    1970:	b0 e8       	ldi	r27, 0x80	; 128
    1972:	09 f0       	breq	.+2      	; 0x1976 <__divsf3_pse+0x56>
    1974:	bb 0b       	sbc	r27, r27
    1976:	80 2d       	mov	r24, r0
    1978:	bf 01       	movw	r22, r30
    197a:	ff 27       	eor	r31, r31
    197c:	93 58       	subi	r25, 0x83	; 131
    197e:	5f 4f       	sbci	r21, 0xFF	; 255
    1980:	2a f0       	brmi	.+10     	; 0x198c <__divsf3_pse+0x6c>
    1982:	9e 3f       	cpi	r25, 0xFE	; 254
    1984:	51 05       	cpc	r21, r1
    1986:	68 f0       	brcs	.+26     	; 0x19a2 <__divsf3_pse+0x82>
    1988:	b6 c0       	rjmp	.+364    	; 0x1af6 <__fp_inf>
    198a:	00 c1       	rjmp	.+512    	; 0x1b8c <__fp_szero>
    198c:	5f 3f       	cpi	r21, 0xFF	; 255
    198e:	ec f3       	brlt	.-6      	; 0x198a <__divsf3_pse+0x6a>
    1990:	98 3e       	cpi	r25, 0xE8	; 232
    1992:	dc f3       	brlt	.-10     	; 0x198a <__divsf3_pse+0x6a>
    1994:	86 95       	lsr	r24
    1996:	77 95       	ror	r23
    1998:	67 95       	ror	r22
    199a:	b7 95       	ror	r27
    199c:	f7 95       	ror	r31
    199e:	9f 5f       	subi	r25, 0xFF	; 255
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <__divsf3_pse+0x74>
    19a2:	88 0f       	add	r24, r24
    19a4:	91 1d       	adc	r25, r1
    19a6:	96 95       	lsr	r25
    19a8:	87 95       	ror	r24
    19aa:	97 f9       	bld	r25, 7
    19ac:	08 95       	ret
    19ae:	e1 e0       	ldi	r30, 0x01	; 1
    19b0:	66 0f       	add	r22, r22
    19b2:	77 1f       	adc	r23, r23
    19b4:	88 1f       	adc	r24, r24
    19b6:	bb 1f       	adc	r27, r27
    19b8:	62 17       	cp	r22, r18
    19ba:	73 07       	cpc	r23, r19
    19bc:	84 07       	cpc	r24, r20
    19be:	ba 07       	cpc	r27, r26
    19c0:	20 f0       	brcs	.+8      	; 0x19ca <__divsf3_pse+0xaa>
    19c2:	62 1b       	sub	r22, r18
    19c4:	73 0b       	sbc	r23, r19
    19c6:	84 0b       	sbc	r24, r20
    19c8:	ba 0b       	sbc	r27, r26
    19ca:	ee 1f       	adc	r30, r30
    19cc:	88 f7       	brcc	.-30     	; 0x19b0 <__divsf3_pse+0x90>
    19ce:	e0 95       	com	r30
    19d0:	08 95       	ret

000019d2 <__fixsfsi>:
    19d2:	04 d0       	rcall	.+8      	; 0x19dc <__fixunssfsi>
    19d4:	68 94       	set
    19d6:	b1 11       	cpse	r27, r1
    19d8:	d9 c0       	rjmp	.+434    	; 0x1b8c <__fp_szero>
    19da:	08 95       	ret

000019dc <__fixunssfsi>:
    19dc:	bc d0       	rcall	.+376    	; 0x1b56 <__fp_splitA>
    19de:	88 f0       	brcs	.+34     	; 0x1a02 <__fixunssfsi+0x26>
    19e0:	9f 57       	subi	r25, 0x7F	; 127
    19e2:	90 f0       	brcs	.+36     	; 0x1a08 <__fixunssfsi+0x2c>
    19e4:	b9 2f       	mov	r27, r25
    19e6:	99 27       	eor	r25, r25
    19e8:	b7 51       	subi	r27, 0x17	; 23
    19ea:	a0 f0       	brcs	.+40     	; 0x1a14 <__fixunssfsi+0x38>
    19ec:	d1 f0       	breq	.+52     	; 0x1a22 <__fixunssfsi+0x46>
    19ee:	66 0f       	add	r22, r22
    19f0:	77 1f       	adc	r23, r23
    19f2:	88 1f       	adc	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	1a f0       	brmi	.+6      	; 0x19fe <__fixunssfsi+0x22>
    19f8:	ba 95       	dec	r27
    19fa:	c9 f7       	brne	.-14     	; 0x19ee <__fixunssfsi+0x12>
    19fc:	12 c0       	rjmp	.+36     	; 0x1a22 <__fixunssfsi+0x46>
    19fe:	b1 30       	cpi	r27, 0x01	; 1
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <__fixunssfsi+0x46>
    1a02:	c3 d0       	rcall	.+390    	; 0x1b8a <__fp_zero>
    1a04:	b1 e0       	ldi	r27, 0x01	; 1
    1a06:	08 95       	ret
    1a08:	c0 c0       	rjmp	.+384    	; 0x1b8a <__fp_zero>
    1a0a:	67 2f       	mov	r22, r23
    1a0c:	78 2f       	mov	r23, r24
    1a0e:	88 27       	eor	r24, r24
    1a10:	b8 5f       	subi	r27, 0xF8	; 248
    1a12:	39 f0       	breq	.+14     	; 0x1a22 <__fixunssfsi+0x46>
    1a14:	b9 3f       	cpi	r27, 0xF9	; 249
    1a16:	cc f3       	brlt	.-14     	; 0x1a0a <__fixunssfsi+0x2e>
    1a18:	86 95       	lsr	r24
    1a1a:	77 95       	ror	r23
    1a1c:	67 95       	ror	r22
    1a1e:	b3 95       	inc	r27
    1a20:	d9 f7       	brne	.-10     	; 0x1a18 <__fixunssfsi+0x3c>
    1a22:	3e f4       	brtc	.+14     	; 0x1a32 <__fixunssfsi+0x56>
    1a24:	90 95       	com	r25
    1a26:	80 95       	com	r24
    1a28:	70 95       	com	r23
    1a2a:	61 95       	neg	r22
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a30:	9f 4f       	sbci	r25, 0xFF	; 255
    1a32:	08 95       	ret

00001a34 <__floatunsisf>:
    1a34:	e8 94       	clt
    1a36:	09 c0       	rjmp	.+18     	; 0x1a4a <__floatsisf+0x12>

00001a38 <__floatsisf>:
    1a38:	97 fb       	bst	r25, 7
    1a3a:	3e f4       	brtc	.+14     	; 0x1a4a <__floatsisf+0x12>
    1a3c:	90 95       	com	r25
    1a3e:	80 95       	com	r24
    1a40:	70 95       	com	r23
    1a42:	61 95       	neg	r22
    1a44:	7f 4f       	sbci	r23, 0xFF	; 255
    1a46:	8f 4f       	sbci	r24, 0xFF	; 255
    1a48:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4a:	99 23       	and	r25, r25
    1a4c:	a9 f0       	breq	.+42     	; 0x1a78 <__floatsisf+0x40>
    1a4e:	f9 2f       	mov	r31, r25
    1a50:	96 e9       	ldi	r25, 0x96	; 150
    1a52:	bb 27       	eor	r27, r27
    1a54:	93 95       	inc	r25
    1a56:	f6 95       	lsr	r31
    1a58:	87 95       	ror	r24
    1a5a:	77 95       	ror	r23
    1a5c:	67 95       	ror	r22
    1a5e:	b7 95       	ror	r27
    1a60:	f1 11       	cpse	r31, r1
    1a62:	f8 cf       	rjmp	.-16     	; 0x1a54 <__floatsisf+0x1c>
    1a64:	fa f4       	brpl	.+62     	; 0x1aa4 <__floatsisf+0x6c>
    1a66:	bb 0f       	add	r27, r27
    1a68:	11 f4       	brne	.+4      	; 0x1a6e <__floatsisf+0x36>
    1a6a:	60 ff       	sbrs	r22, 0
    1a6c:	1b c0       	rjmp	.+54     	; 0x1aa4 <__floatsisf+0x6c>
    1a6e:	6f 5f       	subi	r22, 0xFF	; 255
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	8f 4f       	sbci	r24, 0xFF	; 255
    1a74:	9f 4f       	sbci	r25, 0xFF	; 255
    1a76:	16 c0       	rjmp	.+44     	; 0x1aa4 <__floatsisf+0x6c>
    1a78:	88 23       	and	r24, r24
    1a7a:	11 f0       	breq	.+4      	; 0x1a80 <__floatsisf+0x48>
    1a7c:	96 e9       	ldi	r25, 0x96	; 150
    1a7e:	11 c0       	rjmp	.+34     	; 0x1aa2 <__floatsisf+0x6a>
    1a80:	77 23       	and	r23, r23
    1a82:	21 f0       	breq	.+8      	; 0x1a8c <__floatsisf+0x54>
    1a84:	9e e8       	ldi	r25, 0x8E	; 142
    1a86:	87 2f       	mov	r24, r23
    1a88:	76 2f       	mov	r23, r22
    1a8a:	05 c0       	rjmp	.+10     	; 0x1a96 <__floatsisf+0x5e>
    1a8c:	66 23       	and	r22, r22
    1a8e:	71 f0       	breq	.+28     	; 0x1aac <__floatsisf+0x74>
    1a90:	96 e8       	ldi	r25, 0x86	; 134
    1a92:	86 2f       	mov	r24, r22
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	2a f0       	brmi	.+10     	; 0x1aa4 <__floatsisf+0x6c>
    1a9a:	9a 95       	dec	r25
    1a9c:	66 0f       	add	r22, r22
    1a9e:	77 1f       	adc	r23, r23
    1aa0:	88 1f       	adc	r24, r24
    1aa2:	da f7       	brpl	.-10     	; 0x1a9a <__floatsisf+0x62>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	96 95       	lsr	r25
    1aa8:	87 95       	ror	r24
    1aaa:	97 f9       	bld	r25, 7
    1aac:	08 95       	ret

00001aae <__fp_cmp>:
    1aae:	99 0f       	add	r25, r25
    1ab0:	00 08       	sbc	r0, r0
    1ab2:	55 0f       	add	r21, r21
    1ab4:	aa 0b       	sbc	r26, r26
    1ab6:	e0 e8       	ldi	r30, 0x80	; 128
    1ab8:	fe ef       	ldi	r31, 0xFE	; 254
    1aba:	16 16       	cp	r1, r22
    1abc:	17 06       	cpc	r1, r23
    1abe:	e8 07       	cpc	r30, r24
    1ac0:	f9 07       	cpc	r31, r25
    1ac2:	c0 f0       	brcs	.+48     	; 0x1af4 <__fp_cmp+0x46>
    1ac4:	12 16       	cp	r1, r18
    1ac6:	13 06       	cpc	r1, r19
    1ac8:	e4 07       	cpc	r30, r20
    1aca:	f5 07       	cpc	r31, r21
    1acc:	98 f0       	brcs	.+38     	; 0x1af4 <__fp_cmp+0x46>
    1ace:	62 1b       	sub	r22, r18
    1ad0:	73 0b       	sbc	r23, r19
    1ad2:	84 0b       	sbc	r24, r20
    1ad4:	95 0b       	sbc	r25, r21
    1ad6:	39 f4       	brne	.+14     	; 0x1ae6 <__fp_cmp+0x38>
    1ad8:	0a 26       	eor	r0, r26
    1ada:	61 f0       	breq	.+24     	; 0x1af4 <__fp_cmp+0x46>
    1adc:	23 2b       	or	r18, r19
    1ade:	24 2b       	or	r18, r20
    1ae0:	25 2b       	or	r18, r21
    1ae2:	21 f4       	brne	.+8      	; 0x1aec <__fp_cmp+0x3e>
    1ae4:	08 95       	ret
    1ae6:	0a 26       	eor	r0, r26
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <__fp_cmp+0x3e>
    1aea:	a1 40       	sbci	r26, 0x01	; 1
    1aec:	a6 95       	lsr	r26
    1aee:	8f ef       	ldi	r24, 0xFF	; 255
    1af0:	81 1d       	adc	r24, r1
    1af2:	81 1d       	adc	r24, r1
    1af4:	08 95       	ret

00001af6 <__fp_inf>:
    1af6:	97 f9       	bld	r25, 7
    1af8:	9f 67       	ori	r25, 0x7F	; 127
    1afa:	80 e8       	ldi	r24, 0x80	; 128
    1afc:	70 e0       	ldi	r23, 0x00	; 0
    1afe:	60 e0       	ldi	r22, 0x00	; 0
    1b00:	08 95       	ret

00001b02 <__fp_nan>:
    1b02:	9f ef       	ldi	r25, 0xFF	; 255
    1b04:	80 ec       	ldi	r24, 0xC0	; 192
    1b06:	08 95       	ret

00001b08 <__fp_pscA>:
    1b08:	00 24       	eor	r0, r0
    1b0a:	0a 94       	dec	r0
    1b0c:	16 16       	cp	r1, r22
    1b0e:	17 06       	cpc	r1, r23
    1b10:	18 06       	cpc	r1, r24
    1b12:	09 06       	cpc	r0, r25
    1b14:	08 95       	ret

00001b16 <__fp_pscB>:
    1b16:	00 24       	eor	r0, r0
    1b18:	0a 94       	dec	r0
    1b1a:	12 16       	cp	r1, r18
    1b1c:	13 06       	cpc	r1, r19
    1b1e:	14 06       	cpc	r1, r20
    1b20:	05 06       	cpc	r0, r21
    1b22:	08 95       	ret

00001b24 <__fp_round>:
    1b24:	09 2e       	mov	r0, r25
    1b26:	03 94       	inc	r0
    1b28:	00 0c       	add	r0, r0
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <__fp_round+0xc>
    1b2c:	88 23       	and	r24, r24
    1b2e:	52 f0       	brmi	.+20     	; 0x1b44 <__fp_round+0x20>
    1b30:	bb 0f       	add	r27, r27
    1b32:	40 f4       	brcc	.+16     	; 0x1b44 <__fp_round+0x20>
    1b34:	bf 2b       	or	r27, r31
    1b36:	11 f4       	brne	.+4      	; 0x1b3c <__fp_round+0x18>
    1b38:	60 ff       	sbrs	r22, 0
    1b3a:	04 c0       	rjmp	.+8      	; 0x1b44 <__fp_round+0x20>
    1b3c:	6f 5f       	subi	r22, 0xFF	; 255
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	8f 4f       	sbci	r24, 0xFF	; 255
    1b42:	9f 4f       	sbci	r25, 0xFF	; 255
    1b44:	08 95       	ret

00001b46 <__fp_split3>:
    1b46:	57 fd       	sbrc	r21, 7
    1b48:	90 58       	subi	r25, 0x80	; 128
    1b4a:	44 0f       	add	r20, r20
    1b4c:	55 1f       	adc	r21, r21
    1b4e:	59 f0       	breq	.+22     	; 0x1b66 <__fp_splitA+0x10>
    1b50:	5f 3f       	cpi	r21, 0xFF	; 255
    1b52:	71 f0       	breq	.+28     	; 0x1b70 <__fp_splitA+0x1a>
    1b54:	47 95       	ror	r20

00001b56 <__fp_splitA>:
    1b56:	88 0f       	add	r24, r24
    1b58:	97 fb       	bst	r25, 7
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	61 f0       	breq	.+24     	; 0x1b76 <__fp_splitA+0x20>
    1b5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b60:	79 f0       	breq	.+30     	; 0x1b80 <__fp_splitA+0x2a>
    1b62:	87 95       	ror	r24
    1b64:	08 95       	ret
    1b66:	12 16       	cp	r1, r18
    1b68:	13 06       	cpc	r1, r19
    1b6a:	14 06       	cpc	r1, r20
    1b6c:	55 1f       	adc	r21, r21
    1b6e:	f2 cf       	rjmp	.-28     	; 0x1b54 <__fp_split3+0xe>
    1b70:	46 95       	lsr	r20
    1b72:	f1 df       	rcall	.-30     	; 0x1b56 <__fp_splitA>
    1b74:	08 c0       	rjmp	.+16     	; 0x1b86 <__fp_splitA+0x30>
    1b76:	16 16       	cp	r1, r22
    1b78:	17 06       	cpc	r1, r23
    1b7a:	18 06       	cpc	r1, r24
    1b7c:	99 1f       	adc	r25, r25
    1b7e:	f1 cf       	rjmp	.-30     	; 0x1b62 <__fp_splitA+0xc>
    1b80:	86 95       	lsr	r24
    1b82:	71 05       	cpc	r23, r1
    1b84:	61 05       	cpc	r22, r1
    1b86:	08 94       	sec
    1b88:	08 95       	ret

00001b8a <__fp_zero>:
    1b8a:	e8 94       	clt

00001b8c <__fp_szero>:
    1b8c:	bb 27       	eor	r27, r27
    1b8e:	66 27       	eor	r22, r22
    1b90:	77 27       	eor	r23, r23
    1b92:	cb 01       	movw	r24, r22
    1b94:	97 f9       	bld	r25, 7
    1b96:	08 95       	ret

00001b98 <__gesf2>:
    1b98:	8a df       	rcall	.-236    	; 0x1aae <__fp_cmp>
    1b9a:	08 f4       	brcc	.+2      	; 0x1b9e <__gesf2+0x6>
    1b9c:	8f ef       	ldi	r24, 0xFF	; 255
    1b9e:	08 95       	ret

00001ba0 <__mulsf3>:
    1ba0:	0b d0       	rcall	.+22     	; 0x1bb8 <__mulsf3x>
    1ba2:	c0 cf       	rjmp	.-128    	; 0x1b24 <__fp_round>
    1ba4:	b1 df       	rcall	.-158    	; 0x1b08 <__fp_pscA>
    1ba6:	28 f0       	brcs	.+10     	; 0x1bb2 <__mulsf3+0x12>
    1ba8:	b6 df       	rcall	.-148    	; 0x1b16 <__fp_pscB>
    1baa:	18 f0       	brcs	.+6      	; 0x1bb2 <__mulsf3+0x12>
    1bac:	95 23       	and	r25, r21
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <__mulsf3+0x12>
    1bb0:	a2 cf       	rjmp	.-188    	; 0x1af6 <__fp_inf>
    1bb2:	a7 cf       	rjmp	.-178    	; 0x1b02 <__fp_nan>
    1bb4:	11 24       	eor	r1, r1
    1bb6:	ea cf       	rjmp	.-44     	; 0x1b8c <__fp_szero>

00001bb8 <__mulsf3x>:
    1bb8:	c6 df       	rcall	.-116    	; 0x1b46 <__fp_split3>
    1bba:	a0 f3       	brcs	.-24     	; 0x1ba4 <__mulsf3+0x4>

00001bbc <__mulsf3_pse>:
    1bbc:	95 9f       	mul	r25, r21
    1bbe:	d1 f3       	breq	.-12     	; 0x1bb4 <__mulsf3+0x14>
    1bc0:	95 0f       	add	r25, r21
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	55 1f       	adc	r21, r21
    1bc6:	62 9f       	mul	r22, r18
    1bc8:	f0 01       	movw	r30, r0
    1bca:	72 9f       	mul	r23, r18
    1bcc:	bb 27       	eor	r27, r27
    1bce:	f0 0d       	add	r31, r0
    1bd0:	b1 1d       	adc	r27, r1
    1bd2:	63 9f       	mul	r22, r19
    1bd4:	aa 27       	eor	r26, r26
    1bd6:	f0 0d       	add	r31, r0
    1bd8:	b1 1d       	adc	r27, r1
    1bda:	aa 1f       	adc	r26, r26
    1bdc:	64 9f       	mul	r22, r20
    1bde:	66 27       	eor	r22, r22
    1be0:	b0 0d       	add	r27, r0
    1be2:	a1 1d       	adc	r26, r1
    1be4:	66 1f       	adc	r22, r22
    1be6:	82 9f       	mul	r24, r18
    1be8:	22 27       	eor	r18, r18
    1bea:	b0 0d       	add	r27, r0
    1bec:	a1 1d       	adc	r26, r1
    1bee:	62 1f       	adc	r22, r18
    1bf0:	73 9f       	mul	r23, r19
    1bf2:	b0 0d       	add	r27, r0
    1bf4:	a1 1d       	adc	r26, r1
    1bf6:	62 1f       	adc	r22, r18
    1bf8:	83 9f       	mul	r24, r19
    1bfa:	a0 0d       	add	r26, r0
    1bfc:	61 1d       	adc	r22, r1
    1bfe:	22 1f       	adc	r18, r18
    1c00:	74 9f       	mul	r23, r20
    1c02:	33 27       	eor	r19, r19
    1c04:	a0 0d       	add	r26, r0
    1c06:	61 1d       	adc	r22, r1
    1c08:	23 1f       	adc	r18, r19
    1c0a:	84 9f       	mul	r24, r20
    1c0c:	60 0d       	add	r22, r0
    1c0e:	21 1d       	adc	r18, r1
    1c10:	82 2f       	mov	r24, r18
    1c12:	76 2f       	mov	r23, r22
    1c14:	6a 2f       	mov	r22, r26
    1c16:	11 24       	eor	r1, r1
    1c18:	9f 57       	subi	r25, 0x7F	; 127
    1c1a:	50 40       	sbci	r21, 0x00	; 0
    1c1c:	8a f0       	brmi	.+34     	; 0x1c40 <__mulsf3_pse+0x84>
    1c1e:	e1 f0       	breq	.+56     	; 0x1c58 <__mulsf3_pse+0x9c>
    1c20:	88 23       	and	r24, r24
    1c22:	4a f0       	brmi	.+18     	; 0x1c36 <__mulsf3_pse+0x7a>
    1c24:	ee 0f       	add	r30, r30
    1c26:	ff 1f       	adc	r31, r31
    1c28:	bb 1f       	adc	r27, r27
    1c2a:	66 1f       	adc	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	91 50       	subi	r25, 0x01	; 1
    1c32:	50 40       	sbci	r21, 0x00	; 0
    1c34:	a9 f7       	brne	.-22     	; 0x1c20 <__mulsf3_pse+0x64>
    1c36:	9e 3f       	cpi	r25, 0xFE	; 254
    1c38:	51 05       	cpc	r21, r1
    1c3a:	70 f0       	brcs	.+28     	; 0x1c58 <__mulsf3_pse+0x9c>
    1c3c:	5c cf       	rjmp	.-328    	; 0x1af6 <__fp_inf>
    1c3e:	a6 cf       	rjmp	.-180    	; 0x1b8c <__fp_szero>
    1c40:	5f 3f       	cpi	r21, 0xFF	; 255
    1c42:	ec f3       	brlt	.-6      	; 0x1c3e <__mulsf3_pse+0x82>
    1c44:	98 3e       	cpi	r25, 0xE8	; 232
    1c46:	dc f3       	brlt	.-10     	; 0x1c3e <__mulsf3_pse+0x82>
    1c48:	86 95       	lsr	r24
    1c4a:	77 95       	ror	r23
    1c4c:	67 95       	ror	r22
    1c4e:	b7 95       	ror	r27
    1c50:	f7 95       	ror	r31
    1c52:	e7 95       	ror	r30
    1c54:	9f 5f       	subi	r25, 0xFF	; 255
    1c56:	c1 f7       	brne	.-16     	; 0x1c48 <__mulsf3_pse+0x8c>
    1c58:	fe 2b       	or	r31, r30
    1c5a:	88 0f       	add	r24, r24
    1c5c:	91 1d       	adc	r25, r1
    1c5e:	96 95       	lsr	r25
    1c60:	87 95       	ror	r24
    1c62:	97 f9       	bld	r25, 7
    1c64:	08 95       	ret

00001c66 <__divmodhi4>:
    1c66:	97 fb       	bst	r25, 7
    1c68:	07 2e       	mov	r0, r23
    1c6a:	16 f4       	brtc	.+4      	; 0x1c70 <__divmodhi4+0xa>
    1c6c:	00 94       	com	r0
    1c6e:	07 d0       	rcall	.+14     	; 0x1c7e <__divmodhi4_neg1>
    1c70:	77 fd       	sbrc	r23, 7
    1c72:	09 d0       	rcall	.+18     	; 0x1c86 <__divmodhi4_neg2>
    1c74:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__udivmodhi4>
    1c78:	07 fc       	sbrc	r0, 7
    1c7a:	05 d0       	rcall	.+10     	; 0x1c86 <__divmodhi4_neg2>
    1c7c:	3e f4       	brtc	.+14     	; 0x1c8c <__divmodhi4_exit>

00001c7e <__divmodhi4_neg1>:
    1c7e:	90 95       	com	r25
    1c80:	81 95       	neg	r24
    1c82:	9f 4f       	sbci	r25, 0xFF	; 255
    1c84:	08 95       	ret

00001c86 <__divmodhi4_neg2>:
    1c86:	70 95       	com	r23
    1c88:	61 95       	neg	r22
    1c8a:	7f 4f       	sbci	r23, 0xFF	; 255

00001c8c <__divmodhi4_exit>:
    1c8c:	08 95       	ret

00001c8e <__divmodsi4>:
    1c8e:	05 2e       	mov	r0, r21
    1c90:	97 fb       	bst	r25, 7
    1c92:	1e f4       	brtc	.+6      	; 0x1c9a <__divmodsi4+0xc>
    1c94:	00 94       	com	r0
    1c96:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <__negsi2>
    1c9a:	57 fd       	sbrc	r21, 7
    1c9c:	07 d0       	rcall	.+14     	; 0x1cac <__divmodsi4_neg2>
    1c9e:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <__udivmodsi4>
    1ca2:	07 fc       	sbrc	r0, 7
    1ca4:	03 d0       	rcall	.+6      	; 0x1cac <__divmodsi4_neg2>
    1ca6:	4e f4       	brtc	.+18     	; 0x1cba <__divmodsi4_exit>
    1ca8:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <__negsi2>

00001cac <__divmodsi4_neg2>:
    1cac:	50 95       	com	r21
    1cae:	40 95       	com	r20
    1cb0:	30 95       	com	r19
    1cb2:	21 95       	neg	r18
    1cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1cb6:	4f 4f       	sbci	r20, 0xFF	; 255
    1cb8:	5f 4f       	sbci	r21, 0xFF	; 255

00001cba <__divmodsi4_exit>:
    1cba:	08 95       	ret

00001cbc <__negsi2>:
    1cbc:	90 95       	com	r25
    1cbe:	80 95       	com	r24
    1cc0:	70 95       	com	r23
    1cc2:	61 95       	neg	r22
    1cc4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc6:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	08 95       	ret

00001ccc <__udivmodhi4>:
    1ccc:	aa 1b       	sub	r26, r26
    1cce:	bb 1b       	sub	r27, r27
    1cd0:	51 e1       	ldi	r21, 0x11	; 17
    1cd2:	07 c0       	rjmp	.+14     	; 0x1ce2 <__udivmodhi4_ep>

00001cd4 <__udivmodhi4_loop>:
    1cd4:	aa 1f       	adc	r26, r26
    1cd6:	bb 1f       	adc	r27, r27
    1cd8:	a6 17       	cp	r26, r22
    1cda:	b7 07       	cpc	r27, r23
    1cdc:	10 f0       	brcs	.+4      	; 0x1ce2 <__udivmodhi4_ep>
    1cde:	a6 1b       	sub	r26, r22
    1ce0:	b7 0b       	sbc	r27, r23

00001ce2 <__udivmodhi4_ep>:
    1ce2:	88 1f       	adc	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	5a 95       	dec	r21
    1ce8:	a9 f7       	brne	.-22     	; 0x1cd4 <__udivmodhi4_loop>
    1cea:	80 95       	com	r24
    1cec:	90 95       	com	r25
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	08 95       	ret

00001cf4 <__udivmodsi4>:
    1cf4:	a1 e2       	ldi	r26, 0x21	; 33
    1cf6:	1a 2e       	mov	r1, r26
    1cf8:	aa 1b       	sub	r26, r26
    1cfa:	bb 1b       	sub	r27, r27
    1cfc:	fd 01       	movw	r30, r26
    1cfe:	0d c0       	rjmp	.+26     	; 0x1d1a <__udivmodsi4_ep>

00001d00 <__udivmodsi4_loop>:
    1d00:	aa 1f       	adc	r26, r26
    1d02:	bb 1f       	adc	r27, r27
    1d04:	ee 1f       	adc	r30, r30
    1d06:	ff 1f       	adc	r31, r31
    1d08:	a2 17       	cp	r26, r18
    1d0a:	b3 07       	cpc	r27, r19
    1d0c:	e4 07       	cpc	r30, r20
    1d0e:	f5 07       	cpc	r31, r21
    1d10:	20 f0       	brcs	.+8      	; 0x1d1a <__udivmodsi4_ep>
    1d12:	a2 1b       	sub	r26, r18
    1d14:	b3 0b       	sbc	r27, r19
    1d16:	e4 0b       	sbc	r30, r20
    1d18:	f5 0b       	sbc	r31, r21

00001d1a <__udivmodsi4_ep>:
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	1a 94       	dec	r1
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <__udivmodsi4_loop>
    1d26:	60 95       	com	r22
    1d28:	70 95       	com	r23
    1d2a:	80 95       	com	r24
    1d2c:	90 95       	com	r25
    1d2e:	9b 01       	movw	r18, r22
    1d30:	ac 01       	movw	r20, r24
    1d32:	bd 01       	movw	r22, r26
    1d34:	cf 01       	movw	r24, r30
    1d36:	08 95       	ret

00001d38 <malloc>:
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	91 05       	cpc	r25, r1
    1d40:	10 f4       	brcc	.+4      	; 0x1d46 <malloc+0xe>
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	e0 91 bc 01 	lds	r30, 0x01BC
    1d4a:	f0 91 bd 01 	lds	r31, 0x01BD
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	a0 e0       	ldi	r26, 0x00	; 0
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	30 97       	sbiw	r30, 0x00	; 0
    1d58:	39 f1       	breq	.+78     	; 0x1da8 <malloc+0x70>
    1d5a:	40 81       	ld	r20, Z
    1d5c:	51 81       	ldd	r21, Z+1	; 0x01
    1d5e:	48 17       	cp	r20, r24
    1d60:	59 07       	cpc	r21, r25
    1d62:	b8 f0       	brcs	.+46     	; 0x1d92 <malloc+0x5a>
    1d64:	48 17       	cp	r20, r24
    1d66:	59 07       	cpc	r21, r25
    1d68:	71 f4       	brne	.+28     	; 0x1d86 <malloc+0x4e>
    1d6a:	82 81       	ldd	r24, Z+2	; 0x02
    1d6c:	93 81       	ldd	r25, Z+3	; 0x03
    1d6e:	10 97       	sbiw	r26, 0x00	; 0
    1d70:	29 f0       	breq	.+10     	; 0x1d7c <malloc+0x44>
    1d72:	13 96       	adiw	r26, 0x03	; 3
    1d74:	9c 93       	st	X, r25
    1d76:	8e 93       	st	-X, r24
    1d78:	12 97       	sbiw	r26, 0x02	; 2
    1d7a:	2c c0       	rjmp	.+88     	; 0x1dd4 <malloc+0x9c>
    1d7c:	90 93 bd 01 	sts	0x01BD, r25
    1d80:	80 93 bc 01 	sts	0x01BC, r24
    1d84:	27 c0       	rjmp	.+78     	; 0x1dd4 <malloc+0x9c>
    1d86:	21 15       	cp	r18, r1
    1d88:	31 05       	cpc	r19, r1
    1d8a:	31 f0       	breq	.+12     	; 0x1d98 <malloc+0x60>
    1d8c:	42 17       	cp	r20, r18
    1d8e:	53 07       	cpc	r21, r19
    1d90:	18 f0       	brcs	.+6      	; 0x1d98 <malloc+0x60>
    1d92:	a9 01       	movw	r20, r18
    1d94:	db 01       	movw	r26, r22
    1d96:	01 c0       	rjmp	.+2      	; 0x1d9a <malloc+0x62>
    1d98:	ef 01       	movw	r28, r30
    1d9a:	9a 01       	movw	r18, r20
    1d9c:	bd 01       	movw	r22, r26
    1d9e:	df 01       	movw	r26, r30
    1da0:	02 80       	ldd	r0, Z+2	; 0x02
    1da2:	f3 81       	ldd	r31, Z+3	; 0x03
    1da4:	e0 2d       	mov	r30, r0
    1da6:	d7 cf       	rjmp	.-82     	; 0x1d56 <malloc+0x1e>
    1da8:	21 15       	cp	r18, r1
    1daa:	31 05       	cpc	r19, r1
    1dac:	f9 f0       	breq	.+62     	; 0x1dec <malloc+0xb4>
    1dae:	28 1b       	sub	r18, r24
    1db0:	39 0b       	sbc	r19, r25
    1db2:	24 30       	cpi	r18, 0x04	; 4
    1db4:	31 05       	cpc	r19, r1
    1db6:	80 f4       	brcc	.+32     	; 0x1dd8 <malloc+0xa0>
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	9b 81       	ldd	r25, Y+3	; 0x03
    1dbc:	61 15       	cp	r22, r1
    1dbe:	71 05       	cpc	r23, r1
    1dc0:	21 f0       	breq	.+8      	; 0x1dca <malloc+0x92>
    1dc2:	fb 01       	movw	r30, r22
    1dc4:	93 83       	std	Z+3, r25	; 0x03
    1dc6:	82 83       	std	Z+2, r24	; 0x02
    1dc8:	04 c0       	rjmp	.+8      	; 0x1dd2 <malloc+0x9a>
    1dca:	90 93 bd 01 	sts	0x01BD, r25
    1dce:	80 93 bc 01 	sts	0x01BC, r24
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	32 96       	adiw	r30, 0x02	; 2
    1dd6:	44 c0       	rjmp	.+136    	; 0x1e60 <malloc+0x128>
    1dd8:	fe 01       	movw	r30, r28
    1dda:	e2 0f       	add	r30, r18
    1ddc:	f3 1f       	adc	r31, r19
    1dde:	81 93       	st	Z+, r24
    1de0:	91 93       	st	Z+, r25
    1de2:	22 50       	subi	r18, 0x02	; 2
    1de4:	31 09       	sbc	r19, r1
    1de6:	39 83       	std	Y+1, r19	; 0x01
    1de8:	28 83       	st	Y, r18
    1dea:	3a c0       	rjmp	.+116    	; 0x1e60 <malloc+0x128>
    1dec:	20 91 ba 01 	lds	r18, 0x01BA
    1df0:	30 91 bb 01 	lds	r19, 0x01BB
    1df4:	23 2b       	or	r18, r19
    1df6:	41 f4       	brne	.+16     	; 0x1e08 <malloc+0xd0>
    1df8:	20 91 02 01 	lds	r18, 0x0102
    1dfc:	30 91 03 01 	lds	r19, 0x0103
    1e00:	30 93 bb 01 	sts	0x01BB, r19
    1e04:	20 93 ba 01 	sts	0x01BA, r18
    1e08:	20 91 00 01 	lds	r18, 0x0100
    1e0c:	30 91 01 01 	lds	r19, 0x0101
    1e10:	21 15       	cp	r18, r1
    1e12:	31 05       	cpc	r19, r1
    1e14:	41 f4       	brne	.+16     	; 0x1e26 <malloc+0xee>
    1e16:	2d b7       	in	r18, 0x3d	; 61
    1e18:	3e b7       	in	r19, 0x3e	; 62
    1e1a:	40 91 04 01 	lds	r20, 0x0104
    1e1e:	50 91 05 01 	lds	r21, 0x0105
    1e22:	24 1b       	sub	r18, r20
    1e24:	35 0b       	sbc	r19, r21
    1e26:	e0 91 ba 01 	lds	r30, 0x01BA
    1e2a:	f0 91 bb 01 	lds	r31, 0x01BB
    1e2e:	e2 17       	cp	r30, r18
    1e30:	f3 07       	cpc	r31, r19
    1e32:	a0 f4       	brcc	.+40     	; 0x1e5c <malloc+0x124>
    1e34:	2e 1b       	sub	r18, r30
    1e36:	3f 0b       	sbc	r19, r31
    1e38:	28 17       	cp	r18, r24
    1e3a:	39 07       	cpc	r19, r25
    1e3c:	78 f0       	brcs	.+30     	; 0x1e5c <malloc+0x124>
    1e3e:	ac 01       	movw	r20, r24
    1e40:	4e 5f       	subi	r20, 0xFE	; 254
    1e42:	5f 4f       	sbci	r21, 0xFF	; 255
    1e44:	24 17       	cp	r18, r20
    1e46:	35 07       	cpc	r19, r21
    1e48:	48 f0       	brcs	.+18     	; 0x1e5c <malloc+0x124>
    1e4a:	4e 0f       	add	r20, r30
    1e4c:	5f 1f       	adc	r21, r31
    1e4e:	50 93 bb 01 	sts	0x01BB, r21
    1e52:	40 93 ba 01 	sts	0x01BA, r20
    1e56:	81 93       	st	Z+, r24
    1e58:	91 93       	st	Z+, r25
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <malloc+0x128>
    1e5c:	e0 e0       	ldi	r30, 0x00	; 0
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	cf 01       	movw	r24, r30
    1e62:	df 91       	pop	r29
    1e64:	cf 91       	pop	r28
    1e66:	08 95       	ret

00001e68 <free>:
    1e68:	cf 93       	push	r28
    1e6a:	df 93       	push	r29
    1e6c:	00 97       	sbiw	r24, 0x00	; 0
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <free+0xa>
    1e70:	87 c0       	rjmp	.+270    	; 0x1f80 <free+0x118>
    1e72:	fc 01       	movw	r30, r24
    1e74:	32 97       	sbiw	r30, 0x02	; 2
    1e76:	13 82       	std	Z+3, r1	; 0x03
    1e78:	12 82       	std	Z+2, r1	; 0x02
    1e7a:	c0 91 bc 01 	lds	r28, 0x01BC
    1e7e:	d0 91 bd 01 	lds	r29, 0x01BD
    1e82:	20 97       	sbiw	r28, 0x00	; 0
    1e84:	81 f4       	brne	.+32     	; 0x1ea6 <free+0x3e>
    1e86:	20 81       	ld	r18, Z
    1e88:	31 81       	ldd	r19, Z+1	; 0x01
    1e8a:	28 0f       	add	r18, r24
    1e8c:	39 1f       	adc	r19, r25
    1e8e:	80 91 ba 01 	lds	r24, 0x01BA
    1e92:	90 91 bb 01 	lds	r25, 0x01BB
    1e96:	82 17       	cp	r24, r18
    1e98:	93 07       	cpc	r25, r19
    1e9a:	79 f5       	brne	.+94     	; 0x1efa <free+0x92>
    1e9c:	f0 93 bb 01 	sts	0x01BB, r31
    1ea0:	e0 93 ba 01 	sts	0x01BA, r30
    1ea4:	6d c0       	rjmp	.+218    	; 0x1f80 <free+0x118>
    1ea6:	de 01       	movw	r26, r28
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	ae 17       	cp	r26, r30
    1eae:	bf 07       	cpc	r27, r31
    1eb0:	50 f4       	brcc	.+20     	; 0x1ec6 <free+0x5e>
    1eb2:	12 96       	adiw	r26, 0x02	; 2
    1eb4:	4d 91       	ld	r20, X+
    1eb6:	5c 91       	ld	r21, X
    1eb8:	13 97       	sbiw	r26, 0x03	; 3
    1eba:	9d 01       	movw	r18, r26
    1ebc:	41 15       	cp	r20, r1
    1ebe:	51 05       	cpc	r21, r1
    1ec0:	09 f1       	breq	.+66     	; 0x1f04 <free+0x9c>
    1ec2:	da 01       	movw	r26, r20
    1ec4:	f3 cf       	rjmp	.-26     	; 0x1eac <free+0x44>
    1ec6:	b3 83       	std	Z+3, r27	; 0x03
    1ec8:	a2 83       	std	Z+2, r26	; 0x02
    1eca:	40 81       	ld	r20, Z
    1ecc:	51 81       	ldd	r21, Z+1	; 0x01
    1ece:	84 0f       	add	r24, r20
    1ed0:	95 1f       	adc	r25, r21
    1ed2:	8a 17       	cp	r24, r26
    1ed4:	9b 07       	cpc	r25, r27
    1ed6:	71 f4       	brne	.+28     	; 0x1ef4 <free+0x8c>
    1ed8:	8d 91       	ld	r24, X+
    1eda:	9c 91       	ld	r25, X
    1edc:	11 97       	sbiw	r26, 0x01	; 1
    1ede:	84 0f       	add	r24, r20
    1ee0:	95 1f       	adc	r25, r21
    1ee2:	02 96       	adiw	r24, 0x02	; 2
    1ee4:	91 83       	std	Z+1, r25	; 0x01
    1ee6:	80 83       	st	Z, r24
    1ee8:	12 96       	adiw	r26, 0x02	; 2
    1eea:	8d 91       	ld	r24, X+
    1eec:	9c 91       	ld	r25, X
    1eee:	13 97       	sbiw	r26, 0x03	; 3
    1ef0:	93 83       	std	Z+3, r25	; 0x03
    1ef2:	82 83       	std	Z+2, r24	; 0x02
    1ef4:	21 15       	cp	r18, r1
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	29 f4       	brne	.+10     	; 0x1f04 <free+0x9c>
    1efa:	f0 93 bd 01 	sts	0x01BD, r31
    1efe:	e0 93 bc 01 	sts	0x01BC, r30
    1f02:	3e c0       	rjmp	.+124    	; 0x1f80 <free+0x118>
    1f04:	d9 01       	movw	r26, r18
    1f06:	13 96       	adiw	r26, 0x03	; 3
    1f08:	fc 93       	st	X, r31
    1f0a:	ee 93       	st	-X, r30
    1f0c:	12 97       	sbiw	r26, 0x02	; 2
    1f0e:	4d 91       	ld	r20, X+
    1f10:	5d 91       	ld	r21, X+
    1f12:	a4 0f       	add	r26, r20
    1f14:	b5 1f       	adc	r27, r21
    1f16:	ea 17       	cp	r30, r26
    1f18:	fb 07       	cpc	r31, r27
    1f1a:	79 f4       	brne	.+30     	; 0x1f3a <free+0xd2>
    1f1c:	80 81       	ld	r24, Z
    1f1e:	91 81       	ldd	r25, Z+1	; 0x01
    1f20:	84 0f       	add	r24, r20
    1f22:	95 1f       	adc	r25, r21
    1f24:	02 96       	adiw	r24, 0x02	; 2
    1f26:	d9 01       	movw	r26, r18
    1f28:	11 96       	adiw	r26, 0x01	; 1
    1f2a:	9c 93       	st	X, r25
    1f2c:	8e 93       	st	-X, r24
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	13 96       	adiw	r26, 0x03	; 3
    1f34:	9c 93       	st	X, r25
    1f36:	8e 93       	st	-X, r24
    1f38:	12 97       	sbiw	r26, 0x02	; 2
    1f3a:	e0 e0       	ldi	r30, 0x00	; 0
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	9b 81       	ldd	r25, Y+3	; 0x03
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <free+0xe4>
    1f46:	fe 01       	movw	r30, r28
    1f48:	ec 01       	movw	r28, r24
    1f4a:	f9 cf       	rjmp	.-14     	; 0x1f3e <free+0xd6>
    1f4c:	ce 01       	movw	r24, r28
    1f4e:	02 96       	adiw	r24, 0x02	; 2
    1f50:	28 81       	ld	r18, Y
    1f52:	39 81       	ldd	r19, Y+1	; 0x01
    1f54:	82 0f       	add	r24, r18
    1f56:	93 1f       	adc	r25, r19
    1f58:	20 91 ba 01 	lds	r18, 0x01BA
    1f5c:	30 91 bb 01 	lds	r19, 0x01BB
    1f60:	28 17       	cp	r18, r24
    1f62:	39 07       	cpc	r19, r25
    1f64:	69 f4       	brne	.+26     	; 0x1f80 <free+0x118>
    1f66:	30 97       	sbiw	r30, 0x00	; 0
    1f68:	29 f4       	brne	.+10     	; 0x1f74 <free+0x10c>
    1f6a:	10 92 bd 01 	sts	0x01BD, r1
    1f6e:	10 92 bc 01 	sts	0x01BC, r1
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <free+0x110>
    1f74:	13 82       	std	Z+3, r1	; 0x03
    1f76:	12 82       	std	Z+2, r1	; 0x02
    1f78:	d0 93 bb 01 	sts	0x01BB, r29
    1f7c:	c0 93 ba 01 	sts	0x01BA, r28
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <do_rand>:
    1f86:	8f 92       	push	r8
    1f88:	9f 92       	push	r9
    1f8a:	af 92       	push	r10
    1f8c:	bf 92       	push	r11
    1f8e:	cf 92       	push	r12
    1f90:	df 92       	push	r13
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	ec 01       	movw	r28, r24
    1f9c:	68 81       	ld	r22, Y
    1f9e:	79 81       	ldd	r23, Y+1	; 0x01
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa4:	61 15       	cp	r22, r1
    1fa6:	71 05       	cpc	r23, r1
    1fa8:	81 05       	cpc	r24, r1
    1faa:	91 05       	cpc	r25, r1
    1fac:	21 f4       	brne	.+8      	; 0x1fb6 <do_rand+0x30>
    1fae:	64 e2       	ldi	r22, 0x24	; 36
    1fb0:	79 ed       	ldi	r23, 0xD9	; 217
    1fb2:	8b e5       	ldi	r24, 0x5B	; 91
    1fb4:	97 e0       	ldi	r25, 0x07	; 7
    1fb6:	2d e1       	ldi	r18, 0x1D	; 29
    1fb8:	33 ef       	ldi	r19, 0xF3	; 243
    1fba:	41 e0       	ldi	r20, 0x01	; 1
    1fbc:	50 e0       	ldi	r21, 0x00	; 0
    1fbe:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <__divmodsi4>
    1fc2:	49 01       	movw	r8, r18
    1fc4:	5a 01       	movw	r10, r20
    1fc6:	9b 01       	movw	r18, r22
    1fc8:	ac 01       	movw	r20, r24
    1fca:	a7 ea       	ldi	r26, 0xA7	; 167
    1fcc:	b1 e4       	ldi	r27, 0x41	; 65
    1fce:	0e 94 1b 13 	call	0x2636	; 0x2636 <__muluhisi3>
    1fd2:	6b 01       	movw	r12, r22
    1fd4:	7c 01       	movw	r14, r24
    1fd6:	ac ee       	ldi	r26, 0xEC	; 236
    1fd8:	b4 ef       	ldi	r27, 0xF4	; 244
    1fda:	a5 01       	movw	r20, r10
    1fdc:	94 01       	movw	r18, r8
    1fde:	0e 94 29 13 	call	0x2652	; 0x2652 <__mulohisi3>
    1fe2:	c6 0e       	add	r12, r22
    1fe4:	d7 1e       	adc	r13, r23
    1fe6:	e8 1e       	adc	r14, r24
    1fe8:	f9 1e       	adc	r15, r25
    1fea:	f7 fe       	sbrs	r15, 7
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <do_rand+0x74>
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	c8 1a       	sub	r12, r24
    1ff2:	d1 08       	sbc	r13, r1
    1ff4:	e1 08       	sbc	r14, r1
    1ff6:	80 e8       	ldi	r24, 0x80	; 128
    1ff8:	f8 0a       	sbc	r15, r24
    1ffa:	c8 82       	st	Y, r12
    1ffc:	d9 82       	std	Y+1, r13	; 0x01
    1ffe:	ea 82       	std	Y+2, r14	; 0x02
    2000:	fb 82       	std	Y+3, r15	; 0x03
    2002:	c6 01       	movw	r24, r12
    2004:	9f 77       	andi	r25, 0x7F	; 127
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	df 90       	pop	r13
    2010:	cf 90       	pop	r12
    2012:	bf 90       	pop	r11
    2014:	af 90       	pop	r10
    2016:	9f 90       	pop	r9
    2018:	8f 90       	pop	r8
    201a:	08 95       	ret

0000201c <rand_r>:
    201c:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <do_rand>
    2020:	08 95       	ret

00002022 <rand>:
    2022:	86 e0       	ldi	r24, 0x06	; 6
    2024:	91 e0       	ldi	r25, 0x01	; 1
    2026:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <do_rand>
    202a:	08 95       	ret

0000202c <srand>:
    202c:	a0 e0       	ldi	r26, 0x00	; 0
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	80 93 06 01 	sts	0x0106, r24
    2034:	90 93 07 01 	sts	0x0107, r25
    2038:	a0 93 08 01 	sts	0x0108, r26
    203c:	b0 93 09 01 	sts	0x0109, r27
    2040:	08 95       	ret

00002042 <fdevopen>:
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	ec 01       	movw	r28, r24
    204c:	8b 01       	movw	r16, r22
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	31 f4       	brne	.+12     	; 0x205e <fdevopen+0x1c>
    2052:	61 15       	cp	r22, r1
    2054:	71 05       	cpc	r23, r1
    2056:	19 f4       	brne	.+6      	; 0x205e <fdevopen+0x1c>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	38 c0       	rjmp	.+112    	; 0x20ce <fdevopen+0x8c>
    205e:	6e e0       	ldi	r22, 0x0E	; 14
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 52 12 	call	0x24a4	; 0x24a4 <calloc>
    206a:	fc 01       	movw	r30, r24
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	a1 f3       	breq	.-24     	; 0x2058 <fdevopen+0x16>
    2070:	80 e8       	ldi	r24, 0x80	; 128
    2072:	83 83       	std	Z+3, r24	; 0x03
    2074:	01 15       	cp	r16, r1
    2076:	11 05       	cpc	r17, r1
    2078:	71 f0       	breq	.+28     	; 0x2096 <fdevopen+0x54>
    207a:	13 87       	std	Z+11, r17	; 0x0b
    207c:	02 87       	std	Z+10, r16	; 0x0a
    207e:	81 e8       	ldi	r24, 0x81	; 129
    2080:	83 83       	std	Z+3, r24	; 0x03
    2082:	80 91 be 01 	lds	r24, 0x01BE
    2086:	90 91 bf 01 	lds	r25, 0x01BF
    208a:	89 2b       	or	r24, r25
    208c:	21 f4       	brne	.+8      	; 0x2096 <fdevopen+0x54>
    208e:	f0 93 bf 01 	sts	0x01BF, r31
    2092:	e0 93 be 01 	sts	0x01BE, r30
    2096:	20 97       	sbiw	r28, 0x00	; 0
    2098:	c9 f0       	breq	.+50     	; 0x20cc <fdevopen+0x8a>
    209a:	d1 87       	std	Z+9, r29	; 0x09
    209c:	c0 87       	std	Z+8, r28	; 0x08
    209e:	83 81       	ldd	r24, Z+3	; 0x03
    20a0:	82 60       	ori	r24, 0x02	; 2
    20a2:	83 83       	std	Z+3, r24	; 0x03
    20a4:	80 91 c0 01 	lds	r24, 0x01C0
    20a8:	90 91 c1 01 	lds	r25, 0x01C1
    20ac:	89 2b       	or	r24, r25
    20ae:	71 f4       	brne	.+28     	; 0x20cc <fdevopen+0x8a>
    20b0:	f0 93 c1 01 	sts	0x01C1, r31
    20b4:	e0 93 c0 01 	sts	0x01C0, r30
    20b8:	80 91 c2 01 	lds	r24, 0x01C2
    20bc:	90 91 c3 01 	lds	r25, 0x01C3
    20c0:	89 2b       	or	r24, r25
    20c2:	21 f4       	brne	.+8      	; 0x20cc <fdevopen+0x8a>
    20c4:	f0 93 c3 01 	sts	0x01C3, r31
    20c8:	e0 93 c2 01 	sts	0x01C2, r30
    20cc:	cf 01       	movw	r24, r30
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	08 95       	ret

000020d8 <printf>:
    20d8:	a0 e0       	ldi	r26, 0x00	; 0
    20da:	b0 e0       	ldi	r27, 0x00	; 0
    20dc:	e2 e7       	ldi	r30, 0x72	; 114
    20de:	f0 e1       	ldi	r31, 0x10	; 16
    20e0:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__prologue_saves__+0x20>
    20e4:	fe 01       	movw	r30, r28
    20e6:	35 96       	adiw	r30, 0x05	; 5
    20e8:	61 91       	ld	r22, Z+
    20ea:	71 91       	ld	r23, Z+
    20ec:	af 01       	movw	r20, r30
    20ee:	80 91 c0 01 	lds	r24, 0x01C0
    20f2:	90 91 c1 01 	lds	r25, 0x01C1
    20f6:	0e 94 80 10 	call	0x2100	; 0x2100 <vfprintf>
    20fa:	e2 e0       	ldi	r30, 0x02	; 2
    20fc:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <__epilogue_restores__+0x20>

00002100 <vfprintf>:
    2100:	ac e0       	ldi	r26, 0x0C	; 12
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e6 e8       	ldi	r30, 0x86	; 134
    2106:	f0 e1       	ldi	r31, 0x10	; 16
    2108:	0c 94 2e 13 	jmp	0x265c	; 0x265c <__prologue_saves__>
    210c:	7c 01       	movw	r14, r24
    210e:	6b 01       	movw	r12, r22
    2110:	8a 01       	movw	r16, r20
    2112:	fc 01       	movw	r30, r24
    2114:	17 82       	std	Z+7, r1	; 0x07
    2116:	16 82       	std	Z+6, r1	; 0x06
    2118:	83 81       	ldd	r24, Z+3	; 0x03
    211a:	81 ff       	sbrs	r24, 1
    211c:	bd c1       	rjmp	.+890    	; 0x2498 <vfprintf+0x398>
    211e:	ce 01       	movw	r24, r28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	4c 01       	movw	r8, r24
    2124:	f7 01       	movw	r30, r14
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	f6 01       	movw	r30, r12
    212a:	93 fd       	sbrc	r25, 3
    212c:	85 91       	lpm	r24, Z+
    212e:	93 ff       	sbrs	r25, 3
    2130:	81 91       	ld	r24, Z+
    2132:	6f 01       	movw	r12, r30
    2134:	88 23       	and	r24, r24
    2136:	09 f4       	brne	.+2      	; 0x213a <vfprintf+0x3a>
    2138:	ab c1       	rjmp	.+854    	; 0x2490 <vfprintf+0x390>
    213a:	85 32       	cpi	r24, 0x25	; 37
    213c:	39 f4       	brne	.+14     	; 0x214c <vfprintf+0x4c>
    213e:	93 fd       	sbrc	r25, 3
    2140:	85 91       	lpm	r24, Z+
    2142:	93 ff       	sbrs	r25, 3
    2144:	81 91       	ld	r24, Z+
    2146:	6f 01       	movw	r12, r30
    2148:	85 32       	cpi	r24, 0x25	; 37
    214a:	29 f4       	brne	.+10     	; 0x2156 <vfprintf+0x56>
    214c:	b7 01       	movw	r22, r14
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    2154:	e7 cf       	rjmp	.-50     	; 0x2124 <vfprintf+0x24>
    2156:	51 2c       	mov	r5, r1
    2158:	31 2c       	mov	r3, r1
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	20 32       	cpi	r18, 0x20	; 32
    215e:	a0 f4       	brcc	.+40     	; 0x2188 <vfprintf+0x88>
    2160:	8b 32       	cpi	r24, 0x2B	; 43
    2162:	69 f0       	breq	.+26     	; 0x217e <vfprintf+0x7e>
    2164:	30 f4       	brcc	.+12     	; 0x2172 <vfprintf+0x72>
    2166:	80 32       	cpi	r24, 0x20	; 32
    2168:	59 f0       	breq	.+22     	; 0x2180 <vfprintf+0x80>
    216a:	83 32       	cpi	r24, 0x23	; 35
    216c:	69 f4       	brne	.+26     	; 0x2188 <vfprintf+0x88>
    216e:	20 61       	ori	r18, 0x10	; 16
    2170:	2c c0       	rjmp	.+88     	; 0x21ca <vfprintf+0xca>
    2172:	8d 32       	cpi	r24, 0x2D	; 45
    2174:	39 f0       	breq	.+14     	; 0x2184 <vfprintf+0x84>
    2176:	80 33       	cpi	r24, 0x30	; 48
    2178:	39 f4       	brne	.+14     	; 0x2188 <vfprintf+0x88>
    217a:	21 60       	ori	r18, 0x01	; 1
    217c:	26 c0       	rjmp	.+76     	; 0x21ca <vfprintf+0xca>
    217e:	22 60       	ori	r18, 0x02	; 2
    2180:	24 60       	ori	r18, 0x04	; 4
    2182:	23 c0       	rjmp	.+70     	; 0x21ca <vfprintf+0xca>
    2184:	28 60       	ori	r18, 0x08	; 8
    2186:	21 c0       	rjmp	.+66     	; 0x21ca <vfprintf+0xca>
    2188:	27 fd       	sbrc	r18, 7
    218a:	27 c0       	rjmp	.+78     	; 0x21da <vfprintf+0xda>
    218c:	30 ed       	ldi	r19, 0xD0	; 208
    218e:	38 0f       	add	r19, r24
    2190:	3a 30       	cpi	r19, 0x0A	; 10
    2192:	78 f4       	brcc	.+30     	; 0x21b2 <vfprintf+0xb2>
    2194:	26 ff       	sbrs	r18, 6
    2196:	06 c0       	rjmp	.+12     	; 0x21a4 <vfprintf+0xa4>
    2198:	fa e0       	ldi	r31, 0x0A	; 10
    219a:	5f 9e       	mul	r5, r31
    219c:	30 0d       	add	r19, r0
    219e:	11 24       	eor	r1, r1
    21a0:	53 2e       	mov	r5, r19
    21a2:	13 c0       	rjmp	.+38     	; 0x21ca <vfprintf+0xca>
    21a4:	8a e0       	ldi	r24, 0x0A	; 10
    21a6:	38 9e       	mul	r3, r24
    21a8:	30 0d       	add	r19, r0
    21aa:	11 24       	eor	r1, r1
    21ac:	33 2e       	mov	r3, r19
    21ae:	20 62       	ori	r18, 0x20	; 32
    21b0:	0c c0       	rjmp	.+24     	; 0x21ca <vfprintf+0xca>
    21b2:	8e 32       	cpi	r24, 0x2E	; 46
    21b4:	21 f4       	brne	.+8      	; 0x21be <vfprintf+0xbe>
    21b6:	26 fd       	sbrc	r18, 6
    21b8:	6b c1       	rjmp	.+726    	; 0x2490 <vfprintf+0x390>
    21ba:	20 64       	ori	r18, 0x40	; 64
    21bc:	06 c0       	rjmp	.+12     	; 0x21ca <vfprintf+0xca>
    21be:	8c 36       	cpi	r24, 0x6C	; 108
    21c0:	11 f4       	brne	.+4      	; 0x21c6 <vfprintf+0xc6>
    21c2:	20 68       	ori	r18, 0x80	; 128
    21c4:	02 c0       	rjmp	.+4      	; 0x21ca <vfprintf+0xca>
    21c6:	88 36       	cpi	r24, 0x68	; 104
    21c8:	41 f4       	brne	.+16     	; 0x21da <vfprintf+0xda>
    21ca:	f6 01       	movw	r30, r12
    21cc:	93 fd       	sbrc	r25, 3
    21ce:	85 91       	lpm	r24, Z+
    21d0:	93 ff       	sbrs	r25, 3
    21d2:	81 91       	ld	r24, Z+
    21d4:	6f 01       	movw	r12, r30
    21d6:	81 11       	cpse	r24, r1
    21d8:	c1 cf       	rjmp	.-126    	; 0x215c <vfprintf+0x5c>
    21da:	98 2f       	mov	r25, r24
    21dc:	9f 7d       	andi	r25, 0xDF	; 223
    21de:	95 54       	subi	r25, 0x45	; 69
    21e0:	93 30       	cpi	r25, 0x03	; 3
    21e2:	28 f4       	brcc	.+10     	; 0x21ee <vfprintf+0xee>
    21e4:	0c 5f       	subi	r16, 0xFC	; 252
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	ff e3       	ldi	r31, 0x3F	; 63
    21ea:	f9 83       	std	Y+1, r31	; 0x01
    21ec:	0d c0       	rjmp	.+26     	; 0x2208 <vfprintf+0x108>
    21ee:	83 36       	cpi	r24, 0x63	; 99
    21f0:	31 f0       	breq	.+12     	; 0x21fe <vfprintf+0xfe>
    21f2:	83 37       	cpi	r24, 0x73	; 115
    21f4:	71 f0       	breq	.+28     	; 0x2212 <vfprintf+0x112>
    21f6:	83 35       	cpi	r24, 0x53	; 83
    21f8:	09 f0       	breq	.+2      	; 0x21fc <vfprintf+0xfc>
    21fa:	5b c0       	rjmp	.+182    	; 0x22b2 <vfprintf+0x1b2>
    21fc:	22 c0       	rjmp	.+68     	; 0x2242 <vfprintf+0x142>
    21fe:	f8 01       	movw	r30, r16
    2200:	80 81       	ld	r24, Z
    2202:	89 83       	std	Y+1, r24	; 0x01
    2204:	0e 5f       	subi	r16, 0xFE	; 254
    2206:	1f 4f       	sbci	r17, 0xFF	; 255
    2208:	44 24       	eor	r4, r4
    220a:	43 94       	inc	r4
    220c:	51 2c       	mov	r5, r1
    220e:	54 01       	movw	r10, r8
    2210:	15 c0       	rjmp	.+42     	; 0x223c <vfprintf+0x13c>
    2212:	38 01       	movw	r6, r16
    2214:	f2 e0       	ldi	r31, 0x02	; 2
    2216:	6f 0e       	add	r6, r31
    2218:	71 1c       	adc	r7, r1
    221a:	f8 01       	movw	r30, r16
    221c:	a0 80       	ld	r10, Z
    221e:	b1 80       	ldd	r11, Z+1	; 0x01
    2220:	26 ff       	sbrs	r18, 6
    2222:	03 c0       	rjmp	.+6      	; 0x222a <vfprintf+0x12a>
    2224:	65 2d       	mov	r22, r5
    2226:	70 e0       	ldi	r23, 0x00	; 0
    2228:	02 c0       	rjmp	.+4      	; 0x222e <vfprintf+0x12e>
    222a:	6f ef       	ldi	r22, 0xFF	; 255
    222c:	7f ef       	ldi	r23, 0xFF	; 255
    222e:	c5 01       	movw	r24, r10
    2230:	2c 87       	std	Y+12, r18	; 0x0c
    2232:	0e 94 80 12 	call	0x2500	; 0x2500 <strnlen>
    2236:	2c 01       	movw	r4, r24
    2238:	83 01       	movw	r16, r6
    223a:	2c 85       	ldd	r18, Y+12	; 0x0c
    223c:	2f 77       	andi	r18, 0x7F	; 127
    223e:	22 2e       	mov	r2, r18
    2240:	17 c0       	rjmp	.+46     	; 0x2270 <vfprintf+0x170>
    2242:	38 01       	movw	r6, r16
    2244:	f2 e0       	ldi	r31, 0x02	; 2
    2246:	6f 0e       	add	r6, r31
    2248:	71 1c       	adc	r7, r1
    224a:	f8 01       	movw	r30, r16
    224c:	a0 80       	ld	r10, Z
    224e:	b1 80       	ldd	r11, Z+1	; 0x01
    2250:	26 ff       	sbrs	r18, 6
    2252:	03 c0       	rjmp	.+6      	; 0x225a <vfprintf+0x15a>
    2254:	65 2d       	mov	r22, r5
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	02 c0       	rjmp	.+4      	; 0x225e <vfprintf+0x15e>
    225a:	6f ef       	ldi	r22, 0xFF	; 255
    225c:	7f ef       	ldi	r23, 0xFF	; 255
    225e:	c5 01       	movw	r24, r10
    2260:	2c 87       	std	Y+12, r18	; 0x0c
    2262:	0e 94 6e 12 	call	0x24dc	; 0x24dc <strnlen_P>
    2266:	2c 01       	movw	r4, r24
    2268:	2c 85       	ldd	r18, Y+12	; 0x0c
    226a:	20 68       	ori	r18, 0x80	; 128
    226c:	22 2e       	mov	r2, r18
    226e:	83 01       	movw	r16, r6
    2270:	23 fc       	sbrc	r2, 3
    2272:	1b c0       	rjmp	.+54     	; 0x22aa <vfprintf+0x1aa>
    2274:	83 2d       	mov	r24, r3
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	48 16       	cp	r4, r24
    227a:	59 06       	cpc	r5, r25
    227c:	b0 f4       	brcc	.+44     	; 0x22aa <vfprintf+0x1aa>
    227e:	b7 01       	movw	r22, r14
    2280:	80 e2       	ldi	r24, 0x20	; 32
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    2288:	3a 94       	dec	r3
    228a:	f4 cf       	rjmp	.-24     	; 0x2274 <vfprintf+0x174>
    228c:	f5 01       	movw	r30, r10
    228e:	27 fc       	sbrc	r2, 7
    2290:	85 91       	lpm	r24, Z+
    2292:	27 fe       	sbrs	r2, 7
    2294:	81 91       	ld	r24, Z+
    2296:	5f 01       	movw	r10, r30
    2298:	b7 01       	movw	r22, r14
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    22a0:	31 10       	cpse	r3, r1
    22a2:	3a 94       	dec	r3
    22a4:	f1 e0       	ldi	r31, 0x01	; 1
    22a6:	4f 1a       	sub	r4, r31
    22a8:	51 08       	sbc	r5, r1
    22aa:	41 14       	cp	r4, r1
    22ac:	51 04       	cpc	r5, r1
    22ae:	71 f7       	brne	.-36     	; 0x228c <vfprintf+0x18c>
    22b0:	e5 c0       	rjmp	.+458    	; 0x247c <vfprintf+0x37c>
    22b2:	84 36       	cpi	r24, 0x64	; 100
    22b4:	11 f0       	breq	.+4      	; 0x22ba <vfprintf+0x1ba>
    22b6:	89 36       	cpi	r24, 0x69	; 105
    22b8:	39 f5       	brne	.+78     	; 0x2308 <vfprintf+0x208>
    22ba:	f8 01       	movw	r30, r16
    22bc:	27 ff       	sbrs	r18, 7
    22be:	07 c0       	rjmp	.+14     	; 0x22ce <vfprintf+0x1ce>
    22c0:	60 81       	ld	r22, Z
    22c2:	71 81       	ldd	r23, Z+1	; 0x01
    22c4:	82 81       	ldd	r24, Z+2	; 0x02
    22c6:	93 81       	ldd	r25, Z+3	; 0x03
    22c8:	0c 5f       	subi	r16, 0xFC	; 252
    22ca:	1f 4f       	sbci	r17, 0xFF	; 255
    22cc:	08 c0       	rjmp	.+16     	; 0x22de <vfprintf+0x1de>
    22ce:	60 81       	ld	r22, Z
    22d0:	71 81       	ldd	r23, Z+1	; 0x01
    22d2:	88 27       	eor	r24, r24
    22d4:	77 fd       	sbrc	r23, 7
    22d6:	80 95       	com	r24
    22d8:	98 2f       	mov	r25, r24
    22da:	0e 5f       	subi	r16, 0xFE	; 254
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	2f 76       	andi	r18, 0x6F	; 111
    22e0:	b2 2e       	mov	r11, r18
    22e2:	97 ff       	sbrs	r25, 7
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <vfprintf+0x1f8>
    22e6:	90 95       	com	r25
    22e8:	80 95       	com	r24
    22ea:	70 95       	com	r23
    22ec:	61 95       	neg	r22
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	8f 4f       	sbci	r24, 0xFF	; 255
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	20 68       	ori	r18, 0x80	; 128
    22f6:	b2 2e       	mov	r11, r18
    22f8:	2a e0       	ldi	r18, 0x0A	; 10
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	a4 01       	movw	r20, r8
    22fe:	0e 94 bd 12 	call	0x257a	; 0x257a <__ultoa_invert>
    2302:	a8 2e       	mov	r10, r24
    2304:	a8 18       	sub	r10, r8
    2306:	44 c0       	rjmp	.+136    	; 0x2390 <vfprintf+0x290>
    2308:	85 37       	cpi	r24, 0x75	; 117
    230a:	29 f4       	brne	.+10     	; 0x2316 <vfprintf+0x216>
    230c:	2f 7e       	andi	r18, 0xEF	; 239
    230e:	b2 2e       	mov	r11, r18
    2310:	2a e0       	ldi	r18, 0x0A	; 10
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	25 c0       	rjmp	.+74     	; 0x2360 <vfprintf+0x260>
    2316:	f2 2f       	mov	r31, r18
    2318:	f9 7f       	andi	r31, 0xF9	; 249
    231a:	bf 2e       	mov	r11, r31
    231c:	8f 36       	cpi	r24, 0x6F	; 111
    231e:	c1 f0       	breq	.+48     	; 0x2350 <vfprintf+0x250>
    2320:	18 f4       	brcc	.+6      	; 0x2328 <vfprintf+0x228>
    2322:	88 35       	cpi	r24, 0x58	; 88
    2324:	79 f0       	breq	.+30     	; 0x2344 <vfprintf+0x244>
    2326:	b4 c0       	rjmp	.+360    	; 0x2490 <vfprintf+0x390>
    2328:	80 37       	cpi	r24, 0x70	; 112
    232a:	19 f0       	breq	.+6      	; 0x2332 <vfprintf+0x232>
    232c:	88 37       	cpi	r24, 0x78	; 120
    232e:	21 f0       	breq	.+8      	; 0x2338 <vfprintf+0x238>
    2330:	af c0       	rjmp	.+350    	; 0x2490 <vfprintf+0x390>
    2332:	2f 2f       	mov	r18, r31
    2334:	20 61       	ori	r18, 0x10	; 16
    2336:	b2 2e       	mov	r11, r18
    2338:	b4 fe       	sbrs	r11, 4
    233a:	0d c0       	rjmp	.+26     	; 0x2356 <vfprintf+0x256>
    233c:	8b 2d       	mov	r24, r11
    233e:	84 60       	ori	r24, 0x04	; 4
    2340:	b8 2e       	mov	r11, r24
    2342:	09 c0       	rjmp	.+18     	; 0x2356 <vfprintf+0x256>
    2344:	24 ff       	sbrs	r18, 4
    2346:	0a c0       	rjmp	.+20     	; 0x235c <vfprintf+0x25c>
    2348:	9f 2f       	mov	r25, r31
    234a:	96 60       	ori	r25, 0x06	; 6
    234c:	b9 2e       	mov	r11, r25
    234e:	06 c0       	rjmp	.+12     	; 0x235c <vfprintf+0x25c>
    2350:	28 e0       	ldi	r18, 0x08	; 8
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	05 c0       	rjmp	.+10     	; 0x2360 <vfprintf+0x260>
    2356:	20 e1       	ldi	r18, 0x10	; 16
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <vfprintf+0x260>
    235c:	20 e1       	ldi	r18, 0x10	; 16
    235e:	32 e0       	ldi	r19, 0x02	; 2
    2360:	f8 01       	movw	r30, r16
    2362:	b7 fe       	sbrs	r11, 7
    2364:	07 c0       	rjmp	.+14     	; 0x2374 <vfprintf+0x274>
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	0c 5f       	subi	r16, 0xFC	; 252
    2370:	1f 4f       	sbci	r17, 0xFF	; 255
    2372:	06 c0       	rjmp	.+12     	; 0x2380 <vfprintf+0x280>
    2374:	60 81       	ld	r22, Z
    2376:	71 81       	ldd	r23, Z+1	; 0x01
    2378:	80 e0       	ldi	r24, 0x00	; 0
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 5f       	subi	r16, 0xFE	; 254
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	a4 01       	movw	r20, r8
    2382:	0e 94 bd 12 	call	0x257a	; 0x257a <__ultoa_invert>
    2386:	a8 2e       	mov	r10, r24
    2388:	a8 18       	sub	r10, r8
    238a:	fb 2d       	mov	r31, r11
    238c:	ff 77       	andi	r31, 0x7F	; 127
    238e:	bf 2e       	mov	r11, r31
    2390:	b6 fe       	sbrs	r11, 6
    2392:	0b c0       	rjmp	.+22     	; 0x23aa <vfprintf+0x2aa>
    2394:	2b 2d       	mov	r18, r11
    2396:	2e 7f       	andi	r18, 0xFE	; 254
    2398:	a5 14       	cp	r10, r5
    239a:	50 f4       	brcc	.+20     	; 0x23b0 <vfprintf+0x2b0>
    239c:	b4 fe       	sbrs	r11, 4
    239e:	0a c0       	rjmp	.+20     	; 0x23b4 <vfprintf+0x2b4>
    23a0:	b2 fc       	sbrc	r11, 2
    23a2:	08 c0       	rjmp	.+16     	; 0x23b4 <vfprintf+0x2b4>
    23a4:	2b 2d       	mov	r18, r11
    23a6:	2e 7e       	andi	r18, 0xEE	; 238
    23a8:	05 c0       	rjmp	.+10     	; 0x23b4 <vfprintf+0x2b4>
    23aa:	7a 2c       	mov	r7, r10
    23ac:	2b 2d       	mov	r18, r11
    23ae:	03 c0       	rjmp	.+6      	; 0x23b6 <vfprintf+0x2b6>
    23b0:	7a 2c       	mov	r7, r10
    23b2:	01 c0       	rjmp	.+2      	; 0x23b6 <vfprintf+0x2b6>
    23b4:	75 2c       	mov	r7, r5
    23b6:	24 ff       	sbrs	r18, 4
    23b8:	0d c0       	rjmp	.+26     	; 0x23d4 <vfprintf+0x2d4>
    23ba:	fe 01       	movw	r30, r28
    23bc:	ea 0d       	add	r30, r10
    23be:	f1 1d       	adc	r31, r1
    23c0:	80 81       	ld	r24, Z
    23c2:	80 33       	cpi	r24, 0x30	; 48
    23c4:	11 f4       	brne	.+4      	; 0x23ca <vfprintf+0x2ca>
    23c6:	29 7e       	andi	r18, 0xE9	; 233
    23c8:	09 c0       	rjmp	.+18     	; 0x23dc <vfprintf+0x2dc>
    23ca:	22 ff       	sbrs	r18, 2
    23cc:	06 c0       	rjmp	.+12     	; 0x23da <vfprintf+0x2da>
    23ce:	73 94       	inc	r7
    23d0:	73 94       	inc	r7
    23d2:	04 c0       	rjmp	.+8      	; 0x23dc <vfprintf+0x2dc>
    23d4:	82 2f       	mov	r24, r18
    23d6:	86 78       	andi	r24, 0x86	; 134
    23d8:	09 f0       	breq	.+2      	; 0x23dc <vfprintf+0x2dc>
    23da:	73 94       	inc	r7
    23dc:	23 fd       	sbrc	r18, 3
    23de:	13 c0       	rjmp	.+38     	; 0x2406 <vfprintf+0x306>
    23e0:	20 ff       	sbrs	r18, 0
    23e2:	06 c0       	rjmp	.+12     	; 0x23f0 <vfprintf+0x2f0>
    23e4:	5a 2c       	mov	r5, r10
    23e6:	73 14       	cp	r7, r3
    23e8:	18 f4       	brcc	.+6      	; 0x23f0 <vfprintf+0x2f0>
    23ea:	53 0c       	add	r5, r3
    23ec:	57 18       	sub	r5, r7
    23ee:	73 2c       	mov	r7, r3
    23f0:	73 14       	cp	r7, r3
    23f2:	68 f4       	brcc	.+26     	; 0x240e <vfprintf+0x30e>
    23f4:	b7 01       	movw	r22, r14
    23f6:	80 e2       	ldi	r24, 0x20	; 32
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	2c 87       	std	Y+12, r18	; 0x0c
    23fc:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    2400:	73 94       	inc	r7
    2402:	2c 85       	ldd	r18, Y+12	; 0x0c
    2404:	f5 cf       	rjmp	.-22     	; 0x23f0 <vfprintf+0x2f0>
    2406:	73 14       	cp	r7, r3
    2408:	10 f4       	brcc	.+4      	; 0x240e <vfprintf+0x30e>
    240a:	37 18       	sub	r3, r7
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <vfprintf+0x310>
    240e:	31 2c       	mov	r3, r1
    2410:	24 ff       	sbrs	r18, 4
    2412:	12 c0       	rjmp	.+36     	; 0x2438 <vfprintf+0x338>
    2414:	b7 01       	movw	r22, r14
    2416:	80 e3       	ldi	r24, 0x30	; 48
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	2c 87       	std	Y+12, r18	; 0x0c
    241c:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    2420:	2c 85       	ldd	r18, Y+12	; 0x0c
    2422:	22 ff       	sbrs	r18, 2
    2424:	17 c0       	rjmp	.+46     	; 0x2454 <vfprintf+0x354>
    2426:	21 ff       	sbrs	r18, 1
    2428:	03 c0       	rjmp	.+6      	; 0x2430 <vfprintf+0x330>
    242a:	88 e5       	ldi	r24, 0x58	; 88
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	02 c0       	rjmp	.+4      	; 0x2434 <vfprintf+0x334>
    2430:	88 e7       	ldi	r24, 0x78	; 120
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	b7 01       	movw	r22, r14
    2436:	0c c0       	rjmp	.+24     	; 0x2450 <vfprintf+0x350>
    2438:	82 2f       	mov	r24, r18
    243a:	86 78       	andi	r24, 0x86	; 134
    243c:	59 f0       	breq	.+22     	; 0x2454 <vfprintf+0x354>
    243e:	21 fd       	sbrc	r18, 1
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <vfprintf+0x346>
    2442:	80 e2       	ldi	r24, 0x20	; 32
    2444:	01 c0       	rjmp	.+2      	; 0x2448 <vfprintf+0x348>
    2446:	8b e2       	ldi	r24, 0x2B	; 43
    2448:	27 fd       	sbrc	r18, 7
    244a:	8d e2       	ldi	r24, 0x2D	; 45
    244c:	b7 01       	movw	r22, r14
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    2454:	a5 14       	cp	r10, r5
    2456:	38 f4       	brcc	.+14     	; 0x2466 <vfprintf+0x366>
    2458:	b7 01       	movw	r22, r14
    245a:	80 e3       	ldi	r24, 0x30	; 48
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    2462:	5a 94       	dec	r5
    2464:	f7 cf       	rjmp	.-18     	; 0x2454 <vfprintf+0x354>
    2466:	aa 94       	dec	r10
    2468:	f4 01       	movw	r30, r8
    246a:	ea 0d       	add	r30, r10
    246c:	f1 1d       	adc	r31, r1
    246e:	80 81       	ld	r24, Z
    2470:	b7 01       	movw	r22, r14
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    2478:	a1 10       	cpse	r10, r1
    247a:	f5 cf       	rjmp	.-22     	; 0x2466 <vfprintf+0x366>
    247c:	33 20       	and	r3, r3
    247e:	09 f4       	brne	.+2      	; 0x2482 <vfprintf+0x382>
    2480:	51 ce       	rjmp	.-862    	; 0x2124 <vfprintf+0x24>
    2482:	b7 01       	movw	r22, r14
    2484:	80 e2       	ldi	r24, 0x20	; 32
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	0e 94 8b 12 	call	0x2516	; 0x2516 <fputc>
    248c:	3a 94       	dec	r3
    248e:	f6 cf       	rjmp	.-20     	; 0x247c <vfprintf+0x37c>
    2490:	f7 01       	movw	r30, r14
    2492:	86 81       	ldd	r24, Z+6	; 0x06
    2494:	97 81       	ldd	r25, Z+7	; 0x07
    2496:	02 c0       	rjmp	.+4      	; 0x249c <vfprintf+0x39c>
    2498:	8f ef       	ldi	r24, 0xFF	; 255
    249a:	9f ef       	ldi	r25, 0xFF	; 255
    249c:	2c 96       	adiw	r28, 0x0c	; 12
    249e:	e2 e1       	ldi	r30, 0x12	; 18
    24a0:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__epilogue_restores__>

000024a4 <calloc>:
    24a4:	0f 93       	push	r16
    24a6:	1f 93       	push	r17
    24a8:	cf 93       	push	r28
    24aa:	df 93       	push	r29
    24ac:	86 9f       	mul	r24, r22
    24ae:	80 01       	movw	r16, r0
    24b0:	87 9f       	mul	r24, r23
    24b2:	10 0d       	add	r17, r0
    24b4:	96 9f       	mul	r25, r22
    24b6:	10 0d       	add	r17, r0
    24b8:	11 24       	eor	r1, r1
    24ba:	c8 01       	movw	r24, r16
    24bc:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <malloc>
    24c0:	ec 01       	movw	r28, r24
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	29 f0       	breq	.+10     	; 0x24d0 <calloc+0x2c>
    24c6:	a8 01       	movw	r20, r16
    24c8:	60 e0       	ldi	r22, 0x00	; 0
    24ca:	70 e0       	ldi	r23, 0x00	; 0
    24cc:	0e 94 79 12 	call	0x24f2	; 0x24f2 <memset>
    24d0:	ce 01       	movw	r24, r28
    24d2:	df 91       	pop	r29
    24d4:	cf 91       	pop	r28
    24d6:	1f 91       	pop	r17
    24d8:	0f 91       	pop	r16
    24da:	08 95       	ret

000024dc <strnlen_P>:
    24dc:	fc 01       	movw	r30, r24
    24de:	05 90       	lpm	r0, Z+
    24e0:	61 50       	subi	r22, 0x01	; 1
    24e2:	70 40       	sbci	r23, 0x00	; 0
    24e4:	01 10       	cpse	r0, r1
    24e6:	d8 f7       	brcc	.-10     	; 0x24de <strnlen_P+0x2>
    24e8:	80 95       	com	r24
    24ea:	90 95       	com	r25
    24ec:	8e 0f       	add	r24, r30
    24ee:	9f 1f       	adc	r25, r31
    24f0:	08 95       	ret

000024f2 <memset>:
    24f2:	dc 01       	movw	r26, r24
    24f4:	01 c0       	rjmp	.+2      	; 0x24f8 <memset+0x6>
    24f6:	6d 93       	st	X+, r22
    24f8:	41 50       	subi	r20, 0x01	; 1
    24fa:	50 40       	sbci	r21, 0x00	; 0
    24fc:	e0 f7       	brcc	.-8      	; 0x24f6 <memset+0x4>
    24fe:	08 95       	ret

00002500 <strnlen>:
    2500:	fc 01       	movw	r30, r24
    2502:	61 50       	subi	r22, 0x01	; 1
    2504:	70 40       	sbci	r23, 0x00	; 0
    2506:	01 90       	ld	r0, Z+
    2508:	01 10       	cpse	r0, r1
    250a:	d8 f7       	brcc	.-10     	; 0x2502 <strnlen+0x2>
    250c:	80 95       	com	r24
    250e:	90 95       	com	r25
    2510:	8e 0f       	add	r24, r30
    2512:	9f 1f       	adc	r25, r31
    2514:	08 95       	ret

00002516 <fputc>:
    2516:	0f 93       	push	r16
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
    251e:	18 2f       	mov	r17, r24
    2520:	09 2f       	mov	r16, r25
    2522:	eb 01       	movw	r28, r22
    2524:	8b 81       	ldd	r24, Y+3	; 0x03
    2526:	81 fd       	sbrc	r24, 1
    2528:	03 c0       	rjmp	.+6      	; 0x2530 <fputc+0x1a>
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	9f ef       	ldi	r25, 0xFF	; 255
    252e:	20 c0       	rjmp	.+64     	; 0x2570 <fputc+0x5a>
    2530:	82 ff       	sbrs	r24, 2
    2532:	10 c0       	rjmp	.+32     	; 0x2554 <fputc+0x3e>
    2534:	4e 81       	ldd	r20, Y+6	; 0x06
    2536:	5f 81       	ldd	r21, Y+7	; 0x07
    2538:	2c 81       	ldd	r18, Y+4	; 0x04
    253a:	3d 81       	ldd	r19, Y+5	; 0x05
    253c:	42 17       	cp	r20, r18
    253e:	53 07       	cpc	r21, r19
    2540:	7c f4       	brge	.+30     	; 0x2560 <fputc+0x4a>
    2542:	e8 81       	ld	r30, Y
    2544:	f9 81       	ldd	r31, Y+1	; 0x01
    2546:	9f 01       	movw	r18, r30
    2548:	2f 5f       	subi	r18, 0xFF	; 255
    254a:	3f 4f       	sbci	r19, 0xFF	; 255
    254c:	39 83       	std	Y+1, r19	; 0x01
    254e:	28 83       	st	Y, r18
    2550:	10 83       	st	Z, r17
    2552:	06 c0       	rjmp	.+12     	; 0x2560 <fputc+0x4a>
    2554:	e8 85       	ldd	r30, Y+8	; 0x08
    2556:	f9 85       	ldd	r31, Y+9	; 0x09
    2558:	81 2f       	mov	r24, r17
    255a:	09 95       	icall
    255c:	89 2b       	or	r24, r25
    255e:	29 f7       	brne	.-54     	; 0x252a <fputc+0x14>
    2560:	2e 81       	ldd	r18, Y+6	; 0x06
    2562:	3f 81       	ldd	r19, Y+7	; 0x07
    2564:	2f 5f       	subi	r18, 0xFF	; 255
    2566:	3f 4f       	sbci	r19, 0xFF	; 255
    2568:	3f 83       	std	Y+7, r19	; 0x07
    256a:	2e 83       	std	Y+6, r18	; 0x06
    256c:	81 2f       	mov	r24, r17
    256e:	90 2f       	mov	r25, r16
    2570:	df 91       	pop	r29
    2572:	cf 91       	pop	r28
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	08 95       	ret

0000257a <__ultoa_invert>:
    257a:	fa 01       	movw	r30, r20
    257c:	aa 27       	eor	r26, r26
    257e:	28 30       	cpi	r18, 0x08	; 8
    2580:	51 f1       	breq	.+84     	; 0x25d6 <__ultoa_invert+0x5c>
    2582:	20 31       	cpi	r18, 0x10	; 16
    2584:	81 f1       	breq	.+96     	; 0x25e6 <__ultoa_invert+0x6c>
    2586:	e8 94       	clt
    2588:	6f 93       	push	r22
    258a:	6e 7f       	andi	r22, 0xFE	; 254
    258c:	6e 5f       	subi	r22, 0xFE	; 254
    258e:	7f 4f       	sbci	r23, 0xFF	; 255
    2590:	8f 4f       	sbci	r24, 0xFF	; 255
    2592:	9f 4f       	sbci	r25, 0xFF	; 255
    2594:	af 4f       	sbci	r26, 0xFF	; 255
    2596:	b1 e0       	ldi	r27, 0x01	; 1
    2598:	3e d0       	rcall	.+124    	; 0x2616 <__ultoa_invert+0x9c>
    259a:	b4 e0       	ldi	r27, 0x04	; 4
    259c:	3c d0       	rcall	.+120    	; 0x2616 <__ultoa_invert+0x9c>
    259e:	67 0f       	add	r22, r23
    25a0:	78 1f       	adc	r23, r24
    25a2:	89 1f       	adc	r24, r25
    25a4:	9a 1f       	adc	r25, r26
    25a6:	a1 1d       	adc	r26, r1
    25a8:	68 0f       	add	r22, r24
    25aa:	79 1f       	adc	r23, r25
    25ac:	8a 1f       	adc	r24, r26
    25ae:	91 1d       	adc	r25, r1
    25b0:	a1 1d       	adc	r26, r1
    25b2:	6a 0f       	add	r22, r26
    25b4:	71 1d       	adc	r23, r1
    25b6:	81 1d       	adc	r24, r1
    25b8:	91 1d       	adc	r25, r1
    25ba:	a1 1d       	adc	r26, r1
    25bc:	20 d0       	rcall	.+64     	; 0x25fe <__ultoa_invert+0x84>
    25be:	09 f4       	brne	.+2      	; 0x25c2 <__ultoa_invert+0x48>
    25c0:	68 94       	set
    25c2:	3f 91       	pop	r19
    25c4:	2a e0       	ldi	r18, 0x0A	; 10
    25c6:	26 9f       	mul	r18, r22
    25c8:	11 24       	eor	r1, r1
    25ca:	30 19       	sub	r19, r0
    25cc:	30 5d       	subi	r19, 0xD0	; 208
    25ce:	31 93       	st	Z+, r19
    25d0:	de f6       	brtc	.-74     	; 0x2588 <__ultoa_invert+0xe>
    25d2:	cf 01       	movw	r24, r30
    25d4:	08 95       	ret
    25d6:	46 2f       	mov	r20, r22
    25d8:	47 70       	andi	r20, 0x07	; 7
    25da:	40 5d       	subi	r20, 0xD0	; 208
    25dc:	41 93       	st	Z+, r20
    25de:	b3 e0       	ldi	r27, 0x03	; 3
    25e0:	0f d0       	rcall	.+30     	; 0x2600 <__ultoa_invert+0x86>
    25e2:	c9 f7       	brne	.-14     	; 0x25d6 <__ultoa_invert+0x5c>
    25e4:	f6 cf       	rjmp	.-20     	; 0x25d2 <__ultoa_invert+0x58>
    25e6:	46 2f       	mov	r20, r22
    25e8:	4f 70       	andi	r20, 0x0F	; 15
    25ea:	40 5d       	subi	r20, 0xD0	; 208
    25ec:	4a 33       	cpi	r20, 0x3A	; 58
    25ee:	18 f0       	brcs	.+6      	; 0x25f6 <__ultoa_invert+0x7c>
    25f0:	49 5d       	subi	r20, 0xD9	; 217
    25f2:	31 fd       	sbrc	r19, 1
    25f4:	40 52       	subi	r20, 0x20	; 32
    25f6:	41 93       	st	Z+, r20
    25f8:	02 d0       	rcall	.+4      	; 0x25fe <__ultoa_invert+0x84>
    25fa:	a9 f7       	brne	.-22     	; 0x25e6 <__ultoa_invert+0x6c>
    25fc:	ea cf       	rjmp	.-44     	; 0x25d2 <__ultoa_invert+0x58>
    25fe:	b4 e0       	ldi	r27, 0x04	; 4
    2600:	a6 95       	lsr	r26
    2602:	97 95       	ror	r25
    2604:	87 95       	ror	r24
    2606:	77 95       	ror	r23
    2608:	67 95       	ror	r22
    260a:	ba 95       	dec	r27
    260c:	c9 f7       	brne	.-14     	; 0x2600 <__ultoa_invert+0x86>
    260e:	00 97       	sbiw	r24, 0x00	; 0
    2610:	61 05       	cpc	r22, r1
    2612:	71 05       	cpc	r23, r1
    2614:	08 95       	ret
    2616:	9b 01       	movw	r18, r22
    2618:	ac 01       	movw	r20, r24
    261a:	0a 2e       	mov	r0, r26
    261c:	06 94       	lsr	r0
    261e:	57 95       	ror	r21
    2620:	47 95       	ror	r20
    2622:	37 95       	ror	r19
    2624:	27 95       	ror	r18
    2626:	ba 95       	dec	r27
    2628:	c9 f7       	brne	.-14     	; 0x261c <__ultoa_invert+0xa2>
    262a:	62 0f       	add	r22, r18
    262c:	73 1f       	adc	r23, r19
    262e:	84 1f       	adc	r24, r20
    2630:	95 1f       	adc	r25, r21
    2632:	a0 1d       	adc	r26, r0
    2634:	08 95       	ret

00002636 <__muluhisi3>:
    2636:	0e 94 65 13 	call	0x26ca	; 0x26ca <__umulhisi3>
    263a:	a5 9f       	mul	r26, r21
    263c:	90 0d       	add	r25, r0
    263e:	b4 9f       	mul	r27, r20
    2640:	90 0d       	add	r25, r0
    2642:	a4 9f       	mul	r26, r20
    2644:	80 0d       	add	r24, r0
    2646:	91 1d       	adc	r25, r1
    2648:	11 24       	eor	r1, r1
    264a:	08 95       	ret

0000264c <__mulshisi3>:
    264c:	b7 ff       	sbrs	r27, 7
    264e:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__muluhisi3>

00002652 <__mulohisi3>:
    2652:	0e 94 1b 13 	call	0x2636	; 0x2636 <__muluhisi3>
    2656:	82 1b       	sub	r24, r18
    2658:	93 0b       	sbc	r25, r19
    265a:	08 95       	ret

0000265c <__prologue_saves__>:
    265c:	2f 92       	push	r2
    265e:	3f 92       	push	r3
    2660:	4f 92       	push	r4
    2662:	5f 92       	push	r5
    2664:	6f 92       	push	r6
    2666:	7f 92       	push	r7
    2668:	8f 92       	push	r8
    266a:	9f 92       	push	r9
    266c:	af 92       	push	r10
    266e:	bf 92       	push	r11
    2670:	cf 92       	push	r12
    2672:	df 92       	push	r13
    2674:	ef 92       	push	r14
    2676:	ff 92       	push	r15
    2678:	0f 93       	push	r16
    267a:	1f 93       	push	r17
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
    2680:	cd b7       	in	r28, 0x3d	; 61
    2682:	de b7       	in	r29, 0x3e	; 62
    2684:	ca 1b       	sub	r28, r26
    2686:	db 0b       	sbc	r29, r27
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	09 94       	ijmp

00002694 <__epilogue_restores__>:
    2694:	2a 88       	ldd	r2, Y+18	; 0x12
    2696:	39 88       	ldd	r3, Y+17	; 0x11
    2698:	48 88       	ldd	r4, Y+16	; 0x10
    269a:	5f 84       	ldd	r5, Y+15	; 0x0f
    269c:	6e 84       	ldd	r6, Y+14	; 0x0e
    269e:	7d 84       	ldd	r7, Y+13	; 0x0d
    26a0:	8c 84       	ldd	r8, Y+12	; 0x0c
    26a2:	9b 84       	ldd	r9, Y+11	; 0x0b
    26a4:	aa 84       	ldd	r10, Y+10	; 0x0a
    26a6:	b9 84       	ldd	r11, Y+9	; 0x09
    26a8:	c8 84       	ldd	r12, Y+8	; 0x08
    26aa:	df 80       	ldd	r13, Y+7	; 0x07
    26ac:	ee 80       	ldd	r14, Y+6	; 0x06
    26ae:	fd 80       	ldd	r15, Y+5	; 0x05
    26b0:	0c 81       	ldd	r16, Y+4	; 0x04
    26b2:	1b 81       	ldd	r17, Y+3	; 0x03
    26b4:	aa 81       	ldd	r26, Y+2	; 0x02
    26b6:	b9 81       	ldd	r27, Y+1	; 0x01
    26b8:	ce 0f       	add	r28, r30
    26ba:	d1 1d       	adc	r29, r1
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	ed 01       	movw	r28, r26
    26c8:	08 95       	ret

000026ca <__umulhisi3>:
    26ca:	a2 9f       	mul	r26, r18
    26cc:	b0 01       	movw	r22, r0
    26ce:	b3 9f       	mul	r27, r19
    26d0:	c0 01       	movw	r24, r0
    26d2:	a3 9f       	mul	r26, r19
    26d4:	70 0d       	add	r23, r0
    26d6:	81 1d       	adc	r24, r1
    26d8:	11 24       	eor	r1, r1
    26da:	91 1d       	adc	r25, r1
    26dc:	b2 9f       	mul	r27, r18
    26de:	70 0d       	add	r23, r0
    26e0:	81 1d       	adc	r24, r1
    26e2:	11 24       	eor	r1, r1
    26e4:	91 1d       	adc	r25, r1
    26e6:	08 95       	ret

000026e8 <_exit>:
    26e8:	f8 94       	cli

000026ea <__stop_program>:
    26ea:	ff cf       	rjmp	.-2      	; 0x26ea <__stop_program>
