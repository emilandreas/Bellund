
ByggernBellLund_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000166  00800100  00003460  000034f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800266  00800266  0000365a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000365a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000480  00000000  00000000  000036b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005245  00000000  00000000  00003b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d4f  00000000  00000000  00008d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001eef  00000000  00000000  0000aaca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e88  00000000  00000000  0000c9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bd2  00000000  00000000  0000d844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003cc9  00000000  00000000  0000e416  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004e8  00000000  00000000  000120df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 92 02 	jmp	0x524	; 0x524 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_14>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <highscore_prompt+0x17c>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e6       	ldi	r30, 0x60	; 96
     37c:	f4 e3       	ldi	r31, 0x34	; 52
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 36       	cpi	r26, 0x66	; 102
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a6 e6       	ldi	r26, 0x66	; 102
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 37       	cpi	r26, 0x72	; 114
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 52 06 	call	0xca4	; 0xca4 <main>
     39e:	0c 94 2e 1a 	jmp	0x345c	; 0x345c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <EEPROM_read>:

// The Atmega 162 contains a 512 bytes EEPROM space.

uint8_t EEPROM_read(unsigned int address){
	//Wait for compleated preveouse write
	while(EECR & (1<<EEWE));
     3a6:	e1 99       	sbic	0x1c, 1	; 28
     3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <EEPROM_read>
	
	//Set write address
	EEAR = address;
     3aa:	9f bb       	out	0x1f, r25	; 31
     3ac:	8e bb       	out	0x1e, r24	; 30
	
	//Start read
	EECR |= (1<<EERE);
     3ae:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     3b0:	8d b3       	in	r24, 0x1d	; 29
}
     3b2:	08 95       	ret

000003b4 <EEPROM_write>:

void EEPROM_write(unsigned int address, uint8_t data){
	//Disable interrupt to make sure write is performed
	cli();
     3b4:	f8 94       	cli
	
	//Wait for compleated preveouse write
	while(EECR & (1<<EEWE));
     3b6:	e1 99       	sbic	0x1c, 1	; 28
     3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <EEPROM_write+0x2>
	
	//Set write address
	EEAR = address;
     3ba:	9f bb       	out	0x1f, r25	; 31
     3bc:	8e bb       	out	0x1e, r24	; 30
	
	//Save data to EEPROM Data Register
	EEDR = data;
     3be:	6d bb       	out	0x1d, r22	; 29
	
	//Set EEMWE to 1 to enable write (set EEWE within four clock cycles to write)
	EECR |= (1<<EEMWE);
     3c0:	e2 9a       	sbi	0x1c, 2	; 28
	
	//Start EEPROM write
	EECR |= (1<<EEWE);
     3c2:	e1 9a       	sbi	0x1c, 1	; 28
	
	//Enable interrupt
	sei();
     3c4:	78 94       	sei
     3c6:	08 95       	ret

000003c8 <init_handler>:
volatile int handelingMessage = 0;


void init_handler(){
	// Set pin as input (PD3 = INT1)
	DDRD &= ~(1 << PD3);
     3c8:	8b 98       	cbi	0x11, 3	; 17
	// Set internal pull-up
	PORTD |= (1 << PD3);
     3ca:	93 9a       	sbi	0x12, 3	; 18
	
	//initialize external interrupt on falling edge
	MCUCR |= (1<<ISC11);
     3cc:	85 b7       	in	r24, 0x35	; 53
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     3d2:	85 b7       	in	r24, 0x35	; 53
     3d4:	8b 7f       	andi	r24, 0xFB	; 251
     3d6:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
     3d8:	80 e8       	ldi	r24, 0x80	; 128
     3da:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     3dc:	78 94       	sei
     3de:	08 95       	ret

000003e0 <send_controlls>:
		default:
			break;
	}
}

void send_controlls(){
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	2a 97       	sbiw	r28, 0x0a	; 10
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
	Message m;
	Joystick J;
	Slider S;
		
	//Joystick
	J = get_joystick_position();
     3f4:	0e 94 81 07 	call	0xf02	; 0xf02 <get_joystick_position>
	m.id = JOY;
     3f8:	19 82       	std	Y+1, r1	; 0x01
	m.length = 8;
     3fa:	28 e0       	ldi	r18, 0x08	; 8
     3fc:	2a 83       	std	Y+2, r18	; 0x02
	m.data[0] = J.X;
     3fe:	6b 83       	std	Y+3, r22	; 0x03
	m.data[1] = J.Y;
     400:	7c 83       	std	Y+4, r23	; 0x04
	m.data[2] = J.D;
     402:	8d 83       	std	Y+5, r24	; 0x05
	m.data[3] = J.Button;
     404:	9e 83       	std	Y+6, r25	; 0x06
		
	//Slider
	S = get_slider_position();
     406:	0e 94 04 07 	call	0xe08	; 0xe08 <get_slider_position>
	m.data[4] = S.left;
     40a:	6f 83       	std	Y+7, r22	; 0x07
	m.data[5] = S.right;
     40c:	78 87       	std	Y+8, r23	; 0x08
	m.data[6] = S.leftButton;
     40e:	89 87       	std	Y+9, r24	; 0x09
	m.data[7] = S.rightButton;
     410:	9a 87       	std	Y+10, r25	; 0x0a
		
	//Send can message
	CAN_transmit(&m);
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	0e 94 96 06 	call	0xd2c	; 0xd2c <CAN_transmit>
}
     41a:	2a 96       	adiw	r28, 0x0a	; 10
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <send_highscore>:

//send ping-pong highscore to node 2 through CAN
void send_highscore(uint8_t i){
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	ca 55       	subi	r28, 0x5A	; 90
     438:	d1 09       	sbc	r29, r1
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	18 2f       	mov	r17, r24
	highscore leaderboard[16];
	highscore_leaderboard(PINGPONG, leaderboard, 16);
     446:	40 e1       	ldi	r20, 0x10	; 16
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	be 01       	movw	r22, r28
     44c:	6f 5f       	subi	r22, 0xFF	; 255
     44e:	7f 4f       	sbci	r23, 0xFF	; 255
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	0e 94 82 03 	call	0x704	; 0x704 <highscore_leaderboard>
	Message m;
	m.id = HIGHSCORE;
     456:	83 e0       	ldi	r24, 0x03	; 3
     458:	62 96       	adiw	r28, 0x12	; 18
     45a:	8f af       	std	Y+63, r24	; 0x3f
     45c:	62 97       	sbiw	r28, 0x12	; 18
	m.length = 5;
     45e:	85 e0       	ldi	r24, 0x05	; 5
     460:	63 96       	adiw	r28, 0x13	; 19
     462:	8f af       	std	Y+63, r24	; 0x3f
     464:	63 97       	sbiw	r28, 0x13	; 19
	m.data[0] = leaderboard[i].place;
     466:	81 2f       	mov	r24, r17
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fc 01       	movw	r30, r24
     46c:	ee 0f       	add	r30, r30
     46e:	ff 1f       	adc	r31, r31
     470:	ee 0f       	add	r30, r30
     472:	ff 1f       	adc	r31, r31
     474:	e8 0f       	add	r30, r24
     476:	f9 1f       	adc	r31, r25
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	8c 0f       	add	r24, r28
     47e:	9d 1f       	adc	r25, r29
     480:	e8 0f       	add	r30, r24
     482:	f9 1f       	adc	r31, r25
     484:	84 81       	ldd	r24, Z+4	; 0x04
     486:	64 96       	adiw	r28, 0x14	; 20
     488:	8f af       	std	Y+63, r24	; 0x3f
     48a:	64 97       	sbiw	r28, 0x14	; 20
	m.data[1] = leaderboard[i].name[0];
     48c:	80 81       	ld	r24, Z
     48e:	65 96       	adiw	r28, 0x15	; 21
     490:	8f af       	std	Y+63, r24	; 0x3f
     492:	65 97       	sbiw	r28, 0x15	; 21
	m.data[2] = leaderboard[i].name[1];
     494:	81 81       	ldd	r24, Z+1	; 0x01
     496:	66 96       	adiw	r28, 0x16	; 22
     498:	8f af       	std	Y+63, r24	; 0x3f
     49a:	66 97       	sbiw	r28, 0x16	; 22
	m.data[3] = leaderboard[i].name[2];
     49c:	82 81       	ldd	r24, Z+2	; 0x02
     49e:	67 96       	adiw	r28, 0x17	; 23
     4a0:	8f af       	std	Y+63, r24	; 0x3f
     4a2:	67 97       	sbiw	r28, 0x17	; 23
	m.data[4] = leaderboard[i].score;
     4a4:	83 81       	ldd	r24, Z+3	; 0x03
     4a6:	68 96       	adiw	r28, 0x18	; 24
     4a8:	8f af       	std	Y+63, r24	; 0x3f
     4aa:	68 97       	sbiw	r28, 0x18	; 24
	CAN_transmit(&m);
     4ac:	ce 01       	movw	r24, r28
     4ae:	8f 5a       	subi	r24, 0xAF	; 175
     4b0:	9f 4f       	sbci	r25, 0xFF	; 255
     4b2:	0e 94 96 06 	call	0xd2c	; 0xd2c <CAN_transmit>
}
     4b6:	c6 5a       	subi	r28, 0xA6	; 166
     4b8:	df 4f       	sbci	r29, 0xFF	; 255
     4ba:	0f b6       	in	r0, 0x3f	; 63
     4bc:	f8 94       	cli
     4be:	de bf       	out	0x3e, r29	; 62
     4c0:	0f be       	out	0x3f, r0	; 63
     4c2:	cd bf       	out	0x3d, r28	; 61
     4c4:	df 91       	pop	r29
     4c6:	cf 91       	pop	r28
     4c8:	1f 91       	pop	r17
     4ca:	08 95       	ret

000004cc <handle_message>:
ISR(INT1_vect){
	handle_message();
}


void handle_message(){
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	2a 97       	sbiw	r28, 0x0a	; 10
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
	Message m;
	CAN_receive(&m);
     4e0:	ce 01       	movw	r24, r28
     4e2:	01 96       	adiw	r24, 0x01	; 1
     4e4:	0e 94 c9 06 	call	0xd92	; 0xd92 <CAN_receive>
	
	//Decide what to do
	switch(m.id){
     4e8:	89 81       	ldd	r24, Y+1	; 0x01
     4ea:	82 30       	cpi	r24, 0x02	; 2
     4ec:	39 f0       	breq	.+14     	; 0x4fc <handle_message+0x30>
     4ee:	83 30       	cpi	r24, 0x03	; 3
     4f0:	61 f0       	breq	.+24     	; 0x50a <__stack+0xb>
     4f2:	81 30       	cpi	r24, 0x01	; 1
     4f4:	71 f4       	brne	.+28     	; 0x512 <__stack+0x13>
		case JOY:
			break;
		case JOYREQ:
			send_controlls();
     4f6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <send_controlls>
			break;
     4fa:	0b c0       	rjmp	.+22     	; 0x512 <__stack+0x13>
		case GAME_STATUS:
			state_set(m.data[0]);
     4fc:	8b 81       	ldd	r24, Y+3	; 0x03
     4fe:	0e 94 45 06 	call	0xc8a	; 0xc8a <state_set>
			score_set(m.data[1]);
     502:	8c 81       	ldd	r24, Y+4	; 0x04
     504:	0e 94 48 06 	call	0xc90	; 0xc90 <score_set>
			break;
     508:	04 c0       	rjmp	.+8      	; 0x512 <__stack+0x13>
		case HIGHSCORE:
			send_highscore(m.data[0]);
     50a:	8b 81       	ldd	r24, Y+3	; 0x03
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 16 02 	call	0x42c	; 0x42c <send_highscore>
		default:
			break;
	}
}
     512:	2a 96       	adiw	r28, 0x0a	; 10
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <__vector_2>:
	
	//Enable global interrupts
	sei();
}

ISR(INT1_vect){
     524:	1f 92       	push	r1
     526:	0f 92       	push	r0
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	0f 92       	push	r0
     52c:	11 24       	eor	r1, r1
     52e:	2f 93       	push	r18
     530:	3f 93       	push	r19
     532:	4f 93       	push	r20
     534:	5f 93       	push	r21
     536:	6f 93       	push	r22
     538:	7f 93       	push	r23
     53a:	8f 93       	push	r24
     53c:	9f 93       	push	r25
     53e:	af 93       	push	r26
     540:	bf 93       	push	r27
     542:	ef 93       	push	r30
     544:	ff 93       	push	r31
	handle_message();
     546:	0e 94 66 02 	call	0x4cc	; 0x4cc <handle_message>
}
     54a:	ff 91       	pop	r31
     54c:	ef 91       	pop	r30
     54e:	bf 91       	pop	r27
     550:	af 91       	pop	r26
     552:	9f 91       	pop	r25
     554:	8f 91       	pop	r24
     556:	7f 91       	pop	r23
     558:	6f 91       	pop	r22
     55a:	5f 91       	pop	r21
     55c:	4f 91       	pop	r20
     55e:	3f 91       	pop	r19
     560:	2f 91       	pop	r18
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
     56c:	80 eb       	ldi	r24, 0xB0	; 176
     56e:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     570:	81 e5       	ldi	r24, 0x51	; 81
     572:	8d b9       	out	0x0d, r24	; 13
     574:	08 95       	ret

00000576 <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
     576:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
     578:	77 9b       	sbis	0x0e, 7	; 14
     57a:	fe cf       	rjmp	.-4      	; 0x578 <SPI_transmit+0x2>
	//Return answer
	return SPDR;
     57c:	8f b1       	in	r24, 0x0f	; 15
}
     57e:	08 95       	ret

00000580 <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
     580:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_transmit>
     584:	08 95       	ret

00000586 <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
     586:	8c ec       	ldi	r24, 0xCC	; 204
     588:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_transmit>
}
     58c:	08 95       	ret

0000058e <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
     58e:	c4 9a       	sbi	0x18, 4	; 24
     590:	08 95       	ret

00000592 <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
     592:	c4 98       	cbi	0x18, 4	; 24
     594:	08 95       	ret

00000596 <highscore_save>:
#include "..\Driver_files\EEPROM_driver.h"
#include "..\Driver_files\oled_driver.h"
#include "..\Driver_files\joy_driver.h"


void highscore_save(uint8_t game, highscore *score){
     596:	6f 92       	push	r6
     598:	7f 92       	push	r7
     59a:	8f 92       	push	r8
     59c:	9f 92       	push	r9
     59e:	af 92       	push	r10
     5a0:	bf 92       	push	r11
     5a2:	cf 92       	push	r12
     5a4:	df 92       	push	r13
     5a6:	ef 92       	push	r14
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	8b 01       	movw	r16, r22
	if (score->place > 0 && score->place < 17){
     5b4:	fb 01       	movw	r30, r22
     5b6:	84 80       	ldd	r8, Z+4	; 0x04
     5b8:	9f ef       	ldi	r25, 0xFF	; 255
     5ba:	98 0d       	add	r25, r8
     5bc:	90 31       	cpi	r25, 0x10	; 16
     5be:	28 f5       	brcc	.+74     	; 0x60a <highscore_save+0x74>
		//Calculate index of score
		int index = (score->place-1)*4;
     5c0:	91 2c       	mov	r9, r1
     5c2:	f1 e0       	ldi	r31, 0x01	; 1
     5c4:	8f 1a       	sub	r8, r31
     5c6:	91 08       	sbc	r9, r1
     5c8:	88 0c       	add	r8, r8
     5ca:	99 1c       	adc	r9, r9
     5cc:	88 0c       	add	r8, r8
     5ce:	99 1c       	adc	r9, r9
     5d0:	eb 01       	movw	r28, r22
		
		//Save name, score in EEPROM
		for (int i = 0; i < 3; i++){
     5d2:	61 2c       	mov	r6, r1
     5d4:	71 2c       	mov	r7, r1
			EEPROM_write(game + index + i, score->name[i]);
     5d6:	e8 2e       	mov	r14, r24
     5d8:	f1 2c       	mov	r15, r1
     5da:	54 01       	movw	r10, r8
     5dc:	ae 0c       	add	r10, r14
     5de:	bf 1c       	adc	r11, r15
     5e0:	69 91       	ld	r22, Y+
     5e2:	c5 01       	movw	r24, r10
     5e4:	86 0d       	add	r24, r6
     5e6:	97 1d       	adc	r25, r7
     5e8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <EEPROM_write>
	if (score->place > 0 && score->place < 17){
		//Calculate index of score
		int index = (score->place-1)*4;
		
		//Save name, score in EEPROM
		for (int i = 0; i < 3; i++){
     5ec:	8f ef       	ldi	r24, 0xFF	; 255
     5ee:	68 1a       	sub	r6, r24
     5f0:	78 0a       	sbc	r7, r24
     5f2:	93 e0       	ldi	r25, 0x03	; 3
     5f4:	69 16       	cp	r6, r25
     5f6:	71 04       	cpc	r7, r1
     5f8:	99 f7       	brne	.-26     	; 0x5e0 <highscore_save+0x4a>
			EEPROM_write(game + index + i, score->name[i]);
		}
		EEPROM_write(game + index + 3, score->score);
     5fa:	c4 01       	movw	r24, r8
     5fc:	8e 0d       	add	r24, r14
     5fe:	9f 1d       	adc	r25, r15
     600:	f8 01       	movw	r30, r16
     602:	63 81       	ldd	r22, Z+3	; 0x03
     604:	03 96       	adiw	r24, 0x03	; 3
     606:	0e 94 da 01 	call	0x3b4	; 0x3b4 <EEPROM_write>
	}
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	ff 90       	pop	r15
     614:	ef 90       	pop	r14
     616:	df 90       	pop	r13
     618:	cf 90       	pop	r12
     61a:	bf 90       	pop	r11
     61c:	af 90       	pop	r10
     61e:	9f 90       	pop	r9
     620:	8f 90       	pop	r8
     622:	7f 90       	pop	r7
     624:	6f 90       	pop	r6
     626:	08 95       	ret

00000628 <highscore_get>:
		}
		return score->place;
	}
}

highscore highscore_get(uint8_t game, uint8_t position){
     628:	5f 92       	push	r5
     62a:	6f 92       	push	r6
     62c:	7f 92       	push	r7
     62e:	8f 92       	push	r8
     630:	9f 92       	push	r9
     632:	af 92       	push	r10
     634:	bf 92       	push	r11
     636:	cf 92       	push	r12
     638:	df 92       	push	r13
     63a:	ef 92       	push	r14
     63c:	ff 92       	push	r15
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	cd b7       	in	r28, 0x3d	; 61
     648:	de b7       	in	r29, 0x3e	; 62
     64a:	2a 97       	sbiw	r28, 0x0a	; 10
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	56 2e       	mov	r5, r22
	highscore hs;
	
	//Make sure legal position between 1 and 16
	position = (position > 0 && position < 17)? position : 0;
     658:	9f ef       	ldi	r25, 0xFF	; 255
     65a:	96 0f       	add	r25, r22
     65c:	90 31       	cpi	r25, 0x10	; 16
     65e:	08 f0       	brcs	.+2      	; 0x662 <highscore_get+0x3a>
     660:	51 2c       	mov	r5, r1
	hs.place = position;
	
	//Calculate index of score
	int index = (position-1)*4;
     662:	65 2c       	mov	r6, r5
     664:	71 2c       	mov	r7, r1
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	69 1a       	sub	r6, r25
     66a:	71 08       	sbc	r7, r1
     66c:	66 0c       	add	r6, r6
     66e:	77 1c       	adc	r7, r7
     670:	66 0c       	add	r6, r6
     672:	77 1c       	adc	r7, r7
     674:	8e 01       	movw	r16, r28
     676:	0a 5f       	subi	r16, 0xFA	; 250
     678:	1f 4f       	sbci	r17, 0xFF	; 255
     67a:	4e 01       	movw	r8, r28
     67c:	e9 e0       	ldi	r30, 0x09	; 9
     67e:	8e 0e       	add	r8, r30
     680:	91 1c       	adc	r9, r1
	
	//Get name, score from EEPROM
	for (int i = 0; i < 3; i++){
		hs.name[i] = EEPROM_read(game + index + i);
     682:	e8 2e       	mov	r14, r24
     684:	f1 2c       	mov	r15, r1
     686:	57 01       	movw	r10, r14
     688:	a0 1a       	sub	r10, r16
     68a:	b1 0a       	sbc	r11, r17
     68c:	a6 0c       	add	r10, r6
     68e:	b7 1c       	adc	r11, r7
     690:	c5 01       	movw	r24, r10
     692:	80 0f       	add	r24, r16
     694:	91 1f       	adc	r25, r17
     696:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <EEPROM_read>
     69a:	f8 01       	movw	r30, r16
     69c:	81 93       	st	Z+, r24
     69e:	8f 01       	movw	r16, r30
	
	//Calculate index of score
	int index = (position-1)*4;
	
	//Get name, score from EEPROM
	for (int i = 0; i < 3; i++){
     6a0:	e8 15       	cp	r30, r8
     6a2:	f9 05       	cpc	r31, r9
     6a4:	a9 f7       	brne	.-22     	; 0x690 <highscore_get+0x68>
		hs.name[i] = EEPROM_read(game + index + i);
	}
	hs.score = EEPROM_read(game + index + 3);
     6a6:	c3 01       	movw	r24, r6
     6a8:	8e 0d       	add	r24, r14
     6aa:	9f 1d       	adc	r25, r15
     6ac:	03 96       	adiw	r24, 0x03	; 3
     6ae:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <EEPROM_read>
	return hs;
     6b2:	89 87       	std	Y+9, r24	; 0x09
     6b4:	5a 86       	std	Y+10, r5	; 0x0a
     6b6:	85 e0       	ldi	r24, 0x05	; 5
     6b8:	fe 01       	movw	r30, r28
     6ba:	36 96       	adiw	r30, 0x06	; 6
     6bc:	de 01       	movw	r26, r28
     6be:	11 96       	adiw	r26, 0x01	; 1
     6c0:	01 90       	ld	r0, Z+
     6c2:	0d 92       	st	X+, r0
     6c4:	8a 95       	dec	r24
     6c6:	e1 f7       	brne	.-8      	; 0x6c0 <highscore_get+0x98>
     6c8:	29 81       	ldd	r18, Y+1	; 0x01
     6ca:	3a 81       	ldd	r19, Y+2	; 0x02
     6cc:	4b 81       	ldd	r20, Y+3	; 0x03
     6ce:	5c 81       	ldd	r21, Y+4	; 0x04
     6d0:	6d 81       	ldd	r22, Y+5	; 0x05
}
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	2a 96       	adiw	r28, 0x0a	; 10
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	ff 90       	pop	r15
     6ee:	ef 90       	pop	r14
     6f0:	df 90       	pop	r13
     6f2:	cf 90       	pop	r12
     6f4:	bf 90       	pop	r11
     6f6:	af 90       	pop	r10
     6f8:	9f 90       	pop	r9
     6fa:	8f 90       	pop	r8
     6fc:	7f 90       	pop	r7
     6fe:	6f 90       	pop	r6
     700:	5f 90       	pop	r5
     702:	08 95       	ret

00000704 <highscore_leaderboard>:


void highscore_leaderboard(uint8_t game, highscore leaderboard[], int length){
     704:	df 92       	push	r13
     706:	ef 92       	push	r14
     708:	ff 92       	push	r15
     70a:	0f 93       	push	r16
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2e       	mov	r13, r24
	for (int i = 0; i < length; i++){
     714:	14 16       	cp	r1, r20
     716:	15 06       	cpc	r1, r21
     718:	bc f4       	brge	.+46     	; 0x748 <highscore_leaderboard+0x44>
     71a:	c6 2f       	mov	r28, r22
     71c:	d7 2f       	mov	r29, r23
     71e:	7a 01       	movw	r14, r20
     720:	8f ef       	ldi	r24, 0xFF	; 255
     722:	e8 1a       	sub	r14, r24
     724:	f8 0a       	sbc	r15, r24
     726:	01 e0       	ldi	r16, 0x01	; 1
     728:	10 e0       	ldi	r17, 0x00	; 0
		leaderboard[i] = highscore_get(game, i+1);
     72a:	60 2f       	mov	r22, r16
     72c:	8d 2d       	mov	r24, r13
     72e:	0e 94 14 03 	call	0x628	; 0x628 <highscore_get>
     732:	28 83       	st	Y, r18
     734:	39 83       	std	Y+1, r19	; 0x01
     736:	4a 83       	std	Y+2, r20	; 0x02
     738:	5b 83       	std	Y+3, r21	; 0x03
     73a:	6c 83       	std	Y+4, r22	; 0x04
     73c:	0f 5f       	subi	r16, 0xFF	; 255
     73e:	1f 4f       	sbci	r17, 0xFF	; 255
     740:	25 96       	adiw	r28, 0x05	; 5
	return hs;
}


void highscore_leaderboard(uint8_t game, highscore leaderboard[], int length){
	for (int i = 0; i < length; i++){
     742:	0e 15       	cp	r16, r14
     744:	1f 05       	cpc	r17, r15
     746:	89 f7       	brne	.-30     	; 0x72a <highscore_leaderboard+0x26>
		leaderboard[i] = highscore_get(game, i+1);
	}
}
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	ef 90       	pop	r14
     754:	df 90       	pop	r13
     756:	08 95       	ret

00000758 <highscore_add>:
		}
		EEPROM_write(game + index + 3, score->score);
	}
}

uint8_t highscore_add(uint8_t game, highscore *score){
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	c0 55       	subi	r28, 0x50	; 80
     770:	d1 09       	sbc	r29, r1
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	d8 2e       	mov	r13, r24
     77e:	7b 01       	movw	r14, r22
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
     780:	40 e1       	ldi	r20, 0x10	; 16
     782:	50 e0       	ldi	r21, 0x00	; 0
     784:	be 01       	movw	r22, r28
     786:	6f 5f       	subi	r22, 0xFF	; 255
     788:	7f 4f       	sbci	r23, 0xFF	; 255
     78a:	0e 94 82 03 	call	0x704	; 0x704 <highscore_leaderboard>
	score->place = 0;
     78e:	f7 01       	movw	r30, r14
     790:	14 82       	std	Z+4, r1	; 0x04
	
	//find place
	for(int i = 0; i < 16; i++){
		if(leaderboard[i].score < score->score){
     792:	93 81       	ldd	r25, Z+3	; 0x03
     794:	fe 01       	movw	r30, r28
     796:	34 96       	adiw	r30, 0x04	; 4
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
	score->place = 0;
	
	//find place
	for(int i = 0; i < 16; i++){
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	30 e0       	ldi	r19, 0x00	; 0
		if(leaderboard[i].score < score->score){
     79c:	80 81       	ld	r24, Z
     79e:	89 17       	cp	r24, r25
     7a0:	80 f4       	brcc	.+32     	; 0x7c2 <highscore_add+0x6a>
			score->place = leaderboard[i].place;
     7a2:	f9 01       	movw	r30, r18
     7a4:	ee 0f       	add	r30, r30
     7a6:	ff 1f       	adc	r31, r31
     7a8:	ee 0f       	add	r30, r30
     7aa:	ff 1f       	adc	r31, r31
     7ac:	2e 0f       	add	r18, r30
     7ae:	3f 1f       	adc	r19, r31
     7b0:	fe 01       	movw	r30, r28
     7b2:	e2 0f       	add	r30, r18
     7b4:	f3 1f       	adc	r31, r19
     7b6:	85 81       	ldd	r24, Z+5	; 0x05
     7b8:	f7 01       	movw	r30, r14
     7ba:	84 83       	std	Z+4, r24	; 0x04
			i = 16;
		}
	}
	
	//return 0 if not a highscore
	if(score->place == 0){
     7bc:	88 23       	and	r24, r24
     7be:	a1 f1       	breq	.+104    	; 0x828 <highscore_add+0xd0>
     7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <highscore_add+0x78>
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
	score->place = 0;
	
	//find place
	for(int i = 0; i < 16; i++){
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	35 96       	adiw	r30, 0x05	; 5
     7c8:	20 31       	cpi	r18, 0x10	; 16
     7ca:	31 05       	cpc	r19, r1
     7cc:	39 f7       	brne	.-50     	; 0x79c <highscore_add+0x44>
     7ce:	2e c0       	rjmp	.+92     	; 0x82c <highscore_add+0xd4>
		return 0;
	}
	
	// Add score and move down other scores
	else{
		highscore_save(game, score);
     7d0:	b7 01       	movw	r22, r14
     7d2:	8d 2d       	mov	r24, r13
     7d4:	0e 94 cb 02 	call	0x596	; 0x596 <highscore_save>
		for (int i = score->place -1; i < 16; i++){
     7d8:	f7 01       	movw	r30, r14
     7da:	84 81       	ldd	r24, Z+4	; 0x04
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	80 31       	cpi	r24, 0x10	; 16
     7e2:	91 05       	cpc	r25, r1
     7e4:	f4 f4       	brge	.+60     	; 0x822 <highscore_add+0xca>
     7e6:	8c 01       	movw	r16, r24
     7e8:	00 0f       	add	r16, r16
     7ea:	11 1f       	adc	r17, r17
     7ec:	00 0f       	add	r16, r16
     7ee:	11 1f       	adc	r17, r17
     7f0:	08 0f       	add	r16, r24
     7f2:	19 1f       	adc	r17, r25
     7f4:	0c 0f       	add	r16, r28
     7f6:	1d 1f       	adc	r17, r29
     7f8:	0b 5f       	subi	r16, 0xFB	; 251
     7fa:	1f 4f       	sbci	r17, 0xFF	; 255
     7fc:	5e 01       	movw	r10, r28
     7fe:	f5 e5       	ldi	r31, 0x55	; 85
     800:	af 0e       	add	r10, r31
     802:	b1 1c       	adc	r11, r1
			leaderboard[i].place++;
     804:	f8 01       	movw	r30, r16
     806:	80 81       	ld	r24, Z
     808:	8f 5f       	subi	r24, 0xFF	; 255
     80a:	80 83       	st	Z, r24
     80c:	b8 01       	movw	r22, r16
     80e:	64 50       	subi	r22, 0x04	; 4
     810:	71 09       	sbc	r23, r1
			highscore_save(game, &leaderboard[i]);
     812:	8d 2d       	mov	r24, r13
     814:	0e 94 cb 02 	call	0x596	; 0x596 <highscore_save>
     818:	0b 5f       	subi	r16, 0xFB	; 251
     81a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	// Add score and move down other scores
	else{
		highscore_save(game, score);
		for (int i = score->place -1; i < 16; i++){
     81c:	0a 15       	cp	r16, r10
     81e:	1b 05       	cpc	r17, r11
     820:	89 f7       	brne	.-30     	; 0x804 <highscore_add+0xac>
			leaderboard[i].place++;
			highscore_save(game, &leaderboard[i]);
		}
		return score->place;
     822:	f7 01       	movw	r30, r14
     824:	84 81       	ldd	r24, Z+4	; 0x04
     826:	03 c0       	rjmp	.+6      	; 0x82e <highscore_add+0xd6>
		}
	}
	
	//return 0 if not a highscore
	if(score->place == 0){
		return 0;
     828:	80 e0       	ldi	r24, 0x00	; 0
     82a:	01 c0       	rjmp	.+2      	; 0x82e <highscore_add+0xd6>
     82c:	80 e0       	ldi	r24, 0x00	; 0
			leaderboard[i].place++;
			highscore_save(game, &leaderboard[i]);
		}
		return score->place;
	}
}
     82e:	c0 5b       	subi	r28, 0xB0	; 176
     830:	df 4f       	sbci	r29, 0xFF	; 255
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	1f 91       	pop	r17
     842:	0f 91       	pop	r16
     844:	ff 90       	pop	r15
     846:	ef 90       	pop	r14
     848:	df 90       	pop	r13
     84a:	bf 90       	pop	r11
     84c:	af 90       	pop	r10
     84e:	08 95       	ret

00000850 <highscore_clear>:
	for (int i = 0; i < length; i++){
		leaderboard[i] = highscore_get(game, i+1);
	}
}

void highscore_clear(uint8_t game){
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	00 d0       	rcall	.+0      	; 0x85a <highscore_clear+0xa>
     85a:	00 d0       	rcall	.+0      	; 0x85c <highscore_clear+0xc>
     85c:	1f 92       	push	r1
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	08 2f       	mov	r16, r24
	highscore hs;
	
	hs.name[0] = 'N';
     864:	8e e4       	ldi	r24, 0x4E	; 78
     866:	89 83       	std	Y+1, r24	; 0x01
	hs.name[1] = 'A';
     868:	91 e4       	ldi	r25, 0x41	; 65
     86a:	9a 83       	std	Y+2, r25	; 0x02
	hs.name[2] = 'N';
     86c:	8b 83       	std	Y+3, r24	; 0x03
	hs.score = 0;
     86e:	1c 82       	std	Y+4, r1	; 0x04
     870:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 0; i < 16; i++){
		hs.place = i + 1;
     872:	1d 83       	std	Y+5, r17	; 0x05
		highscore_save(game, &hs);
     874:	be 01       	movw	r22, r28
     876:	6f 5f       	subi	r22, 0xFF	; 255
     878:	7f 4f       	sbci	r23, 0xFF	; 255
     87a:	80 2f       	mov	r24, r16
     87c:	0e 94 cb 02 	call	0x596	; 0x596 <highscore_save>
     880:	1f 5f       	subi	r17, 0xFF	; 255
	
	hs.name[0] = 'N';
	hs.name[1] = 'A';
	hs.name[2] = 'N';
	hs.score = 0;
	for (int i = 0; i < 16; i++){
     882:	11 31       	cpi	r17, 0x11	; 17
     884:	b1 f7       	brne	.-20     	; 0x872 <highscore_clear+0x22>
		hs.place = i + 1;
		highscore_save(game, &hs);
	} 
}
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	0f 90       	pop	r0
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret

0000089a <highscore_clear_all>:

void highscore_clear_all(){
	highscore_clear(PINGPONG);
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 28 04 	call	0x850	; 0x850 <highscore_clear>
	highscore_clear(PONG);
     8a0:	80 e8       	ldi	r24, 0x80	; 128
     8a2:	0e 94 28 04 	call	0x850	; 0x850 <highscore_clear>
	highscore_clear(SNAKE);
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	0e 94 28 04 	call	0x850	; 0x850 <highscore_clear>
     8ac:	08 95       	ret

000008ae <highscore_print>:
}

void highscore_print(uint8_t game){
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	cf 92       	push	r12
     8b4:	df 92       	push	r13
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	c0 56       	subi	r28, 0x60	; 96
     8c8:	d1 09       	sbc	r29, r1
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
	//Get highscore list
	highscore hslist[16];
	highscore_leaderboard(game, hslist, 16);
     8d4:	40 e1       	ldi	r20, 0x10	; 16
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	be 01       	movw	r22, r28
     8da:	6f 5f       	subi	r22, 0xFF	; 255
     8dc:	7f 4f       	sbci	r23, 0xFF	; 255
     8de:	0e 94 82 03 	call	0x704	; 0x704 <highscore_leaderboard>
	
	//Clear SRAM and print list to SRAM
	oled_sram_clear_screen(0);
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
     8ea:	8e 01       	movw	r16, r28
     8ec:	0b 5f       	subi	r16, 0xFB	; 251
     8ee:	1f 4f       	sbci	r17, 0xFF	; 255
	char score[16];
	for (int i = 0; i < 7; i++){
     8f0:	e1 2c       	mov	r14, r1
     8f2:	f1 2c       	mov	r15, r1
		sprintf(score, "%i %c%c%c %i", hslist[i].place, hslist[i].name[0], hslist[i].name[1], hslist[i].name[2], hslist[i].score );
     8f4:	0f 2e       	mov	r0, r31
     8f6:	f2 e1       	ldi	r31, 0x12	; 18
     8f8:	af 2e       	mov	r10, r31
     8fa:	f1 e0       	ldi	r31, 0x01	; 1
     8fc:	bf 2e       	mov	r11, r31
     8fe:	f0 2d       	mov	r31, r0
     900:	6e 01       	movw	r12, r28
     902:	21 e5       	ldi	r18, 0x51	; 81
     904:	c2 0e       	add	r12, r18
     906:	d1 1c       	adc	r13, r1
     908:	f8 01       	movw	r30, r16
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	80 81       	ld	r24, Z
     90e:	1f 92       	push	r1
     910:	8f 93       	push	r24
     912:	31 97       	sbiw	r30, 0x01	; 1
     914:	80 81       	ld	r24, Z
     916:	1f 92       	push	r1
     918:	8f 93       	push	r24
     91a:	31 97       	sbiw	r30, 0x01	; 1
     91c:	80 81       	ld	r24, Z
     91e:	1f 92       	push	r1
     920:	8f 93       	push	r24
     922:	31 97       	sbiw	r30, 0x01	; 1
     924:	80 81       	ld	r24, Z
     926:	1f 92       	push	r1
     928:	8f 93       	push	r24
     92a:	f8 01       	movw	r30, r16
     92c:	80 81       	ld	r24, Z
     92e:	1f 92       	push	r1
     930:	8f 93       	push	r24
     932:	bf 92       	push	r11
     934:	af 92       	push	r10
     936:	df 92       	push	r13
     938:	cf 92       	push	r12
     93a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <sprintf>
		oled_sram_write_string(0, score, i);
     93e:	a7 01       	movw	r20, r14
     940:	b6 01       	movw	r22, r12
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
	highscore_leaderboard(game, hslist, 16);
	
	//Clear SRAM and print list to SRAM
	oled_sram_clear_screen(0);
	char score[16];
	for (int i = 0; i < 7; i++){
     94a:	ff ef       	ldi	r31, 0xFF	; 255
     94c:	ef 1a       	sub	r14, r31
     94e:	ff 0a       	sbc	r15, r31
     950:	0b 5f       	subi	r16, 0xFB	; 251
     952:	1f 4f       	sbci	r17, 0xFF	; 255
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
     95e:	97 e0       	ldi	r25, 0x07	; 7
     960:	e9 16       	cp	r14, r25
     962:	f1 04       	cpc	r15, r1
     964:	89 f6       	brne	.-94     	; 0x908 <highscore_print+0x5a>
		sprintf(score, "%i %c%c%c %i", hslist[i].place, hslist[i].name[0], hslist[i].name[1], hslist[i].name[2], hslist[i].score );
		oled_sram_write_string(0, score, i);
		//printf("%s \n\r", score);
	}
	
	oled_sram_flush(0);
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
	while(get_joystick_position().D != LEFT){
     96e:	09 c0       	rjmp	.+18     	; 0x982 <highscore_print+0xd4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     970:	ef ef       	ldi	r30, 0xFF	; 255
     972:	ff e7       	ldi	r31, 0x7F	; 127
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	e1 50       	subi	r30, 0x01	; 1
     978:	f0 40       	sbci	r31, 0x00	; 0
     97a:	20 40       	sbci	r18, 0x00	; 0
     97c:	e1 f7       	brne	.-8      	; 0x976 <highscore_print+0xc8>
     97e:	00 c0       	rjmp	.+0      	; 0x980 <highscore_print+0xd2>
     980:	00 c0       	rjmp	.+0      	; 0x982 <highscore_print+0xd4>
     982:	0e 94 81 07 	call	0xf02	; 0xf02 <get_joystick_position>
     986:	81 11       	cpse	r24, r1
     988:	f3 cf       	rjmp	.-26     	; 0x970 <highscore_print+0xc2>
		_delay_ms(100);
	}
}
     98a:	c0 5a       	subi	r28, 0xA0	; 160
     98c:	df 4f       	sbci	r29, 0xFF	; 255
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	df 90       	pop	r13
     9a6:	cf 90       	pop	r12
     9a8:	bf 90       	pop	r11
     9aa:	af 90       	pop	r10
     9ac:	08 95       	ret

000009ae <highscore_print_pingpong>:

void highscore_print_pingpong(){
	highscore_print(PINGPONG);
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	0e 94 57 04 	call	0x8ae	; 0x8ae <highscore_print>
     9b4:	08 95       	ret

000009b6 <highscore_print_snake>:
}

void highscore_print_snake(){
	highscore_print(SNAKE);
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	0e 94 57 04 	call	0x8ae	; 0x8ae <highscore_print>
     9bc:	08 95       	ret

000009be <highscore_print_pong>:
}

void highscore_print_pong(){
	highscore_print(PONG);
     9be:	80 e8       	ldi	r24, 0x80	; 128
     9c0:	0e 94 57 04 	call	0x8ae	; 0x8ae <highscore_print>
     9c4:	08 95       	ret

000009c6 <highscore_prompt>:
}

void highscore_prompt(uint8_t game, uint8_t score){
     9c6:	8f 92       	push	r8
     9c8:	9f 92       	push	r9
     9ca:	af 92       	push	r10
     9cc:	bf 92       	push	r11
     9ce:	cf 92       	push	r12
     9d0:	df 92       	push	r13
     9d2:	ef 92       	push	r14
     9d4:	ff 92       	push	r15
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	65 97       	sbiw	r28, 0x15	; 21
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	98 2e       	mov	r9, r24
	//Make highscore
	highscore hs;
	hs.name[0] = 'A';
     9f0:	81 e4       	ldi	r24, 0x41	; 65
     9f2:	89 83       	std	Y+1, r24	; 0x01
	hs.name[1] = 'A';
     9f4:	8a 83       	std	Y+2, r24	; 0x02
	hs.name[2] = 'A';
     9f6:	8b 83       	std	Y+3, r24	; 0x03
	hs.score = score;
     9f8:	6c 83       	std	Y+4, r22	; 0x04
	
	//Print highscore
	oled_sram_clear_screen(0);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	char buffer[16];
	sprintf(buffer, "Score: %i", hs.score );
     a02:	8c 81       	ldd	r24, Y+4	; 0x04
     a04:	1f 92       	push	r1
     a06:	8f 93       	push	r24
     a08:	8f e1       	ldi	r24, 0x1F	; 31
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	9f 93       	push	r25
     a0e:	8f 93       	push	r24
     a10:	8e 01       	movw	r16, r28
     a12:	0a 5f       	subi	r16, 0xFA	; 250
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
     a16:	1f 93       	push	r17
     a18:	0f 93       	push	r16
     a1a:	0e 94 18 17 	call	0x2e30	; 0x2e30 <sprintf>
	oled_sram_write_string(0, buffer, 2);
     a1e:	42 e0       	ldi	r20, 0x02	; 2
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	b8 01       	movw	r22, r16
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
	
	//Allow user to change name
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
     a2c:	0e 94 81 07 	call	0xf02	; 0xf02 <get_joystick_position>
     a30:	88 2e       	mov	r8, r24
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
	sprintf(buffer, "Score: %i", hs.score );
	oled_sram_write_string(0, buffer, 2);
	
	//Allow user to change name
	
	int letter_pointer = 0; 
     a3e:	e1 2c       	mov	r14, r1
     a40:	f1 2c       	mov	r15, r1
		_delay_ms(100);
		if(D != get_joystick_position().D){
			D = get_joystick_position().D;
			switch(D){
				case LEFT:
					letter_pointer = (letter_pointer + 2)%3;
     a42:	0f 2e       	mov	r0, r31
     a44:	f3 e0       	ldi	r31, 0x03	; 3
     a46:	af 2e       	mov	r10, r31
     a48:	b1 2c       	mov	r11, r1
     a4a:	f0 2d       	mov	r31, r0
					break;
				default:
					break;
			}
		}
		sprintf(buffer, "Name: %c%c%c", hs.name[0], hs.name[1], hs.name[2]);
     a4c:	0f 2e       	mov	r0, r31
     a4e:	f9 e2       	ldi	r31, 0x29	; 41
     a50:	cf 2e       	mov	r12, r31
     a52:	f1 e0       	ldi	r31, 0x01	; 1
     a54:	df 2e       	mov	r13, r31
     a56:	f0 2d       	mov	r31, r0
     a58:	2f ef       	ldi	r18, 0xFF	; 255
     a5a:	8f e7       	ldi	r24, 0x7F	; 127
     a5c:	91 e0       	ldi	r25, 0x01	; 1
     a5e:	21 50       	subi	r18, 0x01	; 1
     a60:	80 40       	sbci	r24, 0x00	; 0
     a62:	90 40       	sbci	r25, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <highscore_prompt+0x98>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <highscore_prompt+0xa2>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <highscore_prompt+0xa4>
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
	while(letter_pointer < 3){
		_delay_ms(100);
		if(D != get_joystick_position().D){
     a6a:	0e 94 81 07 	call	0xf02	; 0xf02 <get_joystick_position>
     a6e:	88 16       	cp	r8, r24
     a70:	69 f1       	breq	.+90     	; 0xacc <highscore_prompt+0x106>
			D = get_joystick_position().D;
     a72:	0e 94 81 07 	call	0xf02	; 0xf02 <get_joystick_position>
     a76:	88 2e       	mov	r8, r24
			switch(D){
     a78:	21 e0       	ldi	r18, 0x01	; 1
     a7a:	82 17       	cp	r24, r18
     a7c:	81 f0       	breq	.+32     	; 0xa9e <highscore_prompt+0xd8>
     a7e:	82 17       	cp	r24, r18
     a80:	38 f0       	brcs	.+14     	; 0xa90 <highscore_prompt+0xca>
     a82:	82 e0       	ldi	r24, 0x02	; 2
     a84:	88 16       	cp	r8, r24
     a86:	79 f0       	breq	.+30     	; 0xaa6 <highscore_prompt+0xe0>
     a88:	93 e0       	ldi	r25, 0x03	; 3
     a8a:	89 16       	cp	r8, r25
     a8c:	b1 f0       	breq	.+44     	; 0xaba <highscore_prompt+0xf4>
     a8e:	1e c0       	rjmp	.+60     	; 0xacc <highscore_prompt+0x106>
				case LEFT:
					letter_pointer = (letter_pointer + 2)%3;
     a90:	c7 01       	movw	r24, r14
     a92:	02 96       	adiw	r24, 0x02	; 2
     a94:	b5 01       	movw	r22, r10
     a96:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
     a9a:	7c 01       	movw	r14, r24
					break;
     a9c:	17 c0       	rjmp	.+46     	; 0xacc <highscore_prompt+0x106>
				case RIGHT:
					letter_pointer++;
     a9e:	2f ef       	ldi	r18, 0xFF	; 255
     aa0:	e2 1a       	sub	r14, r18
     aa2:	f2 0a       	sbc	r15, r18
					break;
     aa4:	13 c0       	rjmp	.+38     	; 0xacc <highscore_prompt+0x106>
				case UP:
					hs.name[letter_pointer]++;
     aa6:	e1 e0       	ldi	r30, 0x01	; 1
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	ec 0f       	add	r30, r28
     aac:	fd 1f       	adc	r31, r29
     aae:	ee 0d       	add	r30, r14
     ab0:	ff 1d       	adc	r31, r15
     ab2:	80 81       	ld	r24, Z
     ab4:	8f 5f       	subi	r24, 0xFF	; 255
     ab6:	80 83       	st	Z, r24
					break;
     ab8:	09 c0       	rjmp	.+18     	; 0xacc <highscore_prompt+0x106>
				case DOWN:
					hs.name[letter_pointer]--;
     aba:	e1 e0       	ldi	r30, 0x01	; 1
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	ec 0f       	add	r30, r28
     ac0:	fd 1f       	adc	r31, r29
     ac2:	ee 0d       	add	r30, r14
     ac4:	ff 1d       	adc	r31, r15
     ac6:	80 81       	ld	r24, Z
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	80 83       	st	Z, r24
					break;
				default:
					break;
			}
		}
		sprintf(buffer, "Name: %c%c%c", hs.name[0], hs.name[1], hs.name[2]);
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	1f 92       	push	r1
     ad0:	8f 93       	push	r24
     ad2:	8a 81       	ldd	r24, Y+2	; 0x02
     ad4:	1f 92       	push	r1
     ad6:	8f 93       	push	r24
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	1f 92       	push	r1
     adc:	8f 93       	push	r24
     ade:	df 92       	push	r13
     ae0:	cf 92       	push	r12
     ae2:	1f 93       	push	r17
     ae4:	0f 93       	push	r16
     ae6:	0e 94 18 17 	call	0x2e30	; 0x2e30 <sprintf>
		oled_sram_write_string(0, buffer, 3);
     aea:	a5 01       	movw	r20, r10
     aec:	b8 01       	movw	r22, r16
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
		oled_sram_write_string(0, "          ", 4);
     af6:	44 e0       	ldi	r20, 0x04	; 4
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	66 e3       	ldi	r22, 0x36	; 54
     afc:	71 e0       	ldi	r23, 0x01	; 1
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
		oled_sram_write_char(0, "^", 4, (6+letter_pointer)*8);
     b06:	97 01       	movw	r18, r14
     b08:	2a 5f       	subi	r18, 0xFA	; 250
     b0a:	3f 4f       	sbci	r19, 0xFF	; 255
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	44 e0       	ldi	r20, 0x04	; 4
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	61 e4       	ldi	r22, 0x41	; 65
     b1e:	71 e0       	ldi	r23, 0x01	; 1
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
		oled_sram_flush(0);
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
	
	//Allow user to change name
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
	while(letter_pointer < 3){
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	93 e0       	ldi	r25, 0x03	; 3
     b3c:	e9 16       	cp	r14, r25
     b3e:	f1 04       	cpc	r15, r1
     b40:	0c f4       	brge	.+2      	; 0xb44 <highscore_prompt+0x17e>
     b42:	8a cf       	rjmp	.-236    	; 0xa58 <highscore_prompt+0x92>
		oled_sram_write_char(0, "^", 4, (6+letter_pointer)*8);
		oled_sram_flush(0);
	}
	
	
	highscore_add(game, &hs);
     b44:	be 01       	movw	r22, r28
     b46:	6f 5f       	subi	r22, 0xFF	; 255
     b48:	7f 4f       	sbci	r23, 0xFF	; 255
     b4a:	89 2d       	mov	r24, r9
     b4c:	0e 94 ac 03 	call	0x758	; 0x758 <highscore_add>
     b50:	65 96       	adiw	r28, 0x15	; 21
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	bf 90       	pop	r11
     b6e:	af 90       	pop	r10
     b70:	9f 90       	pop	r9
     b72:	8f 90       	pop	r8
     b74:	08 95       	ret

00000b76 <play_pingpong>:

volatile State current_state;
volatile uint8_t current_score;

//Send CAN message to node 2 to start ping pong game with one of two controller states
void play_pingpong(uint8_t state){
     b76:	cf 92       	push	r12
     b78:	df 92       	push	r13
     b7a:	ef 92       	push	r14
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	6a 97       	sbiw	r28, 0x1a	; 26
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
	play_pingpong(PLAY_PINGPONG_JOY);
}

void state_set(State state){
	
	current_state = state;
     b96:	80 93 66 02 	sts	0x0266, r24
}

void score_set(uint8_t score){
	current_score = score;
     b9a:	10 92 67 02 	sts	0x0267, r1
	state_set(state);
	score_set(0);
	
	//Send message to node 2
	Message m;
	m.id = GAME_STATUS;
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	99 83       	std	Y+1, r25	; 0x01
	m.length = 1;
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	9a 83       	std	Y+2, r25	; 0x02
	m.data[0] = state;
     ba6:	8b 83       	std	Y+3, r24	; 0x03
	CAN_transmit(&m);
     ba8:	ce 01       	movw	r24, r28
     baa:	01 96       	adiw	r24, 0x01	; 1
     bac:	0e 94 96 06 	call	0xd2c	; 0xd2c <CAN_transmit>
	
	//Print message on screen, and go into waiting mode
	oled_sram_clear_screen(0);
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	oled_sram_write_string(0, "Playing pingpong", 2);
     bb8:	42 e0       	ldi	r20, 0x02	; 2
     bba:	50 e0       	ldi	r21, 0x00	; 0
     bbc:	63 e4       	ldi	r22, 0x43	; 67
     bbe:	71 e0       	ldi	r23, 0x01	; 1
     bc0:	80 e0       	ldi	r24, 0x00	; 0
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
	char score[16];
	while(current_state == PLAY_PINGPONG_WEB || current_state == PLAY_PINGPONG_JOY){
		_delay_ms(100);
		printf("State %i \n\r", current_state);
     bc8:	0f 2e       	mov	r0, r31
     bca:	f4 e5       	ldi	r31, 0x54	; 84
     bcc:	cf 2e       	mov	r12, r31
     bce:	f1 e0       	ldi	r31, 0x01	; 1
     bd0:	df 2e       	mov	r13, r31
     bd2:	f0 2d       	mov	r31, r0
		send_controlls();
		sprintf(score, "Score: %d", current_score);
     bd4:	0f 2e       	mov	r0, r31
     bd6:	f0 e6       	ldi	r31, 0x60	; 96
     bd8:	ef 2e       	mov	r14, r31
     bda:	f1 e0       	ldi	r31, 0x01	; 1
     bdc:	ff 2e       	mov	r15, r31
     bde:	f0 2d       	mov	r31, r0
     be0:	8e 01       	movw	r16, r28
     be2:	05 5f       	subi	r16, 0xF5	; 245
     be4:	1f 4f       	sbci	r17, 0xFF	; 255
	
	//Print message on screen, and go into waiting mode
	oled_sram_clear_screen(0);
	oled_sram_write_string(0, "Playing pingpong", 2);
	char score[16];
	while(current_state == PLAY_PINGPONG_WEB || current_state == PLAY_PINGPONG_JOY){
     be6:	2d c0       	rjmp	.+90     	; 0xc42 <play_pingpong+0xcc>
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	8f e7       	ldi	r24, 0x7F	; 127
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <play_pingpong+0x78>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <play_pingpong+0x82>
     bf8:	00 c0       	rjmp	.+0      	; 0xbfa <play_pingpong+0x84>
		_delay_ms(100);
		printf("State %i \n\r", current_state);
     bfa:	80 91 66 02 	lds	r24, 0x0266
     bfe:	1f 92       	push	r1
     c00:	8f 93       	push	r24
     c02:	df 92       	push	r13
     c04:	cf 92       	push	r12
     c06:	0e 94 04 17 	call	0x2e08	; 0x2e08 <printf>
		send_controlls();
     c0a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <send_controlls>
		sprintf(score, "Score: %d", current_score);
     c0e:	80 91 67 02 	lds	r24, 0x0267
     c12:	1f 92       	push	r1
     c14:	8f 93       	push	r24
     c16:	ff 92       	push	r15
     c18:	ef 92       	push	r14
     c1a:	1f 93       	push	r17
     c1c:	0f 93       	push	r16
     c1e:	0e 94 18 17 	call	0x2e30	; 0x2e30 <sprintf>
		oled_sram_write_string(0, score, 4);
     c22:	44 e0       	ldi	r20, 0x04	; 4
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	b8 01       	movw	r22, r16
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
		oled_sram_flush(0);
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	cd bf       	out	0x3d, r28	; 61
	
	//Print message on screen, and go into waiting mode
	oled_sram_clear_screen(0);
	oled_sram_write_string(0, "Playing pingpong", 2);
	char score[16];
	while(current_state == PLAY_PINGPONG_WEB || current_state == PLAY_PINGPONG_JOY){
     c42:	80 91 66 02 	lds	r24, 0x0266
     c46:	81 30       	cpi	r24, 0x01	; 1
     c48:	79 f2       	breq	.-98     	; 0xbe8 <play_pingpong+0x72>
     c4a:	80 91 66 02 	lds	r24, 0x0266
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	59 f2       	breq	.-106    	; 0xbe8 <play_pingpong+0x72>
		sprintf(score, "Score: %d", current_score);
		oled_sram_write_string(0, score, 4);
		oled_sram_flush(0);
	}
	
	highscore_prompt(PINGPONG, current_score);
     c52:	60 91 67 02 	lds	r22, 0x0267
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <highscore_prompt>
}
     c5c:	6a 96       	adiw	r28, 0x1a	; 26
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	08 95       	ret

00000c7a <play_pingpong_web>:

void play_pingpong_web(){
	play_pingpong(PLAY_PINGPONG_WEB);
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 bb 05 	call	0xb76	; 0xb76 <play_pingpong>
     c80:	08 95       	ret

00000c82 <play_pingpong_joy>:
}

void play_pingpong_joy(){
	play_pingpong(PLAY_PINGPONG_JOY);
     c82:	82 e0       	ldi	r24, 0x02	; 2
     c84:	0e 94 bb 05 	call	0xb76	; 0xb76 <play_pingpong>
     c88:	08 95       	ret

00000c8a <state_set>:
}

void state_set(State state){
	
	current_state = state;
     c8a:	80 93 66 02 	sts	0x0266, r24
     c8e:	08 95       	ret

00000c90 <score_set>:
}

void score_set(uint8_t score){
	current_score = score;
     c90:	80 93 67 02 	sts	0x0267, r24
     c94:	08 95       	ret

00000c96 <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     c96:	80 b7       	in	r24, 0x30	; 48
     c98:	80 62       	ori	r24, 0x20	; 32
     c9a:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     c9c:	85 b7       	in	r24, 0x35	; 53
     c9e:	80 68       	ori	r24, 0x80	; 128
     ca0:	85 bf       	out	0x35, r24	; 53
     ca2:	08 95       	ret

00000ca4 <main>:
#include "Driver_files/music_driver.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
     ca4:	80 e8       	ldi	r24, 0x80	; 128
     ca6:	95 e2       	ldi	r25, 0x25	; 37
     ca8:	0e 94 bb 0a 	call	0x1576	; 0x1576 <uartInit>
	bus_init();
     cac:	0e 94 4b 06 	call	0xc96	; 0xc96 <bus_init>
	oled_init();
     cb0:	0e 94 2e 09 	call	0x125c	; 0x125c <oled_init>
	init_handler();
     cb4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <init_handler>
	//oled_sram_init();
	CAN_init();
     cb8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <CAN_init>
	printf("Reset?");
     cbc:	8a e6       	ldi	r24, 0x6A	; 106
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	9f 93       	push	r25
     cc2:	8f 93       	push	r24
     cc4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <printf>
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
    while(1)
    {
	
		menuSystem();
     ccc:	0e 94 97 11 	call	0x232e	; 0x232e <menuSystem>
     cd0:	fd cf       	rjmp	.-6      	; 0xccc <main+0x28>

00000cd2 <get_adc>:
}

uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc

	adc[0] = 4 + (channel%4);
     cd2:	83 70       	andi	r24, 0x03	; 3
     cd4:	90 78       	andi	r25, 0x80	; 128
     cd6:	99 23       	and	r25, r25
     cd8:	24 f4       	brge	.+8      	; 0xce2 <get_adc+0x10>
     cda:	01 97       	sbiw	r24, 0x01	; 1
     cdc:	8c 6f       	ori	r24, 0xFC	; 252
     cde:	9f 6f       	ori	r25, 0xFF	; 255
     ce0:	01 96       	adiw	r24, 0x01	; 1
     ce2:	8c 5f       	subi	r24, 0xFC	; 252
     ce4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ce8:	85 ef       	ldi	r24, 0xF5	; 245
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	01 97       	sbiw	r24, 0x01	; 1
     cee:	f1 f7       	brne	.-4      	; 0xcec <get_adc+0x1a>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <get_adc+0x20>
     cf2:	00 00       	nop
	_delay_us(200);
	return adc[0];
     cf4:	80 91 00 14 	lds	r24, 0x1400
}
     cf8:	08 95       	ret

00000cfa <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
     cfa:	0e 94 c3 08 	call	0x1186	; 0x1186 <MCP_init>
	//Enter config mode
	MCP_reset();
     cfe:	0e 94 a9 08 	call	0x1152	; 0x1152 <MCP_reset>
	//set normal mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	60 ee       	ldi	r22, 0xE0	; 224
     d06:	8f e0       	ldi	r24, 0x0F	; 15
     d08:	0e 94 14 09 	call	0x1228	; 0x1228 <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
     d0c:	4f ef       	ldi	r20, 0xFF	; 255
     d0e:	63 e0       	ldi	r22, 0x03	; 3
     d10:	8b e2       	ldi	r24, 0x2B	; 43
     d12:	0e 94 14 09 	call	0x1228	; 0x1228 <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
     d16:	8e e0       	ldi	r24, 0x0E	; 14
     d18:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     d1c:	28 2f       	mov	r18, r24
     d1e:	20 7e       	andi	r18, 0xE0	; 224
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	11 f4       	brne	.+4      	; 0xd2a <CAN_init+0x30>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     d2a:	08 95       	ret

00000d2c <CAN_transmit>:

void CAN_transmit(Message *m){
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_bit_modify(MCP_TXB0SIDL, 0xE0, m->id<<5);
     d34:	48 81       	ld	r20, Y
     d36:	42 95       	swap	r20
     d38:	44 0f       	add	r20, r20
     d3a:	40 7e       	andi	r20, 0xE0	; 224
     d3c:	60 ee       	ldi	r22, 0xE0	; 224
     d3e:	82 e3       	ldi	r24, 0x32	; 50
     d40:	0e 94 14 09 	call	0x1228	; 0x1228 <MCP_bit_modify>
	MCP_bit_modify(MCP_TXB0SIDH, 0xFF, m->id>>3);
     d44:	48 81       	ld	r20, Y
     d46:	46 95       	lsr	r20
     d48:	46 95       	lsr	r20
     d4a:	46 95       	lsr	r20
     d4c:	6f ef       	ldi	r22, 0xFF	; 255
     d4e:	81 e3       	ldi	r24, 0x31	; 49
     d50:	0e 94 14 09 	call	0x1228	; 0x1228 <MCP_bit_modify>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     d54:	69 81       	ldd	r22, Y+1	; 0x01
     d56:	85 e3       	ldi	r24, 0x35	; 53
     d58:	0e 94 df 08 	call	0x11be	; 0x11be <MCP_write>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     d5c:	69 81       	ldd	r22, Y+1	; 0x01
     d5e:	85 e3       	ldi	r24, 0x35	; 53
     d60:	0e 94 df 08 	call	0x11be	; 0x11be <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	88 23       	and	r24, r24
     d68:	69 f0       	breq	.+26     	; 0xd84 <CAN_transmit+0x58>
     d6a:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
     d6c:	fe 01       	movw	r30, r28
     d6e:	e1 0f       	add	r30, r17
     d70:	f1 1d       	adc	r31, r1
     d72:	62 81       	ldd	r22, Z+2	; 0x02
     d74:	86 e3       	ldi	r24, 0x36	; 54
     d76:	81 0f       	add	r24, r17
     d78:	0e 94 df 08 	call	0x11be	; 0x11be <MCP_write>
	MCP_write(MCP_TXB0DLC, m->length);
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     d7c:	1f 5f       	subi	r17, 0xFF	; 255
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	18 17       	cp	r17, r24
     d82:	a0 f3       	brcs	.-24     	; 0xd6c <CAN_transmit+0x40>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <CAN_receive>:

int CAN_receive(Message *m){
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
     d9a:	8c e2       	ldi	r24, 0x2C	; 44
     d9c:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCP_read>
     da0:	80 ff       	sbrs	r24, 0
     da2:	2c c0       	rjmp	.+88     	; 0xdfc <CAN_receive+0x6a>
		m->length = MCP_read(MCP_RBB0DLC);
     da4:	85 e6       	ldi	r24, 0x65	; 101
     da6:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCP_read>
     daa:	89 83       	std	Y+1, r24	; 0x01
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
     dac:	82 e6       	ldi	r24, 0x62	; 98
     dae:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCP_read>
     db2:	18 2f       	mov	r17, r24
     db4:	12 95       	swap	r17
     db6:	16 95       	lsr	r17
     db8:	17 70       	andi	r17, 0x07	; 7
     dba:	18 83       	st	Y, r17
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
     dbc:	81 e6       	ldi	r24, 0x61	; 97
     dbe:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCP_read>
     dc2:	88 0f       	add	r24, r24
     dc4:	88 0f       	add	r24, r24
     dc6:	88 0f       	add	r24, r24
     dc8:	18 0f       	add	r17, r24
     dca:	18 83       	st	Y, r17
		for(uint8_t i = 0; i < m->length; i++){
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	88 23       	and	r24, r24
     dd0:	69 f0       	breq	.+26     	; 0xdec <CAN_receive+0x5a>
     dd2:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
     dd4:	86 e6       	ldi	r24, 0x66	; 102
     dd6:	81 0f       	add	r24, r17
     dd8:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCP_read>
     ddc:	fe 01       	movw	r30, r28
     dde:	e1 0f       	add	r30, r17
     de0:	f1 1d       	adc	r31, r1
     de2:	82 83       	std	Z+2, r24	; 0x02
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
		for(uint8_t i = 0; i < m->length; i++){
     de4:	1f 5f       	subi	r17, 0xFF	; 255
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	18 17       	cp	r17, r24
     dea:	a0 f3       	brcs	.-24     	; 0xdd4 <CAN_receive+0x42>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	61 e0       	ldi	r22, 0x01	; 1
     df0:	8c e2       	ldi	r24, 0x2C	; 44
     df2:	0e 94 14 09 	call	0x1228	; 0x1228 <MCP_bit_modify>
		return 0;
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <CAN_receive+0x6e>
	}
	return 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	08 95       	ret

00000e08 <get_slider_position>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Slider get_slider_position(){
     e08:	cf 93       	push	r28
     e0a:	df 93       	push	r29
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 69 06 	call	0xcd2	; 0xcd2 <get_adc>
     e14:	ec 01       	movw	r28, r24
	slide.right = ((get_adc(0))*100)/255;
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 69 06 	call	0xcd2	; 0xcd2 <get_adc>
     e1e:	fc 01       	movw	r30, r24
float xMean = 127;
float yMean = 127;

Slider get_slider_position(){
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     e20:	44 e6       	ldi	r20, 0x64	; 100
     e22:	4c 9f       	mul	r20, r28
     e24:	c0 01       	movw	r24, r0
     e26:	4d 9f       	mul	r20, r29
     e28:	90 0d       	add	r25, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	2f ef       	ldi	r18, 0xFF	; 255
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	b9 01       	movw	r22, r18
     e32:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
     e36:	c6 2f       	mov	r28, r22
	slide.right = ((get_adc(0))*100)/255;
     e38:	4e 9f       	mul	r20, r30
     e3a:	c0 01       	movw	r24, r0
     e3c:	4f 9f       	mul	r20, r31
     e3e:	90 0d       	add	r25, r0
     e40:	11 24       	eor	r1, r1
     e42:	b9 01       	movw	r22, r18
     e44:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
     e48:	76 2f       	mov	r23, r22
	return slide;
}
     e4a:	6c 2f       	mov	r22, r28
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
     e54:	08 95       	ret

00000e56 <get_joystick_direction>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = get_joystick_direction(joy.X, joy.Y);
	return joy;
}

direction get_joystick_direction(int x, int y){
     e56:	cf 92       	push	r12
     e58:	df 92       	push	r13
     e5a:	ef 92       	push	r14
     e5c:	ff 92       	push	r15
     e5e:	0f 93       	push	r16
     e60:	1f 93       	push	r17
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	8c 01       	movw	r16, r24
     e68:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
     e6a:	bc 01       	movw	r22, r24
     e6c:	88 27       	eor	r24, r24
     e6e:	77 fd       	sbrc	r23, 7
     e70:	80 95       	com	r24
     e72:	98 2f       	mov	r25, r24
     e74:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
     e78:	6b 01       	movw	r12, r22
     e7a:	7c 01       	movw	r14, r24
     e7c:	e8 94       	clt
     e7e:	f7 f8       	bld	r15, 7
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	48 e4       	ldi	r20, 0x48	; 72
     e86:	52 e4       	ldi	r21, 0x42	; 66
     e88:	c7 01       	movw	r24, r14
     e8a:	b6 01       	movw	r22, r12
     e8c:	0e 94 15 13 	call	0x262a	; 0x262a <__cmpsf2>
     e90:	88 23       	and	r24, r24
     e92:	84 f4       	brge	.+32     	; 0xeb4 <get_joystick_direction+0x5e>
     e94:	be 01       	movw	r22, r28
     e96:	88 27       	eor	r24, r24
     e98:	77 fd       	sbrc	r23, 7
     e9a:	80 95       	com	r24
     e9c:	98 2f       	mov	r25, r24
     e9e:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
     ea2:	9f 77       	andi	r25, 0x7F	; 127
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	48 e4       	ldi	r20, 0x48	; 72
     eaa:	52 e4       	ldi	r21, 0x42	; 66
     eac:	0e 94 15 13 	call	0x262a	; 0x262a <__cmpsf2>
     eb0:	88 23       	and	r24, r24
     eb2:	dc f0       	brlt	.+54     	; 0xeea <get_joystick_direction+0x94>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
     eb4:	be 01       	movw	r22, r28
     eb6:	88 27       	eor	r24, r24
     eb8:	77 fd       	sbrc	r23, 7
     eba:	80 95       	com	r24
     ebc:	98 2f       	mov	r25, r24
     ebe:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	5f 77       	andi	r21, 0x7F	; 127
     ec8:	c7 01       	movw	r24, r14
     eca:	b6 01       	movw	r22, r12
     ecc:	0e 94 15 13 	call	0x262a	; 0x262a <__cmpsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <get_joystick_direction+0x88>
		if(y > 0){
     ed4:	1c 16       	cp	r1, r28
     ed6:	1d 06       	cpc	r1, r29
     ed8:	54 f4       	brge	.+20     	; 0xeee <get_joystick_direction+0x98>
			return UP;
     eda:	82 e0       	ldi	r24, 0x02	; 2
     edc:	09 c0       	rjmp	.+18     	; 0xef0 <get_joystick_direction+0x9a>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	10 16       	cp	r1, r16
     ee2:	11 06       	cpc	r1, r17
     ee4:	2c f0       	brlt	.+10     	; 0xef0 <get_joystick_direction+0x9a>
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	03 c0       	rjmp	.+6      	; 0xef0 <get_joystick_direction+0x9a>
}

direction get_joystick_direction(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <get_joystick_direction+0x9a>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
     eee:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	ff 90       	pop	r15
     efa:	ef 90       	pop	r14
     efc:	df 90       	pop	r13
     efe:	cf 90       	pop	r12
     f00:	08 95       	ret

00000f02 <get_joystick_position>:
	slide.left = ((get_adc(1))*100)/255;
	slide.right = ((get_adc(0))*100)/255;
	return slide;
}

Joystick get_joystick_position(){
     f02:	cf 92       	push	r12
     f04:	df 92       	push	r13
     f06:	ef 92       	push	r14
     f08:	ff 92       	push	r15
     f0a:	cf 93       	push	r28
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
     f0c:	82 e0       	ldi	r24, 0x02	; 2
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 69 06 	call	0xcd2	; 0xcd2 <get_adc>
     f14:	c0 90 0a 01 	lds	r12, 0x010A
     f18:	d0 90 0b 01 	lds	r13, 0x010B
     f1c:	e0 90 0c 01 	lds	r14, 0x010C
     f20:	f0 90 0d 01 	lds	r15, 0x010D
     f24:	bc 01       	movw	r22, r24
     f26:	88 27       	eor	r24, r24
     f28:	77 fd       	sbrc	r23, 7
     f2a:	80 95       	com	r24
     f2c:	98 2f       	mov	r25, r24
     f2e:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
     f32:	a7 01       	movw	r20, r14
     f34:	96 01       	movw	r18, r12
     f36:	0e 94 b0 12 	call	0x2560	; 0x2560 <__subsf3>
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	48 ec       	ldi	r20, 0xC8	; 200
     f40:	52 e4       	ldi	r21, 0x42	; 66
     f42:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     f46:	a7 01       	movw	r20, r14
     f48:	96 01       	movw	r18, r12
     f4a:	0e 94 19 13 	call	0x2632	; 0x2632 <__divsf3>
     f4e:	0e 94 81 13 	call	0x2702	; 0x2702 <__fixsfsi>
     f52:	c6 2f       	mov	r28, r22
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 69 06 	call	0xcd2	; 0xcd2 <get_adc>
     f5c:	c0 90 0e 01 	lds	r12, 0x010E
     f60:	d0 90 0f 01 	lds	r13, 0x010F
     f64:	e0 90 10 01 	lds	r14, 0x0110
     f68:	f0 90 11 01 	lds	r15, 0x0111
     f6c:	bc 01       	movw	r22, r24
     f6e:	88 27       	eor	r24, r24
     f70:	77 fd       	sbrc	r23, 7
     f72:	80 95       	com	r24
     f74:	98 2f       	mov	r25, r24
     f76:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
     f7a:	a7 01       	movw	r20, r14
     f7c:	96 01       	movw	r18, r12
     f7e:	0e 94 b0 12 	call	0x2560	; 0x2560 <__subsf3>
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	48 ec       	ldi	r20, 0xC8	; 200
     f88:	52 e4       	ldi	r21, 0x42	; 66
     f8a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
     f8e:	a7 01       	movw	r20, r14
     f90:	96 01       	movw	r18, r12
     f92:	0e 94 19 13 	call	0x2632	; 0x2632 <__divsf3>
     f96:	0e 94 81 13 	call	0x2702	; 0x2702 <__fixsfsi>
     f9a:	f6 2e       	mov	r15, r22
	joy.D = get_joystick_direction(joy.X, joy.Y);
     f9c:	6c 2f       	mov	r22, r28
     f9e:	77 27       	eor	r23, r23
     fa0:	67 fd       	sbrc	r22, 7
     fa2:	70 95       	com	r23
     fa4:	8f 2d       	mov	r24, r15
     fa6:	99 27       	eor	r25, r25
     fa8:	87 fd       	sbrc	r24, 7
     faa:	90 95       	com	r25
     fac:	0e 94 2b 07 	call	0xe56	; 0xe56 <get_joystick_direction>
	return joy;
}
     fb0:	6f 2d       	mov	r22, r15
     fb2:	7c 2f       	mov	r23, r28
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	cf 91       	pop	r28
     fb8:	ff 90       	pop	r15
     fba:	ef 90       	pop	r14
     fbc:	df 90       	pop	r13
     fbe:	cf 90       	pop	r12
     fc0:	08 95       	ret

00000fc2 <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	1f 92       	push	r1
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
     fcc:	28 ee       	ldi	r18, 0xE8	; 232
     fce:	33 e0       	ldi	r19, 0x03	; 3
     fd0:	a9 01       	movw	r20, r18
     fd2:	48 1b       	sub	r20, r24
     fd4:	59 0b       	sbc	r21, r25
     fd6:	ca 01       	movw	r24, r20
     fd8:	68 ec       	ldi	r22, 0xC8	; 200
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
     fe0:	60 5d       	subi	r22, 0xD0	; 208
     fe2:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	61 e7       	ldi	r22, 0x71	; 113
     ff2:	71 e0       	ldi	r23, 0x01	; 1
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
     ffc:	42 e0       	ldi	r20, 0x02	; 2
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	6f e7       	ldi	r22, 0x7F	; 127
    1002:	71 e0       	ldi	r23, 0x01	; 1
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
    100c:	20 e6       	ldi	r18, 0x60	; 96
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	42 e0       	ldi	r20, 0x02	; 2
    1012:	50 e0       	ldi	r21, 0x00	; 0
    1014:	be 01       	movw	r22, r28
    1016:	6f 5f       	subi	r22, 0xFF	; 255
    1018:	7f 4f       	sbci	r23, 0xFF	; 255
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
	oled_sram_flush(0);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
    102a:	0f 90       	pop	r0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <calibrate_joystick>:
			return LEFT;
		} 
	}
}

void calibrate_joystick(){
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
    1044:	e1 2c       	mov	r14, r1
    1046:	f1 2c       	mov	r15, r1

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
    1048:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
    104a:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
    104c:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrate_joystick(){
	uint8_t yMax = 127;
    104e:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
    1050:	0f 2e       	mov	r0, r31
    1052:	f8 ec       	ldi	r31, 0xC8	; 200
    1054:	cf 2e       	mov	r12, r31
    1056:	d1 2c       	mov	r13, r1
    1058:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 69 06 	call	0xcd2	; 0xcd2 <get_adc>
    1062:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 69 06 	call	0xcd2	; 0xcd2 <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
    106c:	bc 16       	cp	r11, r28
    106e:	08 f4       	brcc	.+2      	; 0x1072 <calibrate_joystick+0x40>
    1070:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
    1072:	81 17       	cp	r24, r17
    1074:	08 f4       	brcc	.+2      	; 0x1078 <calibrate_joystick+0x46>
    1076:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
    1078:	08 17       	cp	r16, r24
    107a:	08 f4       	brcc	.+2      	; 0x107e <calibrate_joystick+0x4c>
    107c:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
    107e:	db 15       	cp	r29, r11
    1080:	08 f4       	brcc	.+2      	; 0x1084 <calibrate_joystick+0x52>
    1082:	db 2d       	mov	r29, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1084:	8f ef       	ldi	r24, 0xFF	; 255
    1086:	97 e1       	ldi	r25, 0x17	; 23
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	f1 f7       	brne	.-4      	; 0x1088 <calibrate_joystick+0x56>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <calibrate_joystick+0x5c>
    108e:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
    1090:	c7 01       	movw	r24, r14
    1092:	b6 01       	movw	r22, r12
    1094:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
    1098:	89 2b       	or	r24, r25
    109a:	19 f4       	brne	.+6      	; 0x10a2 <calibrate_joystick+0x70>
			calibration_visual_countdown(i);
    109c:	c7 01       	movw	r24, r14
    109e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <calibration_visual_countdown>
void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
    10a2:	9f ef       	ldi	r25, 0xFF	; 255
    10a4:	e9 1a       	sub	r14, r25
    10a6:	f9 0a       	sbc	r15, r25
    10a8:	88 ee       	ldi	r24, 0xE8	; 232
    10aa:	e8 16       	cp	r14, r24
    10ac:	83 e0       	ldi	r24, 0x03	; 3
    10ae:	f8 06       	cpc	r15, r24
    10b0:	a1 f6       	brne	.-88     	; 0x105a <calibrate_joystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
    10b2:	6d 2f       	mov	r22, r29
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	6c 1b       	sub	r22, r28
    10b8:	71 09       	sbc	r23, r1
    10ba:	88 27       	eor	r24, r24
    10bc:	77 fd       	sbrc	r23, 7
    10be:	80 95       	com	r24
    10c0:	98 2f       	mov	r25, r24
    10c2:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e0       	ldi	r20, 0x00	; 0
    10cc:	5f e3       	ldi	r21, 0x3F	; 63
    10ce:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    10d2:	60 93 0a 01 	sts	0x010A, r22
    10d6:	70 93 0b 01 	sts	0x010B, r23
    10da:	80 93 0c 01 	sts	0x010C, r24
    10de:	90 93 0d 01 	sts	0x010D, r25
	xMean = (xMax - xMin)/2.0;
    10e2:	60 2f       	mov	r22, r16
    10e4:	70 e0       	ldi	r23, 0x00	; 0
    10e6:	61 1b       	sub	r22, r17
    10e8:	71 09       	sbc	r23, r1
    10ea:	88 27       	eor	r24, r24
    10ec:	77 fd       	sbrc	r23, 7
    10ee:	80 95       	com	r24
    10f0:	98 2f       	mov	r25, r24
    10f2:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	5f e3       	ldi	r21, 0x3F	; 63
    10fe:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    1102:	60 93 0e 01 	sts	0x010E, r22
    1106:	70 93 0f 01 	sts	0x010F, r23
    110a:	80 93 10 01 	sts	0x0110, r24
    110e:	90 93 11 01 	sts	0x0111, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
    1112:	1f 92       	push	r1
    1114:	0f 93       	push	r16
    1116:	1f 92       	push	r1
    1118:	1f 93       	push	r17
    111a:	1f 92       	push	r1
    111c:	df 93       	push	r29
    111e:	1f 92       	push	r1
    1120:	cf 93       	push	r28
    1122:	8b e8       	ldi	r24, 0x8B	; 139
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	9f 93       	push	r25
    1128:	8f 93       	push	r24
    112a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <printf>
    112e:	8d b7       	in	r24, 0x3d	; 61
    1130:	9e b7       	in	r25, 0x3e	; 62
    1132:	0a 96       	adiw	r24, 0x0a	; 10
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	9e bf       	out	0x3e, r25	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	8d bf       	out	0x3d, r24	; 61
}
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	bf 90       	pop	r11
    1150:	08 95       	ret

00001152 <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    1152:	0e 94 c9 02 	call	0x592	; 0x592 <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
    1156:	80 ec       	ldi	r24, 0xC0	; 192
    1158:	0e 94 bb 02 	call	0x576	; 0x576 <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    115c:	0e 94 c7 02 	call	0x58e	; 0x58e <SPI_ss_high>
    1160:	08 95       	ret

00001162 <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
    1162:	cf 93       	push	r28
    1164:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    1166:	0e 94 c9 02 	call	0x592	; 0x592 <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	SPI_send(address);
    1170:	8c 2f       	mov	r24, r28
    1172:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	uint8_t data = SPI_receive();
    1176:	0e 94 c3 02 	call	0x586	; 0x586 <SPI_receive>
    117a:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    117c:	0e 94 c7 02 	call	0x58e	; 0x58e <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
    1180:	8c 2f       	mov	r24, r28
    1182:	cf 91       	pop	r28
    1184:	08 95       	ret

00001186 <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
    1186:	80 e8       	ldi	r24, 0x80	; 128
    1188:	95 e2       	ldi	r25, 0x25	; 37
    118a:	0e 94 bb 0a 	call	0x1576	; 0x1576 <uartInit>
	
	//Start SPI driver
	SPI_init();
    118e:	0e 94 b6 02 	call	0x56c	; 0x56c <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
    1192:	0e 94 a9 08 	call	0x1152	; 0x1152 <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
    1196:	8e e0       	ldi	r24, 0x0E	; 14
    1198:	0e 94 b1 08 	call	0x1162	; 0x1162 <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
    119c:	80 7e       	andi	r24, 0xE0	; 224
    119e:	80 38       	cpi	r24, 0x80	; 128
    11a0:	59 f0       	breq	.+22     	; 0x11b8 <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
    11a2:	87 e9       	ldi	r24, 0x97	; 151
    11a4:	91 e0       	ldi	r25, 0x01	; 1
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	0e 94 04 17 	call	0x2e08	; 0x2e08 <printf>
		return 1;
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	08 95       	ret
	}
	return 0;
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
}
    11bc:	08 95       	ret

000011be <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	d8 2f       	mov	r29, r24
    11c4:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    11c6:	0e 94 c9 02 	call	0x592	; 0x592 <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	SPI_send(address);
    11d0:	8d 2f       	mov	r24, r29
    11d2:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	SPI_send(data);
    11d6:	8c 2f       	mov	r24, r28
    11d8:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    11dc:	0e 94 c7 02 	call	0x58e	; 0x58e <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	08 95       	ret

000011e6 <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
    11e6:	cf 93       	push	r28
    11e8:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    11ea:	0e 94 c9 02 	call	0x592	; 0x592 <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
    11ee:	8c 2f       	mov	r24, r28
    11f0:	83 70       	andi	r24, 0x03	; 3
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	51 f0       	breq	.+20     	; 0x120a <MCP_rts+0x24>
    11f6:	28 f0       	brcs	.+10     	; 0x1202 <MCP_rts+0x1c>
    11f8:	82 30       	cpi	r24, 0x02	; 2
    11fa:	59 f0       	breq	.+22     	; 0x1212 <MCP_rts+0x2c>
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	69 f0       	breq	.+26     	; 0x121a <MCP_rts+0x34>
    1200:	0f c0       	rjmp	.+30     	; 0x1220 <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
    1202:	81 e8       	ldi	r24, 0x81	; 129
    1204:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
			break;
    1208:	0b c0       	rjmp	.+22     	; 0x1220 <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
    120a:	82 e8       	ldi	r24, 0x82	; 130
    120c:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
			break;
    1210:	07 c0       	rjmp	.+14     	; 0x1220 <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
    1212:	84 e8       	ldi	r24, 0x84	; 132
    1214:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
			break;
    1218:	03 c0       	rjmp	.+6      	; 0x1220 <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
    121a:	87 e8       	ldi	r24, 0x87	; 135
    121c:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    1220:	0e 94 c7 02 	call	0x58e	; 0x58e <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	18 2f       	mov	r17, r24
    1230:	d6 2f       	mov	r29, r22
    1232:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    1234:	0e 94 c9 02 	call	0x592	; 0x592 <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
    1238:	85 e0       	ldi	r24, 0x05	; 5
    123a:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	SPI_send(address);
    123e:	81 2f       	mov	r24, r17
    1240:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	SPI_send(mask);
    1244:	8d 2f       	mov	r24, r29
    1246:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	SPI_send(data);
    124a:	8c 2f       	mov	r24, r28
    124c:	0e 94 c0 02 	call	0x580	; 0x580 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    1250:	0e 94 c7 02 	call	0x58e	; 0x58e <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	08 95       	ret

0000125c <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    125c:	e0 e0       	ldi	r30, 0x00	; 0
    125e:	f0 e1       	ldi	r31, 0x10	; 16
    1260:	8e ea       	ldi	r24, 0xAE	; 174
    1262:	80 83       	st	Z, r24
    1264:	81 ea       	ldi	r24, 0xA1	; 161
    1266:	80 83       	st	Z, r24
    1268:	8a ed       	ldi	r24, 0xDA	; 218
    126a:	80 83       	st	Z, r24
    126c:	82 e1       	ldi	r24, 0x12	; 18
    126e:	80 83       	st	Z, r24
    1270:	88 ec       	ldi	r24, 0xC8	; 200
    1272:	80 83       	st	Z, r24
    1274:	88 ea       	ldi	r24, 0xA8	; 168
    1276:	80 83       	st	Z, r24
    1278:	8f e3       	ldi	r24, 0x3F	; 63
    127a:	80 83       	st	Z, r24
    127c:	85 ed       	ldi	r24, 0xD5	; 213
    127e:	80 83       	st	Z, r24
    1280:	80 e8       	ldi	r24, 0x80	; 128
    1282:	80 83       	st	Z, r24
    1284:	81 e8       	ldi	r24, 0x81	; 129
    1286:	80 83       	st	Z, r24
    1288:	80 e5       	ldi	r24, 0x50	; 80
    128a:	80 83       	st	Z, r24
    128c:	89 ed       	ldi	r24, 0xD9	; 217
    128e:	80 83       	st	Z, r24
    1290:	81 e2       	ldi	r24, 0x21	; 33
    1292:	80 83       	st	Z, r24
    1294:	80 e2       	ldi	r24, 0x20	; 32
    1296:	80 83       	st	Z, r24
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	80 83       	st	Z, r24
    129c:	8b ed       	ldi	r24, 0xDB	; 219
    129e:	80 83       	st	Z, r24
    12a0:	80 e3       	ldi	r24, 0x30	; 48
    12a2:	80 83       	st	Z, r24
    12a4:	8d ea       	ldi	r24, 0xAD	; 173
    12a6:	80 83       	st	Z, r24
    12a8:	10 82       	st	Z, r1
    12aa:	84 ea       	ldi	r24, 0xA4	; 164
    12ac:	80 83       	st	Z, r24
    12ae:	86 ea       	ldi	r24, 0xA6	; 166
    12b0:	80 83       	st	Z, r24
    12b2:	8f ea       	ldi	r24, 0xAF	; 175
    12b4:	80 83       	st	Z, r24
    12b6:	08 95       	ret

000012b8 <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
    12b8:	af 92       	push	r10
    12ba:	bf 92       	push	r11
    12bc:	cf 92       	push	r12
    12be:	df 92       	push	r13
    12c0:	ef 92       	push	r14
    12c2:	ff 92       	push	r15
    12c4:	0f 93       	push	r16
    12c6:	1f 93       	push	r17
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
    12ce:	c0 e0       	ldi	r28, 0x00	; 0
    12d0:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
    12d2:	e1 2c       	mov	r14, r1
    12d4:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    12d6:	c1 2c       	mov	r12, r1
    12d8:	68 94       	set
    12da:	dd 24       	eor	r13, r13
    12dc:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    12de:	00 e0       	ldi	r16, 0x00	; 0
    12e0:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
    12e2:	ce 01       	movw	r24, r28
    12e4:	9e 01       	movw	r18, r28
    12e6:	2f 77       	andi	r18, 0x7F	; 127
    12e8:	33 27       	eor	r19, r19
    12ea:	23 2b       	or	r18, r19
    12ec:	39 f4       	brne	.+14     	; 0x12fc <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
    12ee:	20 eb       	ldi	r18, 0xB0	; 176
    12f0:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    12f2:	f6 01       	movw	r30, r12
    12f4:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
    12f6:	ff ef       	ldi	r31, 0xFF	; 255
    12f8:	ef 1a       	sub	r14, r31
    12fa:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
    12fc:	8a 0d       	add	r24, r10
    12fe:	9b 1d       	adc	r25, r11
    1300:	0e 94 ac 0a 	call	0x1558	; 0x1558 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    1304:	f8 01       	movw	r30, r16
    1306:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
    1308:	21 96       	adiw	r28, 0x01	; 1
    130a:	c1 15       	cp	r28, r1
    130c:	f4 e0       	ldi	r31, 0x04	; 4
    130e:	df 07       	cpc	r29, r31
    1310:	41 f7       	brne	.-48     	; 0x12e2 <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	df 90       	pop	r13
    1320:	cf 90       	pop	r12
    1322:	bf 90       	pop	r11
    1324:	af 90       	pop	r10
    1326:	08 95       	ret

00001328 <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	2f 93       	push	r18
    1334:	3f 93       	push	r19
    1336:	4f 93       	push	r20
    1338:	5f 93       	push	r21
    133a:	6f 93       	push	r22
    133c:	7f 93       	push	r23
    133e:	8f 93       	push	r24
    1340:	9f 93       	push	r25
    1342:	af 93       	push	r26
    1344:	bf 93       	push	r27
    1346:	ef 93       	push	r30
    1348:	ff 93       	push	r31
	oled_sram_flush(0);
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
	TCNT1 = 0;
    1352:	1d bc       	out	0x2d, r1	; 45
    1354:	1c bc       	out	0x2c, r1	; 44
}
    1356:	ff 91       	pop	r31
    1358:	ef 91       	pop	r30
    135a:	bf 91       	pop	r27
    135c:	af 91       	pop	r26
    135e:	9f 91       	pop	r25
    1360:	8f 91       	pop	r24
    1362:	7f 91       	pop	r23
    1364:	6f 91       	pop	r22
    1366:	5f 91       	pop	r21
    1368:	4f 91       	pop	r20
    136a:	3f 91       	pop	r19
    136c:	2f 91       	pop	r18
    136e:	0f 90       	pop	r0
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	0f 90       	pop	r0
    1374:	1f 90       	pop	r1
    1376:	18 95       	reti

00001378 <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
    1378:	af 92       	push	r10
    137a:	bf 92       	push	r11
    137c:	cf 92       	push	r12
    137e:	df 92       	push	r13
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
    138c:	6a 01       	movw	r12, r20
    138e:	d6 94       	lsr	r13
    1390:	dc 2c       	mov	r13, r12
    1392:	cc 24       	eor	r12, r12
    1394:	d7 94       	ror	r13
    1396:	c7 94       	ror	r12
    1398:	c8 0e       	add	r12, r24
    139a:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
    139c:	fb 01       	movw	r30, r22
    139e:	e0 80       	ld	r14, Z
	while(c != '\0'){
    13a0:	ee 20       	and	r14, r14
    13a2:	69 f1       	breq	.+90     	; 0x13fe <oled_sram_write_string+0x86>
    13a4:	5b 01       	movw	r10, r22
    13a6:	ff ef       	ldi	r31, 0xFF	; 255
    13a8:	af 1a       	sub	r10, r31
    13aa:	bf 0a       	sbc	r11, r31
    13ac:	15 c0       	rjmp	.+42     	; 0x13d8 <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
    13ae:	ce 01       	movw	r24, r28
    13b0:	f7 01       	movw	r30, r14
    13b2:	e8 0f       	add	r30, r24
    13b4:	f9 1f       	adc	r31, r25
    13b6:	64 91       	lpm	r22, Z
    13b8:	ec 01       	movw	r28, r24
    13ba:	21 96       	adiw	r28, 0x01	; 1
    13bc:	70 e0       	ldi	r23, 0x00	; 0
    13be:	0e 94 b0 0a 	call	0x1560	; 0x1560 <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
    13c2:	c0 17       	cp	r28, r16
    13c4:	d1 07       	cpc	r29, r17
    13c6:	99 f7       	brne	.-26     	; 0x13ae <oled_sram_write_string+0x36>
    13c8:	48 e0       	ldi	r20, 0x08	; 8
    13ca:	c4 0e       	add	r12, r20
    13cc:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
    13ce:	f5 01       	movw	r30, r10
    13d0:	e1 90       	ld	r14, Z+
    13d2:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
    13d4:	ee 20       	and	r14, r14
    13d6:	99 f0       	breq	.+38     	; 0x13fe <oled_sram_write_string+0x86>
    13d8:	86 01       	movw	r16, r12
    13da:	08 5f       	subi	r16, 0xF8	; 248
    13dc:	1f 4f       	sbci	r17, 0xFF	; 255
    13de:	f1 2c       	mov	r15, r1
    13e0:	ee 0c       	add	r14, r14
    13e2:	ff 1c       	adc	r15, r15
    13e4:	ee 0c       	add	r14, r14
    13e6:	ff 1c       	adc	r15, r15
    13e8:	ee 0c       	add	r14, r14
    13ea:	ff 1c       	adc	r15, r15
    13ec:	97 01       	movw	r18, r14
    13ee:	2c 19       	sub	r18, r12
    13f0:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
    13f2:	c6 01       	movw	r24, r12
    13f4:	a9 01       	movw	r20, r18
    13f6:	40 59       	subi	r20, 0x90	; 144
    13f8:	50 40       	sbci	r21, 0x00	; 0
    13fa:	7a 01       	movw	r14, r20
    13fc:	d9 cf       	rjmp	.-78     	; 0x13b0 <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	af 90       	pop	r10
    1412:	08 95       	ret

00001414 <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	7b 01       	movw	r14, r22
	start = start + page*128+col;
    1422:	8a 01       	movw	r16, r20
    1424:	16 95       	lsr	r17
    1426:	10 2f       	mov	r17, r16
    1428:	00 27       	eor	r16, r16
    142a:	17 95       	ror	r17
    142c:	07 95       	ror	r16
    142e:	80 0f       	add	r24, r16
    1430:	91 1f       	adc	r25, r17
    1432:	8c 01       	movw	r16, r24
    1434:	02 0f       	add	r16, r18
    1436:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
    1438:	c0 e0       	ldi	r28, 0x00	; 0
    143a:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
    143c:	d7 01       	movw	r26, r14
    143e:	ec 91       	ld	r30, X
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	b0 97       	sbiw	r30, 0x20	; 32
    1444:	ee 0f       	add	r30, r30
    1446:	ff 1f       	adc	r31, r31
    1448:	ee 0f       	add	r30, r30
    144a:	ff 1f       	adc	r31, r31
    144c:	ee 0f       	add	r30, r30
    144e:	ff 1f       	adc	r31, r31
    1450:	ec 0f       	add	r30, r28
    1452:	fd 1f       	adc	r31, r29
    1454:	e0 59       	subi	r30, 0x90	; 144
    1456:	ff 4f       	sbci	r31, 0xFF	; 255
    1458:	64 91       	lpm	r22, Z
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	ce 01       	movw	r24, r28
    145e:	80 0f       	add	r24, r16
    1460:	91 1f       	adc	r25, r17
    1462:	0e 94 b0 0a 	call	0x1560	; 0x1560 <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
    1466:	21 96       	adiw	r28, 0x01	; 1
    1468:	c8 30       	cpi	r28, 0x08	; 8
    146a:	d1 05       	cpc	r29, r1
    146c:	39 f7       	brne	.-50     	; 0x143c <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	08 95       	ret

0000147c <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
    1484:	8b 01       	movw	r16, r22
    1486:	16 95       	lsr	r17
    1488:	10 2f       	mov	r17, r16
    148a:	00 27       	eor	r16, r16
    148c:	17 95       	ror	r17
    148e:	07 95       	ror	r16
    1490:	08 0f       	add	r16, r24
    1492:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
    1494:	c0 e0       	ldi	r28, 0x00	; 0
    1496:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	70 e0       	ldi	r23, 0x00	; 0
    149c:	ce 01       	movw	r24, r28
    149e:	80 0f       	add	r24, r16
    14a0:	91 1f       	adc	r25, r17
    14a2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
    14a6:	21 96       	adiw	r28, 0x01	; 1
    14a8:	c0 38       	cpi	r28, 0x80	; 128
    14aa:	d1 05       	cpc	r29, r1
    14ac:	a9 f7       	brne	.-22     	; 0x1498 <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
    14b8:	0f 93       	push	r16
    14ba:	1f 93       	push	r17
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
    14c0:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
    14c2:	c0 e0       	ldi	r28, 0x00	; 0
    14c4:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
    14c6:	be 01       	movw	r22, r28
    14c8:	c8 01       	movw	r24, r16
    14ca:	0e 94 3e 0a 	call	0x147c	; 0x147c <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
    14ce:	21 96       	adiw	r28, 0x01	; 1
    14d0:	c8 30       	cpi	r28, 0x08	; 8
    14d2:	d1 05       	cpc	r29, r1
    14d4:	c1 f7       	brne	.-16     	; 0x14c6 <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	08 95       	ret

000014e0 <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ea 01       	movw	r28, r20
	int page = y/8;
    14ea:	9a 01       	movw	r18, r20
    14ec:	dd 23       	and	r29, r29
    14ee:	14 f4       	brge	.+4      	; 0x14f4 <oled_sram_write_bit+0x14>
    14f0:	29 5f       	subi	r18, 0xF9	; 249
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	89 01       	movw	r16, r18
    14f6:	15 95       	asr	r17
    14f8:	07 95       	ror	r16
    14fa:	15 95       	asr	r17
    14fc:	07 95       	ror	r16
    14fe:	15 95       	asr	r17
    1500:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
    1502:	16 95       	lsr	r17
    1504:	10 2f       	mov	r17, r16
    1506:	00 27       	eor	r16, r16
    1508:	17 95       	ror	r17
    150a:	07 95       	ror	r16
    150c:	08 0f       	add	r16, r24
    150e:	19 1f       	adc	r17, r25
    1510:	06 0f       	add	r16, r22
    1512:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
    1514:	c8 01       	movw	r24, r16
    1516:	0e 94 ac 0a 	call	0x1558	; 0x1558 <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
    151a:	ae 01       	movw	r20, r28
    151c:	47 70       	andi	r20, 0x07	; 7
    151e:	50 78       	andi	r21, 0x80	; 128
    1520:	55 23       	and	r21, r21
    1522:	34 f4       	brge	.+12     	; 0x1530 <oled_sram_write_bit+0x50>
    1524:	41 50       	subi	r20, 0x01	; 1
    1526:	51 09       	sbc	r21, r1
    1528:	48 6f       	ori	r20, 0xF8	; 248
    152a:	5f 6f       	ori	r21, 0xFF	; 255
    152c:	4f 5f       	subi	r20, 0xFF	; 255
    152e:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
    1530:	21 e0       	ldi	r18, 0x01	; 1
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	b9 01       	movw	r22, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <oled_sram_write_bit+0x5c>
    1538:	66 0f       	add	r22, r22
    153a:	77 1f       	adc	r23, r23
    153c:	4a 95       	dec	r20
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <oled_sram_write_bit+0x58>
    1540:	ab 01       	movw	r20, r22
    1542:	48 2b       	or	r20, r24
	setSRAM(index, temp);
    1544:	64 2f       	mov	r22, r20
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	c8 01       	movw	r24, r16
    154a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <setSRAM>
    154e:	df 91       	pop	r29
    1550:	cf 91       	pop	r28
    1552:	1f 91       	pop	r17
    1554:	0f 91       	pop	r16
    1556:	08 95       	ret

00001558 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
    1558:	98 5e       	subi	r25, 0xE8	; 232
    155a:	fc 01       	movw	r30, r24
    155c:	80 81       	ld	r24, Z
}
    155e:	08 95       	ret

00001560 <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
    1560:	fc 01       	movw	r30, r24
    1562:	f8 5e       	subi	r31, 0xE8	; 232
    1564:	80 81       	ld	r24, Z
		ext_ram[index] = value;
    1566:	60 83       	st	Z, r22
		return temp;
}
    1568:	08 95       	ret

0000156a <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
    156a:	5d 9b       	sbis	0x0b, 5	; 11
    156c:	fe cf       	rjmp	.-4      	; 0x156a <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
    156e:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    1570:	80 e0       	ldi	r24, 0x00	; 0
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	08 95       	ret

00001576 <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
    1576:	9c 01       	movw	r18, r24
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 eb       	ldi	r23, 0xB0	; 176
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 df 14 	call	0x29be	; 0x29be <__divmodsi4>
    1588:	21 50       	subi	r18, 0x01	; 1
    158a:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    158c:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
    158e:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    1590:	8a b1       	in	r24, 0x0a	; 10
    1592:	88 61       	ori	r24, 0x18	; 24
    1594:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
    1596:	80 b5       	in	r24, 0x20	; 32
    1598:	86 68       	ori	r24, 0x86	; 134
    159a:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	85 eb       	ldi	r24, 0xB5	; 181
    15a2:	9a e0       	ldi	r25, 0x0A	; 10
    15a4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <fdevopen>
	
	return 0;
}
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	08 95       	ret

000015ae <play_draw>:
#include "../Driver_files/oled_driver.h"
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
    15b6:	0f e1       	ldi	r16, 0x1F	; 31
    15b8:	10 e0       	ldi	r17, 0x00	; 0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
    15ba:	cf e3       	ldi	r28, 0x3F	; 63
    15bc:	d0 e0       	ldi	r29, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = get_joystick_position();
    15be:	0e 94 81 07 	call	0xf02	; 0xf02 <get_joystick_position>
		switch(joy.D){
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	71 f0       	breq	.+28     	; 0x15e2 <play_draw+0x34>
    15c6:	58 f0       	brcs	.+22     	; 0x15de <play_draw+0x30>
    15c8:	82 30       	cpi	r24, 0x02	; 2
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <play_draw+0x24>
    15cc:	83 30       	cpi	r24, 0x03	; 3
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <play_draw+0x2a>
    15d0:	09 c0       	rjmp	.+18     	; 0x15e4 <play_draw+0x36>
			case NEUTRAL:
				break;
			case UP:
				y--;
    15d2:	01 50       	subi	r16, 0x01	; 1
    15d4:	11 09       	sbc	r17, r1
				break;
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <play_draw+0x36>
			case DOWN:
				y++;
    15d8:	0f 5f       	subi	r16, 0xFF	; 255
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <play_draw+0x36>
			case LEFT:
				x--;
    15de:	21 97       	sbiw	r28, 0x01	; 1
				break;
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <play_draw+0x36>
			case RIGHT:
				x++;
    15e2:	21 96       	adiw	r28, 0x01	; 1
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
    15e4:	a8 01       	movw	r20, r16
    15e6:	be 01       	movw	r22, r28
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
		oled_sram_flush(0);
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
    15f8:	2f ef       	ldi	r18, 0xFF	; 255
    15fa:	8f e7       	ldi	r24, 0x7F	; 127
    15fc:	91 e0       	ldi	r25, 0x01	; 1
    15fe:	21 50       	subi	r18, 0x01	; 1
    1600:	80 40       	sbci	r24, 0x00	; 0
    1602:	90 40       	sbci	r25, 0x00	; 0
    1604:	e1 f7       	brne	.-8      	; 0x15fe <play_draw+0x50>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <play_draw+0x5a>
    1608:	00 c0       	rjmp	.+0      	; 0x160a <play_draw+0x5c>
    160a:	d9 cf       	rjmp	.-78     	; 0x15be <play_draw+0x10>

0000160c <racketHit>:

typedef struct{
	int pos; // from 0 to 45 (16 in width)
} Racket;

int racketHit(Ball *ball, int racketPos){
    160c:	cf 92       	push	r12
    160e:	df 92       	push	r13
    1610:	ef 92       	push	r14
    1612:	ff 92       	push	r15
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	eb 01       	movw	r28, r22
	if (ball->posY >= racketPos && ball->posY < racketPos + RACKETSIZE )
    161a:	fc 01       	movw	r30, r24
    161c:	c2 80       	ldd	r12, Z+2	; 0x02
    161e:	d3 80       	ldd	r13, Z+3	; 0x03
    1620:	e4 80       	ldd	r14, Z+4	; 0x04
    1622:	f5 80       	ldd	r15, Z+5	; 0x05
    1624:	88 27       	eor	r24, r24
    1626:	77 fd       	sbrc	r23, 7
    1628:	80 95       	com	r24
    162a:	98 2f       	mov	r25, r24
    162c:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
    1630:	9b 01       	movw	r18, r22
    1632:	ac 01       	movw	r20, r24
    1634:	c7 01       	movw	r24, r14
    1636:	b6 01       	movw	r22, r12
    1638:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__gesf2>
    163c:	88 23       	and	r24, r24
    163e:	bc f0       	brlt	.+46     	; 0x166e <racketHit+0x62>
    1640:	be 01       	movw	r22, r28
    1642:	60 5f       	subi	r22, 0xF0	; 240
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	88 27       	eor	r24, r24
    1648:	77 fd       	sbrc	r23, 7
    164a:	80 95       	com	r24
    164c:	98 2f       	mov	r25, r24
    164e:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
    1652:	9b 01       	movw	r18, r22
    1654:	ac 01       	movw	r20, r24
    1656:	d1 e0       	ldi	r29, 0x01	; 1
    1658:	c0 e0       	ldi	r28, 0x00	; 0
    165a:	c7 01       	movw	r24, r14
    165c:	b6 01       	movw	r22, r12
    165e:	0e 94 15 13 	call	0x262a	; 0x262a <__cmpsf2>
    1662:	88 23       	and	r24, r24
    1664:	0c f0       	brlt	.+2      	; 0x1668 <racketHit+0x5c>
    1666:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
    1668:	8d 2f       	mov	r24, r29
    166a:	9c 2f       	mov	r25, r28
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <racketHit+0x66>
	return 0;
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
}
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	ff 90       	pop	r15
    1678:	ef 90       	pop	r14
    167a:	df 90       	pop	r13
    167c:	cf 90       	pop	r12
    167e:	08 95       	ret

00001680 <updateBallAngle>:

void updateBallAngle(Ball *ball, int racketPos){
    1680:	cf 92       	push	r12
    1682:	df 92       	push	r13
    1684:	ef 92       	push	r14
    1686:	ff 92       	push	r15
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
    1690:	ec 01       	movw	r28, r24
    1692:	8b 01       	movw	r16, r22
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
	int newBallAngle = ball->angle + hitPos * 45;
    1694:	6e 81       	ldd	r22, Y+6	; 0x06
    1696:	7f 81       	ldd	r23, Y+7	; 0x07
    1698:	88 27       	eor	r24, r24
    169a:	77 fd       	sbrc	r23, 7
    169c:	80 95       	com	r24
    169e:	98 2f       	mov	r25, r24
    16a0:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
    16a4:	6b 01       	movw	r12, r22
    16a6:	7c 01       	movw	r14, r24
		return 1;
	return 0;
}

void updateBallAngle(Ball *ball, int racketPos){
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
    16a8:	b8 01       	movw	r22, r16
    16aa:	88 27       	eor	r24, r24
    16ac:	77 fd       	sbrc	r23, 7
    16ae:	80 95       	com	r24
    16b0:	98 2f       	mov	r25, r24
    16b2:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
    16b6:	9b 01       	movw	r18, r22
    16b8:	ac 01       	movw	r20, r24
    16ba:	6a 81       	ldd	r22, Y+2	; 0x02
    16bc:	7b 81       	ldd	r23, Y+3	; 0x03
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	9d 81       	ldd	r25, Y+5	; 0x05
    16c2:	0e 94 b0 12 	call	0x2560	; 0x2560 <__subsf3>
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	51 e4       	ldi	r21, 0x41	; 65
    16ce:	0e 94 b0 12 	call	0x2560	; 0x2560 <__subsf3>
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e0       	ldi	r20, 0x00	; 0
    16d8:	5e e3       	ldi	r21, 0x3E	; 62
    16da:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
	int newBallAngle = ball->angle + hitPos * 45;
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	44 e3       	ldi	r20, 0x34	; 52
    16e4:	52 e4       	ldi	r21, 0x42	; 66
    16e6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__mulsf3>
    16ea:	9b 01       	movw	r18, r22
    16ec:	ac 01       	movw	r20, r24
    16ee:	c7 01       	movw	r24, r14
    16f0:	b6 01       	movw	r22, r12
    16f2:	0e 94 b1 12 	call	0x2562	; 0x2562 <__addsf3>
    16f6:	0e 94 81 13 	call	0x2702	; 0x2702 <__fixsfsi>
	if(newBallAngle > 45) ball->angle = 45;
    16fa:	6e 32       	cpi	r22, 0x2E	; 46
    16fc:	71 05       	cpc	r23, r1
    16fe:	2c f0       	brlt	.+10     	; 0x170a <updateBallAngle+0x8a>
    1700:	8d e2       	ldi	r24, 0x2D	; 45
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9f 83       	std	Y+7, r25	; 0x07
    1706:	8e 83       	std	Y+6, r24	; 0x06
    1708:	0b c0       	rjmp	.+22     	; 0x1720 <updateBallAngle+0xa0>
	else if(newBallAngle < -45) ball->angle = 45;
    170a:	63 3d       	cpi	r22, 0xD3	; 211
    170c:	4f ef       	ldi	r20, 0xFF	; 255
    170e:	74 07       	cpc	r23, r20
    1710:	2c f4       	brge	.+10     	; 0x171c <updateBallAngle+0x9c>
    1712:	8d e2       	ldi	r24, 0x2D	; 45
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	9f 83       	std	Y+7, r25	; 0x07
    1718:	8e 83       	std	Y+6, r24	; 0x06
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <updateBallAngle+0xa0>
	else ball->angle = newBallAngle;
    171c:	7f 83       	std	Y+7, r23	; 0x07
    171e:	6e 83       	std	Y+6, r22	; 0x06
}
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	08 95       	ret

00001732 <ballInit>:

void ballInit(Ball *ball){
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	ec 01       	movw	r28, r24
	ball->dir = rand() % 2;
    1738:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <rand>
    173c:	81 70       	andi	r24, 0x01	; 1
    173e:	90 78       	andi	r25, 0x80	; 128
    1740:	99 23       	and	r25, r25
    1742:	24 f4       	brge	.+8      	; 0x174c <ballInit+0x1a>
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	8e 6f       	ori	r24, 0xFE	; 254
    1748:	9f 6f       	ori	r25, 0xFF	; 255
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	99 87       	std	Y+9, r25	; 0x09
    174e:	88 87       	std	Y+8, r24	; 0x08
	ball->angle = (rand() % 91) - 45;
    1750:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <rand>
    1754:	6b e5       	ldi	r22, 0x5B	; 91
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
    175c:	8d 97       	sbiw	r24, 0x2d	; 45
    175e:	9f 83       	std	Y+7, r25	; 0x07
    1760:	8e 83       	std	Y+6, r24	; 0x06
	ball->posX = 63;
    1762:	8f e3       	ldi	r24, 0x3F	; 63
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	99 83       	std	Y+1, r25	; 0x01
    1768:	88 83       	st	Y, r24
}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	08 95       	ret

00001770 <updateBallPosition>:

void updateBallPosition(Ball *ball){
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	ec 01       	movw	r28, r24
	float tempPosY = ball->posY + ((float)(ball->angle)/45);
    1782:	0e 81       	ldd	r16, Y+6	; 0x06
    1784:	1f 81       	ldd	r17, Y+7	; 0x07
    1786:	b8 01       	movw	r22, r16
    1788:	88 27       	eor	r24, r24
    178a:	77 fd       	sbrc	r23, 7
    178c:	80 95       	com	r24
    178e:	98 2f       	mov	r25, r24
    1790:	0e 94 b4 13 	call	0x2768	; 0x2768 <__floatsisf>
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	44 e3       	ldi	r20, 0x34	; 52
    179a:	52 e4       	ldi	r21, 0x42	; 66
    179c:	0e 94 19 13 	call	0x2632	; 0x2632 <__divsf3>
    17a0:	2a 81       	ldd	r18, Y+2	; 0x02
    17a2:	3b 81       	ldd	r19, Y+3	; 0x03
    17a4:	4c 81       	ldd	r20, Y+4	; 0x04
    17a6:	5d 81       	ldd	r21, Y+5	; 0x05
    17a8:	0e 94 b1 12 	call	0x2562	; 0x2562 <__addsf3>
    17ac:	6b 01       	movw	r12, r22
    17ae:	7c 01       	movw	r14, r24
	
	//hits the wall
	if (tempPosY > 63){ 
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4c e7       	ldi	r20, 0x7C	; 124
    17b6:	52 e4       	ldi	r21, 0x42	; 66
    17b8:	0e 94 64 14 	call	0x28c8	; 0x28c8 <__gesf2>
    17bc:	18 16       	cp	r1, r24
    17be:	d4 f4       	brge	.+52     	; 0x17f4 <updateBallPosition+0x84>
		ball->posY = 63 - (tempPosY - 63);
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	4c e7       	ldi	r20, 0x7C	; 124
    17c6:	52 e4       	ldi	r21, 0x42	; 66
    17c8:	c7 01       	movw	r24, r14
    17ca:	b6 01       	movw	r22, r12
    17cc:	0e 94 b0 12 	call	0x2560	; 0x2560 <__subsf3>
    17d0:	9b 01       	movw	r18, r22
    17d2:	ac 01       	movw	r20, r24
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	8c e7       	ldi	r24, 0x7C	; 124
    17da:	92 e4       	ldi	r25, 0x42	; 66
    17dc:	0e 94 b0 12 	call	0x2560	; 0x2560 <__subsf3>
    17e0:	6a 83       	std	Y+2, r22	; 0x02
    17e2:	7b 83       	std	Y+3, r23	; 0x03
    17e4:	8c 83       	std	Y+4, r24	; 0x04
    17e6:	9d 83       	std	Y+5, r25	; 0x05
		ball->angle *= -1;
    17e8:	11 95       	neg	r17
    17ea:	01 95       	neg	r16
    17ec:	11 09       	sbc	r17, r1
    17ee:	1f 83       	std	Y+7, r17	; 0x07
    17f0:	0e 83       	std	Y+6, r16	; 0x06
    17f2:	1b c0       	rjmp	.+54     	; 0x182a <updateBallPosition+0xba>
	}
	else if (tempPosY < 0){
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	a9 01       	movw	r20, r18
    17fa:	c7 01       	movw	r24, r14
    17fc:	b6 01       	movw	r22, r12
    17fe:	0e 94 15 13 	call	0x262a	; 0x262a <__cmpsf2>
    1802:	88 23       	and	r24, r24
    1804:	74 f4       	brge	.+28     	; 0x1822 <updateBallPosition+0xb2>
		ball->posY = -1*tempPosY;
    1806:	f7 fa       	bst	r15, 7
    1808:	f0 94       	com	r15
    180a:	f7 f8       	bld	r15, 7
    180c:	f0 94       	com	r15
    180e:	ca 82       	std	Y+2, r12	; 0x02
    1810:	db 82       	std	Y+3, r13	; 0x03
    1812:	ec 82       	std	Y+4, r14	; 0x04
    1814:	fd 82       	std	Y+5, r15	; 0x05
		ball->angle *= -1;
    1816:	11 95       	neg	r17
    1818:	01 95       	neg	r16
    181a:	11 09       	sbc	r17, r1
    181c:	1f 83       	std	Y+7, r17	; 0x07
    181e:	0e 83       	std	Y+6, r16	; 0x06
    1820:	04 c0       	rjmp	.+8      	; 0x182a <updateBallPosition+0xba>
	}
	else ball->posY = tempPosY;
    1822:	ca 82       	std	Y+2, r12	; 0x02
    1824:	db 82       	std	Y+3, r13	; 0x03
    1826:	ec 82       	std	Y+4, r14	; 0x04
    1828:	fd 82       	std	Y+5, r15	; 0x05
	if(ball->dir == RIGHT)
    182a:	88 85       	ldd	r24, Y+8	; 0x08
    182c:	99 85       	ldd	r25, Y+9	; 0x09
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	31 f4       	brne	.+12     	; 0x183e <updateBallPosition+0xce>
		ball->posX++;
    1832:	88 81       	ld	r24, Y
    1834:	99 81       	ldd	r25, Y+1	; 0x01
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	99 83       	std	Y+1, r25	; 0x01
    183a:	88 83       	st	Y, r24
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <updateBallPosition+0xd8>
	else ball->posX--;
    183e:	88 81       	ld	r24, Y
    1840:	99 81       	ldd	r25, Y+1	; 0x01
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	99 83       	std	Y+1, r25	; 0x01
    1846:	88 83       	st	Y, r24
}
    1848:	df 91       	pop	r29
    184a:	cf 91       	pop	r28
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	08 95       	ret

0000185a <updateSliderPosition>:
void updateSliderPosition(Slider *slide){
    185a:	cf 93       	push	r28
    185c:	df 93       	push	r29
    185e:	ec 01       	movw	r28, r24
	*slide = get_slider_position();
    1860:	0e 94 04 07 	call	0xe08	; 0xe08 <get_slider_position>
    1864:	79 83       	std	Y+1, r23	; 0x01
    1866:	8a 83       	std	Y+2, r24	; 0x02
    1868:	9b 83       	std	Y+3, r25	; 0x03
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
    186a:	4f e2       	ldi	r20, 0x2F	; 47
    186c:	46 9f       	mul	r20, r22
    186e:	c0 01       	movw	r24, r0
    1870:	11 24       	eor	r1, r1
    1872:	24 e6       	ldi	r18, 0x64	; 100
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	b9 01       	movw	r22, r18
    1878:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
    187c:	68 83       	st	Y, r22
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	48 9f       	mul	r20, r24
    1882:	c0 01       	movw	r24, r0
    1884:	11 24       	eor	r1, r1
    1886:	b9 01       	movw	r22, r18
    1888:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
    188c:	69 83       	std	Y+1, r22	; 0x01
} 
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	08 95       	ret

00001894 <updateScreen>:
			printEndScreen("Player Left won!");
		}
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
    1894:	cf 92       	push	r12
    1896:	df 92       	push	r13
    1898:	ef 92       	push	r14
    189a:	ff 92       	push	r15
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	cd b7       	in	r28, 0x3d	; 61
    18a6:	de b7       	in	r29, 0x3e	; 62
    18a8:	2a 97       	sbiw	r28, 0x0a	; 10
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	09 83       	std	Y+1, r16	; 0x01
    18b6:	1a 83       	std	Y+2, r17	; 0x02
    18b8:	2b 83       	std	Y+3, r18	; 0x03
    18ba:	3c 83       	std	Y+4, r19	; 0x04
    18bc:	4d 83       	std	Y+5, r20	; 0x05
    18be:	5e 83       	std	Y+6, r21	; 0x06
	oled_sram_clear_screen(0);
    18c0:	80 e0       	ldi	r24, 0x00	; 0
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	for (int i = 0; i < RACKETSIZE; i++){
    18c8:	00 e0       	ldi	r16, 0x00	; 0
    18ca:	10 e0       	ldi	r17, 0x00	; 0
    18cc:	a8 01       	movw	r20, r16
    18ce:	4e 0d       	add	r20, r14
    18d0:	5f 1d       	adc	r21, r15
		oled_sram_write_bit(0, 1, leftRacketPos + i);
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
    18de:	a8 01       	movw	r20, r16
    18e0:	4c 0d       	add	r20, r12
    18e2:	5d 1d       	adc	r21, r13
		oled_sram_write_bit(0,127, rightRacketPos + i);
    18e4:	6f e7       	ldi	r22, 0x7F	; 127
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	00 31       	cpi	r16, 0x10	; 16
    18f6:	11 05       	cpc	r17, r1
    18f8:	49 f7       	brne	.-46     	; 0x18cc <updateScreen+0x38>
    18fa:	00 e0       	ldi	r16, 0x00	; 0
    18fc:	10 e0       	ldi	r17, 0x00	; 0
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	a9 01       	movw	r20, r18
    1904:	6b 81       	ldd	r22, Y+3	; 0x03
    1906:	7c 81       	ldd	r23, Y+4	; 0x04
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	0e 94 b1 12 	call	0x2562	; 0x2562 <__addsf3>
    1910:	0e 94 81 13 	call	0x2702	; 0x2702 <__fixsfsi>
    1914:	29 81       	ldd	r18, Y+1	; 0x01
    1916:	3a 81       	ldd	r19, Y+2	; 0x02
    1918:	20 0f       	add	r18, r16
    191a:	31 1f       	adc	r19, r17
    191c:	ab 01       	movw	r20, r22
    191e:	b9 01       	movw	r22, r18
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	6b 81       	ldd	r22, Y+3	; 0x03
    1932:	7c 81       	ldd	r23, Y+4	; 0x04
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	0e 94 b1 12 	call	0x2562	; 0x2562 <__addsf3>
    193c:	0e 94 81 13 	call	0x2702	; 0x2702 <__fixsfsi>
    1940:	29 81       	ldd	r18, Y+1	; 0x01
    1942:	3a 81       	ldd	r19, Y+2	; 0x02
    1944:	20 0f       	add	r18, r16
    1946:	31 1f       	adc	r19, r17
    1948:	ab 01       	movw	r20, r22
    194a:	b9 01       	movw	r22, r18
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
    1954:	0f 5f       	subi	r16, 0xFF	; 255
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	02 30       	cpi	r16, 0x02	; 2
    195a:	11 05       	cpc	r17, r1
    195c:	81 f6       	brne	.-96     	; 0x18fe <updateScreen+0x6a>
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
}
    1966:	2a 96       	adiw	r28, 0x0a	; 10
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	ef 90       	pop	r14
    197e:	df 90       	pop	r13
    1980:	cf 90       	pop	r12
    1982:	08 95       	ret

00001984 <playRound>:
	*slide = get_slider_position();
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
} 

int playRound(){
    1984:	af 92       	push	r10
    1986:	bf 92       	push	r11
    1988:	cf 92       	push	r12
    198a:	df 92       	push	r13
    198c:	ef 92       	push	r14
    198e:	ff 92       	push	r15
    1990:	0f 93       	push	r16
    1992:	1f 93       	push	r17
    1994:	cf 93       	push	r28
    1996:	df 93       	push	r29
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	2e 97       	sbiw	r28, 0x0e	; 14
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
	Ball ball;
	Slider slide;
	ballInit(&ball);
    19a8:	ce 01       	movw	r24, r28
    19aa:	01 96       	adiw	r24, 0x01	; 1
    19ac:	0e 94 99 0b 	call	0x1732	; 0x1732 <ballInit>
				return LEFT;
			}
		}
		else if (ball.posX == 1){
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
    19b0:	aa 24       	eor	r10, r10
    19b2:	a3 94       	inc	r10
    19b4:	b1 2c       	mov	r11, r1
	Ball ball;
	Slider slide;
	ballInit(&ball);
	int time = 25;
	while(1){
		updateSliderPosition(&slide);
    19b6:	ce 01       	movw	r24, r28
    19b8:	0b 96       	adiw	r24, 0x0b	; 11
    19ba:	0e 94 2d 0c 	call	0x185a	; 0x185a <updateSliderPosition>
		if (ball.posX >= 126){
    19be:	09 81       	ldd	r16, Y+1	; 0x01
    19c0:	1a 81       	ldd	r17, Y+2	; 0x02
    19c2:	0e 37       	cpi	r16, 0x7E	; 126
    19c4:	11 05       	cpc	r17, r1
    19c6:	94 f0       	brlt	.+36     	; 0x19ec <playRound+0x68>
			if (racketHit(&ball, slide.right) ){
    19c8:	ec 84       	ldd	r14, Y+12	; 0x0c
    19ca:	f1 2c       	mov	r15, r1
    19cc:	b7 01       	movw	r22, r14
    19ce:	ce 01       	movw	r24, r28
    19d0:	01 96       	adiw	r24, 0x01	; 1
    19d2:	0e 94 06 0b 	call	0x160c	; 0x160c <racketHit>
    19d6:	8c 01       	movw	r16, r24
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	a9 f1       	breq	.+106    	; 0x1a46 <playRound+0xc2>
				ball.dir = LEFT;
    19dc:	1a 86       	std	Y+10, r1	; 0x0a
    19de:	19 86       	std	Y+9, r1	; 0x09
				updateBallAngle(&ball, slide.right);
    19e0:	b7 01       	movw	r22, r14
    19e2:	ce 01       	movw	r24, r28
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	0e 94 40 0b 	call	0x1680	; 0x1680 <updateBallAngle>
    19ea:	13 c0       	rjmp	.+38     	; 0x1a12 <playRound+0x8e>
			}
			else{
				return LEFT;
			}
		}
		else if (ball.posX == 1){
    19ec:	01 30       	cpi	r16, 0x01	; 1
    19ee:	11 05       	cpc	r17, r1
    19f0:	81 f4       	brne	.+32     	; 0x1a12 <playRound+0x8e>
			if (racketHit(&ball, slide.left) ){
    19f2:	eb 84       	ldd	r14, Y+11	; 0x0b
    19f4:	f1 2c       	mov	r15, r1
    19f6:	b7 01       	movw	r22, r14
    19f8:	ce 01       	movw	r24, r28
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	0e 94 06 0b 	call	0x160c	; 0x160c <racketHit>
    1a00:	89 2b       	or	r24, r25
    1a02:	09 f1       	breq	.+66     	; 0x1a46 <playRound+0xc2>
				ball.dir = RIGHT;
    1a04:	ba 86       	std	Y+10, r11	; 0x0a
    1a06:	a9 86       	std	Y+9, r10	; 0x09
				updateBallAngle(&ball, slide.left);
    1a08:	b7 01       	movw	r22, r14
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	01 96       	adiw	r24, 0x01	; 1
    1a0e:	0e 94 40 0b 	call	0x1680	; 0x1680 <updateBallAngle>
			}
			else {
				return RIGHT;
			}
		}
		updateBallPosition(&ball);
    1a12:	ce 01       	movw	r24, r28
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	0e 94 b8 0b 	call	0x1770	; 0x1770 <updateBallPosition>
		updateScreen(ball, slide.left, slide.right);
    1a1a:	cc 84       	ldd	r12, Y+12	; 0x0c
    1a1c:	d1 2c       	mov	r13, r1
    1a1e:	eb 84       	ldd	r14, Y+11	; 0x0b
    1a20:	f1 2c       	mov	r15, r1
    1a22:	09 81       	ldd	r16, Y+1	; 0x01
    1a24:	1a 81       	ldd	r17, Y+2	; 0x02
    1a26:	2b 81       	ldd	r18, Y+3	; 0x03
    1a28:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2a:	4d 81       	ldd	r20, Y+5	; 0x05
    1a2c:	5e 81       	ldd	r21, Y+6	; 0x06
    1a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a30:	78 85       	ldd	r23, Y+8	; 0x08
    1a32:	89 85       	ldd	r24, Y+9	; 0x09
    1a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a36:	0e 94 4a 0c 	call	0x1894	; 0x1894 <updateScreen>
    1a3a:	89 e9       	ldi	r24, 0x99	; 153
    1a3c:	99 e0       	ldi	r25, 0x09	; 9
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	f1 f7       	brne	.-4      	; 0x1a3e <playRound+0xba>
    1a42:	00 c0       	rjmp	.+0      	; 0x1a44 <playRound+0xc0>
    1a44:	b8 cf       	rjmp	.-144    	; 0x19b6 <playRound+0x32>
		_delay_ms(2);
	}
}
    1a46:	c8 01       	movw	r24, r16
    1a48:	2e 96       	adiw	r28, 0x0e	; 14
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	08 95       	ret

00001a6a <printScore>:
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
}
void printScore(int leftPoints, int rightPoints){
    1a6a:	0f 93       	push	r16
    1a6c:	1f 93       	push	r17
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <printScore+0xa>
    1a74:	1f 92       	push	r1
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	08 2f       	mov	r16, r24
    1a7c:	16 2f       	mov	r17, r22
	oled_sram_clear_screen(0);
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	char lp = leftPoints + '0';
    1a86:	00 5d       	subi	r16, 0xD0	; 208
    1a88:	09 83       	std	Y+1, r16	; 0x01
	char mid = '-';
    1a8a:	8d e2       	ldi	r24, 0x2D	; 45
    1a8c:	8a 83       	std	Y+2, r24	; 0x02
	char rp = rightPoints + '0';
    1a8e:	10 5d       	subi	r17, 0xD0	; 208
    1a90:	1b 83       	std	Y+3, r17	; 0x03
	oled_sram_write_char(0, &lp, 2, 56);
    1a92:	28 e3       	ldi	r18, 0x38	; 56
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	42 e0       	ldi	r20, 0x02	; 2
    1a98:	50 e0       	ldi	r21, 0x00	; 0
    1a9a:	be 01       	movw	r22, r28
    1a9c:	6f 5f       	subi	r22, 0xFF	; 255
    1a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
	oled_sram_write_char(0, &mid, 2, 64);
    1aa8:	20 e4       	ldi	r18, 0x40	; 64
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	42 e0       	ldi	r20, 0x02	; 2
    1aae:	50 e0       	ldi	r21, 0x00	; 0
    1ab0:	be 01       	movw	r22, r28
    1ab2:	6e 5f       	subi	r22, 0xFE	; 254
    1ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
	oled_sram_write_char(0, &rp, 2, 72);
    1abe:	28 e4       	ldi	r18, 0x48	; 72
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	42 e0       	ldi	r20, 0x02	; 2
    1ac4:	50 e0       	ldi	r21, 0x00	; 0
    1ac6:	be 01       	movw	r22, r28
    1ac8:	6d 5f       	subi	r22, 0xFD	; 253
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
	oled_sram_flush(0);	
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
}
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	0f 91       	pop	r16
    1aea:	08 95       	ret

00001aec <printEndScreen>:
void printEndScreen(char *endMessage){
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	8c 01       	movw	r16, r24
	oled_sram_clear_screen(0);
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	for(int i = 0; i < 10; i++){
    1afe:	c0 e0       	ldi	r28, 0x00	; 0
    1b00:	d0 e0       	ldi	r29, 0x00	; 0
		if( i % 2 ){
    1b02:	c0 ff       	sbrs	r28, 0
    1b04:	11 c0       	rjmp	.+34     	; 0x1b28 <printEndScreen+0x3c>
			oled_sram_write_string(0, endMessage, 2);
    1b06:	42 e0       	ldi	r20, 0x02	; 2
    1b08:	50 e0       	ldi	r21, 0x00	; 0
    1b0a:	b8 01       	movw	r22, r16
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	9f e7       	ldi	r25, 0x7F	; 127
    1b18:	24 e0       	ldi	r18, 0x04	; 4
    1b1a:	81 50       	subi	r24, 0x01	; 1
    1b1c:	90 40       	sbci	r25, 0x00	; 0
    1b1e:	20 40       	sbci	r18, 0x00	; 0
    1b20:	e1 f7       	brne	.-8      	; 0x1b1a <printEndScreen+0x2e>
    1b22:	00 c0       	rjmp	.+0      	; 0x1b24 <printEndScreen+0x38>
    1b24:	00 00       	nop
    1b26:	09 c0       	rjmp	.+18     	; 0x1b3a <printEndScreen+0x4e>
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	9f e7       	ldi	r25, 0x7F	; 127
    1b2c:	24 e0       	ldi	r18, 0x04	; 4
    1b2e:	81 50       	subi	r24, 0x01	; 1
    1b30:	90 40       	sbci	r25, 0x00	; 0
    1b32:	20 40       	sbci	r18, 0x00	; 0
    1b34:	e1 f7       	brne	.-8      	; 0x1b2e <printEndScreen+0x42>
    1b36:	00 c0       	rjmp	.+0      	; 0x1b38 <printEndScreen+0x4c>
    1b38:	00 00       	nop
	oled_sram_write_char(0, &rp, 2, 72);
	oled_sram_flush(0);	
}
void printEndScreen(char *endMessage){
	oled_sram_clear_screen(0);
	for(int i = 0; i < 10; i++){
    1b3a:	21 96       	adiw	r28, 0x01	; 1
    1b3c:	ca 30       	cpi	r28, 0x0A	; 10
    1b3e:	d1 05       	cpc	r29, r1
    1b40:	01 f7       	brne	.-64     	; 0x1b02 <printEndScreen+0x16>
			oled_sram_write_string(0, endMessage, 2);
			_delay_ms(300);
		}
		else _delay_ms(300);
	}
	oled_sram_flush(0);	
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	08 95       	ret

00001b54 <playPong>:

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	}
}

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
    1b5c:	00 e0       	ldi	r16, 0x00	; 0
    1b5e:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(2);
	}
}

void playPong(){
	int pointLeft = 0;
    1b60:	c0 e0       	ldi	r28, 0x00	; 0
    1b62:	d0 e0       	ldi	r29, 0x00	; 0
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
	while(1){
		printScore(pointLeft, pointRight);
    1b64:	b8 01       	movw	r22, r16
    1b66:	ce 01       	movw	r24, r28
    1b68:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <printScore>
    1b6c:	2f ef       	ldi	r18, 0xFF	; 255
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	9d e1       	ldi	r25, 0x1D	; 29
    1b72:	21 50       	subi	r18, 0x01	; 1
    1b74:	80 40       	sbci	r24, 0x00	; 0
    1b76:	90 40       	sbci	r25, 0x00	; 0
    1b78:	e1 f7       	brne	.-8      	; 0x1b72 <playPong+0x1e>
    1b7a:	00 c0       	rjmp	.+0      	; 0x1b7c <playPong+0x28>
    1b7c:	00 00       	nop
		_delay_ms(2000);
		point = playRound();
    1b7e:	0e 94 c2 0c 	call	0x1984	; 0x1984 <playRound>
		if (point == LEFT) pointLeft++;
    1b82:	89 2b       	or	r24, r25
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <playPong+0x36>
    1b86:	21 96       	adiw	r28, 0x01	; 1
    1b88:	02 c0       	rjmp	.+4      	; 0x1b8e <playPong+0x3a>
		else pointRight++;
    1b8a:	0f 5f       	subi	r16, 0xFF	; 255
    1b8c:	1f 4f       	sbci	r17, 0xFF	; 255
		if(pointLeft == 5){
    1b8e:	c5 30       	cpi	r28, 0x05	; 5
    1b90:	d1 05       	cpc	r29, r1
    1b92:	29 f4       	brne	.+10     	; 0x1b9e <playPong+0x4a>
			printEndScreen("Player Right won!");
    1b94:	8b ec       	ldi	r24, 0xCB	; 203
    1b96:	91 e0       	ldi	r25, 0x01	; 1
    1b98:	0e 94 76 0d 	call	0x1aec	; 0x1aec <printEndScreen>
    1b9c:	e3 cf       	rjmp	.-58     	; 0x1b64 <playPong+0x10>
		}
		else if(pointRight == 5){
    1b9e:	05 30       	cpi	r16, 0x05	; 5
    1ba0:	11 05       	cpc	r17, r1
    1ba2:	01 f7       	brne	.-64     	; 0x1b64 <playPong+0x10>
			printEndScreen("Player Left won!");
    1ba4:	8d ed       	ldi	r24, 0xDD	; 221
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	0e 94 76 0d 	call	0x1aec	; 0x1aec <printEndScreen>
    1bac:	db cf       	rjmp	.-74     	; 0x1b64 <playPong+0x10>

00001bae <detectCollision>:
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>
#include "highscore.h"


int detectCollision(segment *s, int x, int y){
    1bae:	fc 01       	movw	r30, r24
	while(s){
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	81 f0       	breq	.+32     	; 0x1bd4 <detectCollision+0x26>
		if (s->x == x && s->y == y){
    1bb4:	84 81       	ldd	r24, Z+4	; 0x04
    1bb6:	95 81       	ldd	r25, Z+5	; 0x05
    1bb8:	86 17       	cp	r24, r22
    1bba:	97 07       	cpc	r25, r23
    1bbc:	29 f4       	brne	.+10     	; 0x1bc8 <detectCollision+0x1a>
    1bbe:	86 81       	ldd	r24, Z+6	; 0x06
    1bc0:	97 81       	ldd	r25, Z+7	; 0x07
    1bc2:	84 17       	cp	r24, r20
    1bc4:	95 07       	cpc	r25, r21
    1bc6:	49 f0       	breq	.+18     	; 0x1bda <detectCollision+0x2c>
			return 1;
		}
		s = s->next;
    1bc8:	01 90       	ld	r0, Z+
    1bca:	f0 81       	ld	r31, Z
    1bcc:	e0 2d       	mov	r30, r0
#include <stdlib.h>
#include "highscore.h"


int detectCollision(segment *s, int x, int y){
	while(s){
    1bce:	30 97       	sbiw	r30, 0x00	; 0
    1bd0:	89 f7       	brne	.-30     	; 0x1bb4 <detectCollision+0x6>
    1bd2:	06 c0       	rjmp	.+12     	; 0x1be0 <detectCollision+0x32>
		if (s->x == x && s->y == y){
			return 1;
		}
		s = s->next;
	}
	return 0;
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	08 95       	ret


int detectCollision(segment *s, int x, int y){
	while(s){
		if (s->x == x && s->y == y){
			return 1;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	08 95       	ret
		}
		s = s->next;
	}
	return 0;
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	90 e0       	ldi	r25, 0x00	; 0
}
    1be4:	08 95       	ret

00001be6 <placeFood>:

void placeFood(int food[], segment *first){
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	ec 01       	movw	r28, r24
    1bf0:	8b 01       	movw	r16, r22
	do{
		food[0] = rand() % 64;
    1bf2:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <rand>
    1bf6:	8f 73       	andi	r24, 0x3F	; 63
    1bf8:	90 78       	andi	r25, 0x80	; 128
    1bfa:	99 23       	and	r25, r25
    1bfc:	24 f4       	brge	.+8      	; 0x1c06 <placeFood+0x20>
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	80 6c       	ori	r24, 0xC0	; 192
    1c02:	9f 6f       	ori	r25, 0xFF	; 255
    1c04:	01 96       	adiw	r24, 0x01	; 1
    1c06:	99 83       	std	Y+1, r25	; 0x01
    1c08:	88 83       	st	Y, r24
		food[1] = rand() % 32;
    1c0a:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <rand>
    1c0e:	ac 01       	movw	r20, r24
    1c10:	4f 71       	andi	r20, 0x1F	; 31
    1c12:	50 78       	andi	r21, 0x80	; 128
    1c14:	55 23       	and	r21, r21
    1c16:	34 f4       	brge	.+12     	; 0x1c24 <placeFood+0x3e>
    1c18:	41 50       	subi	r20, 0x01	; 1
    1c1a:	51 09       	sbc	r21, r1
    1c1c:	40 6e       	ori	r20, 0xE0	; 224
    1c1e:	5f 6f       	ori	r21, 0xFF	; 255
    1c20:	4f 5f       	subi	r20, 0xFF	; 255
    1c22:	5f 4f       	sbci	r21, 0xFF	; 255
    1c24:	5b 83       	std	Y+3, r21	; 0x03
    1c26:	4a 83       	std	Y+2, r20	; 0x02
	} while(detectCollision(first, food[0], food[1]));
    1c28:	68 81       	ld	r22, Y
    1c2a:	79 81       	ldd	r23, Y+1	; 0x01
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <detectCollision>
    1c32:	89 2b       	or	r24, r25
    1c34:	f1 f6       	brne	.-68     	; 0x1bf2 <placeFood+0xc>
}
    1c36:	df 91       	pop	r29
    1c38:	cf 91       	pop	r28
    1c3a:	1f 91       	pop	r17
    1c3c:	0f 91       	pop	r16
    1c3e:	08 95       	ret

00001c40 <drawBoard>:

void drawBoard(segment *s, int food[]){
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	0f 93       	push	r16
    1c4a:	1f 93       	push	r17
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	8c 01       	movw	r16, r24
    1c52:	7b 01       	movw	r14, r22
	oled_sram_clear_screen(0);
    1c54:	80 e0       	ldi	r24, 0x00	; 0
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	while(s){
    1c5c:	01 15       	cp	r16, r1
    1c5e:	11 05       	cpc	r17, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <drawBoard+0x24>
    1c62:	59 c0       	rjmp	.+178    	; 0x1d16 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1c64:	c1 2c       	mov	r12, r1
    1c66:	d1 2c       	mov	r13, r1
    1c68:	2a c0       	rjmp	.+84     	; 0x1cbe <drawBoard+0x7e>
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	46 81       	ldd	r20, Z+6	; 0x06
    1c6e:	57 81       	ldd	r21, Z+7	; 0x07
    1c70:	44 0f       	add	r20, r20
    1c72:	55 1f       	adc	r21, r21
    1c74:	64 81       	ldd	r22, Z+4	; 0x04
    1c76:	75 81       	ldd	r23, Z+5	; 0x05
    1c78:	66 0f       	add	r22, r22
    1c7a:	77 1f       	adc	r23, r23
    1c7c:	6c 0f       	add	r22, r28
    1c7e:	7d 1f       	adc	r23, r29
    1c80:	8c 2d       	mov	r24, r12
    1c82:	9d 2d       	mov	r25, r13
    1c84:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
    1c88:	f8 01       	movw	r30, r16
    1c8a:	46 81       	ldd	r20, Z+6	; 0x06
    1c8c:	57 81       	ldd	r21, Z+7	; 0x07
    1c8e:	44 0f       	add	r20, r20
    1c90:	55 1f       	adc	r21, r21
    1c92:	4f 5f       	subi	r20, 0xFF	; 255
    1c94:	5f 4f       	sbci	r21, 0xFF	; 255
    1c96:	64 81       	ldd	r22, Z+4	; 0x04
    1c98:	75 81       	ldd	r23, Z+5	; 0x05
    1c9a:	66 0f       	add	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	6c 0f       	add	r22, r28
    1ca0:	7d 1f       	adc	r23, r29
    1ca2:	8c 2d       	mov	r24, r12
    1ca4:	9d 2d       	mov	r25, r13
    1ca6:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
    1caa:	21 96       	adiw	r28, 0x01	; 1
    1cac:	c2 30       	cpi	r28, 0x02	; 2
    1cae:	d1 05       	cpc	r29, r1
    1cb0:	e1 f6       	brne	.-72     	; 0x1c6a <drawBoard+0x2a>
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	00 81       	ld	r16, Z
    1cb6:	11 81       	ldd	r17, Z+1	; 0x01
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
    1cb8:	01 15       	cp	r16, r1
    1cba:	11 05       	cpc	r17, r1
    1cbc:	61 f1       	breq	.+88     	; 0x1d16 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1cbe:	cc 2d       	mov	r28, r12
    1cc0:	dd 2d       	mov	r29, r13
    1cc2:	d3 cf       	rjmp	.-90     	; 0x1c6a <drawBoard+0x2a>
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
    1cc4:	f7 01       	movw	r30, r14
    1cc6:	42 81       	ldd	r20, Z+2	; 0x02
    1cc8:	53 81       	ldd	r21, Z+3	; 0x03
    1cca:	44 0f       	add	r20, r20
    1ccc:	55 1f       	adc	r21, r21
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	66 0f       	add	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	6c 0f       	add	r22, r28
    1cd8:	7d 1f       	adc	r23, r29
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
    1ce2:	f7 01       	movw	r30, r14
    1ce4:	42 81       	ldd	r20, Z+2	; 0x02
    1ce6:	53 81       	ldd	r21, Z+3	; 0x03
    1ce8:	44 0f       	add	r20, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	4f 5f       	subi	r20, 0xFF	; 255
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf0:	60 81       	ld	r22, Z
    1cf2:	71 81       	ldd	r23, Z+1	; 0x01
    1cf4:	66 0f       	add	r22, r22
    1cf6:	77 1f       	adc	r23, r23
    1cf8:	6c 0f       	add	r22, r28
    1cfa:	7d 1f       	adc	r23, r29
    1cfc:	80 e0       	ldi	r24, 0x00	; 0
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <oled_sram_write_bit>
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
    1d04:	21 96       	adiw	r28, 0x01	; 1
    1d06:	c2 30       	cpi	r28, 0x02	; 2
    1d08:	d1 05       	cpc	r29, r1
    1d0a:	e1 f6       	brne	.-72     	; 0x1cc4 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <drawBoard+0xdc>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1d16:	c0 e0       	ldi	r28, 0x00	; 0
    1d18:	d0 e0       	ldi	r29, 0x00	; 0
    1d1a:	d4 cf       	rjmp	.-88     	; 0x1cc4 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
}
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
    1d2c:	08 95       	ret

00001d2e <playSnake>:

void playSnake(){
    1d2e:	af 92       	push	r10
    1d30:	bf 92       	push	r11
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	00 d0       	rcall	.+0      	; 0x1d44 <playSnake+0x16>
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <playSnake+0x18>
    1d46:	cd b7       	in	r28, 0x3d	; 61
    1d48:	de b7       	in	r29, 0x3e	; 62
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    1d4a:	88 e0       	ldi	r24, 0x08	; 8
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    1d52:	7c 01       	movw	r14, r24
	first->x = 32;
    1d54:	80 e2       	ldi	r24, 0x20	; 32
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	d7 01       	movw	r26, r14
    1d5a:	15 96       	adiw	r26, 0x05	; 5
    1d5c:	9c 93       	st	X, r25
    1d5e:	8e 93       	st	-X, r24
    1d60:	14 97       	sbiw	r26, 0x04	; 4
	first->y = 16;
    1d62:	80 e1       	ldi	r24, 0x10	; 16
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	17 96       	adiw	r26, 0x07	; 7
    1d68:	9c 93       	st	X, r25
    1d6a:	8e 93       	st	-X, r24
    1d6c:	16 97       	sbiw	r26, 0x06	; 6
	segment *last = first;
	first->next = 0;
    1d6e:	11 96       	adiw	r26, 0x01	; 1
    1d70:	1c 92       	st	X, r1
    1d72:	1e 92       	st	-X, r1
	first->prev = 0;
    1d74:	13 96       	adiw	r26, 0x03	; 3
    1d76:	1c 92       	st	X, r1
    1d78:	1e 92       	st	-X, r1
    1d7a:	12 97       	sbiw	r26, 0x02	; 2
	oled_sram_flush(0);
}

void playSnake(){
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    1d7c:	67 01       	movw	r12, r14
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
    1d7e:	68 94       	set
    1d80:	aa 24       	eor	r10, r10
    1d82:	a2 f8       	bld	r10, 2
    1d84:	b1 2c       	mov	r11, r1
	for(int i = 0; i < 4; i++){
		segment *temp = (segment*)malloc(sizeof(segment));
    1d86:	88 e0       	ldi	r24, 0x08	; 8
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    1d8e:	8c 01       	movw	r16, r24
		temp->x = first->x + 1;
    1d90:	f6 01       	movw	r30, r12
    1d92:	84 81       	ldd	r24, Z+4	; 0x04
    1d94:	95 81       	ldd	r25, Z+5	; 0x05
    1d96:	01 96       	adiw	r24, 0x01	; 1
    1d98:	d8 01       	movw	r26, r16
    1d9a:	15 96       	adiw	r26, 0x05	; 5
    1d9c:	9c 93       	st	X, r25
    1d9e:	8e 93       	st	-X, r24
    1da0:	14 97       	sbiw	r26, 0x04	; 4
		temp->y = first->y;
    1da2:	86 81       	ldd	r24, Z+6	; 0x06
    1da4:	97 81       	ldd	r25, Z+7	; 0x07
    1da6:	17 96       	adiw	r26, 0x07	; 7
    1da8:	9c 93       	st	X, r25
    1daa:	8e 93       	st	-X, r24
    1dac:	16 97       	sbiw	r26, 0x06	; 6
		temp->next = first;
    1dae:	11 96       	adiw	r26, 0x01	; 1
    1db0:	dc 92       	st	X, r13
    1db2:	ce 92       	st	-X, r12
		temp->prev = 0;
    1db4:	13 96       	adiw	r26, 0x03	; 3
    1db6:	1c 92       	st	X, r1
    1db8:	1e 92       	st	-X, r1
    1dba:	12 97       	sbiw	r26, 0x02	; 2
		first->prev = temp;
    1dbc:	13 83       	std	Z+3, r17	; 0x03
    1dbe:	02 83       	std	Z+2, r16	; 0x02
    1dc0:	b1 e0       	ldi	r27, 0x01	; 1
    1dc2:	ab 1a       	sub	r10, r27
    1dc4:	b1 08       	sbc	r11, r1
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
	for(int i = 0; i < 4; i++){
    1dc6:	a1 14       	cp	r10, r1
    1dc8:	b1 04       	cpc	r11, r1
    1dca:	11 f0       	breq	.+4      	; 0x1dd0 <playSnake+0xa2>
		segment *temp = (segment*)malloc(sizeof(segment));
    1dcc:	68 01       	movw	r12, r16
    1dce:	db cf       	rjmp	.-74     	; 0x1d86 <playSnake+0x58>
	}


	//initalize food
	int food[2];
	placeFood(food, first);
    1dd0:	b8 01       	movw	r22, r16
    1dd2:	ce 01       	movw	r24, r28
    1dd4:	01 96       	adiw	r24, 0x01	; 1
    1dd6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <placeFood>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	//initalize food
	int food[2];
	placeFood(food, first);

	//initialize direction of snake
	direction S = RIGHT;
    1de2:	dd 24       	eor	r13, r13
    1de4:	d3 94       	inc	r13
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    1de6:	97 c0       	rjmp	.+302    	; 0x1f16 <playSnake+0x1e8>
		Joystick j = get_joystick_position();
    1de8:	0e 94 81 07 	call	0xf02	; 0xf02 <get_joystick_position>
    1dec:	c8 2e       	mov	r12, r24
		direction D = j.D;
		//S = (D == NEUTRAL) ? S : D;
		if (D == NEUTRAL){ // New direction neutral
    1dee:	e4 e0       	ldi	r30, 0x04	; 4
    1df0:	8e 17       	cp	r24, r30
    1df2:	f1 f0       	breq	.+60     	; 0x1e30 <playSnake+0x102>
			//Do nothing
		}
		else if((D == DOWN && S == UP) || (D == UP && S == DOWN) || (D == LEFT && S == RIGHT) || (D == RIGHT && S == LEFT)){ //New direction in opposite direction(NOT ALLOWED)
    1df4:	f3 e0       	ldi	r31, 0x03	; 3
    1df6:	8f 13       	cpse	r24, r31
    1df8:	04 c0       	rjmp	.+8      	; 0x1e02 <playSnake+0xd4>
    1dfa:	22 e0       	ldi	r18, 0x02	; 2
    1dfc:	d2 12       	cpse	r13, r18
    1dfe:	10 c0       	rjmp	.+32     	; 0x1e20 <playSnake+0xf2>
    1e00:	b9 c0       	rjmp	.+370    	; 0x1f74 <playSnake+0x246>
    1e02:	82 e0       	ldi	r24, 0x02	; 2
    1e04:	c8 12       	cpse	r12, r24
    1e06:	06 c0       	rjmp	.+12     	; 0x1e14 <playSnake+0xe6>
    1e08:	93 e0       	ldi	r25, 0x03	; 3
    1e0a:	d9 16       	cp	r13, r25
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <playSnake+0xe2>
    1e0e:	cd c0       	rjmp	.+410    	; 0x1faa <playSnake+0x27c>
			//Do nothing
		}   
		else{
			S = D;
    1e10:	dc 2c       	mov	r13, r12
    1e12:	0e c0       	rjmp	.+28     	; 0x1e30 <playSnake+0x102>
		direction D = j.D;
		//S = (D == NEUTRAL) ? S : D;
		if (D == NEUTRAL){ // New direction neutral
			//Do nothing
		}
		else if((D == DOWN && S == UP) || (D == UP && S == DOWN) || (D == LEFT && S == RIGHT) || (D == RIGHT && S == LEFT)){ //New direction in opposite direction(NOT ALLOWED)
    1e14:	c1 10       	cpse	r12, r1
    1e16:	04 c0       	rjmp	.+8      	; 0x1e20 <playSnake+0xf2>
    1e18:	a1 e0       	ldi	r26, 0x01	; 1
    1e1a:	da 12       	cpse	r13, r26
    1e1c:	19 c1       	rjmp	.+562    	; 0x2050 <playSnake+0x322>
    1e1e:	fc c0       	rjmp	.+504    	; 0x2018 <playSnake+0x2ea>
    1e20:	b1 e0       	ldi	r27, 0x01	; 1
    1e22:	cb 12       	cpse	r12, r27
    1e24:	04 c0       	rjmp	.+8      	; 0x1e2e <playSnake+0x100>
    1e26:	dd 20       	and	r13, r13
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <playSnake+0xfe>
    1e2a:	da c0       	rjmp	.+436    	; 0x1fe0 <playSnake+0x2b2>
    1e2c:	2c c1       	rjmp	.+600    	; 0x2086 <playSnake+0x358>
			//Do nothing
		}   
		else{
			S = D;
    1e2e:	dc 2c       	mov	r13, r12
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    1e30:	88 e0       	ldi	r24, 0x08	; 8
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    1e38:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    1e3a:	d8 01       	movw	r26, r16
    1e3c:	14 96       	adiw	r26, 0x04	; 4
    1e3e:	8d 91       	ld	r24, X+
    1e40:	9c 91       	ld	r25, X
    1e42:	15 97       	sbiw	r26, 0x05	; 5
    1e44:	95 83       	std	Z+5, r25	; 0x05
    1e46:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    1e48:	16 96       	adiw	r26, 0x06	; 6
    1e4a:	8d 91       	ld	r24, X+
    1e4c:	9c 91       	ld	r25, X
    1e4e:	17 97       	sbiw	r26, 0x07	; 7
    1e50:	97 83       	std	Z+7, r25	; 0x07
    1e52:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    1e54:	11 83       	std	Z+1, r17	; 0x01
    1e56:	00 83       	st	Z, r16
		temp->prev = 0;
    1e58:	13 82       	std	Z+3, r1	; 0x03
    1e5a:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1e5c:	13 96       	adiw	r26, 0x03	; 3
    1e5e:	fc 93       	st	X, r31
    1e60:	ee 93       	st	-X, r30
    1e62:	12 97       	sbiw	r26, 0x02	; 2

		//Find direction of snake movement
		switch (S){
    1e64:	b1 e0       	ldi	r27, 0x01	; 1
    1e66:	db 16       	cp	r13, r27
    1e68:	09 f1       	breq	.+66     	; 0x1eac <playSnake+0x17e>
    1e6a:	db 16       	cp	r13, r27
    1e6c:	a8 f0       	brcs	.+42     	; 0x1e98 <playSnake+0x16a>
    1e6e:	22 e0       	ldi	r18, 0x02	; 2
    1e70:	d2 16       	cp	r13, r18
    1e72:	21 f0       	breq	.+8      	; 0x1e7c <playSnake+0x14e>
    1e74:	83 e0       	ldi	r24, 0x03	; 3
    1e76:	d8 12       	cpse	r13, r24
    1e78:	25 c0       	rjmp	.+74     	; 0x1ec4 <playSnake+0x196>
    1e7a:	07 c0       	rjmp	.+14     	; 0x1e8a <playSnake+0x15c>
			case UP:
			temp->y--;
    1e7c:	86 81       	ldd	r24, Z+6	; 0x06
    1e7e:	97 81       	ldd	r25, Z+7	; 0x07
    1e80:	01 97       	sbiw	r24, 0x01	; 1
    1e82:	97 83       	std	Z+7, r25	; 0x07
    1e84:	86 83       	std	Z+6, r24	; 0x06
			break;
    1e86:	8f 01       	movw	r16, r30
    1e88:	1e c0       	rjmp	.+60     	; 0x1ec6 <playSnake+0x198>
			case DOWN:
			temp->y++;
    1e8a:	86 81       	ldd	r24, Z+6	; 0x06
    1e8c:	97 81       	ldd	r25, Z+7	; 0x07
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	97 83       	std	Z+7, r25	; 0x07
    1e92:	86 83       	std	Z+6, r24	; 0x06
			break;
    1e94:	8f 01       	movw	r16, r30
    1e96:	17 c0       	rjmp	.+46     	; 0x1ec6 <playSnake+0x198>
		temp->next = first;
		temp->prev = 0;
		first->prev = temp;

		//Find direction of snake movement
		switch (S){
    1e98:	cd 2c       	mov	r12, r13
			break;
			case DOWN:
			temp->y++;
			break;
			case LEFT:
			temp->x--;
    1e9a:	24 81       	ldd	r18, Z+4	; 0x04
    1e9c:	35 81       	ldd	r19, Z+5	; 0x05
    1e9e:	21 50       	subi	r18, 0x01	; 1
    1ea0:	31 09       	sbc	r19, r1
    1ea2:	35 83       	std	Z+5, r19	; 0x05
    1ea4:	24 83       	std	Z+4, r18	; 0x04
			break;
    1ea6:	8f 01       	movw	r16, r30
    1ea8:	dc 2c       	mov	r13, r12
    1eaa:	0d c0       	rjmp	.+26     	; 0x1ec6 <playSnake+0x198>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    1eac:	8f 01       	movw	r16, r30
			break;
			case LEFT:
			temp->x--;
			break;
			case RIGHT:
			temp->x++;
    1eae:	d8 01       	movw	r26, r16
    1eb0:	14 96       	adiw	r26, 0x04	; 4
    1eb2:	8d 91       	ld	r24, X+
    1eb4:	9c 91       	ld	r25, X
    1eb6:	15 97       	sbiw	r26, 0x05	; 5
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	15 96       	adiw	r26, 0x05	; 5
    1ebc:	9c 93       	st	X, r25
    1ebe:	8e 93       	st	-X, r24
    1ec0:	14 97       	sbiw	r26, 0x04	; 4
			break;
    1ec2:	01 c0       	rjmp	.+2      	; 0x1ec6 <playSnake+0x198>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    1ec4:	8f 01       	movw	r16, r30
			break;
		}

		first = temp;
		
		if(detectCollision(first, food[0], food[1])){//hit food?
    1ec6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ec8:	5c 81       	ldd	r21, Y+4	; 0x04
    1eca:	69 81       	ldd	r22, Y+1	; 0x01
    1ecc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ece:	c8 01       	movw	r24, r16
    1ed0:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <detectCollision>
    1ed4:	89 2b       	or	r24, r25
    1ed6:	31 f0       	breq	.+12     	; 0x1ee4 <playSnake+0x1b6>
			placeFood(food, first);
    1ed8:	b8 01       	movw	r22, r16
    1eda:	ce 01       	movw	r24, r28
    1edc:	01 96       	adiw	r24, 0x01	; 1
    1ede:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <placeFood>
    1ee2:	0a c0       	rjmp	.+20     	; 0x1ef8 <playSnake+0x1ca>
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    1ee4:	f7 01       	movw	r30, r14
    1ee6:	a2 80       	ldd	r10, Z+2	; 0x02
    1ee8:	b3 80       	ldd	r11, Z+3	; 0x03
			last->next = 0;
    1eea:	d5 01       	movw	r26, r10
    1eec:	1d 92       	st	X+, r1
    1eee:	1c 92       	st	X, r1
			free(temp);
    1ef0:	c7 01       	movw	r24, r14
    1ef2:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <free>
			placeFood(food, first);
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    1ef6:	75 01       	movw	r14, r10
			last->next = 0;
			free(temp);
		}
		drawBoard(first, food);
    1ef8:	be 01       	movw	r22, r28
    1efa:	6f 5f       	subi	r22, 0xFF	; 255
    1efc:	7f 4f       	sbci	r23, 0xFF	; 255
    1efe:	c8 01       	movw	r24, r16
    1f00:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <drawBoard>
    1f04:	bf ef       	ldi	r27, 0xFF	; 255
    1f06:	ef e7       	ldi	r30, 0x7F	; 127
    1f08:	f1 e0       	ldi	r31, 0x01	; 1
    1f0a:	b1 50       	subi	r27, 0x01	; 1
    1f0c:	e0 40       	sbci	r30, 0x00	; 0
    1f0e:	f0 40       	sbci	r31, 0x00	; 0
    1f10:	e1 f7       	brne	.-8      	; 0x1f0a <playSnake+0x1dc>
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <playSnake+0x1e6>
    1f14:	00 c0       	rjmp	.+0      	; 0x1f16 <playSnake+0x1e8>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    1f16:	d8 01       	movw	r26, r16
    1f18:	16 96       	adiw	r26, 0x06	; 6
    1f1a:	4d 91       	ld	r20, X+
    1f1c:	5c 91       	ld	r21, X
    1f1e:	17 97       	sbiw	r26, 0x07	; 7
    1f20:	14 96       	adiw	r26, 0x04	; 4
    1f22:	6d 91       	ld	r22, X+
    1f24:	7c 91       	ld	r23, X
    1f26:	15 97       	sbiw	r26, 0x05	; 5
    1f28:	8d 91       	ld	r24, X+
    1f2a:	9c 91       	ld	r25, X
    1f2c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <detectCollision>
    1f30:	89 2b       	or	r24, r25
    1f32:	09 f4       	brne	.+2      	; 0x1f36 <playSnake+0x208>
    1f34:	59 cf       	rjmp	.-334    	; 0x1de8 <playSnake+0xba>
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    1f36:	0e 15       	cp	r16, r14
    1f38:	1f 05       	cpc	r17, r15
    1f3a:	81 f0       	breq	.+32     	; 0x1f5c <playSnake+0x22e>
    1f3c:	a1 2c       	mov	r10, r1
    1f3e:	b1 2c       	mov	r11, r1
		segment* temp = first;
		first = first->next;
    1f40:	f8 01       	movw	r30, r16
    1f42:	c0 80       	ld	r12, Z
    1f44:	d1 80       	ldd	r13, Z+1	; 0x01
		free(temp);
    1f46:	c8 01       	movw	r24, r16
    1f48:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <free>
		score++;
    1f4c:	ff ef       	ldi	r31, 0xFF	; 255
    1f4e:	af 1a       	sub	r10, r31
    1f50:	bf 0a       	sbc	r11, r31
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    1f52:	ec 14       	cp	r14, r12
    1f54:	fd 04       	cpc	r15, r13
    1f56:	29 f0       	breq	.+10     	; 0x1f62 <playSnake+0x234>
		segment* temp = first;
		first = first->next;
    1f58:	86 01       	movw	r16, r12
    1f5a:	f2 cf       	rjmp	.-28     	; 0x1f40 <playSnake+0x212>
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    1f5c:	68 01       	movw	r12, r16
    1f5e:	a1 2c       	mov	r10, r1
    1f60:	b1 2c       	mov	r11, r1
		segment* temp = first;
		first = first->next;
		free(temp);
		score++;
	}
	free(first);
    1f62:	c6 01       	movw	r24, r12
    1f64:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <free>
	
	highscore_prompt(SNAKE, score-4);
    1f68:	6c ef       	ldi	r22, 0xFC	; 252
    1f6a:	6a 0d       	add	r22, r10
    1f6c:	80 e4       	ldi	r24, 0x40	; 64
    1f6e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <highscore_prompt>
    1f72:	a6 c0       	rjmp	.+332    	; 0x20c0 <playSnake+0x392>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    1f74:	88 e0       	ldi	r24, 0x08	; 8
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    1f7c:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    1f7e:	d8 01       	movw	r26, r16
    1f80:	14 96       	adiw	r26, 0x04	; 4
    1f82:	8d 91       	ld	r24, X+
    1f84:	9c 91       	ld	r25, X
    1f86:	15 97       	sbiw	r26, 0x05	; 5
    1f88:	95 83       	std	Z+5, r25	; 0x05
    1f8a:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    1f8c:	16 96       	adiw	r26, 0x06	; 6
    1f8e:	8d 91       	ld	r24, X+
    1f90:	9c 91       	ld	r25, X
    1f92:	17 97       	sbiw	r26, 0x07	; 7
    1f94:	97 83       	std	Z+7, r25	; 0x07
    1f96:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    1f98:	11 83       	std	Z+1, r17	; 0x01
    1f9a:	00 83       	st	Z, r16
		temp->prev = 0;
    1f9c:	13 82       	std	Z+3, r1	; 0x03
    1f9e:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1fa0:	13 96       	adiw	r26, 0x03	; 3
    1fa2:	fc 93       	st	X, r31
    1fa4:	ee 93       	st	-X, r30
    1fa6:	12 97       	sbiw	r26, 0x02	; 2
    1fa8:	69 cf       	rjmp	.-302    	; 0x1e7c <playSnake+0x14e>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    1faa:	88 e0       	ldi	r24, 0x08	; 8
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    1fb2:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    1fb4:	d8 01       	movw	r26, r16
    1fb6:	14 96       	adiw	r26, 0x04	; 4
    1fb8:	8d 91       	ld	r24, X+
    1fba:	9c 91       	ld	r25, X
    1fbc:	15 97       	sbiw	r26, 0x05	; 5
    1fbe:	95 83       	std	Z+5, r25	; 0x05
    1fc0:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    1fc2:	16 96       	adiw	r26, 0x06	; 6
    1fc4:	8d 91       	ld	r24, X+
    1fc6:	9c 91       	ld	r25, X
    1fc8:	17 97       	sbiw	r26, 0x07	; 7
    1fca:	97 83       	std	Z+7, r25	; 0x07
    1fcc:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    1fce:	11 83       	std	Z+1, r17	; 0x01
    1fd0:	00 83       	st	Z, r16
		temp->prev = 0;
    1fd2:	13 82       	std	Z+3, r1	; 0x03
    1fd4:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1fd6:	13 96       	adiw	r26, 0x03	; 3
    1fd8:	fc 93       	st	X, r31
    1fda:	ee 93       	st	-X, r30
    1fdc:	12 97       	sbiw	r26, 0x02	; 2
    1fde:	55 cf       	rjmp	.-342    	; 0x1e8a <playSnake+0x15c>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    1fe0:	88 e0       	ldi	r24, 0x08	; 8
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    1fe8:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    1fea:	d8 01       	movw	r26, r16
    1fec:	14 96       	adiw	r26, 0x04	; 4
    1fee:	8d 91       	ld	r24, X+
    1ff0:	9c 91       	ld	r25, X
    1ff2:	15 97       	sbiw	r26, 0x05	; 5
    1ff4:	95 83       	std	Z+5, r25	; 0x05
    1ff6:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    1ff8:	16 96       	adiw	r26, 0x06	; 6
    1ffa:	8d 91       	ld	r24, X+
    1ffc:	9c 91       	ld	r25, X
    1ffe:	17 97       	sbiw	r26, 0x07	; 7
    2000:	97 83       	std	Z+7, r25	; 0x07
    2002:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    2004:	11 83       	std	Z+1, r17	; 0x01
    2006:	00 83       	st	Z, r16
		temp->prev = 0;
    2008:	13 82       	std	Z+3, r1	; 0x03
    200a:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    200c:	13 96       	adiw	r26, 0x03	; 3
    200e:	fc 93       	st	X, r31
    2010:	ee 93       	st	-X, r30
    2012:	12 97       	sbiw	r26, 0x02	; 2
    2014:	cd 2c       	mov	r12, r13
    2016:	41 cf       	rjmp	.-382    	; 0x1e9a <playSnake+0x16c>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    2018:	88 e0       	ldi	r24, 0x08	; 8
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    2020:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    2022:	d8 01       	movw	r26, r16
    2024:	14 96       	adiw	r26, 0x04	; 4
    2026:	8d 91       	ld	r24, X+
    2028:	9c 91       	ld	r25, X
    202a:	15 97       	sbiw	r26, 0x05	; 5
    202c:	95 83       	std	Z+5, r25	; 0x05
    202e:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    2030:	16 96       	adiw	r26, 0x06	; 6
    2032:	8d 91       	ld	r24, X+
    2034:	9c 91       	ld	r25, X
    2036:	17 97       	sbiw	r26, 0x07	; 7
    2038:	97 83       	std	Z+7, r25	; 0x07
    203a:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    203c:	11 83       	std	Z+1, r17	; 0x01
    203e:	00 83       	st	Z, r16
		temp->prev = 0;
    2040:	13 82       	std	Z+3, r1	; 0x03
    2042:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    2044:	13 96       	adiw	r26, 0x03	; 3
    2046:	fc 93       	st	X, r31
    2048:	ee 93       	st	-X, r30
    204a:	12 97       	sbiw	r26, 0x02	; 2
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    204c:	8f 01       	movw	r16, r30
    204e:	2f cf       	rjmp	.-418    	; 0x1eae <playSnake+0x180>
    2050:	88 e0       	ldi	r24, 0x08	; 8
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    2058:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    205a:	d8 01       	movw	r26, r16
    205c:	14 96       	adiw	r26, 0x04	; 4
    205e:	2d 91       	ld	r18, X+
    2060:	3c 91       	ld	r19, X
    2062:	15 97       	sbiw	r26, 0x05	; 5
    2064:	35 83       	std	Z+5, r19	; 0x05
    2066:	24 83       	std	Z+4, r18	; 0x04
		temp->y = first->y;
    2068:	16 96       	adiw	r26, 0x06	; 6
    206a:	2d 91       	ld	r18, X+
    206c:	3c 91       	ld	r19, X
    206e:	17 97       	sbiw	r26, 0x07	; 7
    2070:	37 83       	std	Z+7, r19	; 0x07
    2072:	26 83       	std	Z+6, r18	; 0x06
		temp->next = first;
    2074:	11 83       	std	Z+1, r17	; 0x01
    2076:	00 83       	st	Z, r16
		temp->prev = 0;
    2078:	13 82       	std	Z+3, r1	; 0x03
    207a:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    207c:	13 96       	adiw	r26, 0x03	; 3
    207e:	9c 93       	st	X, r25
    2080:	8e 93       	st	-X, r24
    2082:	12 97       	sbiw	r26, 0x02	; 2
    2084:	0a cf       	rjmp	.-492    	; 0x1e9a <playSnake+0x16c>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    2086:	88 e0       	ldi	r24, 0x08	; 8
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    208e:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    2090:	d8 01       	movw	r26, r16
    2092:	14 96       	adiw	r26, 0x04	; 4
    2094:	8d 91       	ld	r24, X+
    2096:	9c 91       	ld	r25, X
    2098:	15 97       	sbiw	r26, 0x05	; 5
    209a:	95 83       	std	Z+5, r25	; 0x05
    209c:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    209e:	16 96       	adiw	r26, 0x06	; 6
    20a0:	8d 91       	ld	r24, X+
    20a2:	9c 91       	ld	r25, X
    20a4:	17 97       	sbiw	r26, 0x07	; 7
    20a6:	97 83       	std	Z+7, r25	; 0x07
    20a8:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    20aa:	11 83       	std	Z+1, r17	; 0x01
    20ac:	00 83       	st	Z, r16
		temp->prev = 0;
    20ae:	13 82       	std	Z+3, r1	; 0x03
    20b0:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    20b2:	13 96       	adiw	r26, 0x03	; 3
    20b4:	fc 93       	st	X, r31
    20b6:	ee 93       	st	-X, r30
    20b8:	12 97       	sbiw	r26, 0x02	; 2
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    20ba:	8f 01       	movw	r16, r30
		}
		else if((D == DOWN && S == UP) || (D == UP && S == DOWN) || (D == LEFT && S == RIGHT) || (D == RIGHT && S == LEFT)){ //New direction in opposite direction(NOT ALLOWED)
			//Do nothing
		}   
		else{
			S = D;
    20bc:	dc 2c       	mov	r13, r12
    20be:	f7 ce       	rjmp	.-530    	; 0x1eae <playSnake+0x180>
		score++;
	}
	free(first);
	
	highscore_prompt(SNAKE, score-4);
    20c0:	0f 90       	pop	r0
    20c2:	0f 90       	pop	r0
    20c4:	0f 90       	pop	r0
    20c6:	0f 90       	pop	r0
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	ff 90       	pop	r15
    20d2:	ef 90       	pop	r14
    20d4:	df 90       	pop	r13
    20d6:	cf 90       	pop	r12
    20d8:	bf 90       	pop	r11
    20da:	af 90       	pop	r10
    20dc:	08 95       	ret

000020de <make_screen>:
	
	
	
}

void make_screen(menu* m){
    20de:	2f 92       	push	r2
    20e0:	3f 92       	push	r3
    20e2:	4f 92       	push	r4
    20e4:	5f 92       	push	r5
    20e6:	6f 92       	push	r6
    20e8:	7f 92       	push	r7
    20ea:	8f 92       	push	r8
    20ec:	9f 92       	push	r9
    20ee:	af 92       	push	r10
    20f0:	bf 92       	push	r11
    20f2:	cf 92       	push	r12
    20f4:	df 92       	push	r13
    20f6:	ef 92       	push	r14
    20f8:	ff 92       	push	r15
    20fa:	0f 93       	push	r16
    20fc:	1f 93       	push	r17
    20fe:	cf 93       	push	r28
    2100:	df 93       	push	r29
    2102:	00 d0       	rcall	.+0      	; 0x2104 <make_screen+0x26>
    2104:	1f 92       	push	r1
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
    210a:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
    2114:	d7 01       	movw	r26, r14
    2116:	6d 91       	ld	r22, X+
    2118:	7c 91       	ld	r23, X
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	0e 94 bc 09 	call	0x1378	; 0x1378 <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
    2126:	f7 01       	movw	r30, r14
    2128:	84 89       	ldd	r24, Z+20	; 0x14
    212a:	95 89       	ldd	r25, Z+21	; 0x15
    212c:	18 16       	cp	r1, r24
    212e:	19 06       	cpc	r1, r25
    2130:	0c f0       	brlt	.+2      	; 0x2134 <make_screen+0x56>
    2132:	6d c0       	rjmp	.+218    	; 0x220e <make_screen+0x130>
    2134:	c7 01       	movw	r24, r14
    2136:	04 96       	adiw	r24, 0x04	; 4
    2138:	9b 83       	std	Y+3, r25	; 0x03
    213a:	8a 83       	std	Y+2, r24	; 0x02
    213c:	cc 24       	eor	r12, r12
    213e:	c3 94       	inc	r12
    2140:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    2142:	68 94       	set
    2144:	22 24       	eor	r2, r2
    2146:	23 f8       	bld	r2, 3
    2148:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
    214a:	aa 81       	ldd	r26, Y+2	; 0x02
    214c:	bb 81       	ldd	r27, Y+3	; 0x03
    214e:	6d 90       	ld	r6, X+
    2150:	7d 90       	ld	r7, X+
    2152:	bb 83       	std	Y+3, r27	; 0x03
    2154:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
    2156:	d3 01       	movw	r26, r6
    2158:	ed 91       	ld	r30, X+
    215a:	fc 91       	ld	r31, X
    215c:	80 81       	ld	r24, Z
    215e:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
    2160:	f7 01       	movw	r30, r14
    2162:	40 ad       	ldd	r20, Z+56	; 0x38
    2164:	51 ad       	ldd	r21, Z+57	; 0x39
    2166:	c6 01       	movw	r24, r12
    2168:	01 97       	sbiw	r24, 0x01	; 1
    216a:	48 17       	cp	r20, r24
    216c:	59 07       	cpc	r21, r25
    216e:	59 f4       	brne	.+22     	; 0x2186 <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
    2170:	4f 5f       	subi	r20, 0xFF	; 255
    2172:	5f 4f       	sbci	r21, 0xFF	; 255
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	6e ee       	ldi	r22, 0xEE	; 238
    217a:	71 e0       	ldi	r23, 0x01	; 1
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
    2184:	09 c0       	rjmp	.+18     	; 0x2198 <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	a6 01       	movw	r20, r12
    218c:	6f e3       	ldi	r22, 0x3F	; 63
    218e:	71 e0       	ldi	r23, 0x01	; 1
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
		}
		while(c != '\0'){
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	88 23       	and	r24, r24
    219c:	59 f1       	breq	.+86     	; 0x21f4 <make_screen+0x116>
    219e:	68 94       	set
    21a0:	aa 24       	eor	r10, r10
    21a2:	a3 f8       	bld	r10, 3
    21a4:	b1 2c       	mov	r11, r1
    21a6:	88 24       	eor	r8, r8
    21a8:	83 94       	inc	r8
    21aa:	91 2c       	mov	r9, r1
    21ac:	1e c0       	rjmp	.+60     	; 0x21ea <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    21ae:	24 2d       	mov	r18, r4
    21b0:	35 2d       	mov	r19, r5
    21b2:	a6 01       	movw	r20, r12
    21b4:	be 01       	movw	r22, r28
    21b6:	6f 5f       	subi	r22, 0xFF	; 255
    21b8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
    21c2:	01 50       	subi	r16, 0x01	; 1
    21c4:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    21c6:	01 15       	cp	r16, r1
    21c8:	11 05       	cpc	r17, r1
    21ca:	89 f7       	brne	.-30     	; 0x21ae <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
    21cc:	d3 01       	movw	r26, r6
    21ce:	ed 91       	ld	r30, X+
    21d0:	fc 91       	ld	r31, X
    21d2:	e8 0d       	add	r30, r8
    21d4:	f9 1d       	adc	r31, r9
    21d6:	80 81       	ld	r24, Z
    21d8:	89 83       	std	Y+1, r24	; 0x01
    21da:	bf ef       	ldi	r27, 0xFF	; 255
    21dc:	8b 1a       	sub	r8, r27
    21de:	9b 0a       	sbc	r9, r27
    21e0:	e8 e0       	ldi	r30, 0x08	; 8
    21e2:	ae 0e       	add	r10, r30
    21e4:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
    21e6:	88 23       	and	r24, r24
    21e8:	29 f0       	breq	.+10     	; 0x21f4 <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    21ea:	4a 2c       	mov	r4, r10
    21ec:	5b 2c       	mov	r5, r11
    21ee:	02 2d       	mov	r16, r2
    21f0:	13 2d       	mov	r17, r3
    21f2:	dd cf       	rjmp	.-70     	; 0x21ae <make_screen+0xd0>
void make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
    21f4:	c6 01       	movw	r24, r12
    21f6:	ff ef       	ldi	r31, 0xFF	; 255
    21f8:	cf 1a       	sub	r12, r31
    21fa:	df 0a       	sbc	r13, r31
    21fc:	d7 01       	movw	r26, r14
    21fe:	54 96       	adiw	r26, 0x14	; 20
    2200:	2d 91       	ld	r18, X+
    2202:	3c 91       	ld	r19, X
    2204:	55 97       	sbiw	r26, 0x15	; 21
    2206:	82 17       	cp	r24, r18
    2208:	93 07       	cpc	r25, r19
    220a:	0c f4       	brge	.+2      	; 0x220e <make_screen+0x130>
    220c:	9e cf       	rjmp	.-196    	; 0x214a <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    220e:	f7 01       	movw	r30, r14
    2210:	86 a9       	ldd	r24, Z+54	; 0x36
    2212:	97 a9       	ldd	r25, Z+55	; 0x37
    2214:	18 16       	cp	r1, r24
    2216:	19 06       	cpc	r1, r25
    2218:	0c f0       	brlt	.+2      	; 0x221c <make_screen+0x13e>
    221a:	6f c0       	rjmp	.+222    	; 0x22fa <make_screen+0x21c>
    221c:	37 01       	movw	r6, r14
    221e:	f6 e1       	ldi	r31, 0x16	; 22
    2220:	6f 0e       	add	r6, r31
    2222:	71 1c       	adc	r7, r1
    2224:	c1 2c       	mov	r12, r1
    2226:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    2228:	68 94       	set
    222a:	44 24       	eor	r4, r4
    222c:	43 f8       	bld	r4, 3
    222e:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
    2230:	d3 01       	movw	r26, r6
    2232:	8d 90       	ld	r8, X+
    2234:	9d 90       	ld	r9, X+
    2236:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
    2238:	f4 01       	movw	r30, r8
    223a:	80 81       	ld	r24, Z
    223c:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
    223e:	d7 01       	movw	r26, r14
    2240:	d8 96       	adiw	r26, 0x38	; 56
    2242:	8d 91       	ld	r24, X+
    2244:	9c 91       	ld	r25, X
    2246:	d9 97       	sbiw	r26, 0x39	; 57
    2248:	54 96       	adiw	r26, 0x14	; 20
    224a:	4d 91       	ld	r20, X+
    224c:	5c 91       	ld	r21, X
    224e:	55 97       	sbiw	r26, 0x15	; 21
    2250:	4c 0d       	add	r20, r12
    2252:	5d 1d       	adc	r21, r13
    2254:	84 17       	cp	r24, r20
    2256:	95 07       	cpc	r25, r21
    2258:	61 f4       	brne	.+24     	; 0x2272 <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
    225a:	ac 01       	movw	r20, r24
    225c:	4f 5f       	subi	r20, 0xFF	; 255
    225e:	5f 4f       	sbci	r21, 0xFF	; 255
    2260:	20 e0       	ldi	r18, 0x00	; 0
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	6e ee       	ldi	r22, 0xEE	; 238
    2266:	71 e0       	ldi	r23, 0x01	; 1
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
    2270:	0a c0       	rjmp	.+20     	; 0x2286 <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
    2272:	4f 5f       	subi	r20, 0xFF	; 255
    2274:	5f 4f       	sbci	r21, 0xFF	; 255
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	6f e3       	ldi	r22, 0x3F	; 63
    227c:	71 e0       	ldi	r23, 0x01	; 1
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
		}
		while(c != '\0'){
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	88 23       	and	r24, r24
    228a:	59 f1       	breq	.+86     	; 0x22e2 <make_screen+0x204>
    228c:	bf ef       	ldi	r27, 0xFF	; 255
    228e:	8b 1a       	sub	r8, r27
    2290:	9b 0a       	sbc	r9, r27
    2292:	68 94       	set
    2294:	aa 24       	eor	r10, r10
    2296:	a3 f8       	bld	r10, 3
    2298:	b1 2c       	mov	r11, r1
    229a:	1e c0       	rjmp	.+60     	; 0x22d8 <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    229c:	f7 01       	movw	r30, r14
    229e:	44 89       	ldd	r20, Z+20	; 0x14
    22a0:	55 89       	ldd	r21, Z+21	; 0x15
    22a2:	4c 0d       	add	r20, r12
    22a4:	5d 1d       	adc	r21, r13
    22a6:	4f 5f       	subi	r20, 0xFF	; 255
    22a8:	5f 4f       	sbci	r21, 0xFF	; 255
    22aa:	22 2d       	mov	r18, r2
    22ac:	33 2d       	mov	r19, r3
    22ae:	be 01       	movw	r22, r28
    22b0:	6f 5f       	subi	r22, 0xFF	; 255
    22b2:	7f 4f       	sbci	r23, 0xFF	; 255
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <oled_sram_write_char>
    22bc:	01 50       	subi	r16, 0x01	; 1
    22be:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    22c0:	01 15       	cp	r16, r1
    22c2:	11 05       	cpc	r17, r1
    22c4:	59 f7       	brne	.-42     	; 0x229c <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
    22c6:	d4 01       	movw	r26, r8
    22c8:	8d 91       	ld	r24, X+
    22ca:	4d 01       	movw	r8, r26
    22cc:	89 83       	std	Y+1, r24	; 0x01
    22ce:	b8 e0       	ldi	r27, 0x08	; 8
    22d0:	ab 0e       	add	r10, r27
    22d2:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
    22d4:	88 23       	and	r24, r24
    22d6:	29 f0       	breq	.+10     	; 0x22e2 <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    22d8:	2a 2c       	mov	r2, r10
    22da:	3b 2c       	mov	r3, r11
    22dc:	04 2d       	mov	r16, r4
    22de:	15 2d       	mov	r17, r5
    22e0:	dd cf       	rjmp	.-70     	; 0x229c <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    22e2:	ef ef       	ldi	r30, 0xFF	; 255
    22e4:	ce 1a       	sub	r12, r30
    22e6:	de 0a       	sbc	r13, r30
    22e8:	d7 01       	movw	r26, r14
    22ea:	d6 96       	adiw	r26, 0x36	; 54
    22ec:	8d 91       	ld	r24, X+
    22ee:	9c 91       	ld	r25, X
    22f0:	d7 97       	sbiw	r26, 0x37	; 55
    22f2:	c8 16       	cp	r12, r24
    22f4:	d9 06       	cpc	r13, r25
    22f6:	0c f4       	brge	.+2      	; 0x22fa <make_screen+0x21c>
    22f8:	9b cf       	rjmp	.-202    	; 0x2230 <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <oled_sram_flush>
} 
    2302:	0f 90       	pop	r0
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	ff 90       	pop	r15
    2312:	ef 90       	pop	r14
    2314:	df 90       	pop	r13
    2316:	cf 90       	pop	r12
    2318:	bf 90       	pop	r11
    231a:	af 90       	pop	r10
    231c:	9f 90       	pop	r9
    231e:	8f 90       	pop	r8
    2320:	7f 90       	pop	r7
    2322:	6f 90       	pop	r6
    2324:	5f 90       	pop	r5
    2326:	4f 90       	pop	r4
    2328:	3f 90       	pop	r3
    232a:	2f 90       	pop	r2
    232c:	08 95       	ret

0000232e <menuSystem>:
#include "../Game_files/pong.h"
#include "../Game_files/pingpong.h"
#include "../Game_files/highscore.h"


void menuSystem(){
    232e:	cf 93       	push	r28
    2330:	df 93       	push	r29
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
    2336:	c8 5e       	subi	r28, 0xE8	; 232
    2338:	d1 09       	sbc	r29, r1
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 3};
    2344:	6a e3       	ldi	r22, 0x3A	; 58
    2346:	8e 01       	movw	r16, r28
    2348:	0f 5f       	subi	r16, 0xFF	; 255
    234a:	1f 4f       	sbci	r17, 0xFF	; 255
    234c:	d8 01       	movw	r26, r16
    234e:	e6 2f       	mov	r30, r22
    2350:	1d 92       	st	X+, r1
    2352:	ea 95       	dec	r30
    2354:	e9 f7       	brne	.-6      	; 0x2350 <menuSystem+0x22>
    2356:	80 ef       	ldi	r24, 0xF0	; 240
    2358:	91 e0       	ldi	r25, 0x01	; 1
    235a:	9a 83       	std	Y+2, r25	; 0x02
    235c:	89 83       	std	Y+1, r24	; 0x01
    235e:	83 e0       	ldi	r24, 0x03	; 3
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9e 8b       	std	Y+22, r25	; 0x16
    2364:	8d 8b       	std	Y+21, r24	; 0x15
		
	menu highscore = {.name = "Highscore", .parent = &mainMenu, .num_functions = 3, .num_submenues = 0};
    2366:	de 01       	movw	r26, r28
    2368:	db 96       	adiw	r26, 0x3b	; 59
    236a:	fd 01       	movw	r30, r26
    236c:	26 2f       	mov	r18, r22
    236e:	11 92       	st	Z+, r1
    2370:	2a 95       	dec	r18
    2372:	e9 f7       	brne	.-6      	; 0x236e <menuSystem+0x40>
    2374:	2a ef       	ldi	r18, 0xFA	; 250
    2376:	31 e0       	ldi	r19, 0x01	; 1
    2378:	3c af       	std	Y+60, r19	; 0x3c
    237a:	2b af       	std	Y+59, r18	; 0x3b
    237c:	1e af       	std	Y+62, r17	; 0x3e
    237e:	0d af       	std	Y+61, r16	; 0x3d
    2380:	e3 96       	adiw	r28, 0x33	; 51
    2382:	9f af       	std	Y+63, r25	; 0x3f
    2384:	8e af       	std	Y+62, r24	; 0x3e
    2386:	e3 97       	sbiw	r28, 0x33	; 51
	mainMenu.submenues[1] = &highscore;
    2388:	b8 87       	std	Y+8, r27	; 0x08
    238a:	af 83       	std	Y+7, r26	; 0x07
	highscore.functions[0] = &highscore_print_snake;
    238c:	8b ed       	ldi	r24, 0xDB	; 219
    238e:	94 e0       	ldi	r25, 0x04	; 4
    2390:	a3 96       	adiw	r28, 0x23	; 35
    2392:	9f af       	std	Y+63, r25	; 0x3f
    2394:	8e af       	std	Y+62, r24	; 0x3e
    2396:	a3 97       	sbiw	r28, 0x23	; 35
	highscore.functions[1] = &highscore_print_pong;
    2398:	8f ed       	ldi	r24, 0xDF	; 223
    239a:	94 e0       	ldi	r25, 0x04	; 4
    239c:	a5 96       	adiw	r28, 0x25	; 37
    239e:	9f af       	std	Y+63, r25	; 0x3f
    23a0:	8e af       	std	Y+62, r24	; 0x3e
    23a2:	a5 97       	sbiw	r28, 0x25	; 37
	highscore.functions[2] = &highscore_print_pingpong;
    23a4:	87 ed       	ldi	r24, 0xD7	; 215
    23a6:	94 e0       	ldi	r25, 0x04	; 4
    23a8:	a7 96       	adiw	r28, 0x27	; 39
    23aa:	9f af       	std	Y+63, r25	; 0x3f
    23ac:	8e af       	std	Y+62, r24	; 0x3e
    23ae:	a7 97       	sbiw	r28, 0x27	; 39
	highscore.name_functions[0] = "Snake";
    23b0:	24 e0       	ldi	r18, 0x04	; 4
    23b2:	32 e0       	ldi	r19, 0x02	; 2
    23b4:	63 96       	adiw	r28, 0x13	; 19
    23b6:	3f af       	std	Y+63, r19	; 0x3f
    23b8:	2e af       	std	Y+62, r18	; 0x3e
    23ba:	63 97       	sbiw	r28, 0x13	; 19
	highscore.name_functions[1] = "Pong";
    23bc:	8f e0       	ldi	r24, 0x0F	; 15
    23be:	92 e0       	ldi	r25, 0x02	; 2
    23c0:	65 96       	adiw	r28, 0x15	; 21
    23c2:	9f af       	std	Y+63, r25	; 0x3f
    23c4:	8e af       	std	Y+62, r24	; 0x3e
    23c6:	65 97       	sbiw	r28, 0x15	; 21
	highscore.name_functions[2] = "Ping Pong";
    23c8:	4a e0       	ldi	r20, 0x0A	; 10
    23ca:	52 e0       	ldi	r21, 0x02	; 2
    23cc:	67 96       	adiw	r28, 0x17	; 23
    23ce:	5f af       	std	Y+63, r21	; 0x3f
    23d0:	4e af       	std	Y+62, r20	; 0x3e
    23d2:	67 97       	sbiw	r28, 0x17	; 23
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 5};
    23d4:	fe 01       	movw	r30, r28
    23d6:	eb 58       	subi	r30, 0x8B	; 139
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	df 01       	movw	r26, r30
    23dc:	46 2f       	mov	r20, r22
    23de:	1d 92       	st	X+, r1
    23e0:	4a 95       	dec	r20
    23e2:	e9 f7       	brne	.-6      	; 0x23de <menuSystem+0xb0>
    23e4:	44 e1       	ldi	r20, 0x14	; 20
    23e6:	52 e0       	ldi	r21, 0x02	; 2
    23e8:	51 83       	std	Z+1, r21	; 0x01
    23ea:	40 83       	st	Z, r20
    23ec:	13 83       	std	Z+3, r17	; 0x03
    23ee:	02 83       	std	Z+2, r16	; 0x02
    23f0:	45 e0       	ldi	r20, 0x05	; 5
    23f2:	50 e0       	ldi	r21, 0x00	; 0
    23f4:	57 ab       	std	Z+55, r21	; 0x37
    23f6:	46 ab       	std	Z+54, r20	; 0x36
	playGame.functions[0] = &play_draw;
    23f8:	47 ed       	ldi	r20, 0xD7	; 215
    23fa:	5a e0       	ldi	r21, 0x0A	; 10
    23fc:	57 a3       	std	Z+39, r21	; 0x27
    23fe:	46 a3       	std	Z+38, r20	; 0x26
	playGame.functions[1] = &playSnake;
    2400:	47 e9       	ldi	r20, 0x97	; 151
    2402:	5e e0       	ldi	r21, 0x0E	; 14
    2404:	51 a7       	std	Z+41, r21	; 0x29
    2406:	40 a7       	std	Z+40, r20	; 0x28
	playGame.functions[2] = &playPong;
    2408:	4a ea       	ldi	r20, 0xAA	; 170
    240a:	5d e0       	ldi	r21, 0x0D	; 13
    240c:	53 a7       	std	Z+43, r21	; 0x2b
    240e:	42 a7       	std	Z+42, r20	; 0x2a
	playGame.functions[3] = &play_pingpong_web;
    2410:	4d e3       	ldi	r20, 0x3D	; 61
    2412:	56 e0       	ldi	r21, 0x06	; 6
    2414:	55 a7       	std	Z+45, r21	; 0x2d
    2416:	44 a7       	std	Z+44, r20	; 0x2c
	playGame.functions[4] = &play_pingpong_joy;
    2418:	41 e4       	ldi	r20, 0x41	; 65
    241a:	56 e0       	ldi	r21, 0x06	; 6
    241c:	57 a7       	std	Z+47, r21	; 0x2f
    241e:	46 a7       	std	Z+46, r20	; 0x2e
	playGame.name_functions[0] = "Draw";
    2420:	4e e1       	ldi	r20, 0x1E	; 30
    2422:	52 e0       	ldi	r21, 0x02	; 2
    2424:	57 8b       	std	Z+23, r21	; 0x17
    2426:	46 8b       	std	Z+22, r20	; 0x16
	playGame.name_functions[1] = "Snake";
    2428:	31 8f       	std	Z+25, r19	; 0x19
    242a:	20 8f       	std	Z+24, r18	; 0x18
	playGame.name_functions[2] = "Pong";
    242c:	93 8f       	std	Z+27, r25	; 0x1b
    242e:	82 8f       	std	Z+26, r24	; 0x1a
	playGame.name_functions[3] = "Ping Pong WEB";
    2430:	83 e2       	ldi	r24, 0x23	; 35
    2432:	92 e0       	ldi	r25, 0x02	; 2
    2434:	95 8f       	std	Z+29, r25	; 0x1d
    2436:	84 8f       	std	Z+28, r24	; 0x1c
	playGame.name_functions[4] = "Ping Pong JOY";
    2438:	81 e3       	ldi	r24, 0x31	; 49
    243a:	92 e0       	ldi	r25, 0x02	; 2
    243c:	97 8f       	std	Z+31, r25	; 0x1f
    243e:	86 8f       	std	Z+30, r24	; 0x1e
	mainMenu.submenues[0] = &playGame;
    2440:	fe 83       	std	Y+6, r31	; 0x06
    2442:	ed 83       	std	Y+5, r30	; 0x05
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 2};
    2444:	fa 96       	adiw	r30, 0x3a	; 58
    2446:	df 01       	movw	r26, r30
    2448:	1d 92       	st	X+, r1
    244a:	6a 95       	dec	r22
    244c:	e9 f7       	brne	.-6      	; 0x2448 <menuSystem+0x11a>
    244e:	8f e3       	ldi	r24, 0x3F	; 63
    2450:	92 e0       	ldi	r25, 0x02	; 2
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
    2456:	13 83       	std	Z+3, r17	; 0x03
    2458:	02 83       	std	Z+2, r16	; 0x02
    245a:	82 e0       	ldi	r24, 0x02	; 2
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	97 ab       	std	Z+55, r25	; 0x37
    2460:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrate_joystick;
    2462:	89 e1       	ldi	r24, 0x19	; 25
    2464:	98 e0       	ldi	r25, 0x08	; 8
    2466:	97 a3       	std	Z+39, r25	; 0x27
    2468:	86 a3       	std	Z+38, r24	; 0x26
	settings.functions[1] = &highscore_clear_all;
    246a:	8d e4       	ldi	r24, 0x4D	; 77
    246c:	94 e0       	ldi	r25, 0x04	; 4
    246e:	91 a7       	std	Z+41, r25	; 0x29
    2470:	80 a7       	std	Z+40, r24	; 0x28
	settings.name_functions[0] = "Calibrate Joy";
    2472:	88 e4       	ldi	r24, 0x48	; 72
    2474:	92 e0       	ldi	r25, 0x02	; 2
    2476:	97 8b       	std	Z+23, r25	; 0x17
    2478:	86 8b       	std	Z+22, r24	; 0x16
	settings.name_functions[1] = "Clear highscore";
    247a:	86 e5       	ldi	r24, 0x56	; 86
    247c:	92 e0       	ldi	r25, 0x02	; 2
    247e:	91 8f       	std	Z+25, r25	; 0x19
    2480:	80 8f       	std	Z+24, r24	; 0x18
	mainMenu.submenues[2] = &settings;
    2482:	fa 87       	std	Y+10, r31	; 0x0a
    2484:	e9 87       	std	Y+9, r30	; 0x09
	

	
	direction previousDirection = NEUTRAL;
    2486:	68 94       	set
    2488:	aa 24       	eor	r10, r10
    248a:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    248c:	f8 01       	movw	r30, r16
    248e:	c6 a8       	ldd	r12, Z+54	; 0x36
    2490:	d7 a8       	ldd	r13, Z+55	; 0x37
    2492:	e4 88       	ldd	r14, Z+20	; 0x14
    2494:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = get_joystick_position();
    2496:	0e 94 81 07 	call	0xf02	; 0xf02 <get_joystick_position>
    249a:	b8 2e       	mov	r11, r24
		if (joy.D != previousDirection){
    249c:	a8 16       	cp	r10, r24
    249e:	09 f4       	brne	.+2      	; 0x24a2 <menuSystem+0x174>
    24a0:	51 c0       	rjmp	.+162    	; 0x2544 <menuSystem+0x216>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    24a2:	b6 01       	movw	r22, r12
    24a4:	6e 0d       	add	r22, r14
    24a6:	7f 1d       	adc	r23, r15
		joy = get_joystick_position();
		if (joy.D != previousDirection){
			switch(joy.D){
    24a8:	f1 e0       	ldi	r31, 0x01	; 1
    24aa:	8f 17       	cp	r24, r31
    24ac:	69 f1       	breq	.+90     	; 0x2508 <menuSystem+0x1da>
    24ae:	8f 17       	cp	r24, r31
    24b0:	08 f1       	brcs	.+66     	; 0x24f4 <menuSystem+0x1c6>
    24b2:	22 e0       	ldi	r18, 0x02	; 2
    24b4:	82 17       	cp	r24, r18
    24b6:	21 f0       	breq	.+8      	; 0x24c0 <menuSystem+0x192>
    24b8:	43 e0       	ldi	r20, 0x03	; 3
    24ba:	84 17       	cp	r24, r20
    24bc:	79 f0       	breq	.+30     	; 0x24dc <menuSystem+0x1ae>
    24be:	42 c0       	rjmp	.+132    	; 0x2544 <menuSystem+0x216>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
    24c0:	d8 01       	movw	r26, r16
    24c2:	d8 96       	adiw	r26, 0x38	; 56
    24c4:	8d 91       	ld	r24, X+
    24c6:	9c 91       	ld	r25, X
    24c8:	d9 97       	sbiw	r26, 0x39	; 57
    24ca:	01 97       	sbiw	r24, 0x01	; 1
    24cc:	86 0f       	add	r24, r22
    24ce:	97 1f       	adc	r25, r23
    24d0:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
    24d4:	f8 01       	movw	r30, r16
    24d6:	91 af       	std	Z+57, r25	; 0x39
    24d8:	80 af       	std	Z+56, r24	; 0x38
					break;
    24da:	34 c0       	rjmp	.+104    	; 0x2544 <menuSystem+0x216>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
    24dc:	d8 01       	movw	r26, r16
    24de:	d8 96       	adiw	r26, 0x38	; 56
    24e0:	8d 91       	ld	r24, X+
    24e2:	9c 91       	ld	r25, X
    24e4:	d9 97       	sbiw	r26, 0x39	; 57
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	0e 94 cb 14 	call	0x2996	; 0x2996 <__divmodhi4>
    24ec:	f8 01       	movw	r30, r16
    24ee:	91 af       	std	Z+57, r25	; 0x39
    24f0:	80 af       	std	Z+56, r24	; 0x38
					break;
    24f2:	28 c0       	rjmp	.+80     	; 0x2544 <menuSystem+0x216>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
    24f4:	d8 01       	movw	r26, r16
    24f6:	12 96       	adiw	r26, 0x02	; 2
    24f8:	2d 91       	ld	r18, X+
    24fa:	3c 91       	ld	r19, X
    24fc:	13 97       	sbiw	r26, 0x03	; 3
    24fe:	21 15       	cp	r18, r1
    2500:	31 05       	cpc	r19, r1
    2502:	01 f1       	breq	.+64     	; 0x2544 <menuSystem+0x216>
    2504:	89 01       	movw	r16, r18
    2506:	1e c0       	rjmp	.+60     	; 0x2544 <menuSystem+0x216>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
    2508:	f8 01       	movw	r30, r16
    250a:	20 ad       	ldd	r18, Z+56	; 0x38
    250c:	31 ad       	ldd	r19, Z+57	; 0x39
    250e:	44 89       	ldd	r20, Z+20	; 0x14
    2510:	55 89       	ldd	r21, Z+21	; 0x15
    2512:	24 17       	cp	r18, r20
    2514:	35 07       	cpc	r19, r21
    2516:	4c f4       	brge	.+18     	; 0x252a <menuSystem+0x1fc>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
    2518:	2e 5f       	subi	r18, 0xFE	; 254
    251a:	3f 4f       	sbci	r19, 0xFF	; 255
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	e2 0f       	add	r30, r18
    2522:	f3 1f       	adc	r31, r19
    2524:	00 81       	ld	r16, Z
    2526:	11 81       	ldd	r17, Z+1	; 0x01
    2528:	0d c0       	rjmp	.+26     	; 0x2544 <menuSystem+0x216>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
    252a:	24 1b       	sub	r18, r20
    252c:	35 0b       	sbc	r19, r21
    252e:	2d 5e       	subi	r18, 0xED	; 237
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	f9 01       	movw	r30, r18
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	e0 0f       	add	r30, r16
    253a:	f1 1f       	adc	r31, r17
    253c:	01 90       	ld	r0, Z+
    253e:	f0 81       	ld	r31, Z
    2540:	e0 2d       	mov	r30, r0
    2542:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
    2544:	c8 01       	movw	r24, r16
    2546:	0e 94 6f 10 	call	0x20de	; 0x20de <make_screen>
    254a:	ff ef       	ldi	r31, 0xFF	; 255
    254c:	2f e7       	ldi	r18, 0x7F	; 127
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	f1 50       	subi	r31, 0x01	; 1
    2552:	20 40       	sbci	r18, 0x00	; 0
    2554:	40 40       	sbci	r20, 0x00	; 0
    2556:	e1 f7       	brne	.-8      	; 0x2550 <menuSystem+0x222>
    2558:	00 c0       	rjmp	.+0      	; 0x255a <menuSystem+0x22c>
    255a:	00 c0       	rjmp	.+0      	; 0x255c <menuSystem+0x22e>
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
    255c:	ab 2c       	mov	r10, r11
    255e:	96 cf       	rjmp	.-212    	; 0x248c <menuSystem+0x15e>

00002560 <__subsf3>:
    2560:	50 58       	subi	r21, 0x80	; 128

00002562 <__addsf3>:
    2562:	bb 27       	eor	r27, r27
    2564:	aa 27       	eor	r26, r26
    2566:	0e d0       	rcall	.+28     	; 0x2584 <__addsf3x>
    2568:	75 c1       	rjmp	.+746    	; 0x2854 <__fp_round>
    256a:	66 d1       	rcall	.+716    	; 0x2838 <__fp_pscA>
    256c:	30 f0       	brcs	.+12     	; 0x257a <__addsf3+0x18>
    256e:	6b d1       	rcall	.+726    	; 0x2846 <__fp_pscB>
    2570:	20 f0       	brcs	.+8      	; 0x257a <__addsf3+0x18>
    2572:	31 f4       	brne	.+12     	; 0x2580 <__addsf3+0x1e>
    2574:	9f 3f       	cpi	r25, 0xFF	; 255
    2576:	11 f4       	brne	.+4      	; 0x257c <__addsf3+0x1a>
    2578:	1e f4       	brtc	.+6      	; 0x2580 <__addsf3+0x1e>
    257a:	5b c1       	rjmp	.+694    	; 0x2832 <__fp_nan>
    257c:	0e f4       	brtc	.+2      	; 0x2580 <__addsf3+0x1e>
    257e:	e0 95       	com	r30
    2580:	e7 fb       	bst	r30, 7
    2582:	51 c1       	rjmp	.+674    	; 0x2826 <__fp_inf>

00002584 <__addsf3x>:
    2584:	e9 2f       	mov	r30, r25
    2586:	77 d1       	rcall	.+750    	; 0x2876 <__fp_split3>
    2588:	80 f3       	brcs	.-32     	; 0x256a <__addsf3+0x8>
    258a:	ba 17       	cp	r27, r26
    258c:	62 07       	cpc	r22, r18
    258e:	73 07       	cpc	r23, r19
    2590:	84 07       	cpc	r24, r20
    2592:	95 07       	cpc	r25, r21
    2594:	18 f0       	brcs	.+6      	; 0x259c <__addsf3x+0x18>
    2596:	71 f4       	brne	.+28     	; 0x25b4 <__addsf3x+0x30>
    2598:	9e f5       	brtc	.+102    	; 0x2600 <__addsf3x+0x7c>
    259a:	8f c1       	rjmp	.+798    	; 0x28ba <__fp_zero>
    259c:	0e f4       	brtc	.+2      	; 0x25a0 <__addsf3x+0x1c>
    259e:	e0 95       	com	r30
    25a0:	0b 2e       	mov	r0, r27
    25a2:	ba 2f       	mov	r27, r26
    25a4:	a0 2d       	mov	r26, r0
    25a6:	0b 01       	movw	r0, r22
    25a8:	b9 01       	movw	r22, r18
    25aa:	90 01       	movw	r18, r0
    25ac:	0c 01       	movw	r0, r24
    25ae:	ca 01       	movw	r24, r20
    25b0:	a0 01       	movw	r20, r0
    25b2:	11 24       	eor	r1, r1
    25b4:	ff 27       	eor	r31, r31
    25b6:	59 1b       	sub	r21, r25
    25b8:	99 f0       	breq	.+38     	; 0x25e0 <__addsf3x+0x5c>
    25ba:	59 3f       	cpi	r21, 0xF9	; 249
    25bc:	50 f4       	brcc	.+20     	; 0x25d2 <__addsf3x+0x4e>
    25be:	50 3e       	cpi	r21, 0xE0	; 224
    25c0:	68 f1       	brcs	.+90     	; 0x261c <__addsf3x+0x98>
    25c2:	1a 16       	cp	r1, r26
    25c4:	f0 40       	sbci	r31, 0x00	; 0
    25c6:	a2 2f       	mov	r26, r18
    25c8:	23 2f       	mov	r18, r19
    25ca:	34 2f       	mov	r19, r20
    25cc:	44 27       	eor	r20, r20
    25ce:	58 5f       	subi	r21, 0xF8	; 248
    25d0:	f3 cf       	rjmp	.-26     	; 0x25b8 <__addsf3x+0x34>
    25d2:	46 95       	lsr	r20
    25d4:	37 95       	ror	r19
    25d6:	27 95       	ror	r18
    25d8:	a7 95       	ror	r26
    25da:	f0 40       	sbci	r31, 0x00	; 0
    25dc:	53 95       	inc	r21
    25de:	c9 f7       	brne	.-14     	; 0x25d2 <__addsf3x+0x4e>
    25e0:	7e f4       	brtc	.+30     	; 0x2600 <__addsf3x+0x7c>
    25e2:	1f 16       	cp	r1, r31
    25e4:	ba 0b       	sbc	r27, r26
    25e6:	62 0b       	sbc	r22, r18
    25e8:	73 0b       	sbc	r23, r19
    25ea:	84 0b       	sbc	r24, r20
    25ec:	ba f0       	brmi	.+46     	; 0x261c <__addsf3x+0x98>
    25ee:	91 50       	subi	r25, 0x01	; 1
    25f0:	a1 f0       	breq	.+40     	; 0x261a <__addsf3x+0x96>
    25f2:	ff 0f       	add	r31, r31
    25f4:	bb 1f       	adc	r27, r27
    25f6:	66 1f       	adc	r22, r22
    25f8:	77 1f       	adc	r23, r23
    25fa:	88 1f       	adc	r24, r24
    25fc:	c2 f7       	brpl	.-16     	; 0x25ee <__addsf3x+0x6a>
    25fe:	0e c0       	rjmp	.+28     	; 0x261c <__addsf3x+0x98>
    2600:	ba 0f       	add	r27, r26
    2602:	62 1f       	adc	r22, r18
    2604:	73 1f       	adc	r23, r19
    2606:	84 1f       	adc	r24, r20
    2608:	48 f4       	brcc	.+18     	; 0x261c <__addsf3x+0x98>
    260a:	87 95       	ror	r24
    260c:	77 95       	ror	r23
    260e:	67 95       	ror	r22
    2610:	b7 95       	ror	r27
    2612:	f7 95       	ror	r31
    2614:	9e 3f       	cpi	r25, 0xFE	; 254
    2616:	08 f0       	brcs	.+2      	; 0x261a <__addsf3x+0x96>
    2618:	b3 cf       	rjmp	.-154    	; 0x2580 <__addsf3+0x1e>
    261a:	93 95       	inc	r25
    261c:	88 0f       	add	r24, r24
    261e:	08 f0       	brcs	.+2      	; 0x2622 <__addsf3x+0x9e>
    2620:	99 27       	eor	r25, r25
    2622:	ee 0f       	add	r30, r30
    2624:	97 95       	ror	r25
    2626:	87 95       	ror	r24
    2628:	08 95       	ret

0000262a <__cmpsf2>:
    262a:	d9 d0       	rcall	.+434    	; 0x27de <__fp_cmp>
    262c:	08 f4       	brcc	.+2      	; 0x2630 <__cmpsf2+0x6>
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	08 95       	ret

00002632 <__divsf3>:
    2632:	0c d0       	rcall	.+24     	; 0x264c <__divsf3x>
    2634:	0f c1       	rjmp	.+542    	; 0x2854 <__fp_round>
    2636:	07 d1       	rcall	.+526    	; 0x2846 <__fp_pscB>
    2638:	40 f0       	brcs	.+16     	; 0x264a <__divsf3+0x18>
    263a:	fe d0       	rcall	.+508    	; 0x2838 <__fp_pscA>
    263c:	30 f0       	brcs	.+12     	; 0x264a <__divsf3+0x18>
    263e:	21 f4       	brne	.+8      	; 0x2648 <__divsf3+0x16>
    2640:	5f 3f       	cpi	r21, 0xFF	; 255
    2642:	19 f0       	breq	.+6      	; 0x264a <__divsf3+0x18>
    2644:	f0 c0       	rjmp	.+480    	; 0x2826 <__fp_inf>
    2646:	51 11       	cpse	r21, r1
    2648:	39 c1       	rjmp	.+626    	; 0x28bc <__fp_szero>
    264a:	f3 c0       	rjmp	.+486    	; 0x2832 <__fp_nan>

0000264c <__divsf3x>:
    264c:	14 d1       	rcall	.+552    	; 0x2876 <__fp_split3>
    264e:	98 f3       	brcs	.-26     	; 0x2636 <__divsf3+0x4>

00002650 <__divsf3_pse>:
    2650:	99 23       	and	r25, r25
    2652:	c9 f3       	breq	.-14     	; 0x2646 <__divsf3+0x14>
    2654:	55 23       	and	r21, r21
    2656:	b1 f3       	breq	.-20     	; 0x2644 <__divsf3+0x12>
    2658:	95 1b       	sub	r25, r21
    265a:	55 0b       	sbc	r21, r21
    265c:	bb 27       	eor	r27, r27
    265e:	aa 27       	eor	r26, r26
    2660:	62 17       	cp	r22, r18
    2662:	73 07       	cpc	r23, r19
    2664:	84 07       	cpc	r24, r20
    2666:	38 f0       	brcs	.+14     	; 0x2676 <__divsf3_pse+0x26>
    2668:	9f 5f       	subi	r25, 0xFF	; 255
    266a:	5f 4f       	sbci	r21, 0xFF	; 255
    266c:	22 0f       	add	r18, r18
    266e:	33 1f       	adc	r19, r19
    2670:	44 1f       	adc	r20, r20
    2672:	aa 1f       	adc	r26, r26
    2674:	a9 f3       	breq	.-22     	; 0x2660 <__divsf3_pse+0x10>
    2676:	33 d0       	rcall	.+102    	; 0x26de <__divsf3_pse+0x8e>
    2678:	0e 2e       	mov	r0, r30
    267a:	3a f0       	brmi	.+14     	; 0x268a <__divsf3_pse+0x3a>
    267c:	e0 e8       	ldi	r30, 0x80	; 128
    267e:	30 d0       	rcall	.+96     	; 0x26e0 <__divsf3_pse+0x90>
    2680:	91 50       	subi	r25, 0x01	; 1
    2682:	50 40       	sbci	r21, 0x00	; 0
    2684:	e6 95       	lsr	r30
    2686:	00 1c       	adc	r0, r0
    2688:	ca f7       	brpl	.-14     	; 0x267c <__divsf3_pse+0x2c>
    268a:	29 d0       	rcall	.+82     	; 0x26de <__divsf3_pse+0x8e>
    268c:	fe 2f       	mov	r31, r30
    268e:	27 d0       	rcall	.+78     	; 0x26de <__divsf3_pse+0x8e>
    2690:	66 0f       	add	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	88 1f       	adc	r24, r24
    2696:	bb 1f       	adc	r27, r27
    2698:	26 17       	cp	r18, r22
    269a:	37 07       	cpc	r19, r23
    269c:	48 07       	cpc	r20, r24
    269e:	ab 07       	cpc	r26, r27
    26a0:	b0 e8       	ldi	r27, 0x80	; 128
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <__divsf3_pse+0x56>
    26a4:	bb 0b       	sbc	r27, r27
    26a6:	80 2d       	mov	r24, r0
    26a8:	bf 01       	movw	r22, r30
    26aa:	ff 27       	eor	r31, r31
    26ac:	93 58       	subi	r25, 0x83	; 131
    26ae:	5f 4f       	sbci	r21, 0xFF	; 255
    26b0:	2a f0       	brmi	.+10     	; 0x26bc <__divsf3_pse+0x6c>
    26b2:	9e 3f       	cpi	r25, 0xFE	; 254
    26b4:	51 05       	cpc	r21, r1
    26b6:	68 f0       	brcs	.+26     	; 0x26d2 <__divsf3_pse+0x82>
    26b8:	b6 c0       	rjmp	.+364    	; 0x2826 <__fp_inf>
    26ba:	00 c1       	rjmp	.+512    	; 0x28bc <__fp_szero>
    26bc:	5f 3f       	cpi	r21, 0xFF	; 255
    26be:	ec f3       	brlt	.-6      	; 0x26ba <__divsf3_pse+0x6a>
    26c0:	98 3e       	cpi	r25, 0xE8	; 232
    26c2:	dc f3       	brlt	.-10     	; 0x26ba <__divsf3_pse+0x6a>
    26c4:	86 95       	lsr	r24
    26c6:	77 95       	ror	r23
    26c8:	67 95       	ror	r22
    26ca:	b7 95       	ror	r27
    26cc:	f7 95       	ror	r31
    26ce:	9f 5f       	subi	r25, 0xFF	; 255
    26d0:	c9 f7       	brne	.-14     	; 0x26c4 <__divsf3_pse+0x74>
    26d2:	88 0f       	add	r24, r24
    26d4:	91 1d       	adc	r25, r1
    26d6:	96 95       	lsr	r25
    26d8:	87 95       	ror	r24
    26da:	97 f9       	bld	r25, 7
    26dc:	08 95       	ret
    26de:	e1 e0       	ldi	r30, 0x01	; 1
    26e0:	66 0f       	add	r22, r22
    26e2:	77 1f       	adc	r23, r23
    26e4:	88 1f       	adc	r24, r24
    26e6:	bb 1f       	adc	r27, r27
    26e8:	62 17       	cp	r22, r18
    26ea:	73 07       	cpc	r23, r19
    26ec:	84 07       	cpc	r24, r20
    26ee:	ba 07       	cpc	r27, r26
    26f0:	20 f0       	brcs	.+8      	; 0x26fa <__divsf3_pse+0xaa>
    26f2:	62 1b       	sub	r22, r18
    26f4:	73 0b       	sbc	r23, r19
    26f6:	84 0b       	sbc	r24, r20
    26f8:	ba 0b       	sbc	r27, r26
    26fa:	ee 1f       	adc	r30, r30
    26fc:	88 f7       	brcc	.-30     	; 0x26e0 <__divsf3_pse+0x90>
    26fe:	e0 95       	com	r30
    2700:	08 95       	ret

00002702 <__fixsfsi>:
    2702:	04 d0       	rcall	.+8      	; 0x270c <__fixunssfsi>
    2704:	68 94       	set
    2706:	b1 11       	cpse	r27, r1
    2708:	d9 c0       	rjmp	.+434    	; 0x28bc <__fp_szero>
    270a:	08 95       	ret

0000270c <__fixunssfsi>:
    270c:	bc d0       	rcall	.+376    	; 0x2886 <__fp_splitA>
    270e:	88 f0       	brcs	.+34     	; 0x2732 <__fixunssfsi+0x26>
    2710:	9f 57       	subi	r25, 0x7F	; 127
    2712:	90 f0       	brcs	.+36     	; 0x2738 <__fixunssfsi+0x2c>
    2714:	b9 2f       	mov	r27, r25
    2716:	99 27       	eor	r25, r25
    2718:	b7 51       	subi	r27, 0x17	; 23
    271a:	a0 f0       	brcs	.+40     	; 0x2744 <__fixunssfsi+0x38>
    271c:	d1 f0       	breq	.+52     	; 0x2752 <__fixunssfsi+0x46>
    271e:	66 0f       	add	r22, r22
    2720:	77 1f       	adc	r23, r23
    2722:	88 1f       	adc	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	1a f0       	brmi	.+6      	; 0x272e <__fixunssfsi+0x22>
    2728:	ba 95       	dec	r27
    272a:	c9 f7       	brne	.-14     	; 0x271e <__fixunssfsi+0x12>
    272c:	12 c0       	rjmp	.+36     	; 0x2752 <__fixunssfsi+0x46>
    272e:	b1 30       	cpi	r27, 0x01	; 1
    2730:	81 f0       	breq	.+32     	; 0x2752 <__fixunssfsi+0x46>
    2732:	c3 d0       	rcall	.+390    	; 0x28ba <__fp_zero>
    2734:	b1 e0       	ldi	r27, 0x01	; 1
    2736:	08 95       	ret
    2738:	c0 c0       	rjmp	.+384    	; 0x28ba <__fp_zero>
    273a:	67 2f       	mov	r22, r23
    273c:	78 2f       	mov	r23, r24
    273e:	88 27       	eor	r24, r24
    2740:	b8 5f       	subi	r27, 0xF8	; 248
    2742:	39 f0       	breq	.+14     	; 0x2752 <__fixunssfsi+0x46>
    2744:	b9 3f       	cpi	r27, 0xF9	; 249
    2746:	cc f3       	brlt	.-14     	; 0x273a <__fixunssfsi+0x2e>
    2748:	86 95       	lsr	r24
    274a:	77 95       	ror	r23
    274c:	67 95       	ror	r22
    274e:	b3 95       	inc	r27
    2750:	d9 f7       	brne	.-10     	; 0x2748 <__fixunssfsi+0x3c>
    2752:	3e f4       	brtc	.+14     	; 0x2762 <__fixunssfsi+0x56>
    2754:	90 95       	com	r25
    2756:	80 95       	com	r24
    2758:	70 95       	com	r23
    275a:	61 95       	neg	r22
    275c:	7f 4f       	sbci	r23, 0xFF	; 255
    275e:	8f 4f       	sbci	r24, 0xFF	; 255
    2760:	9f 4f       	sbci	r25, 0xFF	; 255
    2762:	08 95       	ret

00002764 <__floatunsisf>:
    2764:	e8 94       	clt
    2766:	09 c0       	rjmp	.+18     	; 0x277a <__floatsisf+0x12>

00002768 <__floatsisf>:
    2768:	97 fb       	bst	r25, 7
    276a:	3e f4       	brtc	.+14     	; 0x277a <__floatsisf+0x12>
    276c:	90 95       	com	r25
    276e:	80 95       	com	r24
    2770:	70 95       	com	r23
    2772:	61 95       	neg	r22
    2774:	7f 4f       	sbci	r23, 0xFF	; 255
    2776:	8f 4f       	sbci	r24, 0xFF	; 255
    2778:	9f 4f       	sbci	r25, 0xFF	; 255
    277a:	99 23       	and	r25, r25
    277c:	a9 f0       	breq	.+42     	; 0x27a8 <__floatsisf+0x40>
    277e:	f9 2f       	mov	r31, r25
    2780:	96 e9       	ldi	r25, 0x96	; 150
    2782:	bb 27       	eor	r27, r27
    2784:	93 95       	inc	r25
    2786:	f6 95       	lsr	r31
    2788:	87 95       	ror	r24
    278a:	77 95       	ror	r23
    278c:	67 95       	ror	r22
    278e:	b7 95       	ror	r27
    2790:	f1 11       	cpse	r31, r1
    2792:	f8 cf       	rjmp	.-16     	; 0x2784 <__floatsisf+0x1c>
    2794:	fa f4       	brpl	.+62     	; 0x27d4 <__floatsisf+0x6c>
    2796:	bb 0f       	add	r27, r27
    2798:	11 f4       	brne	.+4      	; 0x279e <__floatsisf+0x36>
    279a:	60 ff       	sbrs	r22, 0
    279c:	1b c0       	rjmp	.+54     	; 0x27d4 <__floatsisf+0x6c>
    279e:	6f 5f       	subi	r22, 0xFF	; 255
    27a0:	7f 4f       	sbci	r23, 0xFF	; 255
    27a2:	8f 4f       	sbci	r24, 0xFF	; 255
    27a4:	9f 4f       	sbci	r25, 0xFF	; 255
    27a6:	16 c0       	rjmp	.+44     	; 0x27d4 <__floatsisf+0x6c>
    27a8:	88 23       	and	r24, r24
    27aa:	11 f0       	breq	.+4      	; 0x27b0 <__floatsisf+0x48>
    27ac:	96 e9       	ldi	r25, 0x96	; 150
    27ae:	11 c0       	rjmp	.+34     	; 0x27d2 <__floatsisf+0x6a>
    27b0:	77 23       	and	r23, r23
    27b2:	21 f0       	breq	.+8      	; 0x27bc <__floatsisf+0x54>
    27b4:	9e e8       	ldi	r25, 0x8E	; 142
    27b6:	87 2f       	mov	r24, r23
    27b8:	76 2f       	mov	r23, r22
    27ba:	05 c0       	rjmp	.+10     	; 0x27c6 <__floatsisf+0x5e>
    27bc:	66 23       	and	r22, r22
    27be:	71 f0       	breq	.+28     	; 0x27dc <__floatsisf+0x74>
    27c0:	96 e8       	ldi	r25, 0x86	; 134
    27c2:	86 2f       	mov	r24, r22
    27c4:	70 e0       	ldi	r23, 0x00	; 0
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	2a f0       	brmi	.+10     	; 0x27d4 <__floatsisf+0x6c>
    27ca:	9a 95       	dec	r25
    27cc:	66 0f       	add	r22, r22
    27ce:	77 1f       	adc	r23, r23
    27d0:	88 1f       	adc	r24, r24
    27d2:	da f7       	brpl	.-10     	; 0x27ca <__floatsisf+0x62>
    27d4:	88 0f       	add	r24, r24
    27d6:	96 95       	lsr	r25
    27d8:	87 95       	ror	r24
    27da:	97 f9       	bld	r25, 7
    27dc:	08 95       	ret

000027de <__fp_cmp>:
    27de:	99 0f       	add	r25, r25
    27e0:	00 08       	sbc	r0, r0
    27e2:	55 0f       	add	r21, r21
    27e4:	aa 0b       	sbc	r26, r26
    27e6:	e0 e8       	ldi	r30, 0x80	; 128
    27e8:	fe ef       	ldi	r31, 0xFE	; 254
    27ea:	16 16       	cp	r1, r22
    27ec:	17 06       	cpc	r1, r23
    27ee:	e8 07       	cpc	r30, r24
    27f0:	f9 07       	cpc	r31, r25
    27f2:	c0 f0       	brcs	.+48     	; 0x2824 <__fp_cmp+0x46>
    27f4:	12 16       	cp	r1, r18
    27f6:	13 06       	cpc	r1, r19
    27f8:	e4 07       	cpc	r30, r20
    27fa:	f5 07       	cpc	r31, r21
    27fc:	98 f0       	brcs	.+38     	; 0x2824 <__fp_cmp+0x46>
    27fe:	62 1b       	sub	r22, r18
    2800:	73 0b       	sbc	r23, r19
    2802:	84 0b       	sbc	r24, r20
    2804:	95 0b       	sbc	r25, r21
    2806:	39 f4       	brne	.+14     	; 0x2816 <__fp_cmp+0x38>
    2808:	0a 26       	eor	r0, r26
    280a:	61 f0       	breq	.+24     	; 0x2824 <__fp_cmp+0x46>
    280c:	23 2b       	or	r18, r19
    280e:	24 2b       	or	r18, r20
    2810:	25 2b       	or	r18, r21
    2812:	21 f4       	brne	.+8      	; 0x281c <__fp_cmp+0x3e>
    2814:	08 95       	ret
    2816:	0a 26       	eor	r0, r26
    2818:	09 f4       	brne	.+2      	; 0x281c <__fp_cmp+0x3e>
    281a:	a1 40       	sbci	r26, 0x01	; 1
    281c:	a6 95       	lsr	r26
    281e:	8f ef       	ldi	r24, 0xFF	; 255
    2820:	81 1d       	adc	r24, r1
    2822:	81 1d       	adc	r24, r1
    2824:	08 95       	ret

00002826 <__fp_inf>:
    2826:	97 f9       	bld	r25, 7
    2828:	9f 67       	ori	r25, 0x7F	; 127
    282a:	80 e8       	ldi	r24, 0x80	; 128
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	08 95       	ret

00002832 <__fp_nan>:
    2832:	9f ef       	ldi	r25, 0xFF	; 255
    2834:	80 ec       	ldi	r24, 0xC0	; 192
    2836:	08 95       	ret

00002838 <__fp_pscA>:
    2838:	00 24       	eor	r0, r0
    283a:	0a 94       	dec	r0
    283c:	16 16       	cp	r1, r22
    283e:	17 06       	cpc	r1, r23
    2840:	18 06       	cpc	r1, r24
    2842:	09 06       	cpc	r0, r25
    2844:	08 95       	ret

00002846 <__fp_pscB>:
    2846:	00 24       	eor	r0, r0
    2848:	0a 94       	dec	r0
    284a:	12 16       	cp	r1, r18
    284c:	13 06       	cpc	r1, r19
    284e:	14 06       	cpc	r1, r20
    2850:	05 06       	cpc	r0, r21
    2852:	08 95       	ret

00002854 <__fp_round>:
    2854:	09 2e       	mov	r0, r25
    2856:	03 94       	inc	r0
    2858:	00 0c       	add	r0, r0
    285a:	11 f4       	brne	.+4      	; 0x2860 <__fp_round+0xc>
    285c:	88 23       	and	r24, r24
    285e:	52 f0       	brmi	.+20     	; 0x2874 <__fp_round+0x20>
    2860:	bb 0f       	add	r27, r27
    2862:	40 f4       	brcc	.+16     	; 0x2874 <__fp_round+0x20>
    2864:	bf 2b       	or	r27, r31
    2866:	11 f4       	brne	.+4      	; 0x286c <__fp_round+0x18>
    2868:	60 ff       	sbrs	r22, 0
    286a:	04 c0       	rjmp	.+8      	; 0x2874 <__fp_round+0x20>
    286c:	6f 5f       	subi	r22, 0xFF	; 255
    286e:	7f 4f       	sbci	r23, 0xFF	; 255
    2870:	8f 4f       	sbci	r24, 0xFF	; 255
    2872:	9f 4f       	sbci	r25, 0xFF	; 255
    2874:	08 95       	ret

00002876 <__fp_split3>:
    2876:	57 fd       	sbrc	r21, 7
    2878:	90 58       	subi	r25, 0x80	; 128
    287a:	44 0f       	add	r20, r20
    287c:	55 1f       	adc	r21, r21
    287e:	59 f0       	breq	.+22     	; 0x2896 <__fp_splitA+0x10>
    2880:	5f 3f       	cpi	r21, 0xFF	; 255
    2882:	71 f0       	breq	.+28     	; 0x28a0 <__fp_splitA+0x1a>
    2884:	47 95       	ror	r20

00002886 <__fp_splitA>:
    2886:	88 0f       	add	r24, r24
    2888:	97 fb       	bst	r25, 7
    288a:	99 1f       	adc	r25, r25
    288c:	61 f0       	breq	.+24     	; 0x28a6 <__fp_splitA+0x20>
    288e:	9f 3f       	cpi	r25, 0xFF	; 255
    2890:	79 f0       	breq	.+30     	; 0x28b0 <__fp_splitA+0x2a>
    2892:	87 95       	ror	r24
    2894:	08 95       	ret
    2896:	12 16       	cp	r1, r18
    2898:	13 06       	cpc	r1, r19
    289a:	14 06       	cpc	r1, r20
    289c:	55 1f       	adc	r21, r21
    289e:	f2 cf       	rjmp	.-28     	; 0x2884 <__fp_split3+0xe>
    28a0:	46 95       	lsr	r20
    28a2:	f1 df       	rcall	.-30     	; 0x2886 <__fp_splitA>
    28a4:	08 c0       	rjmp	.+16     	; 0x28b6 <__fp_splitA+0x30>
    28a6:	16 16       	cp	r1, r22
    28a8:	17 06       	cpc	r1, r23
    28aa:	18 06       	cpc	r1, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	f1 cf       	rjmp	.-30     	; 0x2892 <__fp_splitA+0xc>
    28b0:	86 95       	lsr	r24
    28b2:	71 05       	cpc	r23, r1
    28b4:	61 05       	cpc	r22, r1
    28b6:	08 94       	sec
    28b8:	08 95       	ret

000028ba <__fp_zero>:
    28ba:	e8 94       	clt

000028bc <__fp_szero>:
    28bc:	bb 27       	eor	r27, r27
    28be:	66 27       	eor	r22, r22
    28c0:	77 27       	eor	r23, r23
    28c2:	cb 01       	movw	r24, r22
    28c4:	97 f9       	bld	r25, 7
    28c6:	08 95       	ret

000028c8 <__gesf2>:
    28c8:	8a df       	rcall	.-236    	; 0x27de <__fp_cmp>
    28ca:	08 f4       	brcc	.+2      	; 0x28ce <__gesf2+0x6>
    28cc:	8f ef       	ldi	r24, 0xFF	; 255
    28ce:	08 95       	ret

000028d0 <__mulsf3>:
    28d0:	0b d0       	rcall	.+22     	; 0x28e8 <__mulsf3x>
    28d2:	c0 cf       	rjmp	.-128    	; 0x2854 <__fp_round>
    28d4:	b1 df       	rcall	.-158    	; 0x2838 <__fp_pscA>
    28d6:	28 f0       	brcs	.+10     	; 0x28e2 <__mulsf3+0x12>
    28d8:	b6 df       	rcall	.-148    	; 0x2846 <__fp_pscB>
    28da:	18 f0       	brcs	.+6      	; 0x28e2 <__mulsf3+0x12>
    28dc:	95 23       	and	r25, r21
    28de:	09 f0       	breq	.+2      	; 0x28e2 <__mulsf3+0x12>
    28e0:	a2 cf       	rjmp	.-188    	; 0x2826 <__fp_inf>
    28e2:	a7 cf       	rjmp	.-178    	; 0x2832 <__fp_nan>
    28e4:	11 24       	eor	r1, r1
    28e6:	ea cf       	rjmp	.-44     	; 0x28bc <__fp_szero>

000028e8 <__mulsf3x>:
    28e8:	c6 df       	rcall	.-116    	; 0x2876 <__fp_split3>
    28ea:	a0 f3       	brcs	.-24     	; 0x28d4 <__mulsf3+0x4>

000028ec <__mulsf3_pse>:
    28ec:	95 9f       	mul	r25, r21
    28ee:	d1 f3       	breq	.-12     	; 0x28e4 <__mulsf3+0x14>
    28f0:	95 0f       	add	r25, r21
    28f2:	50 e0       	ldi	r21, 0x00	; 0
    28f4:	55 1f       	adc	r21, r21
    28f6:	62 9f       	mul	r22, r18
    28f8:	f0 01       	movw	r30, r0
    28fa:	72 9f       	mul	r23, r18
    28fc:	bb 27       	eor	r27, r27
    28fe:	f0 0d       	add	r31, r0
    2900:	b1 1d       	adc	r27, r1
    2902:	63 9f       	mul	r22, r19
    2904:	aa 27       	eor	r26, r26
    2906:	f0 0d       	add	r31, r0
    2908:	b1 1d       	adc	r27, r1
    290a:	aa 1f       	adc	r26, r26
    290c:	64 9f       	mul	r22, r20
    290e:	66 27       	eor	r22, r22
    2910:	b0 0d       	add	r27, r0
    2912:	a1 1d       	adc	r26, r1
    2914:	66 1f       	adc	r22, r22
    2916:	82 9f       	mul	r24, r18
    2918:	22 27       	eor	r18, r18
    291a:	b0 0d       	add	r27, r0
    291c:	a1 1d       	adc	r26, r1
    291e:	62 1f       	adc	r22, r18
    2920:	73 9f       	mul	r23, r19
    2922:	b0 0d       	add	r27, r0
    2924:	a1 1d       	adc	r26, r1
    2926:	62 1f       	adc	r22, r18
    2928:	83 9f       	mul	r24, r19
    292a:	a0 0d       	add	r26, r0
    292c:	61 1d       	adc	r22, r1
    292e:	22 1f       	adc	r18, r18
    2930:	74 9f       	mul	r23, r20
    2932:	33 27       	eor	r19, r19
    2934:	a0 0d       	add	r26, r0
    2936:	61 1d       	adc	r22, r1
    2938:	23 1f       	adc	r18, r19
    293a:	84 9f       	mul	r24, r20
    293c:	60 0d       	add	r22, r0
    293e:	21 1d       	adc	r18, r1
    2940:	82 2f       	mov	r24, r18
    2942:	76 2f       	mov	r23, r22
    2944:	6a 2f       	mov	r22, r26
    2946:	11 24       	eor	r1, r1
    2948:	9f 57       	subi	r25, 0x7F	; 127
    294a:	50 40       	sbci	r21, 0x00	; 0
    294c:	8a f0       	brmi	.+34     	; 0x2970 <__mulsf3_pse+0x84>
    294e:	e1 f0       	breq	.+56     	; 0x2988 <__mulsf3_pse+0x9c>
    2950:	88 23       	and	r24, r24
    2952:	4a f0       	brmi	.+18     	; 0x2966 <__mulsf3_pse+0x7a>
    2954:	ee 0f       	add	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	bb 1f       	adc	r27, r27
    295a:	66 1f       	adc	r22, r22
    295c:	77 1f       	adc	r23, r23
    295e:	88 1f       	adc	r24, r24
    2960:	91 50       	subi	r25, 0x01	; 1
    2962:	50 40       	sbci	r21, 0x00	; 0
    2964:	a9 f7       	brne	.-22     	; 0x2950 <__mulsf3_pse+0x64>
    2966:	9e 3f       	cpi	r25, 0xFE	; 254
    2968:	51 05       	cpc	r21, r1
    296a:	70 f0       	brcs	.+28     	; 0x2988 <__mulsf3_pse+0x9c>
    296c:	5c cf       	rjmp	.-328    	; 0x2826 <__fp_inf>
    296e:	a6 cf       	rjmp	.-180    	; 0x28bc <__fp_szero>
    2970:	5f 3f       	cpi	r21, 0xFF	; 255
    2972:	ec f3       	brlt	.-6      	; 0x296e <__mulsf3_pse+0x82>
    2974:	98 3e       	cpi	r25, 0xE8	; 232
    2976:	dc f3       	brlt	.-10     	; 0x296e <__mulsf3_pse+0x82>
    2978:	86 95       	lsr	r24
    297a:	77 95       	ror	r23
    297c:	67 95       	ror	r22
    297e:	b7 95       	ror	r27
    2980:	f7 95       	ror	r31
    2982:	e7 95       	ror	r30
    2984:	9f 5f       	subi	r25, 0xFF	; 255
    2986:	c1 f7       	brne	.-16     	; 0x2978 <__mulsf3_pse+0x8c>
    2988:	fe 2b       	or	r31, r30
    298a:	88 0f       	add	r24, r24
    298c:	91 1d       	adc	r25, r1
    298e:	96 95       	lsr	r25
    2990:	87 95       	ror	r24
    2992:	97 f9       	bld	r25, 7
    2994:	08 95       	ret

00002996 <__divmodhi4>:
    2996:	97 fb       	bst	r25, 7
    2998:	07 2e       	mov	r0, r23
    299a:	16 f4       	brtc	.+4      	; 0x29a0 <__divmodhi4+0xa>
    299c:	00 94       	com	r0
    299e:	07 d0       	rcall	.+14     	; 0x29ae <__divmodhi4_neg1>
    29a0:	77 fd       	sbrc	r23, 7
    29a2:	09 d0       	rcall	.+18     	; 0x29b6 <__divmodhi4_neg2>
    29a4:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__udivmodhi4>
    29a8:	07 fc       	sbrc	r0, 7
    29aa:	05 d0       	rcall	.+10     	; 0x29b6 <__divmodhi4_neg2>
    29ac:	3e f4       	brtc	.+14     	; 0x29bc <__divmodhi4_exit>

000029ae <__divmodhi4_neg1>:
    29ae:	90 95       	com	r25
    29b0:	81 95       	neg	r24
    29b2:	9f 4f       	sbci	r25, 0xFF	; 255
    29b4:	08 95       	ret

000029b6 <__divmodhi4_neg2>:
    29b6:	70 95       	com	r23
    29b8:	61 95       	neg	r22
    29ba:	7f 4f       	sbci	r23, 0xFF	; 255

000029bc <__divmodhi4_exit>:
    29bc:	08 95       	ret

000029be <__divmodsi4>:
    29be:	05 2e       	mov	r0, r21
    29c0:	97 fb       	bst	r25, 7
    29c2:	1e f4       	brtc	.+6      	; 0x29ca <__divmodsi4+0xc>
    29c4:	00 94       	com	r0
    29c6:	0e 94 f6 14 	call	0x29ec	; 0x29ec <__negsi2>
    29ca:	57 fd       	sbrc	r21, 7
    29cc:	07 d0       	rcall	.+14     	; 0x29dc <__divmodsi4_neg2>
    29ce:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__udivmodsi4>
    29d2:	07 fc       	sbrc	r0, 7
    29d4:	03 d0       	rcall	.+6      	; 0x29dc <__divmodsi4_neg2>
    29d6:	4e f4       	brtc	.+18     	; 0x29ea <__divmodsi4_exit>
    29d8:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <__negsi2>

000029dc <__divmodsi4_neg2>:
    29dc:	50 95       	com	r21
    29de:	40 95       	com	r20
    29e0:	30 95       	com	r19
    29e2:	21 95       	neg	r18
    29e4:	3f 4f       	sbci	r19, 0xFF	; 255
    29e6:	4f 4f       	sbci	r20, 0xFF	; 255
    29e8:	5f 4f       	sbci	r21, 0xFF	; 255

000029ea <__divmodsi4_exit>:
    29ea:	08 95       	ret

000029ec <__negsi2>:
    29ec:	90 95       	com	r25
    29ee:	80 95       	com	r24
    29f0:	70 95       	com	r23
    29f2:	61 95       	neg	r22
    29f4:	7f 4f       	sbci	r23, 0xFF	; 255
    29f6:	8f 4f       	sbci	r24, 0xFF	; 255
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	08 95       	ret

000029fc <__udivmodhi4>:
    29fc:	aa 1b       	sub	r26, r26
    29fe:	bb 1b       	sub	r27, r27
    2a00:	51 e1       	ldi	r21, 0x11	; 17
    2a02:	07 c0       	rjmp	.+14     	; 0x2a12 <__udivmodhi4_ep>

00002a04 <__udivmodhi4_loop>:
    2a04:	aa 1f       	adc	r26, r26
    2a06:	bb 1f       	adc	r27, r27
    2a08:	a6 17       	cp	r26, r22
    2a0a:	b7 07       	cpc	r27, r23
    2a0c:	10 f0       	brcs	.+4      	; 0x2a12 <__udivmodhi4_ep>
    2a0e:	a6 1b       	sub	r26, r22
    2a10:	b7 0b       	sbc	r27, r23

00002a12 <__udivmodhi4_ep>:
    2a12:	88 1f       	adc	r24, r24
    2a14:	99 1f       	adc	r25, r25
    2a16:	5a 95       	dec	r21
    2a18:	a9 f7       	brne	.-22     	; 0x2a04 <__udivmodhi4_loop>
    2a1a:	80 95       	com	r24
    2a1c:	90 95       	com	r25
    2a1e:	bc 01       	movw	r22, r24
    2a20:	cd 01       	movw	r24, r26
    2a22:	08 95       	ret

00002a24 <__udivmodsi4>:
    2a24:	a1 e2       	ldi	r26, 0x21	; 33
    2a26:	1a 2e       	mov	r1, r26
    2a28:	aa 1b       	sub	r26, r26
    2a2a:	bb 1b       	sub	r27, r27
    2a2c:	fd 01       	movw	r30, r26
    2a2e:	0d c0       	rjmp	.+26     	; 0x2a4a <__udivmodsi4_ep>

00002a30 <__udivmodsi4_loop>:
    2a30:	aa 1f       	adc	r26, r26
    2a32:	bb 1f       	adc	r27, r27
    2a34:	ee 1f       	adc	r30, r30
    2a36:	ff 1f       	adc	r31, r31
    2a38:	a2 17       	cp	r26, r18
    2a3a:	b3 07       	cpc	r27, r19
    2a3c:	e4 07       	cpc	r30, r20
    2a3e:	f5 07       	cpc	r31, r21
    2a40:	20 f0       	brcs	.+8      	; 0x2a4a <__udivmodsi4_ep>
    2a42:	a2 1b       	sub	r26, r18
    2a44:	b3 0b       	sbc	r27, r19
    2a46:	e4 0b       	sbc	r30, r20
    2a48:	f5 0b       	sbc	r31, r21

00002a4a <__udivmodsi4_ep>:
    2a4a:	66 1f       	adc	r22, r22
    2a4c:	77 1f       	adc	r23, r23
    2a4e:	88 1f       	adc	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	1a 94       	dec	r1
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <__udivmodsi4_loop>
    2a56:	60 95       	com	r22
    2a58:	70 95       	com	r23
    2a5a:	80 95       	com	r24
    2a5c:	90 95       	com	r25
    2a5e:	9b 01       	movw	r18, r22
    2a60:	ac 01       	movw	r20, r24
    2a62:	bd 01       	movw	r22, r26
    2a64:	cf 01       	movw	r24, r30
    2a66:	08 95       	ret

00002a68 <malloc>:
    2a68:	cf 93       	push	r28
    2a6a:	df 93       	push	r29
    2a6c:	82 30       	cpi	r24, 0x02	; 2
    2a6e:	91 05       	cpc	r25, r1
    2a70:	10 f4       	brcc	.+4      	; 0x2a76 <malloc+0xe>
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	e0 91 6a 02 	lds	r30, 0x026A
    2a7a:	f0 91 6b 02 	lds	r31, 0x026B
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	a0 e0       	ldi	r26, 0x00	; 0
    2a84:	b0 e0       	ldi	r27, 0x00	; 0
    2a86:	30 97       	sbiw	r30, 0x00	; 0
    2a88:	39 f1       	breq	.+78     	; 0x2ad8 <malloc+0x70>
    2a8a:	40 81       	ld	r20, Z
    2a8c:	51 81       	ldd	r21, Z+1	; 0x01
    2a8e:	48 17       	cp	r20, r24
    2a90:	59 07       	cpc	r21, r25
    2a92:	b8 f0       	brcs	.+46     	; 0x2ac2 <malloc+0x5a>
    2a94:	48 17       	cp	r20, r24
    2a96:	59 07       	cpc	r21, r25
    2a98:	71 f4       	brne	.+28     	; 0x2ab6 <malloc+0x4e>
    2a9a:	82 81       	ldd	r24, Z+2	; 0x02
    2a9c:	93 81       	ldd	r25, Z+3	; 0x03
    2a9e:	10 97       	sbiw	r26, 0x00	; 0
    2aa0:	29 f0       	breq	.+10     	; 0x2aac <malloc+0x44>
    2aa2:	13 96       	adiw	r26, 0x03	; 3
    2aa4:	9c 93       	st	X, r25
    2aa6:	8e 93       	st	-X, r24
    2aa8:	12 97       	sbiw	r26, 0x02	; 2
    2aaa:	2c c0       	rjmp	.+88     	; 0x2b04 <malloc+0x9c>
    2aac:	90 93 6b 02 	sts	0x026B, r25
    2ab0:	80 93 6a 02 	sts	0x026A, r24
    2ab4:	27 c0       	rjmp	.+78     	; 0x2b04 <malloc+0x9c>
    2ab6:	21 15       	cp	r18, r1
    2ab8:	31 05       	cpc	r19, r1
    2aba:	31 f0       	breq	.+12     	; 0x2ac8 <malloc+0x60>
    2abc:	42 17       	cp	r20, r18
    2abe:	53 07       	cpc	r21, r19
    2ac0:	18 f0       	brcs	.+6      	; 0x2ac8 <malloc+0x60>
    2ac2:	a9 01       	movw	r20, r18
    2ac4:	db 01       	movw	r26, r22
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <malloc+0x62>
    2ac8:	ef 01       	movw	r28, r30
    2aca:	9a 01       	movw	r18, r20
    2acc:	bd 01       	movw	r22, r26
    2ace:	df 01       	movw	r26, r30
    2ad0:	02 80       	ldd	r0, Z+2	; 0x02
    2ad2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ad4:	e0 2d       	mov	r30, r0
    2ad6:	d7 cf       	rjmp	.-82     	; 0x2a86 <malloc+0x1e>
    2ad8:	21 15       	cp	r18, r1
    2ada:	31 05       	cpc	r19, r1
    2adc:	f9 f0       	breq	.+62     	; 0x2b1c <malloc+0xb4>
    2ade:	28 1b       	sub	r18, r24
    2ae0:	39 0b       	sbc	r19, r25
    2ae2:	24 30       	cpi	r18, 0x04	; 4
    2ae4:	31 05       	cpc	r19, r1
    2ae6:	80 f4       	brcc	.+32     	; 0x2b08 <malloc+0xa0>
    2ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aea:	9b 81       	ldd	r25, Y+3	; 0x03
    2aec:	61 15       	cp	r22, r1
    2aee:	71 05       	cpc	r23, r1
    2af0:	21 f0       	breq	.+8      	; 0x2afa <malloc+0x92>
    2af2:	fb 01       	movw	r30, r22
    2af4:	93 83       	std	Z+3, r25	; 0x03
    2af6:	82 83       	std	Z+2, r24	; 0x02
    2af8:	04 c0       	rjmp	.+8      	; 0x2b02 <malloc+0x9a>
    2afa:	90 93 6b 02 	sts	0x026B, r25
    2afe:	80 93 6a 02 	sts	0x026A, r24
    2b02:	fe 01       	movw	r30, r28
    2b04:	32 96       	adiw	r30, 0x02	; 2
    2b06:	44 c0       	rjmp	.+136    	; 0x2b90 <malloc+0x128>
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e2 0f       	add	r30, r18
    2b0c:	f3 1f       	adc	r31, r19
    2b0e:	81 93       	st	Z+, r24
    2b10:	91 93       	st	Z+, r25
    2b12:	22 50       	subi	r18, 0x02	; 2
    2b14:	31 09       	sbc	r19, r1
    2b16:	39 83       	std	Y+1, r19	; 0x01
    2b18:	28 83       	st	Y, r18
    2b1a:	3a c0       	rjmp	.+116    	; 0x2b90 <malloc+0x128>
    2b1c:	20 91 68 02 	lds	r18, 0x0268
    2b20:	30 91 69 02 	lds	r19, 0x0269
    2b24:	23 2b       	or	r18, r19
    2b26:	41 f4       	brne	.+16     	; 0x2b38 <malloc+0xd0>
    2b28:	20 91 02 01 	lds	r18, 0x0102
    2b2c:	30 91 03 01 	lds	r19, 0x0103
    2b30:	30 93 69 02 	sts	0x0269, r19
    2b34:	20 93 68 02 	sts	0x0268, r18
    2b38:	20 91 00 01 	lds	r18, 0x0100
    2b3c:	30 91 01 01 	lds	r19, 0x0101
    2b40:	21 15       	cp	r18, r1
    2b42:	31 05       	cpc	r19, r1
    2b44:	41 f4       	brne	.+16     	; 0x2b56 <malloc+0xee>
    2b46:	2d b7       	in	r18, 0x3d	; 61
    2b48:	3e b7       	in	r19, 0x3e	; 62
    2b4a:	40 91 04 01 	lds	r20, 0x0104
    2b4e:	50 91 05 01 	lds	r21, 0x0105
    2b52:	24 1b       	sub	r18, r20
    2b54:	35 0b       	sbc	r19, r21
    2b56:	e0 91 68 02 	lds	r30, 0x0268
    2b5a:	f0 91 69 02 	lds	r31, 0x0269
    2b5e:	e2 17       	cp	r30, r18
    2b60:	f3 07       	cpc	r31, r19
    2b62:	a0 f4       	brcc	.+40     	; 0x2b8c <malloc+0x124>
    2b64:	2e 1b       	sub	r18, r30
    2b66:	3f 0b       	sbc	r19, r31
    2b68:	28 17       	cp	r18, r24
    2b6a:	39 07       	cpc	r19, r25
    2b6c:	78 f0       	brcs	.+30     	; 0x2b8c <malloc+0x124>
    2b6e:	ac 01       	movw	r20, r24
    2b70:	4e 5f       	subi	r20, 0xFE	; 254
    2b72:	5f 4f       	sbci	r21, 0xFF	; 255
    2b74:	24 17       	cp	r18, r20
    2b76:	35 07       	cpc	r19, r21
    2b78:	48 f0       	brcs	.+18     	; 0x2b8c <malloc+0x124>
    2b7a:	4e 0f       	add	r20, r30
    2b7c:	5f 1f       	adc	r21, r31
    2b7e:	50 93 69 02 	sts	0x0269, r21
    2b82:	40 93 68 02 	sts	0x0268, r20
    2b86:	81 93       	st	Z+, r24
    2b88:	91 93       	st	Z+, r25
    2b8a:	02 c0       	rjmp	.+4      	; 0x2b90 <malloc+0x128>
    2b8c:	e0 e0       	ldi	r30, 0x00	; 0
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	cf 01       	movw	r24, r30
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <free>:
    2b98:	cf 93       	push	r28
    2b9a:	df 93       	push	r29
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <free+0xa>
    2ba0:	87 c0       	rjmp	.+270    	; 0x2cb0 <free+0x118>
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	32 97       	sbiw	r30, 0x02	; 2
    2ba6:	13 82       	std	Z+3, r1	; 0x03
    2ba8:	12 82       	std	Z+2, r1	; 0x02
    2baa:	c0 91 6a 02 	lds	r28, 0x026A
    2bae:	d0 91 6b 02 	lds	r29, 0x026B
    2bb2:	20 97       	sbiw	r28, 0x00	; 0
    2bb4:	81 f4       	brne	.+32     	; 0x2bd6 <free+0x3e>
    2bb6:	20 81       	ld	r18, Z
    2bb8:	31 81       	ldd	r19, Z+1	; 0x01
    2bba:	28 0f       	add	r18, r24
    2bbc:	39 1f       	adc	r19, r25
    2bbe:	80 91 68 02 	lds	r24, 0x0268
    2bc2:	90 91 69 02 	lds	r25, 0x0269
    2bc6:	82 17       	cp	r24, r18
    2bc8:	93 07       	cpc	r25, r19
    2bca:	79 f5       	brne	.+94     	; 0x2c2a <free+0x92>
    2bcc:	f0 93 69 02 	sts	0x0269, r31
    2bd0:	e0 93 68 02 	sts	0x0268, r30
    2bd4:	6d c0       	rjmp	.+218    	; 0x2cb0 <free+0x118>
    2bd6:	de 01       	movw	r26, r28
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	ae 17       	cp	r26, r30
    2bde:	bf 07       	cpc	r27, r31
    2be0:	50 f4       	brcc	.+20     	; 0x2bf6 <free+0x5e>
    2be2:	12 96       	adiw	r26, 0x02	; 2
    2be4:	4d 91       	ld	r20, X+
    2be6:	5c 91       	ld	r21, X
    2be8:	13 97       	sbiw	r26, 0x03	; 3
    2bea:	9d 01       	movw	r18, r26
    2bec:	41 15       	cp	r20, r1
    2bee:	51 05       	cpc	r21, r1
    2bf0:	09 f1       	breq	.+66     	; 0x2c34 <free+0x9c>
    2bf2:	da 01       	movw	r26, r20
    2bf4:	f3 cf       	rjmp	.-26     	; 0x2bdc <free+0x44>
    2bf6:	b3 83       	std	Z+3, r27	; 0x03
    2bf8:	a2 83       	std	Z+2, r26	; 0x02
    2bfa:	40 81       	ld	r20, Z
    2bfc:	51 81       	ldd	r21, Z+1	; 0x01
    2bfe:	84 0f       	add	r24, r20
    2c00:	95 1f       	adc	r25, r21
    2c02:	8a 17       	cp	r24, r26
    2c04:	9b 07       	cpc	r25, r27
    2c06:	71 f4       	brne	.+28     	; 0x2c24 <free+0x8c>
    2c08:	8d 91       	ld	r24, X+
    2c0a:	9c 91       	ld	r25, X
    2c0c:	11 97       	sbiw	r26, 0x01	; 1
    2c0e:	84 0f       	add	r24, r20
    2c10:	95 1f       	adc	r25, r21
    2c12:	02 96       	adiw	r24, 0x02	; 2
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	80 83       	st	Z, r24
    2c18:	12 96       	adiw	r26, 0x02	; 2
    2c1a:	8d 91       	ld	r24, X+
    2c1c:	9c 91       	ld	r25, X
    2c1e:	13 97       	sbiw	r26, 0x03	; 3
    2c20:	93 83       	std	Z+3, r25	; 0x03
    2c22:	82 83       	std	Z+2, r24	; 0x02
    2c24:	21 15       	cp	r18, r1
    2c26:	31 05       	cpc	r19, r1
    2c28:	29 f4       	brne	.+10     	; 0x2c34 <free+0x9c>
    2c2a:	f0 93 6b 02 	sts	0x026B, r31
    2c2e:	e0 93 6a 02 	sts	0x026A, r30
    2c32:	3e c0       	rjmp	.+124    	; 0x2cb0 <free+0x118>
    2c34:	d9 01       	movw	r26, r18
    2c36:	13 96       	adiw	r26, 0x03	; 3
    2c38:	fc 93       	st	X, r31
    2c3a:	ee 93       	st	-X, r30
    2c3c:	12 97       	sbiw	r26, 0x02	; 2
    2c3e:	4d 91       	ld	r20, X+
    2c40:	5d 91       	ld	r21, X+
    2c42:	a4 0f       	add	r26, r20
    2c44:	b5 1f       	adc	r27, r21
    2c46:	ea 17       	cp	r30, r26
    2c48:	fb 07       	cpc	r31, r27
    2c4a:	79 f4       	brne	.+30     	; 0x2c6a <free+0xd2>
    2c4c:	80 81       	ld	r24, Z
    2c4e:	91 81       	ldd	r25, Z+1	; 0x01
    2c50:	84 0f       	add	r24, r20
    2c52:	95 1f       	adc	r25, r21
    2c54:	02 96       	adiw	r24, 0x02	; 2
    2c56:	d9 01       	movw	r26, r18
    2c58:	11 96       	adiw	r26, 0x01	; 1
    2c5a:	9c 93       	st	X, r25
    2c5c:	8e 93       	st	-X, r24
    2c5e:	82 81       	ldd	r24, Z+2	; 0x02
    2c60:	93 81       	ldd	r25, Z+3	; 0x03
    2c62:	13 96       	adiw	r26, 0x03	; 3
    2c64:	9c 93       	st	X, r25
    2c66:	8e 93       	st	-X, r24
    2c68:	12 97       	sbiw	r26, 0x02	; 2
    2c6a:	e0 e0       	ldi	r30, 0x00	; 0
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c70:	9b 81       	ldd	r25, Y+3	; 0x03
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	19 f0       	breq	.+6      	; 0x2c7c <free+0xe4>
    2c76:	fe 01       	movw	r30, r28
    2c78:	ec 01       	movw	r28, r24
    2c7a:	f9 cf       	rjmp	.-14     	; 0x2c6e <free+0xd6>
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	02 96       	adiw	r24, 0x02	; 2
    2c80:	28 81       	ld	r18, Y
    2c82:	39 81       	ldd	r19, Y+1	; 0x01
    2c84:	82 0f       	add	r24, r18
    2c86:	93 1f       	adc	r25, r19
    2c88:	20 91 68 02 	lds	r18, 0x0268
    2c8c:	30 91 69 02 	lds	r19, 0x0269
    2c90:	28 17       	cp	r18, r24
    2c92:	39 07       	cpc	r19, r25
    2c94:	69 f4       	brne	.+26     	; 0x2cb0 <free+0x118>
    2c96:	30 97       	sbiw	r30, 0x00	; 0
    2c98:	29 f4       	brne	.+10     	; 0x2ca4 <free+0x10c>
    2c9a:	10 92 6b 02 	sts	0x026B, r1
    2c9e:	10 92 6a 02 	sts	0x026A, r1
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <free+0x110>
    2ca4:	13 82       	std	Z+3, r1	; 0x03
    2ca6:	12 82       	std	Z+2, r1	; 0x02
    2ca8:	d0 93 69 02 	sts	0x0269, r29
    2cac:	c0 93 68 02 	sts	0x0268, r28
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	08 95       	ret

00002cb6 <do_rand>:
    2cb6:	8f 92       	push	r8
    2cb8:	9f 92       	push	r9
    2cba:	af 92       	push	r10
    2cbc:	bf 92       	push	r11
    2cbe:	cf 92       	push	r12
    2cc0:	df 92       	push	r13
    2cc2:	ef 92       	push	r14
    2cc4:	ff 92       	push	r15
    2cc6:	cf 93       	push	r28
    2cc8:	df 93       	push	r29
    2cca:	ec 01       	movw	r28, r24
    2ccc:	68 81       	ld	r22, Y
    2cce:	79 81       	ldd	r23, Y+1	; 0x01
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	61 15       	cp	r22, r1
    2cd6:	71 05       	cpc	r23, r1
    2cd8:	81 05       	cpc	r24, r1
    2cda:	91 05       	cpc	r25, r1
    2cdc:	21 f4       	brne	.+8      	; 0x2ce6 <do_rand+0x30>
    2cde:	64 e2       	ldi	r22, 0x24	; 36
    2ce0:	79 ed       	ldi	r23, 0xD9	; 217
    2ce2:	8b e5       	ldi	r24, 0x5B	; 91
    2ce4:	97 e0       	ldi	r25, 0x07	; 7
    2ce6:	2d e1       	ldi	r18, 0x1D	; 29
    2ce8:	33 ef       	ldi	r19, 0xF3	; 243
    2cea:	41 e0       	ldi	r20, 0x01	; 1
    2cec:	50 e0       	ldi	r21, 0x00	; 0
    2cee:	0e 94 df 14 	call	0x29be	; 0x29be <__divmodsi4>
    2cf2:	49 01       	movw	r8, r18
    2cf4:	5a 01       	movw	r10, r20
    2cf6:	9b 01       	movw	r18, r22
    2cf8:	ac 01       	movw	r20, r24
    2cfa:	a7 ea       	ldi	r26, 0xA7	; 167
    2cfc:	b1 e4       	ldi	r27, 0x41	; 65
    2cfe:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__muluhisi3>
    2d02:	6b 01       	movw	r12, r22
    2d04:	7c 01       	movw	r14, r24
    2d06:	ac ee       	ldi	r26, 0xEC	; 236
    2d08:	b4 ef       	ldi	r27, 0xF4	; 244
    2d0a:	a5 01       	movw	r20, r10
    2d0c:	94 01       	movw	r18, r8
    2d0e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <__mulohisi3>
    2d12:	c6 0e       	add	r12, r22
    2d14:	d7 1e       	adc	r13, r23
    2d16:	e8 1e       	adc	r14, r24
    2d18:	f9 1e       	adc	r15, r25
    2d1a:	f7 fe       	sbrs	r15, 7
    2d1c:	06 c0       	rjmp	.+12     	; 0x2d2a <do_rand+0x74>
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	c8 1a       	sub	r12, r24
    2d22:	d1 08       	sbc	r13, r1
    2d24:	e1 08       	sbc	r14, r1
    2d26:	80 e8       	ldi	r24, 0x80	; 128
    2d28:	f8 0a       	sbc	r15, r24
    2d2a:	c8 82       	st	Y, r12
    2d2c:	d9 82       	std	Y+1, r13	; 0x01
    2d2e:	ea 82       	std	Y+2, r14	; 0x02
    2d30:	fb 82       	std	Y+3, r15	; 0x03
    2d32:	c6 01       	movw	r24, r12
    2d34:	9f 77       	andi	r25, 0x7F	; 127
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	ff 90       	pop	r15
    2d3c:	ef 90       	pop	r14
    2d3e:	df 90       	pop	r13
    2d40:	cf 90       	pop	r12
    2d42:	bf 90       	pop	r11
    2d44:	af 90       	pop	r10
    2d46:	9f 90       	pop	r9
    2d48:	8f 90       	pop	r8
    2d4a:	08 95       	ret

00002d4c <rand_r>:
    2d4c:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <do_rand>
    2d50:	08 95       	ret

00002d52 <rand>:
    2d52:	86 e0       	ldi	r24, 0x06	; 6
    2d54:	91 e0       	ldi	r25, 0x01	; 1
    2d56:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <do_rand>
    2d5a:	08 95       	ret

00002d5c <srand>:
    2d5c:	a0 e0       	ldi	r26, 0x00	; 0
    2d5e:	b0 e0       	ldi	r27, 0x00	; 0
    2d60:	80 93 06 01 	sts	0x0106, r24
    2d64:	90 93 07 01 	sts	0x0107, r25
    2d68:	a0 93 08 01 	sts	0x0108, r26
    2d6c:	b0 93 09 01 	sts	0x0109, r27
    2d70:	08 95       	ret

00002d72 <fdevopen>:
    2d72:	0f 93       	push	r16
    2d74:	1f 93       	push	r17
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	ec 01       	movw	r28, r24
    2d7c:	8b 01       	movw	r16, r22
    2d7e:	00 97       	sbiw	r24, 0x00	; 0
    2d80:	31 f4       	brne	.+12     	; 0x2d8e <fdevopen+0x1c>
    2d82:	61 15       	cp	r22, r1
    2d84:	71 05       	cpc	r23, r1
    2d86:	19 f4       	brne	.+6      	; 0x2d8e <fdevopen+0x1c>
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	38 c0       	rjmp	.+112    	; 0x2dfe <fdevopen+0x8c>
    2d8e:	6e e0       	ldi	r22, 0x0E	; 14
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 0c 19 	call	0x3218	; 0x3218 <calloc>
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	00 97       	sbiw	r24, 0x00	; 0
    2d9e:	a1 f3       	breq	.-24     	; 0x2d88 <fdevopen+0x16>
    2da0:	80 e8       	ldi	r24, 0x80	; 128
    2da2:	83 83       	std	Z+3, r24	; 0x03
    2da4:	01 15       	cp	r16, r1
    2da6:	11 05       	cpc	r17, r1
    2da8:	71 f0       	breq	.+28     	; 0x2dc6 <fdevopen+0x54>
    2daa:	13 87       	std	Z+11, r17	; 0x0b
    2dac:	02 87       	std	Z+10, r16	; 0x0a
    2dae:	81 e8       	ldi	r24, 0x81	; 129
    2db0:	83 83       	std	Z+3, r24	; 0x03
    2db2:	80 91 6c 02 	lds	r24, 0x026C
    2db6:	90 91 6d 02 	lds	r25, 0x026D
    2dba:	89 2b       	or	r24, r25
    2dbc:	21 f4       	brne	.+8      	; 0x2dc6 <fdevopen+0x54>
    2dbe:	f0 93 6d 02 	sts	0x026D, r31
    2dc2:	e0 93 6c 02 	sts	0x026C, r30
    2dc6:	20 97       	sbiw	r28, 0x00	; 0
    2dc8:	c9 f0       	breq	.+50     	; 0x2dfc <fdevopen+0x8a>
    2dca:	d1 87       	std	Z+9, r29	; 0x09
    2dcc:	c0 87       	std	Z+8, r28	; 0x08
    2dce:	83 81       	ldd	r24, Z+3	; 0x03
    2dd0:	82 60       	ori	r24, 0x02	; 2
    2dd2:	83 83       	std	Z+3, r24	; 0x03
    2dd4:	80 91 6e 02 	lds	r24, 0x026E
    2dd8:	90 91 6f 02 	lds	r25, 0x026F
    2ddc:	89 2b       	or	r24, r25
    2dde:	71 f4       	brne	.+28     	; 0x2dfc <fdevopen+0x8a>
    2de0:	f0 93 6f 02 	sts	0x026F, r31
    2de4:	e0 93 6e 02 	sts	0x026E, r30
    2de8:	80 91 70 02 	lds	r24, 0x0270
    2dec:	90 91 71 02 	lds	r25, 0x0271
    2df0:	89 2b       	or	r24, r25
    2df2:	21 f4       	brne	.+8      	; 0x2dfc <fdevopen+0x8a>
    2df4:	f0 93 71 02 	sts	0x0271, r31
    2df8:	e0 93 70 02 	sts	0x0270, r30
    2dfc:	cf 01       	movw	r24, r30
    2dfe:	df 91       	pop	r29
    2e00:	cf 91       	pop	r28
    2e02:	1f 91       	pop	r17
    2e04:	0f 91       	pop	r16
    2e06:	08 95       	ret

00002e08 <printf>:
    2e08:	a0 e0       	ldi	r26, 0x00	; 0
    2e0a:	b0 e0       	ldi	r27, 0x00	; 0
    2e0c:	ea e0       	ldi	r30, 0x0A	; 10
    2e0e:	f7 e1       	ldi	r31, 0x17	; 23
    2e10:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__+0x20>
    2e14:	fe 01       	movw	r30, r28
    2e16:	35 96       	adiw	r30, 0x05	; 5
    2e18:	61 91       	ld	r22, Z+
    2e1a:	71 91       	ld	r23, Z+
    2e1c:	af 01       	movw	r20, r30
    2e1e:	80 91 6e 02 	lds	r24, 0x026E
    2e22:	90 91 6f 02 	lds	r25, 0x026F
    2e26:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vfprintf>
    2e2a:	e2 e0       	ldi	r30, 0x02	; 2
    2e2c:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__+0x20>

00002e30 <sprintf>:
    2e30:	ae e0       	ldi	r26, 0x0E	; 14
    2e32:	b0 e0       	ldi	r27, 0x00	; 0
    2e34:	ee e1       	ldi	r30, 0x1E	; 30
    2e36:	f7 e1       	ldi	r31, 0x17	; 23
    2e38:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <__prologue_saves__+0x1c>
    2e3c:	0d 89       	ldd	r16, Y+21	; 0x15
    2e3e:	1e 89       	ldd	r17, Y+22	; 0x16
    2e40:	86 e0       	ldi	r24, 0x06	; 6
    2e42:	8c 83       	std	Y+4, r24	; 0x04
    2e44:	1a 83       	std	Y+2, r17	; 0x02
    2e46:	09 83       	std	Y+1, r16	; 0x01
    2e48:	8f ef       	ldi	r24, 0xFF	; 255
    2e4a:	9f e7       	ldi	r25, 0x7F	; 127
    2e4c:	9e 83       	std	Y+6, r25	; 0x06
    2e4e:	8d 83       	std	Y+5, r24	; 0x05
    2e50:	ae 01       	movw	r20, r28
    2e52:	47 5e       	subi	r20, 0xE7	; 231
    2e54:	5f 4f       	sbci	r21, 0xFF	; 255
    2e56:	6f 89       	ldd	r22, Y+23	; 0x17
    2e58:	78 8d       	ldd	r23, Y+24	; 0x18
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	01 96       	adiw	r24, 0x01	; 1
    2e5e:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <vfprintf>
    2e62:	ef 81       	ldd	r30, Y+7	; 0x07
    2e64:	f8 85       	ldd	r31, Y+8	; 0x08
    2e66:	e0 0f       	add	r30, r16
    2e68:	f1 1f       	adc	r31, r17
    2e6a:	10 82       	st	Z, r1
    2e6c:	2e 96       	adiw	r28, 0x0e	; 14
    2e6e:	e4 e0       	ldi	r30, 0x04	; 4
    2e70:	0c 94 12 1a 	jmp	0x3424	; 0x3424 <__epilogue_restores__+0x1c>

00002e74 <vfprintf>:
    2e74:	ac e0       	ldi	r26, 0x0C	; 12
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	e0 e4       	ldi	r30, 0x40	; 64
    2e7a:	f7 e1       	ldi	r31, 0x17	; 23
    2e7c:	0c 94 e8 19 	jmp	0x33d0	; 0x33d0 <__prologue_saves__>
    2e80:	7c 01       	movw	r14, r24
    2e82:	6b 01       	movw	r12, r22
    2e84:	8a 01       	movw	r16, r20
    2e86:	fc 01       	movw	r30, r24
    2e88:	17 82       	std	Z+7, r1	; 0x07
    2e8a:	16 82       	std	Z+6, r1	; 0x06
    2e8c:	83 81       	ldd	r24, Z+3	; 0x03
    2e8e:	81 ff       	sbrs	r24, 1
    2e90:	bd c1       	rjmp	.+890    	; 0x320c <vfprintf+0x398>
    2e92:	ce 01       	movw	r24, r28
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	4c 01       	movw	r8, r24
    2e98:	f7 01       	movw	r30, r14
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	f6 01       	movw	r30, r12
    2e9e:	93 fd       	sbrc	r25, 3
    2ea0:	85 91       	lpm	r24, Z+
    2ea2:	93 ff       	sbrs	r25, 3
    2ea4:	81 91       	ld	r24, Z+
    2ea6:	6f 01       	movw	r12, r30
    2ea8:	88 23       	and	r24, r24
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <vfprintf+0x3a>
    2eac:	ab c1       	rjmp	.+854    	; 0x3204 <vfprintf+0x390>
    2eae:	85 32       	cpi	r24, 0x25	; 37
    2eb0:	39 f4       	brne	.+14     	; 0x2ec0 <vfprintf+0x4c>
    2eb2:	93 fd       	sbrc	r25, 3
    2eb4:	85 91       	lpm	r24, Z+
    2eb6:	93 ff       	sbrs	r25, 3
    2eb8:	81 91       	ld	r24, Z+
    2eba:	6f 01       	movw	r12, r30
    2ebc:	85 32       	cpi	r24, 0x25	; 37
    2ebe:	29 f4       	brne	.+10     	; 0x2eca <vfprintf+0x56>
    2ec0:	b7 01       	movw	r22, r14
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    2ec8:	e7 cf       	rjmp	.-50     	; 0x2e98 <vfprintf+0x24>
    2eca:	51 2c       	mov	r5, r1
    2ecc:	31 2c       	mov	r3, r1
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	20 32       	cpi	r18, 0x20	; 32
    2ed2:	a0 f4       	brcc	.+40     	; 0x2efc <vfprintf+0x88>
    2ed4:	8b 32       	cpi	r24, 0x2B	; 43
    2ed6:	69 f0       	breq	.+26     	; 0x2ef2 <vfprintf+0x7e>
    2ed8:	30 f4       	brcc	.+12     	; 0x2ee6 <vfprintf+0x72>
    2eda:	80 32       	cpi	r24, 0x20	; 32
    2edc:	59 f0       	breq	.+22     	; 0x2ef4 <vfprintf+0x80>
    2ede:	83 32       	cpi	r24, 0x23	; 35
    2ee0:	69 f4       	brne	.+26     	; 0x2efc <vfprintf+0x88>
    2ee2:	20 61       	ori	r18, 0x10	; 16
    2ee4:	2c c0       	rjmp	.+88     	; 0x2f3e <vfprintf+0xca>
    2ee6:	8d 32       	cpi	r24, 0x2D	; 45
    2ee8:	39 f0       	breq	.+14     	; 0x2ef8 <vfprintf+0x84>
    2eea:	80 33       	cpi	r24, 0x30	; 48
    2eec:	39 f4       	brne	.+14     	; 0x2efc <vfprintf+0x88>
    2eee:	21 60       	ori	r18, 0x01	; 1
    2ef0:	26 c0       	rjmp	.+76     	; 0x2f3e <vfprintf+0xca>
    2ef2:	22 60       	ori	r18, 0x02	; 2
    2ef4:	24 60       	ori	r18, 0x04	; 4
    2ef6:	23 c0       	rjmp	.+70     	; 0x2f3e <vfprintf+0xca>
    2ef8:	28 60       	ori	r18, 0x08	; 8
    2efa:	21 c0       	rjmp	.+66     	; 0x2f3e <vfprintf+0xca>
    2efc:	27 fd       	sbrc	r18, 7
    2efe:	27 c0       	rjmp	.+78     	; 0x2f4e <vfprintf+0xda>
    2f00:	30 ed       	ldi	r19, 0xD0	; 208
    2f02:	38 0f       	add	r19, r24
    2f04:	3a 30       	cpi	r19, 0x0A	; 10
    2f06:	78 f4       	brcc	.+30     	; 0x2f26 <vfprintf+0xb2>
    2f08:	26 ff       	sbrs	r18, 6
    2f0a:	06 c0       	rjmp	.+12     	; 0x2f18 <vfprintf+0xa4>
    2f0c:	fa e0       	ldi	r31, 0x0A	; 10
    2f0e:	5f 9e       	mul	r5, r31
    2f10:	30 0d       	add	r19, r0
    2f12:	11 24       	eor	r1, r1
    2f14:	53 2e       	mov	r5, r19
    2f16:	13 c0       	rjmp	.+38     	; 0x2f3e <vfprintf+0xca>
    2f18:	8a e0       	ldi	r24, 0x0A	; 10
    2f1a:	38 9e       	mul	r3, r24
    2f1c:	30 0d       	add	r19, r0
    2f1e:	11 24       	eor	r1, r1
    2f20:	33 2e       	mov	r3, r19
    2f22:	20 62       	ori	r18, 0x20	; 32
    2f24:	0c c0       	rjmp	.+24     	; 0x2f3e <vfprintf+0xca>
    2f26:	8e 32       	cpi	r24, 0x2E	; 46
    2f28:	21 f4       	brne	.+8      	; 0x2f32 <vfprintf+0xbe>
    2f2a:	26 fd       	sbrc	r18, 6
    2f2c:	6b c1       	rjmp	.+726    	; 0x3204 <vfprintf+0x390>
    2f2e:	20 64       	ori	r18, 0x40	; 64
    2f30:	06 c0       	rjmp	.+12     	; 0x2f3e <vfprintf+0xca>
    2f32:	8c 36       	cpi	r24, 0x6C	; 108
    2f34:	11 f4       	brne	.+4      	; 0x2f3a <vfprintf+0xc6>
    2f36:	20 68       	ori	r18, 0x80	; 128
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <vfprintf+0xca>
    2f3a:	88 36       	cpi	r24, 0x68	; 104
    2f3c:	41 f4       	brne	.+16     	; 0x2f4e <vfprintf+0xda>
    2f3e:	f6 01       	movw	r30, r12
    2f40:	93 fd       	sbrc	r25, 3
    2f42:	85 91       	lpm	r24, Z+
    2f44:	93 ff       	sbrs	r25, 3
    2f46:	81 91       	ld	r24, Z+
    2f48:	6f 01       	movw	r12, r30
    2f4a:	81 11       	cpse	r24, r1
    2f4c:	c1 cf       	rjmp	.-126    	; 0x2ed0 <vfprintf+0x5c>
    2f4e:	98 2f       	mov	r25, r24
    2f50:	9f 7d       	andi	r25, 0xDF	; 223
    2f52:	95 54       	subi	r25, 0x45	; 69
    2f54:	93 30       	cpi	r25, 0x03	; 3
    2f56:	28 f4       	brcc	.+10     	; 0x2f62 <vfprintf+0xee>
    2f58:	0c 5f       	subi	r16, 0xFC	; 252
    2f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5c:	ff e3       	ldi	r31, 0x3F	; 63
    2f5e:	f9 83       	std	Y+1, r31	; 0x01
    2f60:	0d c0       	rjmp	.+26     	; 0x2f7c <vfprintf+0x108>
    2f62:	83 36       	cpi	r24, 0x63	; 99
    2f64:	31 f0       	breq	.+12     	; 0x2f72 <vfprintf+0xfe>
    2f66:	83 37       	cpi	r24, 0x73	; 115
    2f68:	71 f0       	breq	.+28     	; 0x2f86 <vfprintf+0x112>
    2f6a:	83 35       	cpi	r24, 0x53	; 83
    2f6c:	09 f0       	breq	.+2      	; 0x2f70 <vfprintf+0xfc>
    2f6e:	5b c0       	rjmp	.+182    	; 0x3026 <vfprintf+0x1b2>
    2f70:	22 c0       	rjmp	.+68     	; 0x2fb6 <vfprintf+0x142>
    2f72:	f8 01       	movw	r30, r16
    2f74:	80 81       	ld	r24, Z
    2f76:	89 83       	std	Y+1, r24	; 0x01
    2f78:	0e 5f       	subi	r16, 0xFE	; 254
    2f7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7c:	44 24       	eor	r4, r4
    2f7e:	43 94       	inc	r4
    2f80:	51 2c       	mov	r5, r1
    2f82:	54 01       	movw	r10, r8
    2f84:	15 c0       	rjmp	.+42     	; 0x2fb0 <vfprintf+0x13c>
    2f86:	38 01       	movw	r6, r16
    2f88:	f2 e0       	ldi	r31, 0x02	; 2
    2f8a:	6f 0e       	add	r6, r31
    2f8c:	71 1c       	adc	r7, r1
    2f8e:	f8 01       	movw	r30, r16
    2f90:	a0 80       	ld	r10, Z
    2f92:	b1 80       	ldd	r11, Z+1	; 0x01
    2f94:	26 ff       	sbrs	r18, 6
    2f96:	03 c0       	rjmp	.+6      	; 0x2f9e <vfprintf+0x12a>
    2f98:	65 2d       	mov	r22, r5
    2f9a:	70 e0       	ldi	r23, 0x00	; 0
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <vfprintf+0x12e>
    2f9e:	6f ef       	ldi	r22, 0xFF	; 255
    2fa0:	7f ef       	ldi	r23, 0xFF	; 255
    2fa2:	c5 01       	movw	r24, r10
    2fa4:	2c 87       	std	Y+12, r18	; 0x0c
    2fa6:	0e 94 3a 19 	call	0x3274	; 0x3274 <strnlen>
    2faa:	2c 01       	movw	r4, r24
    2fac:	83 01       	movw	r16, r6
    2fae:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fb0:	2f 77       	andi	r18, 0x7F	; 127
    2fb2:	22 2e       	mov	r2, r18
    2fb4:	17 c0       	rjmp	.+46     	; 0x2fe4 <vfprintf+0x170>
    2fb6:	38 01       	movw	r6, r16
    2fb8:	f2 e0       	ldi	r31, 0x02	; 2
    2fba:	6f 0e       	add	r6, r31
    2fbc:	71 1c       	adc	r7, r1
    2fbe:	f8 01       	movw	r30, r16
    2fc0:	a0 80       	ld	r10, Z
    2fc2:	b1 80       	ldd	r11, Z+1	; 0x01
    2fc4:	26 ff       	sbrs	r18, 6
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <vfprintf+0x15a>
    2fc8:	65 2d       	mov	r22, r5
    2fca:	70 e0       	ldi	r23, 0x00	; 0
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <vfprintf+0x15e>
    2fce:	6f ef       	ldi	r22, 0xFF	; 255
    2fd0:	7f ef       	ldi	r23, 0xFF	; 255
    2fd2:	c5 01       	movw	r24, r10
    2fd4:	2c 87       	std	Y+12, r18	; 0x0c
    2fd6:	0e 94 28 19 	call	0x3250	; 0x3250 <strnlen_P>
    2fda:	2c 01       	movw	r4, r24
    2fdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fde:	20 68       	ori	r18, 0x80	; 128
    2fe0:	22 2e       	mov	r2, r18
    2fe2:	83 01       	movw	r16, r6
    2fe4:	23 fc       	sbrc	r2, 3
    2fe6:	1b c0       	rjmp	.+54     	; 0x301e <vfprintf+0x1aa>
    2fe8:	83 2d       	mov	r24, r3
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	48 16       	cp	r4, r24
    2fee:	59 06       	cpc	r5, r25
    2ff0:	b0 f4       	brcc	.+44     	; 0x301e <vfprintf+0x1aa>
    2ff2:	b7 01       	movw	r22, r14
    2ff4:	80 e2       	ldi	r24, 0x20	; 32
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    2ffc:	3a 94       	dec	r3
    2ffe:	f4 cf       	rjmp	.-24     	; 0x2fe8 <vfprintf+0x174>
    3000:	f5 01       	movw	r30, r10
    3002:	27 fc       	sbrc	r2, 7
    3004:	85 91       	lpm	r24, Z+
    3006:	27 fe       	sbrs	r2, 7
    3008:	81 91       	ld	r24, Z+
    300a:	5f 01       	movw	r10, r30
    300c:	b7 01       	movw	r22, r14
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    3014:	31 10       	cpse	r3, r1
    3016:	3a 94       	dec	r3
    3018:	f1 e0       	ldi	r31, 0x01	; 1
    301a:	4f 1a       	sub	r4, r31
    301c:	51 08       	sbc	r5, r1
    301e:	41 14       	cp	r4, r1
    3020:	51 04       	cpc	r5, r1
    3022:	71 f7       	brne	.-36     	; 0x3000 <vfprintf+0x18c>
    3024:	e5 c0       	rjmp	.+458    	; 0x31f0 <vfprintf+0x37c>
    3026:	84 36       	cpi	r24, 0x64	; 100
    3028:	11 f0       	breq	.+4      	; 0x302e <vfprintf+0x1ba>
    302a:	89 36       	cpi	r24, 0x69	; 105
    302c:	39 f5       	brne	.+78     	; 0x307c <vfprintf+0x208>
    302e:	f8 01       	movw	r30, r16
    3030:	27 ff       	sbrs	r18, 7
    3032:	07 c0       	rjmp	.+14     	; 0x3042 <vfprintf+0x1ce>
    3034:	60 81       	ld	r22, Z
    3036:	71 81       	ldd	r23, Z+1	; 0x01
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	93 81       	ldd	r25, Z+3	; 0x03
    303c:	0c 5f       	subi	r16, 0xFC	; 252
    303e:	1f 4f       	sbci	r17, 0xFF	; 255
    3040:	08 c0       	rjmp	.+16     	; 0x3052 <vfprintf+0x1de>
    3042:	60 81       	ld	r22, Z
    3044:	71 81       	ldd	r23, Z+1	; 0x01
    3046:	88 27       	eor	r24, r24
    3048:	77 fd       	sbrc	r23, 7
    304a:	80 95       	com	r24
    304c:	98 2f       	mov	r25, r24
    304e:	0e 5f       	subi	r16, 0xFE	; 254
    3050:	1f 4f       	sbci	r17, 0xFF	; 255
    3052:	2f 76       	andi	r18, 0x6F	; 111
    3054:	b2 2e       	mov	r11, r18
    3056:	97 ff       	sbrs	r25, 7
    3058:	09 c0       	rjmp	.+18     	; 0x306c <vfprintf+0x1f8>
    305a:	90 95       	com	r25
    305c:	80 95       	com	r24
    305e:	70 95       	com	r23
    3060:	61 95       	neg	r22
    3062:	7f 4f       	sbci	r23, 0xFF	; 255
    3064:	8f 4f       	sbci	r24, 0xFF	; 255
    3066:	9f 4f       	sbci	r25, 0xFF	; 255
    3068:	20 68       	ori	r18, 0x80	; 128
    306a:	b2 2e       	mov	r11, r18
    306c:	2a e0       	ldi	r18, 0x0A	; 10
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	a4 01       	movw	r20, r8
    3072:	0e 94 77 19 	call	0x32ee	; 0x32ee <__ultoa_invert>
    3076:	a8 2e       	mov	r10, r24
    3078:	a8 18       	sub	r10, r8
    307a:	44 c0       	rjmp	.+136    	; 0x3104 <vfprintf+0x290>
    307c:	85 37       	cpi	r24, 0x75	; 117
    307e:	29 f4       	brne	.+10     	; 0x308a <vfprintf+0x216>
    3080:	2f 7e       	andi	r18, 0xEF	; 239
    3082:	b2 2e       	mov	r11, r18
    3084:	2a e0       	ldi	r18, 0x0A	; 10
    3086:	30 e0       	ldi	r19, 0x00	; 0
    3088:	25 c0       	rjmp	.+74     	; 0x30d4 <vfprintf+0x260>
    308a:	f2 2f       	mov	r31, r18
    308c:	f9 7f       	andi	r31, 0xF9	; 249
    308e:	bf 2e       	mov	r11, r31
    3090:	8f 36       	cpi	r24, 0x6F	; 111
    3092:	c1 f0       	breq	.+48     	; 0x30c4 <vfprintf+0x250>
    3094:	18 f4       	brcc	.+6      	; 0x309c <vfprintf+0x228>
    3096:	88 35       	cpi	r24, 0x58	; 88
    3098:	79 f0       	breq	.+30     	; 0x30b8 <vfprintf+0x244>
    309a:	b4 c0       	rjmp	.+360    	; 0x3204 <vfprintf+0x390>
    309c:	80 37       	cpi	r24, 0x70	; 112
    309e:	19 f0       	breq	.+6      	; 0x30a6 <vfprintf+0x232>
    30a0:	88 37       	cpi	r24, 0x78	; 120
    30a2:	21 f0       	breq	.+8      	; 0x30ac <vfprintf+0x238>
    30a4:	af c0       	rjmp	.+350    	; 0x3204 <vfprintf+0x390>
    30a6:	2f 2f       	mov	r18, r31
    30a8:	20 61       	ori	r18, 0x10	; 16
    30aa:	b2 2e       	mov	r11, r18
    30ac:	b4 fe       	sbrs	r11, 4
    30ae:	0d c0       	rjmp	.+26     	; 0x30ca <vfprintf+0x256>
    30b0:	8b 2d       	mov	r24, r11
    30b2:	84 60       	ori	r24, 0x04	; 4
    30b4:	b8 2e       	mov	r11, r24
    30b6:	09 c0       	rjmp	.+18     	; 0x30ca <vfprintf+0x256>
    30b8:	24 ff       	sbrs	r18, 4
    30ba:	0a c0       	rjmp	.+20     	; 0x30d0 <vfprintf+0x25c>
    30bc:	9f 2f       	mov	r25, r31
    30be:	96 60       	ori	r25, 0x06	; 6
    30c0:	b9 2e       	mov	r11, r25
    30c2:	06 c0       	rjmp	.+12     	; 0x30d0 <vfprintf+0x25c>
    30c4:	28 e0       	ldi	r18, 0x08	; 8
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	05 c0       	rjmp	.+10     	; 0x30d4 <vfprintf+0x260>
    30ca:	20 e1       	ldi	r18, 0x10	; 16
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	02 c0       	rjmp	.+4      	; 0x30d4 <vfprintf+0x260>
    30d0:	20 e1       	ldi	r18, 0x10	; 16
    30d2:	32 e0       	ldi	r19, 0x02	; 2
    30d4:	f8 01       	movw	r30, r16
    30d6:	b7 fe       	sbrs	r11, 7
    30d8:	07 c0       	rjmp	.+14     	; 0x30e8 <vfprintf+0x274>
    30da:	60 81       	ld	r22, Z
    30dc:	71 81       	ldd	r23, Z+1	; 0x01
    30de:	82 81       	ldd	r24, Z+2	; 0x02
    30e0:	93 81       	ldd	r25, Z+3	; 0x03
    30e2:	0c 5f       	subi	r16, 0xFC	; 252
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	06 c0       	rjmp	.+12     	; 0x30f4 <vfprintf+0x280>
    30e8:	60 81       	ld	r22, Z
    30ea:	71 81       	ldd	r23, Z+1	; 0x01
    30ec:	80 e0       	ldi	r24, 0x00	; 0
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	0e 5f       	subi	r16, 0xFE	; 254
    30f2:	1f 4f       	sbci	r17, 0xFF	; 255
    30f4:	a4 01       	movw	r20, r8
    30f6:	0e 94 77 19 	call	0x32ee	; 0x32ee <__ultoa_invert>
    30fa:	a8 2e       	mov	r10, r24
    30fc:	a8 18       	sub	r10, r8
    30fe:	fb 2d       	mov	r31, r11
    3100:	ff 77       	andi	r31, 0x7F	; 127
    3102:	bf 2e       	mov	r11, r31
    3104:	b6 fe       	sbrs	r11, 6
    3106:	0b c0       	rjmp	.+22     	; 0x311e <vfprintf+0x2aa>
    3108:	2b 2d       	mov	r18, r11
    310a:	2e 7f       	andi	r18, 0xFE	; 254
    310c:	a5 14       	cp	r10, r5
    310e:	50 f4       	brcc	.+20     	; 0x3124 <vfprintf+0x2b0>
    3110:	b4 fe       	sbrs	r11, 4
    3112:	0a c0       	rjmp	.+20     	; 0x3128 <vfprintf+0x2b4>
    3114:	b2 fc       	sbrc	r11, 2
    3116:	08 c0       	rjmp	.+16     	; 0x3128 <vfprintf+0x2b4>
    3118:	2b 2d       	mov	r18, r11
    311a:	2e 7e       	andi	r18, 0xEE	; 238
    311c:	05 c0       	rjmp	.+10     	; 0x3128 <vfprintf+0x2b4>
    311e:	7a 2c       	mov	r7, r10
    3120:	2b 2d       	mov	r18, r11
    3122:	03 c0       	rjmp	.+6      	; 0x312a <vfprintf+0x2b6>
    3124:	7a 2c       	mov	r7, r10
    3126:	01 c0       	rjmp	.+2      	; 0x312a <vfprintf+0x2b6>
    3128:	75 2c       	mov	r7, r5
    312a:	24 ff       	sbrs	r18, 4
    312c:	0d c0       	rjmp	.+26     	; 0x3148 <vfprintf+0x2d4>
    312e:	fe 01       	movw	r30, r28
    3130:	ea 0d       	add	r30, r10
    3132:	f1 1d       	adc	r31, r1
    3134:	80 81       	ld	r24, Z
    3136:	80 33       	cpi	r24, 0x30	; 48
    3138:	11 f4       	brne	.+4      	; 0x313e <vfprintf+0x2ca>
    313a:	29 7e       	andi	r18, 0xE9	; 233
    313c:	09 c0       	rjmp	.+18     	; 0x3150 <vfprintf+0x2dc>
    313e:	22 ff       	sbrs	r18, 2
    3140:	06 c0       	rjmp	.+12     	; 0x314e <vfprintf+0x2da>
    3142:	73 94       	inc	r7
    3144:	73 94       	inc	r7
    3146:	04 c0       	rjmp	.+8      	; 0x3150 <vfprintf+0x2dc>
    3148:	82 2f       	mov	r24, r18
    314a:	86 78       	andi	r24, 0x86	; 134
    314c:	09 f0       	breq	.+2      	; 0x3150 <vfprintf+0x2dc>
    314e:	73 94       	inc	r7
    3150:	23 fd       	sbrc	r18, 3
    3152:	13 c0       	rjmp	.+38     	; 0x317a <vfprintf+0x306>
    3154:	20 ff       	sbrs	r18, 0
    3156:	06 c0       	rjmp	.+12     	; 0x3164 <vfprintf+0x2f0>
    3158:	5a 2c       	mov	r5, r10
    315a:	73 14       	cp	r7, r3
    315c:	18 f4       	brcc	.+6      	; 0x3164 <vfprintf+0x2f0>
    315e:	53 0c       	add	r5, r3
    3160:	57 18       	sub	r5, r7
    3162:	73 2c       	mov	r7, r3
    3164:	73 14       	cp	r7, r3
    3166:	68 f4       	brcc	.+26     	; 0x3182 <vfprintf+0x30e>
    3168:	b7 01       	movw	r22, r14
    316a:	80 e2       	ldi	r24, 0x20	; 32
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	2c 87       	std	Y+12, r18	; 0x0c
    3170:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    3174:	73 94       	inc	r7
    3176:	2c 85       	ldd	r18, Y+12	; 0x0c
    3178:	f5 cf       	rjmp	.-22     	; 0x3164 <vfprintf+0x2f0>
    317a:	73 14       	cp	r7, r3
    317c:	10 f4       	brcc	.+4      	; 0x3182 <vfprintf+0x30e>
    317e:	37 18       	sub	r3, r7
    3180:	01 c0       	rjmp	.+2      	; 0x3184 <vfprintf+0x310>
    3182:	31 2c       	mov	r3, r1
    3184:	24 ff       	sbrs	r18, 4
    3186:	12 c0       	rjmp	.+36     	; 0x31ac <vfprintf+0x338>
    3188:	b7 01       	movw	r22, r14
    318a:	80 e3       	ldi	r24, 0x30	; 48
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	2c 87       	std	Y+12, r18	; 0x0c
    3190:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    3194:	2c 85       	ldd	r18, Y+12	; 0x0c
    3196:	22 ff       	sbrs	r18, 2
    3198:	17 c0       	rjmp	.+46     	; 0x31c8 <vfprintf+0x354>
    319a:	21 ff       	sbrs	r18, 1
    319c:	03 c0       	rjmp	.+6      	; 0x31a4 <vfprintf+0x330>
    319e:	88 e5       	ldi	r24, 0x58	; 88
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <vfprintf+0x334>
    31a4:	88 e7       	ldi	r24, 0x78	; 120
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	b7 01       	movw	r22, r14
    31aa:	0c c0       	rjmp	.+24     	; 0x31c4 <vfprintf+0x350>
    31ac:	82 2f       	mov	r24, r18
    31ae:	86 78       	andi	r24, 0x86	; 134
    31b0:	59 f0       	breq	.+22     	; 0x31c8 <vfprintf+0x354>
    31b2:	21 fd       	sbrc	r18, 1
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <vfprintf+0x346>
    31b6:	80 e2       	ldi	r24, 0x20	; 32
    31b8:	01 c0       	rjmp	.+2      	; 0x31bc <vfprintf+0x348>
    31ba:	8b e2       	ldi	r24, 0x2B	; 43
    31bc:	27 fd       	sbrc	r18, 7
    31be:	8d e2       	ldi	r24, 0x2D	; 45
    31c0:	b7 01       	movw	r22, r14
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    31c8:	a5 14       	cp	r10, r5
    31ca:	38 f4       	brcc	.+14     	; 0x31da <vfprintf+0x366>
    31cc:	b7 01       	movw	r22, r14
    31ce:	80 e3       	ldi	r24, 0x30	; 48
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    31d6:	5a 94       	dec	r5
    31d8:	f7 cf       	rjmp	.-18     	; 0x31c8 <vfprintf+0x354>
    31da:	aa 94       	dec	r10
    31dc:	f4 01       	movw	r30, r8
    31de:	ea 0d       	add	r30, r10
    31e0:	f1 1d       	adc	r31, r1
    31e2:	80 81       	ld	r24, Z
    31e4:	b7 01       	movw	r22, r14
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    31ec:	a1 10       	cpse	r10, r1
    31ee:	f5 cf       	rjmp	.-22     	; 0x31da <vfprintf+0x366>
    31f0:	33 20       	and	r3, r3
    31f2:	09 f4       	brne	.+2      	; 0x31f6 <vfprintf+0x382>
    31f4:	51 ce       	rjmp	.-862    	; 0x2e98 <vfprintf+0x24>
    31f6:	b7 01       	movw	r22, r14
    31f8:	80 e2       	ldi	r24, 0x20	; 32
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	0e 94 45 19 	call	0x328a	; 0x328a <fputc>
    3200:	3a 94       	dec	r3
    3202:	f6 cf       	rjmp	.-20     	; 0x31f0 <vfprintf+0x37c>
    3204:	f7 01       	movw	r30, r14
    3206:	86 81       	ldd	r24, Z+6	; 0x06
    3208:	97 81       	ldd	r25, Z+7	; 0x07
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <vfprintf+0x39c>
    320c:	8f ef       	ldi	r24, 0xFF	; 255
    320e:	9f ef       	ldi	r25, 0xFF	; 255
    3210:	2c 96       	adiw	r28, 0x0c	; 12
    3212:	e2 e1       	ldi	r30, 0x12	; 18
    3214:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__epilogue_restores__>

00003218 <calloc>:
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	86 9f       	mul	r24, r22
    3222:	80 01       	movw	r16, r0
    3224:	87 9f       	mul	r24, r23
    3226:	10 0d       	add	r17, r0
    3228:	96 9f       	mul	r25, r22
    322a:	10 0d       	add	r17, r0
    322c:	11 24       	eor	r1, r1
    322e:	c8 01       	movw	r24, r16
    3230:	0e 94 34 15 	call	0x2a68	; 0x2a68 <malloc>
    3234:	ec 01       	movw	r28, r24
    3236:	00 97       	sbiw	r24, 0x00	; 0
    3238:	29 f0       	breq	.+10     	; 0x3244 <calloc+0x2c>
    323a:	a8 01       	movw	r20, r16
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	0e 94 33 19 	call	0x3266	; 0x3266 <memset>
    3244:	ce 01       	movw	r24, r28
    3246:	df 91       	pop	r29
    3248:	cf 91       	pop	r28
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	08 95       	ret

00003250 <strnlen_P>:
    3250:	fc 01       	movw	r30, r24
    3252:	05 90       	lpm	r0, Z+
    3254:	61 50       	subi	r22, 0x01	; 1
    3256:	70 40       	sbci	r23, 0x00	; 0
    3258:	01 10       	cpse	r0, r1
    325a:	d8 f7       	brcc	.-10     	; 0x3252 <strnlen_P+0x2>
    325c:	80 95       	com	r24
    325e:	90 95       	com	r25
    3260:	8e 0f       	add	r24, r30
    3262:	9f 1f       	adc	r25, r31
    3264:	08 95       	ret

00003266 <memset>:
    3266:	dc 01       	movw	r26, r24
    3268:	01 c0       	rjmp	.+2      	; 0x326c <memset+0x6>
    326a:	6d 93       	st	X+, r22
    326c:	41 50       	subi	r20, 0x01	; 1
    326e:	50 40       	sbci	r21, 0x00	; 0
    3270:	e0 f7       	brcc	.-8      	; 0x326a <memset+0x4>
    3272:	08 95       	ret

00003274 <strnlen>:
    3274:	fc 01       	movw	r30, r24
    3276:	61 50       	subi	r22, 0x01	; 1
    3278:	70 40       	sbci	r23, 0x00	; 0
    327a:	01 90       	ld	r0, Z+
    327c:	01 10       	cpse	r0, r1
    327e:	d8 f7       	brcc	.-10     	; 0x3276 <strnlen+0x2>
    3280:	80 95       	com	r24
    3282:	90 95       	com	r25
    3284:	8e 0f       	add	r24, r30
    3286:	9f 1f       	adc	r25, r31
    3288:	08 95       	ret

0000328a <fputc>:
    328a:	0f 93       	push	r16
    328c:	1f 93       	push	r17
    328e:	cf 93       	push	r28
    3290:	df 93       	push	r29
    3292:	18 2f       	mov	r17, r24
    3294:	09 2f       	mov	r16, r25
    3296:	eb 01       	movw	r28, r22
    3298:	8b 81       	ldd	r24, Y+3	; 0x03
    329a:	81 fd       	sbrc	r24, 1
    329c:	03 c0       	rjmp	.+6      	; 0x32a4 <fputc+0x1a>
    329e:	8f ef       	ldi	r24, 0xFF	; 255
    32a0:	9f ef       	ldi	r25, 0xFF	; 255
    32a2:	20 c0       	rjmp	.+64     	; 0x32e4 <fputc+0x5a>
    32a4:	82 ff       	sbrs	r24, 2
    32a6:	10 c0       	rjmp	.+32     	; 0x32c8 <fputc+0x3e>
    32a8:	4e 81       	ldd	r20, Y+6	; 0x06
    32aa:	5f 81       	ldd	r21, Y+7	; 0x07
    32ac:	2c 81       	ldd	r18, Y+4	; 0x04
    32ae:	3d 81       	ldd	r19, Y+5	; 0x05
    32b0:	42 17       	cp	r20, r18
    32b2:	53 07       	cpc	r21, r19
    32b4:	7c f4       	brge	.+30     	; 0x32d4 <fputc+0x4a>
    32b6:	e8 81       	ld	r30, Y
    32b8:	f9 81       	ldd	r31, Y+1	; 0x01
    32ba:	9f 01       	movw	r18, r30
    32bc:	2f 5f       	subi	r18, 0xFF	; 255
    32be:	3f 4f       	sbci	r19, 0xFF	; 255
    32c0:	39 83       	std	Y+1, r19	; 0x01
    32c2:	28 83       	st	Y, r18
    32c4:	10 83       	st	Z, r17
    32c6:	06 c0       	rjmp	.+12     	; 0x32d4 <fputc+0x4a>
    32c8:	e8 85       	ldd	r30, Y+8	; 0x08
    32ca:	f9 85       	ldd	r31, Y+9	; 0x09
    32cc:	81 2f       	mov	r24, r17
    32ce:	09 95       	icall
    32d0:	89 2b       	or	r24, r25
    32d2:	29 f7       	brne	.-54     	; 0x329e <fputc+0x14>
    32d4:	2e 81       	ldd	r18, Y+6	; 0x06
    32d6:	3f 81       	ldd	r19, Y+7	; 0x07
    32d8:	2f 5f       	subi	r18, 0xFF	; 255
    32da:	3f 4f       	sbci	r19, 0xFF	; 255
    32dc:	3f 83       	std	Y+7, r19	; 0x07
    32de:	2e 83       	std	Y+6, r18	; 0x06
    32e0:	81 2f       	mov	r24, r17
    32e2:	90 2f       	mov	r25, r16
    32e4:	df 91       	pop	r29
    32e6:	cf 91       	pop	r28
    32e8:	1f 91       	pop	r17
    32ea:	0f 91       	pop	r16
    32ec:	08 95       	ret

000032ee <__ultoa_invert>:
    32ee:	fa 01       	movw	r30, r20
    32f0:	aa 27       	eor	r26, r26
    32f2:	28 30       	cpi	r18, 0x08	; 8
    32f4:	51 f1       	breq	.+84     	; 0x334a <__ultoa_invert+0x5c>
    32f6:	20 31       	cpi	r18, 0x10	; 16
    32f8:	81 f1       	breq	.+96     	; 0x335a <__ultoa_invert+0x6c>
    32fa:	e8 94       	clt
    32fc:	6f 93       	push	r22
    32fe:	6e 7f       	andi	r22, 0xFE	; 254
    3300:	6e 5f       	subi	r22, 0xFE	; 254
    3302:	7f 4f       	sbci	r23, 0xFF	; 255
    3304:	8f 4f       	sbci	r24, 0xFF	; 255
    3306:	9f 4f       	sbci	r25, 0xFF	; 255
    3308:	af 4f       	sbci	r26, 0xFF	; 255
    330a:	b1 e0       	ldi	r27, 0x01	; 1
    330c:	3e d0       	rcall	.+124    	; 0x338a <__ultoa_invert+0x9c>
    330e:	b4 e0       	ldi	r27, 0x04	; 4
    3310:	3c d0       	rcall	.+120    	; 0x338a <__ultoa_invert+0x9c>
    3312:	67 0f       	add	r22, r23
    3314:	78 1f       	adc	r23, r24
    3316:	89 1f       	adc	r24, r25
    3318:	9a 1f       	adc	r25, r26
    331a:	a1 1d       	adc	r26, r1
    331c:	68 0f       	add	r22, r24
    331e:	79 1f       	adc	r23, r25
    3320:	8a 1f       	adc	r24, r26
    3322:	91 1d       	adc	r25, r1
    3324:	a1 1d       	adc	r26, r1
    3326:	6a 0f       	add	r22, r26
    3328:	71 1d       	adc	r23, r1
    332a:	81 1d       	adc	r24, r1
    332c:	91 1d       	adc	r25, r1
    332e:	a1 1d       	adc	r26, r1
    3330:	20 d0       	rcall	.+64     	; 0x3372 <__ultoa_invert+0x84>
    3332:	09 f4       	brne	.+2      	; 0x3336 <__ultoa_invert+0x48>
    3334:	68 94       	set
    3336:	3f 91       	pop	r19
    3338:	2a e0       	ldi	r18, 0x0A	; 10
    333a:	26 9f       	mul	r18, r22
    333c:	11 24       	eor	r1, r1
    333e:	30 19       	sub	r19, r0
    3340:	30 5d       	subi	r19, 0xD0	; 208
    3342:	31 93       	st	Z+, r19
    3344:	de f6       	brtc	.-74     	; 0x32fc <__ultoa_invert+0xe>
    3346:	cf 01       	movw	r24, r30
    3348:	08 95       	ret
    334a:	46 2f       	mov	r20, r22
    334c:	47 70       	andi	r20, 0x07	; 7
    334e:	40 5d       	subi	r20, 0xD0	; 208
    3350:	41 93       	st	Z+, r20
    3352:	b3 e0       	ldi	r27, 0x03	; 3
    3354:	0f d0       	rcall	.+30     	; 0x3374 <__ultoa_invert+0x86>
    3356:	c9 f7       	brne	.-14     	; 0x334a <__ultoa_invert+0x5c>
    3358:	f6 cf       	rjmp	.-20     	; 0x3346 <__ultoa_invert+0x58>
    335a:	46 2f       	mov	r20, r22
    335c:	4f 70       	andi	r20, 0x0F	; 15
    335e:	40 5d       	subi	r20, 0xD0	; 208
    3360:	4a 33       	cpi	r20, 0x3A	; 58
    3362:	18 f0       	brcs	.+6      	; 0x336a <__ultoa_invert+0x7c>
    3364:	49 5d       	subi	r20, 0xD9	; 217
    3366:	31 fd       	sbrc	r19, 1
    3368:	40 52       	subi	r20, 0x20	; 32
    336a:	41 93       	st	Z+, r20
    336c:	02 d0       	rcall	.+4      	; 0x3372 <__ultoa_invert+0x84>
    336e:	a9 f7       	brne	.-22     	; 0x335a <__ultoa_invert+0x6c>
    3370:	ea cf       	rjmp	.-44     	; 0x3346 <__ultoa_invert+0x58>
    3372:	b4 e0       	ldi	r27, 0x04	; 4
    3374:	a6 95       	lsr	r26
    3376:	97 95       	ror	r25
    3378:	87 95       	ror	r24
    337a:	77 95       	ror	r23
    337c:	67 95       	ror	r22
    337e:	ba 95       	dec	r27
    3380:	c9 f7       	brne	.-14     	; 0x3374 <__ultoa_invert+0x86>
    3382:	00 97       	sbiw	r24, 0x00	; 0
    3384:	61 05       	cpc	r22, r1
    3386:	71 05       	cpc	r23, r1
    3388:	08 95       	ret
    338a:	9b 01       	movw	r18, r22
    338c:	ac 01       	movw	r20, r24
    338e:	0a 2e       	mov	r0, r26
    3390:	06 94       	lsr	r0
    3392:	57 95       	ror	r21
    3394:	47 95       	ror	r20
    3396:	37 95       	ror	r19
    3398:	27 95       	ror	r18
    339a:	ba 95       	dec	r27
    339c:	c9 f7       	brne	.-14     	; 0x3390 <__ultoa_invert+0xa2>
    339e:	62 0f       	add	r22, r18
    33a0:	73 1f       	adc	r23, r19
    33a2:	84 1f       	adc	r24, r20
    33a4:	95 1f       	adc	r25, r21
    33a6:	a0 1d       	adc	r26, r0
    33a8:	08 95       	ret

000033aa <__muluhisi3>:
    33aa:	0e 94 1f 1a 	call	0x343e	; 0x343e <__umulhisi3>
    33ae:	a5 9f       	mul	r26, r21
    33b0:	90 0d       	add	r25, r0
    33b2:	b4 9f       	mul	r27, r20
    33b4:	90 0d       	add	r25, r0
    33b6:	a4 9f       	mul	r26, r20
    33b8:	80 0d       	add	r24, r0
    33ba:	91 1d       	adc	r25, r1
    33bc:	11 24       	eor	r1, r1
    33be:	08 95       	ret

000033c0 <__mulshisi3>:
    33c0:	b7 ff       	sbrs	r27, 7
    33c2:	0c 94 d5 19 	jmp	0x33aa	; 0x33aa <__muluhisi3>

000033c6 <__mulohisi3>:
    33c6:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__muluhisi3>
    33ca:	82 1b       	sub	r24, r18
    33cc:	93 0b       	sbc	r25, r19
    33ce:	08 95       	ret

000033d0 <__prologue_saves__>:
    33d0:	2f 92       	push	r2
    33d2:	3f 92       	push	r3
    33d4:	4f 92       	push	r4
    33d6:	5f 92       	push	r5
    33d8:	6f 92       	push	r6
    33da:	7f 92       	push	r7
    33dc:	8f 92       	push	r8
    33de:	9f 92       	push	r9
    33e0:	af 92       	push	r10
    33e2:	bf 92       	push	r11
    33e4:	cf 92       	push	r12
    33e6:	df 92       	push	r13
    33e8:	ef 92       	push	r14
    33ea:	ff 92       	push	r15
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	ca 1b       	sub	r28, r26
    33fa:	db 0b       	sbc	r29, r27
    33fc:	0f b6       	in	r0, 0x3f	; 63
    33fe:	f8 94       	cli
    3400:	de bf       	out	0x3e, r29	; 62
    3402:	0f be       	out	0x3f, r0	; 63
    3404:	cd bf       	out	0x3d, r28	; 61
    3406:	09 94       	ijmp

00003408 <__epilogue_restores__>:
    3408:	2a 88       	ldd	r2, Y+18	; 0x12
    340a:	39 88       	ldd	r3, Y+17	; 0x11
    340c:	48 88       	ldd	r4, Y+16	; 0x10
    340e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3410:	6e 84       	ldd	r6, Y+14	; 0x0e
    3412:	7d 84       	ldd	r7, Y+13	; 0x0d
    3414:	8c 84       	ldd	r8, Y+12	; 0x0c
    3416:	9b 84       	ldd	r9, Y+11	; 0x0b
    3418:	aa 84       	ldd	r10, Y+10	; 0x0a
    341a:	b9 84       	ldd	r11, Y+9	; 0x09
    341c:	c8 84       	ldd	r12, Y+8	; 0x08
    341e:	df 80       	ldd	r13, Y+7	; 0x07
    3420:	ee 80       	ldd	r14, Y+6	; 0x06
    3422:	fd 80       	ldd	r15, Y+5	; 0x05
    3424:	0c 81       	ldd	r16, Y+4	; 0x04
    3426:	1b 81       	ldd	r17, Y+3	; 0x03
    3428:	aa 81       	ldd	r26, Y+2	; 0x02
    342a:	b9 81       	ldd	r27, Y+1	; 0x01
    342c:	ce 0f       	add	r28, r30
    342e:	d1 1d       	adc	r29, r1
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	ed 01       	movw	r28, r26
    343c:	08 95       	ret

0000343e <__umulhisi3>:
    343e:	a2 9f       	mul	r26, r18
    3440:	b0 01       	movw	r22, r0
    3442:	b3 9f       	mul	r27, r19
    3444:	c0 01       	movw	r24, r0
    3446:	a3 9f       	mul	r26, r19
    3448:	70 0d       	add	r23, r0
    344a:	81 1d       	adc	r24, r1
    344c:	11 24       	eor	r1, r1
    344e:	91 1d       	adc	r25, r1
    3450:	b2 9f       	mul	r27, r18
    3452:	70 0d       	add	r23, r0
    3454:	81 1d       	adc	r24, r1
    3456:	11 24       	eor	r1, r1
    3458:	91 1d       	adc	r25, r1
    345a:	08 95       	ret

0000345c <_exit>:
    345c:	f8 94       	cli

0000345e <__stop_program>:
    345e:	ff cf       	rjmp	.-2      	; 0x345e <__stop_program>
