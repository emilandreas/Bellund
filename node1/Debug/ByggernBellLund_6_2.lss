
ByggernBellLund_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00002a2a  00002abe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a2a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080021e  0080021e  00002bdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002bdc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003c0  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000043a7  00000000  00000000  00002ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000194e  00000000  00000000  0000739f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001933  00000000  00000000  00008ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b78  00000000  00000000  0000a620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a15  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002f82  00000000  00000000  0000bbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000400  00000000  00000000  0000eb2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 0c 02 	jmp	0x418	; 0x418 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <__vector_14>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_sram_flush+0x1e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e2       	ldi	r30, 0x2A	; 42
     37c:	fa e2       	ldi	r31, 0x2A	; 42
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 31       	cpi	r26, 0x1E	; 30
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	ae e1       	ldi	r26, 0x1E	; 30
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a8 32       	cpi	r26, 0x28	; 40
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 88 02 	call	0x510	; 0x510 <main>
     39e:	0c 94 13 15 	jmp	0x2a26	; 0x2a26 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <init_handler>:

volatile int handelingMessage = 0;

void init_handler(){
	// Set pin as input (PD3 = INT1)
	DDRD &= ~(1 << PD3);
     3a6:	8b 98       	cbi	0x11, 3	; 17
	// Set internal pull-up
	PORTD |= (1 << PD3);
     3a8:	93 9a       	sbi	0x12, 3	; 18
	
	//initialize external interrupt on falling edge
	MCUCR |= (1<<ISC11);
     3aa:	85 b7       	in	r24, 0x35	; 53
     3ac:	88 60       	ori	r24, 0x08	; 8
     3ae:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     3b0:	85 b7       	in	r24, 0x35	; 53
     3b2:	8b 7f       	andi	r24, 0xFB	; 251
     3b4:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
     3b6:	80 e8       	ldi	r24, 0x80	; 128
     3b8:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     3ba:	78 94       	sei
     3bc:	08 95       	ret

000003be <handle_message>:
ISR(INT1_vect){
	handle_message();
}


void handle_message(){
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2a 97       	sbiw	r28, 0x0a	; 10
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
	Message m;
	CAN_receive(&m);
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <CAN_receive>
	
	Joystick J;
	Slider S;
	
	//Decide what to do
	switch(m.id){
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	99 f4       	brne	.+38     	; 0x406 <handle_message+0x48>
		case JOY:
			break;
		case JOYREQ:
			//Joystick
			J = getJoystickPosition();
     3e0:	0e 94 b7 03 	call	0x76e	; 0x76e <getJoystickPosition>
			m.id = JOY;
     3e4:	19 82       	std	Y+1, r1	; 0x01
			m.length = 8;
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	2a 83       	std	Y+2, r18	; 0x02
			m.data[0] = J.X;
     3ea:	6b 83       	std	Y+3, r22	; 0x03
			m.data[1] = J.Y;
     3ec:	7c 83       	std	Y+4, r23	; 0x04
			m.data[2] = J.D;
     3ee:	8d 83       	std	Y+5, r24	; 0x05
			m.data[3] = J.Button;
     3f0:	9e 83       	std	Y+6, r25	; 0x06
			
			//Slider
			S = getSliderPosition();
     3f2:	0e 94 3a 03 	call	0x674	; 0x674 <getSliderPosition>
			m.data[4] = S.left;
     3f6:	6f 83       	std	Y+7, r22	; 0x07
			m.data[5] = S.right;
     3f8:	78 87       	std	Y+8, r23	; 0x08
			m.data[6] = S.leftButton;
     3fa:	89 87       	std	Y+9, r24	; 0x09
			m.data[7] = S.rightButton;
     3fc:	9a 87       	std	Y+10, r25	; 0x0a
			
			//Send can message
			CAN_transmit(&m);
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	0e 94 cc 02 	call	0x598	; 0x598 <CAN_transmit>
			break;
		default:
			break;
	}
}
     406:	2a 96       	adiw	r28, 0x0a	; 10
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <__vector_2>:
	
	//Enable global interrupts
	sei();
}

ISR(INT1_vect){
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
     422:	2f 93       	push	r18
     424:	3f 93       	push	r19
     426:	4f 93       	push	r20
     428:	5f 93       	push	r21
     42a:	6f 93       	push	r22
     42c:	7f 93       	push	r23
     42e:	8f 93       	push	r24
     430:	9f 93       	push	r25
     432:	af 93       	push	r26
     434:	bf 93       	push	r27
     436:	ef 93       	push	r30
     438:	ff 93       	push	r31
	handle_message();
     43a:	0e 94 df 01 	call	0x3be	; 0x3be <handle_message>
}
     43e:	ff 91       	pop	r31
     440:	ef 91       	pop	r30
     442:	bf 91       	pop	r27
     444:	af 91       	pop	r26
     446:	9f 91       	pop	r25
     448:	8f 91       	pop	r24
     44a:	7f 91       	pop	r23
     44c:	6f 91       	pop	r22
     44e:	5f 91       	pop	r21
     450:	4f 91       	pop	r20
     452:	3f 91       	pop	r19
     454:	2f 91       	pop	r18
     456:	0f 90       	pop	r0
     458:	0f be       	out	0x3f, r0	; 63
     45a:	0f 90       	pop	r0
     45c:	1f 90       	pop	r1
     45e:	18 95       	reti

00000460 <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
     460:	80 eb       	ldi	r24, 0xB0	; 176
     462:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     464:	81 e5       	ldi	r24, 0x51	; 81
     466:	8d b9       	out	0x0d, r24	; 13
     468:	08 95       	ret

0000046a <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
     46a:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
     46c:	77 9b       	sbis	0x0e, 7	; 14
     46e:	fe cf       	rjmp	.-4      	; 0x46c <SPI_transmit+0x2>
	//Return answer
	return SPDR;
     470:	8f b1       	in	r24, 0x0f	; 15
}
     472:	08 95       	ret

00000474 <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
     474:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_transmit>
     478:	08 95       	ret

0000047a <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
     47a:	8c ec       	ldi	r24, 0xCC	; 204
     47c:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_transmit>
}
     480:	08 95       	ret

00000482 <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
     482:	c4 9a       	sbi	0x18, 4	; 24
     484:	08 95       	ret

00000486 <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
     486:	c4 98       	cbi	0x18, 4	; 24
     488:	08 95       	ret

0000048a <wait_mode>:
	m.id = EXIT_PINGPONG;
	m.length = 0;
	CAN_transmit(&m);
}

void wait_mode(char* message){
     48a:	ec 01       	movw	r28, r24
	printf("waiting");
     48c:	22 e1       	ldi	r18, 0x12	; 18
     48e:	31 e0       	ldi	r19, 0x01	; 1
     490:	3f 93       	push	r19
     492:	2f 93       	push	r18
     494:	0e 94 0b 12 	call	0x2416	; 0x2416 <printf>
	//Print message on screen, and wait for slide from 0 to 100 on left slide
	Slider s;
	int first_check = 0;
	oled_sram_clear_screen(0);
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	oled_sram_write_string(0, message, 2);
     4a0:	42 e0       	ldi	r20, 0x02	; 2
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	be 01       	movw	r22, r28
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <oled_sram_write_string>
	oled_sram_write_string(0, "(slide to exit)", 4);
     4ae:	44 e0       	ldi	r20, 0x04	; 4
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	6a e1       	ldi	r22, 0x1A	; 26
     4b4:	71 e0       	ldi	r23, 0x01	; 1
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <oled_sram_write_string>
	oled_sram_flush(0);
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	ff cf       	rjmp	.-2      	; 0x4ca <wait_mode+0x40>

000004cc <start_pingpong>:
#include "pingpong.h"
#include "../Driver_files/message_handler.h"
#include "../Driver_files/CAN_driver.h"
#include "../Driver_files/joy_driver.h"

void start_pingpong(){
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	2a 97       	sbiw	r28, 0x0a	; 10
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
	printf("starting pingpong");
     4e0:	8a e2       	ldi	r24, 0x2A	; 42
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	9f 93       	push	r25
     4e6:	8f 93       	push	r24
     4e8:	0e 94 0b 12 	call	0x2416	; 0x2416 <printf>
	//Send message to node 2, and go into waiting mode
	Message m;
	m.id = START_PINGPONG;
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	89 83       	std	Y+1, r24	; 0x01
	m.length = 0;
     4f0:	1a 82       	std	Y+2, r1	; 0x02
	CAN_transmit(&m);
     4f2:	ce 01       	movw	r24, r28
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	0e 94 cc 02 	call	0x598	; 0x598 <CAN_transmit>
	wait_mode("Playing pingpong");
     4fa:	8c e3       	ldi	r24, 0x3C	; 60
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 45 02 	call	0x48a	; 0x48a <wait_mode>

00000502 <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     502:	80 b7       	in	r24, 0x30	; 48
     504:	80 62       	ori	r24, 0x20	; 32
     506:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     508:	85 b7       	in	r24, 0x35	; 53
     50a:	80 68       	ori	r24, 0x80	; 128
     50c:	85 bf       	out	0x35, r24	; 53
     50e:	08 95       	ret

00000510 <main>:
#include "Driver_files/message_handler.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	95 e2       	ldi	r25, 0x25	; 37
     514:	0e 94 f1 06 	call	0xde2	; 0xde2 <uartInit>
	bus_init();
     518:	0e 94 81 02 	call	0x502	; 0x502 <bus_init>
	oled_init();
     51c:	0e 94 64 05 	call	0xac8	; 0xac8 <oled_init>
	init_handler();
     520:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <init_handler>
	//oled_sram_init();
	CAN_init();
     524:	0e 94 b3 02 	call	0x566	; 0x566 <CAN_init>
	printf("Reset?");
     528:	8d e4       	ldi	r24, 0x4D	; 77
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	9f 93       	push	r25
     52e:	8f 93       	push	r24
     530:	0e 94 0b 12 	call	0x2416	; 0x2416 <printf>
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
    while(1)
    {
		menuSystem();
     538:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <menuSystem>
     53c:	fd cf       	rjmp	.-6      	; 0x538 <main+0x28>

0000053e <get_adc>:
uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc
	uint16_t adc_size = 0x400;
	
	
	adc[0] = 4 + (channel%4);
     53e:	83 70       	andi	r24, 0x03	; 3
     540:	90 78       	andi	r25, 0x80	; 128
     542:	99 23       	and	r25, r25
     544:	24 f4       	brge	.+8      	; 0x54e <get_adc+0x10>
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	8c 6f       	ori	r24, 0xFC	; 252
     54a:	9f 6f       	ori	r25, 0xFF	; 255
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	8c 5f       	subi	r24, 0xFC	; 252
     550:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     554:	85 ef       	ldi	r24, 0xF5	; 245
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	01 97       	sbiw	r24, 0x01	; 1
     55a:	f1 f7       	brne	.-4      	; 0x558 <get_adc+0x1a>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <get_adc+0x20>
     55e:	00 00       	nop
	_delay_us(200);
	return adc[0];
     560:	80 91 00 14 	lds	r24, 0x1400
     564:	08 95       	ret

00000566 <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
     566:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <MCP_init>
	//Enter config mode
	MCP_reset();
     56a:	0e 94 df 04 	call	0x9be	; 0x9be <MCP_reset>
	//set normal mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	60 ee       	ldi	r22, 0xE0	; 224
     572:	8f e0       	ldi	r24, 0x0F	; 15
     574:	0e 94 4a 05 	call	0xa94	; 0xa94 <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
     578:	4f ef       	ldi	r20, 0xFF	; 255
     57a:	63 e0       	ldi	r22, 0x03	; 3
     57c:	8b e2       	ldi	r24, 0x2B	; 43
     57e:	0e 94 4a 05 	call	0xa94	; 0xa94 <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
     582:	8e e0       	ldi	r24, 0x0E	; 14
     584:	0e 94 e7 04 	call	0x9ce	; 0x9ce <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     588:	28 2f       	mov	r18, r24
     58a:	20 7e       	andi	r18, 0xE0	; 224
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	11 f4       	brne	.+4      	; 0x596 <CAN_init+0x30>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     596:	08 95       	ret

00000598 <CAN_transmit>:

void CAN_transmit(Message *m){
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_bit_modify(MCP_TXB0SIDL, 0xE0, m->id<<5);
     5a0:	48 81       	ld	r20, Y
     5a2:	42 95       	swap	r20
     5a4:	44 0f       	add	r20, r20
     5a6:	40 7e       	andi	r20, 0xE0	; 224
     5a8:	60 ee       	ldi	r22, 0xE0	; 224
     5aa:	82 e3       	ldi	r24, 0x32	; 50
     5ac:	0e 94 4a 05 	call	0xa94	; 0xa94 <MCP_bit_modify>
	MCP_bit_modify(MCP_TXB0SIDH, 0xFF, m->id>>3);
     5b0:	48 81       	ld	r20, Y
     5b2:	46 95       	lsr	r20
     5b4:	46 95       	lsr	r20
     5b6:	46 95       	lsr	r20
     5b8:	6f ef       	ldi	r22, 0xFF	; 255
     5ba:	81 e3       	ldi	r24, 0x31	; 49
     5bc:	0e 94 4a 05 	call	0xa94	; 0xa94 <MCP_bit_modify>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     5c0:	69 81       	ldd	r22, Y+1	; 0x01
     5c2:	85 e3       	ldi	r24, 0x35	; 53
     5c4:	0e 94 15 05 	call	0xa2a	; 0xa2a <MCP_write>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     5c8:	69 81       	ldd	r22, Y+1	; 0x01
     5ca:	85 e3       	ldi	r24, 0x35	; 53
     5cc:	0e 94 15 05 	call	0xa2a	; 0xa2a <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
     5d2:	88 23       	and	r24, r24
     5d4:	69 f0       	breq	.+26     	; 0x5f0 <CAN_transmit+0x58>
     5d6:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
     5d8:	fe 01       	movw	r30, r28
     5da:	e1 0f       	add	r30, r17
     5dc:	f1 1d       	adc	r31, r1
     5de:	62 81       	ldd	r22, Z+2	; 0x02
     5e0:	86 e3       	ldi	r24, 0x36	; 54
     5e2:	81 0f       	add	r24, r17
     5e4:	0e 94 15 05 	call	0xa2a	; 0xa2a <MCP_write>
	MCP_write(MCP_TXB0DLC, m->length);
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     5e8:	1f 5f       	subi	r17, 0xFF	; 255
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	18 17       	cp	r17, r24
     5ee:	a0 f3       	brcs	.-24     	; 0x5d8 <CAN_transmit+0x40>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	0e 94 29 05 	call	0xa52	; 0xa52 <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	08 95       	ret

000005fe <CAN_receive>:

int CAN_receive(Message *m){
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
     606:	8c e2       	ldi	r24, 0x2C	; 44
     608:	0e 94 e7 04 	call	0x9ce	; 0x9ce <MCP_read>
     60c:	80 ff       	sbrs	r24, 0
     60e:	2c c0       	rjmp	.+88     	; 0x668 <CAN_receive+0x6a>
		m->length = MCP_read(MCP_RBB0DLC);
     610:	85 e6       	ldi	r24, 0x65	; 101
     612:	0e 94 e7 04 	call	0x9ce	; 0x9ce <MCP_read>
     616:	89 83       	std	Y+1, r24	; 0x01
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
     618:	82 e6       	ldi	r24, 0x62	; 98
     61a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <MCP_read>
     61e:	18 2f       	mov	r17, r24
     620:	12 95       	swap	r17
     622:	16 95       	lsr	r17
     624:	17 70       	andi	r17, 0x07	; 7
     626:	18 83       	st	Y, r17
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
     628:	81 e6       	ldi	r24, 0x61	; 97
     62a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <MCP_read>
     62e:	88 0f       	add	r24, r24
     630:	88 0f       	add	r24, r24
     632:	88 0f       	add	r24, r24
     634:	18 0f       	add	r17, r24
     636:	18 83       	st	Y, r17
		for(uint8_t i = 0; i < m->length; i++){
     638:	89 81       	ldd	r24, Y+1	; 0x01
     63a:	88 23       	and	r24, r24
     63c:	69 f0       	breq	.+26     	; 0x658 <CAN_receive+0x5a>
     63e:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
     640:	86 e6       	ldi	r24, 0x66	; 102
     642:	81 0f       	add	r24, r17
     644:	0e 94 e7 04 	call	0x9ce	; 0x9ce <MCP_read>
     648:	fe 01       	movw	r30, r28
     64a:	e1 0f       	add	r30, r17
     64c:	f1 1d       	adc	r31, r1
     64e:	82 83       	std	Z+2, r24	; 0x02
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
		for(uint8_t i = 0; i < m->length; i++){
     650:	1f 5f       	subi	r17, 0xFF	; 255
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	18 17       	cp	r17, r24
     656:	a0 f3       	brcs	.-24     	; 0x640 <CAN_receive+0x42>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	61 e0       	ldi	r22, 0x01	; 1
     65c:	8c e2       	ldi	r24, 0x2C	; 44
     65e:	0e 94 4a 05 	call	0xa94	; 0xa94 <MCP_bit_modify>
		return 0;
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	02 c0       	rjmp	.+4      	; 0x66c <CAN_receive+0x6e>
	}
	return 1;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	90 e0       	ldi	r25, 0x00	; 0
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	08 95       	ret

00000674 <getSliderPosition>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Slider getSliderPosition(){
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 9f 02 	call	0x53e	; 0x53e <get_adc>
     680:	ec 01       	movw	r28, r24
	slide.right = ((get_adc(0))*100)/255;
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 9f 02 	call	0x53e	; 0x53e <get_adc>
     68a:	fc 01       	movw	r30, r24
float xMean = 127;
float yMean = 127;

Slider getSliderPosition(){
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     68c:	44 e6       	ldi	r20, 0x64	; 100
     68e:	4c 9f       	mul	r20, r28
     690:	c0 01       	movw	r24, r0
     692:	4d 9f       	mul	r20, r29
     694:	90 0d       	add	r25, r0
     696:	11 24       	eor	r1, r1
     698:	2f ef       	ldi	r18, 0xFF	; 255
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	b9 01       	movw	r22, r18
     69e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
     6a2:	c6 2f       	mov	r28, r22
	slide.right = ((get_adc(0))*100)/255;
     6a4:	4e 9f       	mul	r20, r30
     6a6:	c0 01       	movw	r24, r0
     6a8:	4f 9f       	mul	r20, r31
     6aa:	90 0d       	add	r25, r0
     6ac:	11 24       	eor	r1, r1
     6ae:	b9 01       	movw	r22, r18
     6b0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
     6b4:	76 2f       	mov	r23, r22
	return slide;
}
     6b6:	6c 2f       	mov	r22, r28
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	08 95       	ret

000006c2 <getJoystickDirection>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = getJoystickDirection(joy.X, joy.Y);
	return joy;
}

direction getJoystickDirection(int x, int y){
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	8c 01       	movw	r16, r24
     6d4:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
     6d6:	bc 01       	movw	r22, r24
     6d8:	88 27       	eor	r24, r24
     6da:	77 fd       	sbrc	r23, 7
     6dc:	80 95       	com	r24
     6de:	98 2f       	mov	r25, r24
     6e0:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
     6e8:	e8 94       	clt
     6ea:	f7 f8       	bld	r15, 7
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	48 e4       	ldi	r20, 0x48	; 72
     6f2:	52 e4       	ldi	r21, 0x42	; 66
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
     6f8:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__cmpsf2>
     6fc:	88 23       	and	r24, r24
     6fe:	84 f4       	brge	.+32     	; 0x720 <getJoystickDirection+0x5e>
     700:	be 01       	movw	r22, r28
     702:	88 27       	eor	r24, r24
     704:	77 fd       	sbrc	r23, 7
     706:	80 95       	com	r24
     708:	98 2f       	mov	r25, r24
     70a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     70e:	9f 77       	andi	r25, 0x7F	; 127
     710:	20 e0       	ldi	r18, 0x00	; 0
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	48 e4       	ldi	r20, 0x48	; 72
     716:	52 e4       	ldi	r21, 0x42	; 66
     718:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__cmpsf2>
     71c:	88 23       	and	r24, r24
     71e:	dc f0       	brlt	.+54     	; 0x756 <getJoystickDirection+0x94>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
     720:	be 01       	movw	r22, r28
     722:	88 27       	eor	r24, r24
     724:	77 fd       	sbrc	r23, 7
     726:	80 95       	com	r24
     728:	98 2f       	mov	r25, r24
     72a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     72e:	9b 01       	movw	r18, r22
     730:	ac 01       	movw	r20, r24
     732:	5f 77       	andi	r21, 0x7F	; 127
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__cmpsf2>
     73c:	88 23       	and	r24, r24
     73e:	2c f4       	brge	.+10     	; 0x74a <getJoystickDirection+0x88>
		if(y > 0){
     740:	1c 16       	cp	r1, r28
     742:	1d 06       	cpc	r1, r29
     744:	54 f4       	brge	.+20     	; 0x75a <getJoystickDirection+0x98>
			return UP;
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	09 c0       	rjmp	.+18     	; 0x75c <getJoystickDirection+0x9a>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	10 16       	cp	r1, r16
     74e:	11 06       	cpc	r1, r17
     750:	2c f0       	brlt	.+10     	; 0x75c <getJoystickDirection+0x9a>
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	03 c0       	rjmp	.+6      	; 0x75c <getJoystickDirection+0x9a>
}

direction getJoystickDirection(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
     756:	84 e0       	ldi	r24, 0x04	; 4
     758:	01 c0       	rjmp	.+2      	; 0x75c <getJoystickDirection+0x9a>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
     75a:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	1f 91       	pop	r17
     762:	0f 91       	pop	r16
     764:	ff 90       	pop	r15
     766:	ef 90       	pop	r14
     768:	df 90       	pop	r13
     76a:	cf 90       	pop	r12
     76c:	08 95       	ret

0000076e <getJoystickPosition>:
	slide.left = ((get_adc(1))*100)/255;
	slide.right = ((get_adc(0))*100)/255;
	return slide;
}

Joystick getJoystickPosition(){
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	cf 93       	push	r28
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
     778:	82 e0       	ldi	r24, 0x02	; 2
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 9f 02 	call	0x53e	; 0x53e <get_adc>
     780:	c0 90 0a 01 	lds	r12, 0x010A
     784:	d0 90 0b 01 	lds	r13, 0x010B
     788:	e0 90 0c 01 	lds	r14, 0x010C
     78c:	f0 90 0d 01 	lds	r15, 0x010D
     790:	bc 01       	movw	r22, r24
     792:	88 27       	eor	r24, r24
     794:	77 fd       	sbrc	r23, 7
     796:	80 95       	com	r24
     798:	98 2f       	mov	r25, r24
     79a:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     79e:	a7 01       	movw	r20, r14
     7a0:	96 01       	movw	r18, r12
     7a2:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__subsf3>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	48 ec       	ldi	r20, 0xC8	; 200
     7ac:	52 e4       	ldi	r21, 0x42	; 66
     7ae:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__mulsf3>
     7b2:	a7 01       	movw	r20, r14
     7b4:	96 01       	movw	r18, r12
     7b6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divsf3>
     7ba:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixsfsi>
     7be:	c6 2f       	mov	r28, r22
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
     7c0:	83 e0       	ldi	r24, 0x03	; 3
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	0e 94 9f 02 	call	0x53e	; 0x53e <get_adc>
     7c8:	c0 90 0e 01 	lds	r12, 0x010E
     7cc:	d0 90 0f 01 	lds	r13, 0x010F
     7d0:	e0 90 10 01 	lds	r14, 0x0110
     7d4:	f0 90 11 01 	lds	r15, 0x0111
     7d8:	bc 01       	movw	r22, r24
     7da:	88 27       	eor	r24, r24
     7dc:	77 fd       	sbrc	r23, 7
     7de:	80 95       	com	r24
     7e0:	98 2f       	mov	r25, r24
     7e2:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     7e6:	a7 01       	movw	r20, r14
     7e8:	96 01       	movw	r18, r12
     7ea:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__subsf3>
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	48 ec       	ldi	r20, 0xC8	; 200
     7f4:	52 e4       	ldi	r21, 0x42	; 66
     7f6:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__mulsf3>
     7fa:	a7 01       	movw	r20, r14
     7fc:	96 01       	movw	r18, r12
     7fe:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divsf3>
     802:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixsfsi>
     806:	f6 2e       	mov	r15, r22
	joy.D = getJoystickDirection(joy.X, joy.Y);
     808:	6c 2f       	mov	r22, r28
     80a:	77 27       	eor	r23, r23
     80c:	67 fd       	sbrc	r22, 7
     80e:	70 95       	com	r23
     810:	8f 2d       	mov	r24, r15
     812:	99 27       	eor	r25, r25
     814:	87 fd       	sbrc	r24, 7
     816:	90 95       	com	r25
     818:	0e 94 61 03 	call	0x6c2	; 0x6c2 <getJoystickDirection>
	return joy;
}
     81c:	6f 2d       	mov	r22, r15
     81e:	7c 2f       	mov	r23, r28
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	cf 91       	pop	r28
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	df 90       	pop	r13
     82a:	cf 90       	pop	r12
     82c:	08 95       	ret

0000082e <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	1f 92       	push	r1
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
     838:	28 ee       	ldi	r18, 0xE8	; 232
     83a:	33 e0       	ldi	r19, 0x03	; 3
     83c:	a9 01       	movw	r20, r18
     83e:	48 1b       	sub	r20, r24
     840:	59 0b       	sbc	r21, r25
     842:	ca 01       	movw	r24, r20
     844:	68 ec       	ldi	r22, 0xC8	; 200
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
     84c:	60 5d       	subi	r22, 0xD0	; 208
     84e:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
     858:	40 e0       	ldi	r20, 0x00	; 0
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	64 e5       	ldi	r22, 0x54	; 84
     85e:	71 e0       	ldi	r23, 0x01	; 1
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
     868:	42 e0       	ldi	r20, 0x02	; 2
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	62 e6       	ldi	r22, 0x62	; 98
     86e:	71 e0       	ldi	r23, 0x01	; 1
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
     878:	20 e6       	ldi	r18, 0x60	; 96
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	42 e0       	ldi	r20, 0x02	; 2
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	be 01       	movw	r22, r28
     882:	6f 5f       	subi	r22, 0xFF	; 255
     884:	7f 4f       	sbci	r23, 0xFF	; 255
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
	oled_sram_flush(0);
     88e:	80 e0       	ldi	r24, 0x00	; 0
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
     896:	0f 90       	pop	r0
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	08 95       	ret

0000089e <calibrateJoystick>:
			return LEFT;
		} 
	}
}

void calibrateJoystick(){
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     8b0:	e1 2c       	mov	r14, r1
     8b2:	f1 2c       	mov	r15, r1

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
     8b4:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
     8b6:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
     8b8:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
     8ba:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
     8bc:	0f 2e       	mov	r0, r31
     8be:	f8 ec       	ldi	r31, 0xC8	; 200
     8c0:	cf 2e       	mov	r12, r31
     8c2:	d1 2c       	mov	r13, r1
     8c4:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
     8c6:	82 e0       	ldi	r24, 0x02	; 2
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 9f 02 	call	0x53e	; 0x53e <get_adc>
     8ce:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 9f 02 	call	0x53e	; 0x53e <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
     8d8:	bc 16       	cp	r11, r28
     8da:	08 f4       	brcc	.+2      	; 0x8de <calibrateJoystick+0x40>
     8dc:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
     8de:	81 17       	cp	r24, r17
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <calibrateJoystick+0x46>
     8e2:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
     8e4:	08 17       	cp	r16, r24
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <calibrateJoystick+0x4c>
     8e8:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
     8ea:	db 15       	cp	r29, r11
     8ec:	08 f4       	brcc	.+2      	; 0x8f0 <calibrateJoystick+0x52>
     8ee:	db 2d       	mov	r29, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	97 e1       	ldi	r25, 0x17	; 23
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <calibrateJoystick+0x56>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <calibrateJoystick+0x5c>
     8fa:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
     8fc:	c7 01       	movw	r24, r14
     8fe:	b6 01       	movw	r22, r12
     900:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
     904:	89 2b       	or	r24, r25
     906:	19 f4       	brne	.+6      	; 0x90e <calibrateJoystick+0x70>
			calibration_visual_countdown(i);
     908:	c7 01       	movw	r24, r14
     90a:	0e 94 17 04 	call	0x82e	; 0x82e <calibration_visual_countdown>
void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     90e:	9f ef       	ldi	r25, 0xFF	; 255
     910:	e9 1a       	sub	r14, r25
     912:	f9 0a       	sbc	r15, r25
     914:	88 ee       	ldi	r24, 0xE8	; 232
     916:	e8 16       	cp	r14, r24
     918:	83 e0       	ldi	r24, 0x03	; 3
     91a:	f8 06       	cpc	r15, r24
     91c:	a1 f6       	brne	.-88     	; 0x8c6 <calibrateJoystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
     91e:	6d 2f       	mov	r22, r29
     920:	70 e0       	ldi	r23, 0x00	; 0
     922:	6c 1b       	sub	r22, r28
     924:	71 09       	sbc	r23, r1
     926:	88 27       	eor	r24, r24
     928:	77 fd       	sbrc	r23, 7
     92a:	80 95       	com	r24
     92c:	98 2f       	mov	r25, r24
     92e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	5f e3       	ldi	r21, 0x3F	; 63
     93a:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__mulsf3>
     93e:	60 93 0a 01 	sts	0x010A, r22
     942:	70 93 0b 01 	sts	0x010B, r23
     946:	80 93 0c 01 	sts	0x010C, r24
     94a:	90 93 0d 01 	sts	0x010D, r25
	xMean = (xMax - xMin)/2.0;
     94e:	60 2f       	mov	r22, r16
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	61 1b       	sub	r22, r17
     954:	71 09       	sbc	r23, r1
     956:	88 27       	eor	r24, r24
     958:	77 fd       	sbrc	r23, 7
     95a:	80 95       	com	r24
     95c:	98 2f       	mov	r25, r24
     95e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	5f e3       	ldi	r21, 0x3F	; 63
     96a:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__mulsf3>
     96e:	60 93 0e 01 	sts	0x010E, r22
     972:	70 93 0f 01 	sts	0x010F, r23
     976:	80 93 10 01 	sts	0x0110, r24
     97a:	90 93 11 01 	sts	0x0111, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
     97e:	1f 92       	push	r1
     980:	0f 93       	push	r16
     982:	1f 92       	push	r1
     984:	1f 93       	push	r17
     986:	1f 92       	push	r1
     988:	df 93       	push	r29
     98a:	1f 92       	push	r1
     98c:	cf 93       	push	r28
     98e:	8e e6       	ldi	r24, 0x6E	; 110
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 0b 12 	call	0x2416	; 0x2416 <printf>
     99a:	8d b7       	in	r24, 0x3d	; 61
     99c:	9e b7       	in	r25, 0x3e	; 62
     99e:	0a 96       	adiw	r24, 0x0a	; 10
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	9e bf       	out	0x3e, r25	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	8d bf       	out	0x3d, r24	; 61
}
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	1f 91       	pop	r17
     9b0:	0f 91       	pop	r16
     9b2:	ff 90       	pop	r15
     9b4:	ef 90       	pop	r14
     9b6:	df 90       	pop	r13
     9b8:	cf 90       	pop	r12
     9ba:	bf 90       	pop	r11
     9bc:	08 95       	ret

000009be <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     9be:	0e 94 43 02 	call	0x486	; 0x486 <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
     9c2:	80 ec       	ldi	r24, 0xC0	; 192
     9c4:	0e 94 35 02 	call	0x46a	; 0x46a <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     9c8:	0e 94 41 02 	call	0x482	; 0x482 <SPI_ss_high>
     9cc:	08 95       	ret

000009ce <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
     9ce:	cf 93       	push	r28
     9d0:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     9d2:	0e 94 43 02 	call	0x486	; 0x486 <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
     9d6:	83 e0       	ldi	r24, 0x03	; 3
     9d8:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	SPI_send(address);
     9dc:	8c 2f       	mov	r24, r28
     9de:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	uint8_t data = SPI_receive();
     9e2:	0e 94 3d 02 	call	0x47a	; 0x47a <SPI_receive>
     9e6:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     9e8:	0e 94 41 02 	call	0x482	; 0x482 <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
     9ec:	8c 2f       	mov	r24, r28
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
     9f2:	80 e8       	ldi	r24, 0x80	; 128
     9f4:	95 e2       	ldi	r25, 0x25	; 37
     9f6:	0e 94 f1 06 	call	0xde2	; 0xde2 <uartInit>
	
	//Start SPI driver
	SPI_init();
     9fa:	0e 94 30 02 	call	0x460	; 0x460 <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
     9fe:	0e 94 df 04 	call	0x9be	; 0x9be <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
     a02:	8e e0       	ldi	r24, 0x0E	; 14
     a04:	0e 94 e7 04 	call	0x9ce	; 0x9ce <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
     a08:	80 7e       	andi	r24, 0xE0	; 224
     a0a:	80 38       	cpi	r24, 0x80	; 128
     a0c:	59 f0       	breq	.+22     	; 0xa24 <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
     a0e:	8a e7       	ldi	r24, 0x7A	; 122
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	9f 93       	push	r25
     a14:	8f 93       	push	r24
     a16:	0e 94 0b 12 	call	0x2416	; 0x2416 <printf>
		return 1;
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	08 95       	ret
	}
	return 0;
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
}
     a28:	08 95       	ret

00000a2a <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	d8 2f       	mov	r29, r24
     a30:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     a32:	0e 94 43 02 	call	0x486	; 0x486 <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	SPI_send(address);
     a3c:	8d 2f       	mov	r24, r29
     a3e:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	SPI_send(data);
     a42:	8c 2f       	mov	r24, r28
     a44:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     a48:	0e 94 41 02 	call	0x482	; 0x482 <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	08 95       	ret

00000a52 <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
     a52:	cf 93       	push	r28
     a54:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     a56:	0e 94 43 02 	call	0x486	; 0x486 <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
     a5a:	8c 2f       	mov	r24, r28
     a5c:	83 70       	andi	r24, 0x03	; 3
     a5e:	81 30       	cpi	r24, 0x01	; 1
     a60:	51 f0       	breq	.+20     	; 0xa76 <MCP_rts+0x24>
     a62:	28 f0       	brcs	.+10     	; 0xa6e <MCP_rts+0x1c>
     a64:	82 30       	cpi	r24, 0x02	; 2
     a66:	59 f0       	breq	.+22     	; 0xa7e <MCP_rts+0x2c>
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	69 f0       	breq	.+26     	; 0xa86 <MCP_rts+0x34>
     a6c:	0f c0       	rjmp	.+30     	; 0xa8c <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
     a6e:	81 e8       	ldi	r24, 0x81	; 129
     a70:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
			break;
     a74:	0b c0       	rjmp	.+22     	; 0xa8c <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
     a76:	82 e8       	ldi	r24, 0x82	; 130
     a78:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
			break;
     a7c:	07 c0       	rjmp	.+14     	; 0xa8c <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
     a7e:	84 e8       	ldi	r24, 0x84	; 132
     a80:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
			break;
     a84:	03 c0       	rjmp	.+6      	; 0xa8c <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
     a86:	87 e8       	ldi	r24, 0x87	; 135
     a88:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     a8c:	0e 94 41 02 	call	0x482	; 0x482 <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
     a90:	cf 91       	pop	r28
     a92:	08 95       	ret

00000a94 <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     a94:	1f 93       	push	r17
     a96:	cf 93       	push	r28
     a98:	df 93       	push	r29
     a9a:	18 2f       	mov	r17, r24
     a9c:	d6 2f       	mov	r29, r22
     a9e:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     aa0:	0e 94 43 02 	call	0x486	; 0x486 <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
     aa4:	85 e0       	ldi	r24, 0x05	; 5
     aa6:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	SPI_send(address);
     aaa:	81 2f       	mov	r24, r17
     aac:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	SPI_send(mask);
     ab0:	8d 2f       	mov	r24, r29
     ab2:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	SPI_send(data);
     ab6:	8c 2f       	mov	r24, r28
     ab8:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     abc:	0e 94 41 02 	call	0x482	; 0x482 <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
     ac0:	df 91       	pop	r29
     ac2:	cf 91       	pop	r28
     ac4:	1f 91       	pop	r17
     ac6:	08 95       	ret

00000ac8 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     ac8:	e0 e0       	ldi	r30, 0x00	; 0
     aca:	f0 e1       	ldi	r31, 0x10	; 16
     acc:	8e ea       	ldi	r24, 0xAE	; 174
     ace:	80 83       	st	Z, r24
     ad0:	81 ea       	ldi	r24, 0xA1	; 161
     ad2:	80 83       	st	Z, r24
     ad4:	8a ed       	ldi	r24, 0xDA	; 218
     ad6:	80 83       	st	Z, r24
     ad8:	82 e1       	ldi	r24, 0x12	; 18
     ada:	80 83       	st	Z, r24
     adc:	88 ec       	ldi	r24, 0xC8	; 200
     ade:	80 83       	st	Z, r24
     ae0:	88 ea       	ldi	r24, 0xA8	; 168
     ae2:	80 83       	st	Z, r24
     ae4:	8f e3       	ldi	r24, 0x3F	; 63
     ae6:	80 83       	st	Z, r24
     ae8:	85 ed       	ldi	r24, 0xD5	; 213
     aea:	80 83       	st	Z, r24
     aec:	80 e8       	ldi	r24, 0x80	; 128
     aee:	80 83       	st	Z, r24
     af0:	81 e8       	ldi	r24, 0x81	; 129
     af2:	80 83       	st	Z, r24
     af4:	80 e5       	ldi	r24, 0x50	; 80
     af6:	80 83       	st	Z, r24
     af8:	89 ed       	ldi	r24, 0xD9	; 217
     afa:	80 83       	st	Z, r24
     afc:	81 e2       	ldi	r24, 0x21	; 33
     afe:	80 83       	st	Z, r24
     b00:	80 e2       	ldi	r24, 0x20	; 32
     b02:	80 83       	st	Z, r24
     b04:	82 e0       	ldi	r24, 0x02	; 2
     b06:	80 83       	st	Z, r24
     b08:	8b ed       	ldi	r24, 0xDB	; 219
     b0a:	80 83       	st	Z, r24
     b0c:	80 e3       	ldi	r24, 0x30	; 48
     b0e:	80 83       	st	Z, r24
     b10:	8d ea       	ldi	r24, 0xAD	; 173
     b12:	80 83       	st	Z, r24
     b14:	10 82       	st	Z, r1
     b16:	84 ea       	ldi	r24, 0xA4	; 164
     b18:	80 83       	st	Z, r24
     b1a:	86 ea       	ldi	r24, 0xA6	; 166
     b1c:	80 83       	st	Z, r24
     b1e:	8f ea       	ldi	r24, 0xAF	; 175
     b20:	80 83       	st	Z, r24
     b22:	08 95       	ret

00000b24 <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     b3a:	c0 e0       	ldi	r28, 0x00	; 0
     b3c:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
     b3e:	e1 2c       	mov	r14, r1
     b40:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     b42:	c1 2c       	mov	r12, r1
     b44:	68 94       	set
     b46:	dd 24       	eor	r13, r13
     b48:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     b4a:	00 e0       	ldi	r16, 0x00	; 0
     b4c:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
     b4e:	ce 01       	movw	r24, r28
     b50:	9e 01       	movw	r18, r28
     b52:	2f 77       	andi	r18, 0x7F	; 127
     b54:	33 27       	eor	r19, r19
     b56:	23 2b       	or	r18, r19
     b58:	39 f4       	brne	.+14     	; 0xb68 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
     b5a:	20 eb       	ldi	r18, 0xB0	; 176
     b5c:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     b5e:	f6 01       	movw	r30, r12
     b60:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
     b62:	ff ef       	ldi	r31, 0xFF	; 255
     b64:	ef 1a       	sub	r14, r31
     b66:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
     b68:	8a 0d       	add	r24, r10
     b6a:	9b 1d       	adc	r25, r11
     b6c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     b70:	f8 01       	movw	r30, r16
     b72:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     b74:	21 96       	adiw	r28, 0x01	; 1
     b76:	c1 15       	cp	r28, r1
     b78:	f4 e0       	ldi	r31, 0x04	; 4
     b7a:	df 07       	cpc	r29, r31
     b7c:	41 f7       	brne	.-48     	; 0xb4e <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	1f 91       	pop	r17
     b84:	0f 91       	pop	r16
     b86:	ff 90       	pop	r15
     b88:	ef 90       	pop	r14
     b8a:	df 90       	pop	r13
     b8c:	cf 90       	pop	r12
     b8e:	bf 90       	pop	r11
     b90:	af 90       	pop	r10
     b92:	08 95       	ret

00000b94 <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
     b94:	1f 92       	push	r1
     b96:	0f 92       	push	r0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	0f 92       	push	r0
     b9c:	11 24       	eor	r1, r1
     b9e:	2f 93       	push	r18
     ba0:	3f 93       	push	r19
     ba2:	4f 93       	push	r20
     ba4:	5f 93       	push	r21
     ba6:	6f 93       	push	r22
     ba8:	7f 93       	push	r23
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	af 93       	push	r26
     bb0:	bf 93       	push	r27
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
	oled_sram_flush(0);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
	TCNT1 = 0;
     bbe:	1d bc       	out	0x2d, r1	; 45
     bc0:	1c bc       	out	0x2c, r1	; 44
}
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	bf 91       	pop	r27
     bc8:	af 91       	pop	r26
     bca:	9f 91       	pop	r25
     bcc:	8f 91       	pop	r24
     bce:	7f 91       	pop	r23
     bd0:	6f 91       	pop	r22
     bd2:	5f 91       	pop	r21
     bd4:	4f 91       	pop	r20
     bd6:	3f 91       	pop	r19
     bd8:	2f 91       	pop	r18
     bda:	0f 90       	pop	r0
     bdc:	0f be       	out	0x3f, r0	; 63
     bde:	0f 90       	pop	r0
     be0:	1f 90       	pop	r1
     be2:	18 95       	reti

00000be4 <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
     be4:	af 92       	push	r10
     be6:	bf 92       	push	r11
     be8:	cf 92       	push	r12
     bea:	df 92       	push	r13
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
     bf8:	6a 01       	movw	r12, r20
     bfa:	d6 94       	lsr	r13
     bfc:	dc 2c       	mov	r13, r12
     bfe:	cc 24       	eor	r12, r12
     c00:	d7 94       	ror	r13
     c02:	c7 94       	ror	r12
     c04:	c8 0e       	add	r12, r24
     c06:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
     c08:	fb 01       	movw	r30, r22
     c0a:	e0 80       	ld	r14, Z
	while(c != '\0'){
     c0c:	ee 20       	and	r14, r14
     c0e:	69 f1       	breq	.+90     	; 0xc6a <oled_sram_write_string+0x86>
     c10:	5b 01       	movw	r10, r22
     c12:	ff ef       	ldi	r31, 0xFF	; 255
     c14:	af 1a       	sub	r10, r31
     c16:	bf 0a       	sbc	r11, r31
     c18:	15 c0       	rjmp	.+42     	; 0xc44 <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     c1a:	ce 01       	movw	r24, r28
     c1c:	f7 01       	movw	r30, r14
     c1e:	e8 0f       	add	r30, r24
     c20:	f9 1f       	adc	r31, r25
     c22:	64 91       	lpm	r22, Z
     c24:	ec 01       	movw	r28, r24
     c26:	21 96       	adiw	r28, 0x01	; 1
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
     c2e:	c0 17       	cp	r28, r16
     c30:	d1 07       	cpc	r29, r17
     c32:	99 f7       	brne	.-26     	; 0xc1a <oled_sram_write_string+0x36>
     c34:	48 e0       	ldi	r20, 0x08	; 8
     c36:	c4 0e       	add	r12, r20
     c38:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
     c3a:	f5 01       	movw	r30, r10
     c3c:	e1 90       	ld	r14, Z+
     c3e:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
     c40:	ee 20       	and	r14, r14
     c42:	99 f0       	breq	.+38     	; 0xc6a <oled_sram_write_string+0x86>
     c44:	86 01       	movw	r16, r12
     c46:	08 5f       	subi	r16, 0xF8	; 248
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	f1 2c       	mov	r15, r1
     c4c:	ee 0c       	add	r14, r14
     c4e:	ff 1c       	adc	r15, r15
     c50:	ee 0c       	add	r14, r14
     c52:	ff 1c       	adc	r15, r15
     c54:	ee 0c       	add	r14, r14
     c56:	ff 1c       	adc	r15, r15
     c58:	97 01       	movw	r18, r14
     c5a:	2c 19       	sub	r18, r12
     c5c:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     c5e:	c6 01       	movw	r24, r12
     c60:	a9 01       	movw	r20, r18
     c62:	40 59       	subi	r20, 0x90	; 144
     c64:	50 40       	sbci	r21, 0x00	; 0
     c66:	7a 01       	movw	r14, r20
     c68:	d9 cf       	rjmp	.-78     	; 0xc1c <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
     c7a:	bf 90       	pop	r11
     c7c:	af 90       	pop	r10
     c7e:	08 95       	ret

00000c80 <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	7b 01       	movw	r14, r22
	start = start + page*128+col;
     c8e:	8a 01       	movw	r16, r20
     c90:	16 95       	lsr	r17
     c92:	10 2f       	mov	r17, r16
     c94:	00 27       	eor	r16, r16
     c96:	17 95       	ror	r17
     c98:	07 95       	ror	r16
     c9a:	80 0f       	add	r24, r16
     c9c:	91 1f       	adc	r25, r17
     c9e:	8c 01       	movw	r16, r24
     ca0:	02 0f       	add	r16, r18
     ca2:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
     ca4:	c0 e0       	ldi	r28, 0x00	; 0
     ca6:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
     ca8:	d7 01       	movw	r26, r14
     caa:	ec 91       	ld	r30, X
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	b0 97       	sbiw	r30, 0x20	; 32
     cb0:	ee 0f       	add	r30, r30
     cb2:	ff 1f       	adc	r31, r31
     cb4:	ee 0f       	add	r30, r30
     cb6:	ff 1f       	adc	r31, r31
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	ec 0f       	add	r30, r28
     cbe:	fd 1f       	adc	r31, r29
     cc0:	e0 59       	subi	r30, 0x90	; 144
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	64 91       	lpm	r22, Z
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	ce 01       	movw	r24, r28
     cca:	80 0f       	add	r24, r16
     ccc:	91 1f       	adc	r25, r17
     cce:	0e 94 e6 06 	call	0xdcc	; 0xdcc <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
     cd2:	21 96       	adiw	r28, 0x01	; 1
     cd4:	c8 30       	cpi	r28, 0x08	; 8
     cd6:	d1 05       	cpc	r29, r1
     cd8:	39 f7       	brne	.-50     	; 0xca8 <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	ff 90       	pop	r15
     ce4:	ef 90       	pop	r14
     ce6:	08 95       	ret

00000ce8 <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
     cf0:	8b 01       	movw	r16, r22
     cf2:	16 95       	lsr	r17
     cf4:	10 2f       	mov	r17, r16
     cf6:	00 27       	eor	r16, r16
     cf8:	17 95       	ror	r17
     cfa:	07 95       	ror	r16
     cfc:	08 0f       	add	r16, r24
     cfe:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
     d00:	c0 e0       	ldi	r28, 0x00	; 0
     d02:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	ce 01       	movw	r24, r28
     d0a:	80 0f       	add	r24, r16
     d0c:	91 1f       	adc	r25, r17
     d0e:	0e 94 e6 06 	call	0xdcc	; 0xdcc <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
     d12:	21 96       	adiw	r28, 0x01	; 1
     d14:	c0 38       	cpi	r28, 0x80	; 128
     d16:	d1 05       	cpc	r29, r1
     d18:	a9 f7       	brne	.-22     	; 0xd04 <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	0f 91       	pop	r16
     d22:	08 95       	ret

00000d24 <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
     d2e:	c0 e0       	ldi	r28, 0x00	; 0
     d30:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
     d32:	be 01       	movw	r22, r28
     d34:	c8 01       	movw	r24, r16
     d36:	0e 94 74 06 	call	0xce8	; 0xce8 <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
     d3a:	21 96       	adiw	r28, 0x01	; 1
     d3c:	c8 30       	cpi	r28, 0x08	; 8
     d3e:	d1 05       	cpc	r29, r1
     d40:	c1 f7       	brne	.-16     	; 0xd32 <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	ea 01       	movw	r28, r20
	int page = y/8;
     d56:	9a 01       	movw	r18, r20
     d58:	dd 23       	and	r29, r29
     d5a:	14 f4       	brge	.+4      	; 0xd60 <oled_sram_write_bit+0x14>
     d5c:	29 5f       	subi	r18, 0xF9	; 249
     d5e:	3f 4f       	sbci	r19, 0xFF	; 255
     d60:	89 01       	movw	r16, r18
     d62:	15 95       	asr	r17
     d64:	07 95       	ror	r16
     d66:	15 95       	asr	r17
     d68:	07 95       	ror	r16
     d6a:	15 95       	asr	r17
     d6c:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
     d6e:	16 95       	lsr	r17
     d70:	10 2f       	mov	r17, r16
     d72:	00 27       	eor	r16, r16
     d74:	17 95       	ror	r17
     d76:	07 95       	ror	r16
     d78:	08 0f       	add	r16, r24
     d7a:	19 1f       	adc	r17, r25
     d7c:	06 0f       	add	r16, r22
     d7e:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
     d80:	c8 01       	movw	r24, r16
     d82:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
     d86:	ae 01       	movw	r20, r28
     d88:	47 70       	andi	r20, 0x07	; 7
     d8a:	50 78       	andi	r21, 0x80	; 128
     d8c:	55 23       	and	r21, r21
     d8e:	34 f4       	brge	.+12     	; 0xd9c <oled_sram_write_bit+0x50>
     d90:	41 50       	subi	r20, 0x01	; 1
     d92:	51 09       	sbc	r21, r1
     d94:	48 6f       	ori	r20, 0xF8	; 248
     d96:	5f 6f       	ori	r21, 0xFF	; 255
     d98:	4f 5f       	subi	r20, 0xFF	; 255
     d9a:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
     d9c:	21 e0       	ldi	r18, 0x01	; 1
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	b9 01       	movw	r22, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <oled_sram_write_bit+0x5c>
     da4:	66 0f       	add	r22, r22
     da6:	77 1f       	adc	r23, r23
     da8:	4a 95       	dec	r20
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <oled_sram_write_bit+0x58>
     dac:	ab 01       	movw	r20, r22
     dae:	48 2b       	or	r20, r24
	setSRAM(index, temp);
     db0:	64 2f       	mov	r22, r20
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	c8 01       	movw	r24, r16
     db6:	0e 94 e6 06 	call	0xdcc	; 0xdcc <setSRAM>
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	08 95       	ret

00000dc4 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
     dc4:	98 5e       	subi	r25, 0xE8	; 232
     dc6:	fc 01       	movw	r30, r24
     dc8:	80 81       	ld	r24, Z
}
     dca:	08 95       	ret

00000dcc <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
     dcc:	fc 01       	movw	r30, r24
     dce:	f8 5e       	subi	r31, 0xE8	; 232
     dd0:	80 81       	ld	r24, Z
		ext_ram[index] = value;
     dd2:	60 83       	st	Z, r22
		return temp;
}
     dd4:	08 95       	ret

00000dd6 <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     dd6:	5d 9b       	sbis	0x0b, 5	; 11
     dd8:	fe cf       	rjmp	.-4      	; 0xdd6 <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
     dda:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	08 95       	ret

00000de2 <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
     de2:	9c 01       	movw	r18, r24
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 eb       	ldi	r23, 0xB0	; 176
     dec:	84 e0       	ldi	r24, 0x04	; 4
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divmodsi4>
     df4:	21 50       	subi	r18, 0x01	; 1
     df6:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     df8:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
     dfa:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     dfc:	8a b1       	in	r24, 0x0a	; 10
     dfe:	88 61       	ori	r24, 0x18	; 24
     e00:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     e02:	80 b5       	in	r24, 0x20	; 32
     e04:	86 68       	ori	r24, 0x86	; 134
     e06:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	8b ee       	ldi	r24, 0xEB	; 235
     e0e:	96 e0       	ldi	r25, 0x06	; 6
     e10:	0e 94 c0 11 	call	0x2380	; 0x2380 <fdevopen>
	
	return 0;
}
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	08 95       	ret

00000e1a <play_draw>:
#include "../Driver_files/oled_driver.h"
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
     e22:	0f e1       	ldi	r16, 0x1F	; 31
     e24:	10 e0       	ldi	r17, 0x00	; 0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
     e26:	cf e3       	ldi	r28, 0x3F	; 63
     e28:	d0 e0       	ldi	r29, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = getJoystickPosition();
     e2a:	0e 94 b7 03 	call	0x76e	; 0x76e <getJoystickPosition>
		switch(joy.D){
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	71 f0       	breq	.+28     	; 0xe4e <play_draw+0x34>
     e32:	58 f0       	brcs	.+22     	; 0xe4a <play_draw+0x30>
     e34:	82 30       	cpi	r24, 0x02	; 2
     e36:	19 f0       	breq	.+6      	; 0xe3e <play_draw+0x24>
     e38:	83 30       	cpi	r24, 0x03	; 3
     e3a:	21 f0       	breq	.+8      	; 0xe44 <play_draw+0x2a>
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <play_draw+0x36>
			case NEUTRAL:
				break;
			case UP:
				y--;
     e3e:	01 50       	subi	r16, 0x01	; 1
     e40:	11 09       	sbc	r17, r1
				break;
     e42:	06 c0       	rjmp	.+12     	; 0xe50 <play_draw+0x36>
			case DOWN:
				y++;
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
     e48:	03 c0       	rjmp	.+6      	; 0xe50 <play_draw+0x36>
			case LEFT:
				x--;
     e4a:	21 97       	sbiw	r28, 0x01	; 1
				break;
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <play_draw+0x36>
			case RIGHT:
				x++;
     e4e:	21 96       	adiw	r28, 0x01	; 1
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
     e50:	a8 01       	movw	r20, r16
     e52:	be 01       	movw	r22, r28
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
		oled_sram_flush(0);
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	8f e7       	ldi	r24, 0x7F	; 127
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <play_draw+0x50>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <play_draw+0x5a>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <play_draw+0x5c>
     e76:	d9 cf       	rjmp	.-78     	; 0xe2a <play_draw+0x10>

00000e78 <racketHit>:

typedef struct{
	int pos; // from 0 to 45 (16 in width)
} Racket;

int racketHit(Ball *ball, int racketPos){
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	cf 93       	push	r28
     e82:	df 93       	push	r29
     e84:	eb 01       	movw	r28, r22
	if (ball->posY >= racketPos && ball->posY < racketPos + RACKETSIZE )
     e86:	fc 01       	movw	r30, r24
     e88:	c2 80       	ldd	r12, Z+2	; 0x02
     e8a:	d3 80       	ldd	r13, Z+3	; 0x03
     e8c:	e4 80       	ldd	r14, Z+4	; 0x04
     e8e:	f5 80       	ldd	r15, Z+5	; 0x05
     e90:	88 27       	eor	r24, r24
     e92:	77 fd       	sbrc	r23, 7
     e94:	80 95       	com	r24
     e96:	98 2f       	mov	r25, r24
     e98:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	c7 01       	movw	r24, r14
     ea2:	b6 01       	movw	r22, r12
     ea4:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__gesf2>
     ea8:	88 23       	and	r24, r24
     eaa:	bc f0       	brlt	.+46     	; 0xeda <racketHit+0x62>
     eac:	be 01       	movw	r22, r28
     eae:	60 5f       	subi	r22, 0xF0	; 240
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	88 27       	eor	r24, r24
     eb4:	77 fd       	sbrc	r23, 7
     eb6:	80 95       	com	r24
     eb8:	98 2f       	mov	r25, r24
     eba:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     ebe:	9b 01       	movw	r18, r22
     ec0:	ac 01       	movw	r20, r24
     ec2:	d1 e0       	ldi	r29, 0x01	; 1
     ec4:	c0 e0       	ldi	r28, 0x00	; 0
     ec6:	c7 01       	movw	r24, r14
     ec8:	b6 01       	movw	r22, r12
     eca:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__cmpsf2>
     ece:	88 23       	and	r24, r24
     ed0:	0c f0       	brlt	.+2      	; 0xed4 <racketHit+0x5c>
     ed2:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
     ed4:	8d 2f       	mov	r24, r29
     ed6:	9c 2f       	mov	r25, r28
     ed8:	02 c0       	rjmp	.+4      	; 0xede <racketHit+0x66>
	return 0;
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	90 e0       	ldi	r25, 0x00	; 0
}
     ede:	df 91       	pop	r29
     ee0:	cf 91       	pop	r28
     ee2:	ff 90       	pop	r15
     ee4:	ef 90       	pop	r14
     ee6:	df 90       	pop	r13
     ee8:	cf 90       	pop	r12
     eea:	08 95       	ret

00000eec <updateBallAngle>:

void updateBallAngle(Ball *ball, int racketPos){
     eec:	cf 92       	push	r12
     eee:	df 92       	push	r13
     ef0:	ef 92       	push	r14
     ef2:	ff 92       	push	r15
     ef4:	0f 93       	push	r16
     ef6:	1f 93       	push	r17
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	ec 01       	movw	r28, r24
     efe:	8b 01       	movw	r16, r22
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
	int newBallAngle = ball->angle + hitPos * 45;
     f00:	6e 81       	ldd	r22, Y+6	; 0x06
     f02:	7f 81       	ldd	r23, Y+7	; 0x07
     f04:	88 27       	eor	r24, r24
     f06:	77 fd       	sbrc	r23, 7
     f08:	80 95       	com	r24
     f0a:	98 2f       	mov	r25, r24
     f0c:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     f10:	6b 01       	movw	r12, r22
     f12:	7c 01       	movw	r14, r24
		return 1;
	return 0;
}

void updateBallAngle(Ball *ball, int racketPos){
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
     f14:	b8 01       	movw	r22, r16
     f16:	88 27       	eor	r24, r24
     f18:	77 fd       	sbrc	r23, 7
     f1a:	80 95       	com	r24
     f1c:	98 2f       	mov	r25, r24
     f1e:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
     f22:	9b 01       	movw	r18, r22
     f24:	ac 01       	movw	r20, r24
     f26:	6a 81       	ldd	r22, Y+2	; 0x02
     f28:	7b 81       	ldd	r23, Y+3	; 0x03
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__subsf3>
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e0       	ldi	r20, 0x00	; 0
     f38:	51 e4       	ldi	r21, 0x41	; 65
     f3a:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__subsf3>
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	5e e3       	ldi	r21, 0x3E	; 62
     f46:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__mulsf3>
	int newBallAngle = ball->angle + hitPos * 45;
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	44 e3       	ldi	r20, 0x34	; 52
     f50:	52 e4       	ldi	r21, 0x42	; 66
     f52:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__mulsf3>
     f56:	9b 01       	movw	r18, r22
     f58:	ac 01       	movw	r20, r24
     f5a:	c7 01       	movw	r24, r14
     f5c:	b6 01       	movw	r22, r12
     f5e:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__addsf3>
     f62:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixsfsi>
	if(newBallAngle > 45) ball->angle = 45;
     f66:	6e 32       	cpi	r22, 0x2E	; 46
     f68:	71 05       	cpc	r23, r1
     f6a:	2c f0       	brlt	.+10     	; 0xf76 <updateBallAngle+0x8a>
     f6c:	8d e2       	ldi	r24, 0x2D	; 45
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	9f 83       	std	Y+7, r25	; 0x07
     f72:	8e 83       	std	Y+6, r24	; 0x06
     f74:	0b c0       	rjmp	.+22     	; 0xf8c <updateBallAngle+0xa0>
	else if(newBallAngle < -45) ball->angle = 45;
     f76:	63 3d       	cpi	r22, 0xD3	; 211
     f78:	4f ef       	ldi	r20, 0xFF	; 255
     f7a:	74 07       	cpc	r23, r20
     f7c:	2c f4       	brge	.+10     	; 0xf88 <updateBallAngle+0x9c>
     f7e:	8d e2       	ldi	r24, 0x2D	; 45
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9f 83       	std	Y+7, r25	; 0x07
     f84:	8e 83       	std	Y+6, r24	; 0x06
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <updateBallAngle+0xa0>
	else ball->angle = newBallAngle;
     f88:	7f 83       	std	Y+7, r23	; 0x07
     f8a:	6e 83       	std	Y+6, r22	; 0x06
}
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	ff 90       	pop	r15
     f96:	ef 90       	pop	r14
     f98:	df 90       	pop	r13
     f9a:	cf 90       	pop	r12
     f9c:	08 95       	ret

00000f9e <ballInit>:

void ballInit(Ball *ball){
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	ec 01       	movw	r28, r24
	ball->dir = rand() % 2;
     fa4:	0e 94 b0 11 	call	0x2360	; 0x2360 <rand>
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	90 78       	andi	r25, 0x80	; 128
     fac:	99 23       	and	r25, r25
     fae:	24 f4       	brge	.+8      	; 0xfb8 <ballInit+0x1a>
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	8e 6f       	ori	r24, 0xFE	; 254
     fb4:	9f 6f       	ori	r25, 0xFF	; 255
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	99 87       	std	Y+9, r25	; 0x09
     fba:	88 87       	std	Y+8, r24	; 0x08
	ball->angle = (rand() % 91) - 45;
     fbc:	0e 94 b0 11 	call	0x2360	; 0x2360 <rand>
     fc0:	6b e5       	ldi	r22, 0x5B	; 91
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
     fc8:	8d 97       	sbiw	r24, 0x2d	; 45
     fca:	9f 83       	std	Y+7, r25	; 0x07
     fcc:	8e 83       	std	Y+6, r24	; 0x06
	ball->posX = 63;
     fce:	8f e3       	ldi	r24, 0x3F	; 63
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	99 83       	std	Y+1, r25	; 0x01
     fd4:	88 83       	st	Y, r24
}
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	08 95       	ret

00000fdc <updateBallPosition>:

void updateBallPosition(Ball *ball){
     fdc:	cf 92       	push	r12
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	ec 01       	movw	r28, r24
	float tempPosY = ball->posY + ((float)(ball->angle)/45);
     fee:	0e 81       	ldd	r16, Y+6	; 0x06
     ff0:	1f 81       	ldd	r17, Y+7	; 0x07
     ff2:	b8 01       	movw	r22, r16
     ff4:	88 27       	eor	r24, r24
     ff6:	77 fd       	sbrc	r23, 7
     ff8:	80 95       	com	r24
     ffa:	98 2f       	mov	r25, r24
     ffc:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <__floatsisf>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	44 e3       	ldi	r20, 0x34	; 52
    1006:	52 e4       	ldi	r21, 0x42	; 66
    1008:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__divsf3>
    100c:	2a 81       	ldd	r18, Y+2	; 0x02
    100e:	3b 81       	ldd	r19, Y+3	; 0x03
    1010:	4c 81       	ldd	r20, Y+4	; 0x04
    1012:	5d 81       	ldd	r21, Y+5	; 0x05
    1014:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__addsf3>
    1018:	6b 01       	movw	r12, r22
    101a:	7c 01       	movw	r14, r24
	
	//hits the wall
	if (tempPosY > 63){ 
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	4c e7       	ldi	r20, 0x7C	; 124
    1022:	52 e4       	ldi	r21, 0x42	; 66
    1024:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <__gesf2>
    1028:	18 16       	cp	r1, r24
    102a:	d4 f4       	brge	.+52     	; 0x1060 <updateBallPosition+0x84>
		ball->posY = 63 - (tempPosY - 63);
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	4c e7       	ldi	r20, 0x7C	; 124
    1032:	52 e4       	ldi	r21, 0x42	; 66
    1034:	c7 01       	movw	r24, r14
    1036:	b6 01       	movw	r22, r12
    1038:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__subsf3>
    103c:	9b 01       	movw	r18, r22
    103e:	ac 01       	movw	r20, r24
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	70 e0       	ldi	r23, 0x00	; 0
    1044:	8c e7       	ldi	r24, 0x7C	; 124
    1046:	92 e4       	ldi	r25, 0x42	; 66
    1048:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <__subsf3>
    104c:	6a 83       	std	Y+2, r22	; 0x02
    104e:	7b 83       	std	Y+3, r23	; 0x03
    1050:	8c 83       	std	Y+4, r24	; 0x04
    1052:	9d 83       	std	Y+5, r25	; 0x05
		ball->angle *= -1;
    1054:	11 95       	neg	r17
    1056:	01 95       	neg	r16
    1058:	11 09       	sbc	r17, r1
    105a:	1f 83       	std	Y+7, r17	; 0x07
    105c:	0e 83       	std	Y+6, r16	; 0x06
    105e:	1b c0       	rjmp	.+54     	; 0x1096 <updateBallPosition+0xba>
	}
	else if (tempPosY < 0){
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	c7 01       	movw	r24, r14
    1068:	b6 01       	movw	r22, r12
    106a:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__cmpsf2>
    106e:	88 23       	and	r24, r24
    1070:	74 f4       	brge	.+28     	; 0x108e <updateBallPosition+0xb2>
		ball->posY = -1*tempPosY;
    1072:	f7 fa       	bst	r15, 7
    1074:	f0 94       	com	r15
    1076:	f7 f8       	bld	r15, 7
    1078:	f0 94       	com	r15
    107a:	ca 82       	std	Y+2, r12	; 0x02
    107c:	db 82       	std	Y+3, r13	; 0x03
    107e:	ec 82       	std	Y+4, r14	; 0x04
    1080:	fd 82       	std	Y+5, r15	; 0x05
		ball->angle *= -1;
    1082:	11 95       	neg	r17
    1084:	01 95       	neg	r16
    1086:	11 09       	sbc	r17, r1
    1088:	1f 83       	std	Y+7, r17	; 0x07
    108a:	0e 83       	std	Y+6, r16	; 0x06
    108c:	04 c0       	rjmp	.+8      	; 0x1096 <updateBallPosition+0xba>
	}
	else ball->posY = tempPosY;
    108e:	ca 82       	std	Y+2, r12	; 0x02
    1090:	db 82       	std	Y+3, r13	; 0x03
    1092:	ec 82       	std	Y+4, r14	; 0x04
    1094:	fd 82       	std	Y+5, r15	; 0x05
	if(ball->dir == RIGHT)
    1096:	88 85       	ldd	r24, Y+8	; 0x08
    1098:	99 85       	ldd	r25, Y+9	; 0x09
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	31 f4       	brne	.+12     	; 0x10aa <updateBallPosition+0xce>
		ball->posX++;
    109e:	88 81       	ld	r24, Y
    10a0:	99 81       	ldd	r25, Y+1	; 0x01
    10a2:	01 96       	adiw	r24, 0x01	; 1
    10a4:	99 83       	std	Y+1, r25	; 0x01
    10a6:	88 83       	st	Y, r24
    10a8:	05 c0       	rjmp	.+10     	; 0x10b4 <updateBallPosition+0xd8>
	else ball->posX--;
    10aa:	88 81       	ld	r24, Y
    10ac:	99 81       	ldd	r25, Y+1	; 0x01
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	99 83       	std	Y+1, r25	; 0x01
    10b2:	88 83       	st	Y, r24
}
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	08 95       	ret

000010c6 <updateSliderPosition>:
void updateSliderPosition(Slider *slide){
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	ec 01       	movw	r28, r24
	*slide = getSliderPosition();
    10cc:	0e 94 3a 03 	call	0x674	; 0x674 <getSliderPosition>
    10d0:	79 83       	std	Y+1, r23	; 0x01
    10d2:	8a 83       	std	Y+2, r24	; 0x02
    10d4:	9b 83       	std	Y+3, r25	; 0x03
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
    10d6:	4f e2       	ldi	r20, 0x2F	; 47
    10d8:	46 9f       	mul	r20, r22
    10da:	c0 01       	movw	r24, r0
    10dc:	11 24       	eor	r1, r1
    10de:	24 e6       	ldi	r18, 0x64	; 100
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	b9 01       	movw	r22, r18
    10e4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
    10e8:	68 83       	st	Y, r22
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
    10ec:	48 9f       	mul	r20, r24
    10ee:	c0 01       	movw	r24, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	b9 01       	movw	r22, r18
    10f4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
    10f8:	69 83       	std	Y+1, r22	; 0x01
} 
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	08 95       	ret

00001100 <updateScreen>:
			printEndScreen("Player Left won!");
		}
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
    1100:	cf 92       	push	r12
    1102:	df 92       	push	r13
    1104:	ef 92       	push	r14
    1106:	ff 92       	push	r15
    1108:	0f 93       	push	r16
    110a:	1f 93       	push	r17
    110c:	cf 93       	push	r28
    110e:	df 93       	push	r29
    1110:	cd b7       	in	r28, 0x3d	; 61
    1112:	de b7       	in	r29, 0x3e	; 62
    1114:	2a 97       	sbiw	r28, 0x0a	; 10
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	09 83       	std	Y+1, r16	; 0x01
    1122:	1a 83       	std	Y+2, r17	; 0x02
    1124:	2b 83       	std	Y+3, r18	; 0x03
    1126:	3c 83       	std	Y+4, r19	; 0x04
    1128:	4d 83       	std	Y+5, r20	; 0x05
    112a:	5e 83       	std	Y+6, r21	; 0x06
	oled_sram_clear_screen(0);
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	for (int i = 0; i < RACKETSIZE; i++){
    1134:	00 e0       	ldi	r16, 0x00	; 0
    1136:	10 e0       	ldi	r17, 0x00	; 0
    1138:	a8 01       	movw	r20, r16
    113a:	4e 0d       	add	r20, r14
    113c:	5f 1d       	adc	r21, r15
		oled_sram_write_bit(0, 1, leftRacketPos + i);
    113e:	61 e0       	ldi	r22, 0x01	; 1
    1140:	70 e0       	ldi	r23, 0x00	; 0
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
    114a:	a8 01       	movw	r20, r16
    114c:	4c 0d       	add	r20, r12
    114e:	5d 1d       	adc	r21, r13
		oled_sram_write_bit(0,127, rightRacketPos + i);
    1150:	6f e7       	ldi	r22, 0x7F	; 127
    1152:	70 e0       	ldi	r23, 0x00	; 0
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
    115c:	0f 5f       	subi	r16, 0xFF	; 255
    115e:	1f 4f       	sbci	r17, 0xFF	; 255
    1160:	00 31       	cpi	r16, 0x10	; 16
    1162:	11 05       	cpc	r17, r1
    1164:	49 f7       	brne	.-46     	; 0x1138 <updateScreen+0x38>
    1166:	00 e0       	ldi	r16, 0x00	; 0
    1168:	10 e0       	ldi	r17, 0x00	; 0
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	a9 01       	movw	r20, r18
    1170:	6b 81       	ldd	r22, Y+3	; 0x03
    1172:	7c 81       	ldd	r23, Y+4	; 0x04
    1174:	8d 81       	ldd	r24, Y+5	; 0x05
    1176:	9e 81       	ldd	r25, Y+6	; 0x06
    1178:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__addsf3>
    117c:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixsfsi>
    1180:	29 81       	ldd	r18, Y+1	; 0x01
    1182:	3a 81       	ldd	r19, Y+2	; 0x02
    1184:	20 0f       	add	r18, r16
    1186:	31 1f       	adc	r19, r17
    1188:	ab 01       	movw	r20, r22
    118a:	b9 01       	movw	r22, r18
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e8       	ldi	r20, 0x80	; 128
    119a:	5f e3       	ldi	r21, 0x3F	; 63
    119c:	6b 81       	ldd	r22, Y+3	; 0x03
    119e:	7c 81       	ldd	r23, Y+4	; 0x04
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <__addsf3>
    11a8:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__fixsfsi>
    11ac:	29 81       	ldd	r18, Y+1	; 0x01
    11ae:	3a 81       	ldd	r19, Y+2	; 0x02
    11b0:	20 0f       	add	r18, r16
    11b2:	31 1f       	adc	r19, r17
    11b4:	ab 01       	movw	r20, r22
    11b6:	b9 01       	movw	r22, r18
    11b8:	80 e0       	ldi	r24, 0x00	; 0
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
    11c0:	0f 5f       	subi	r16, 0xFF	; 255
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	02 30       	cpi	r16, 0x02	; 2
    11c6:	11 05       	cpc	r17, r1
    11c8:	81 f6       	brne	.-96     	; 0x116a <updateScreen+0x6a>
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
}
    11d2:	2a 96       	adiw	r28, 0x0a	; 10
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	f8 94       	cli
    11d8:	de bf       	out	0x3e, r29	; 62
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	cd bf       	out	0x3d, r28	; 61
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	ff 90       	pop	r15
    11e8:	ef 90       	pop	r14
    11ea:	df 90       	pop	r13
    11ec:	cf 90       	pop	r12
    11ee:	08 95       	ret

000011f0 <playRound>:
	*slide = getSliderPosition();
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
} 

int playRound(){
    11f0:	af 92       	push	r10
    11f2:	bf 92       	push	r11
    11f4:	cf 92       	push	r12
    11f6:	df 92       	push	r13
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	0f 93       	push	r16
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	2e 97       	sbiw	r28, 0x0e	; 14
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
	Ball ball;
	Slider slide;
	ballInit(&ball);
    1214:	ce 01       	movw	r24, r28
    1216:	01 96       	adiw	r24, 0x01	; 1
    1218:	0e 94 cf 07 	call	0xf9e	; 0xf9e <ballInit>
				return LEFT;
			}
		}
		else if (ball.posX == 1){
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
    121c:	aa 24       	eor	r10, r10
    121e:	a3 94       	inc	r10
    1220:	b1 2c       	mov	r11, r1
	Ball ball;
	Slider slide;
	ballInit(&ball);
	int time = 25;
	while(1){
		updateSliderPosition(&slide);
    1222:	ce 01       	movw	r24, r28
    1224:	0b 96       	adiw	r24, 0x0b	; 11
    1226:	0e 94 63 08 	call	0x10c6	; 0x10c6 <updateSliderPosition>
		if (ball.posX >= 126){
    122a:	09 81       	ldd	r16, Y+1	; 0x01
    122c:	1a 81       	ldd	r17, Y+2	; 0x02
    122e:	0e 37       	cpi	r16, 0x7E	; 126
    1230:	11 05       	cpc	r17, r1
    1232:	94 f0       	brlt	.+36     	; 0x1258 <playRound+0x68>
			if (racketHit(&ball, slide.right) ){
    1234:	ec 84       	ldd	r14, Y+12	; 0x0c
    1236:	f1 2c       	mov	r15, r1
    1238:	b7 01       	movw	r22, r14
    123a:	ce 01       	movw	r24, r28
    123c:	01 96       	adiw	r24, 0x01	; 1
    123e:	0e 94 3c 07 	call	0xe78	; 0xe78 <racketHit>
    1242:	8c 01       	movw	r16, r24
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	a9 f1       	breq	.+106    	; 0x12b2 <playRound+0xc2>
				ball.dir = LEFT;
    1248:	1a 86       	std	Y+10, r1	; 0x0a
    124a:	19 86       	std	Y+9, r1	; 0x09
				updateBallAngle(&ball, slide.right);
    124c:	b7 01       	movw	r22, r14
    124e:	ce 01       	movw	r24, r28
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	0e 94 76 07 	call	0xeec	; 0xeec <updateBallAngle>
    1256:	13 c0       	rjmp	.+38     	; 0x127e <playRound+0x8e>
			}
			else{
				return LEFT;
			}
		}
		else if (ball.posX == 1){
    1258:	01 30       	cpi	r16, 0x01	; 1
    125a:	11 05       	cpc	r17, r1
    125c:	81 f4       	brne	.+32     	; 0x127e <playRound+0x8e>
			if (racketHit(&ball, slide.left) ){
    125e:	eb 84       	ldd	r14, Y+11	; 0x0b
    1260:	f1 2c       	mov	r15, r1
    1262:	b7 01       	movw	r22, r14
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	0e 94 3c 07 	call	0xe78	; 0xe78 <racketHit>
    126c:	89 2b       	or	r24, r25
    126e:	09 f1       	breq	.+66     	; 0x12b2 <playRound+0xc2>
				ball.dir = RIGHT;
    1270:	ba 86       	std	Y+10, r11	; 0x0a
    1272:	a9 86       	std	Y+9, r10	; 0x09
				updateBallAngle(&ball, slide.left);
    1274:	b7 01       	movw	r22, r14
    1276:	ce 01       	movw	r24, r28
    1278:	01 96       	adiw	r24, 0x01	; 1
    127a:	0e 94 76 07 	call	0xeec	; 0xeec <updateBallAngle>
			}
			else {
				return RIGHT;
			}
		}
		updateBallPosition(&ball);
    127e:	ce 01       	movw	r24, r28
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	0e 94 ee 07 	call	0xfdc	; 0xfdc <updateBallPosition>
		updateScreen(ball, slide.left, slide.right);
    1286:	cc 84       	ldd	r12, Y+12	; 0x0c
    1288:	d1 2c       	mov	r13, r1
    128a:	eb 84       	ldd	r14, Y+11	; 0x0b
    128c:	f1 2c       	mov	r15, r1
    128e:	09 81       	ldd	r16, Y+1	; 0x01
    1290:	1a 81       	ldd	r17, Y+2	; 0x02
    1292:	2b 81       	ldd	r18, Y+3	; 0x03
    1294:	3c 81       	ldd	r19, Y+4	; 0x04
    1296:	4d 81       	ldd	r20, Y+5	; 0x05
    1298:	5e 81       	ldd	r21, Y+6	; 0x06
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	78 85       	ldd	r23, Y+8	; 0x08
    129e:	89 85       	ldd	r24, Y+9	; 0x09
    12a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a2:	0e 94 80 08 	call	0x1100	; 0x1100 <updateScreen>
    12a6:	89 e9       	ldi	r24, 0x99	; 153
    12a8:	99 e0       	ldi	r25, 0x09	; 9
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <playRound+0xba>
    12ae:	00 c0       	rjmp	.+0      	; 0x12b0 <playRound+0xc0>
    12b0:	b8 cf       	rjmp	.-144    	; 0x1222 <playRound+0x32>
		_delay_ms(2);
	}
}
    12b2:	c8 01       	movw	r24, r16
    12b4:	2e 96       	adiw	r28, 0x0e	; 14
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	af 90       	pop	r10
    12d4:	08 95       	ret

000012d6 <printScore>:
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
}
void printScore(int leftPoints, int rightPoints){
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	00 d0       	rcall	.+0      	; 0x12e0 <printScore+0xa>
    12e0:	1f 92       	push	r1
    12e2:	cd b7       	in	r28, 0x3d	; 61
    12e4:	de b7       	in	r29, 0x3e	; 62
    12e6:	08 2f       	mov	r16, r24
    12e8:	16 2f       	mov	r17, r22
	oled_sram_clear_screen(0);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	char lp = leftPoints + '0';
    12f2:	00 5d       	subi	r16, 0xD0	; 208
    12f4:	09 83       	std	Y+1, r16	; 0x01
	char mid = '-';
    12f6:	8d e2       	ldi	r24, 0x2D	; 45
    12f8:	8a 83       	std	Y+2, r24	; 0x02
	char rp = rightPoints + '0';
    12fa:	10 5d       	subi	r17, 0xD0	; 208
    12fc:	1b 83       	std	Y+3, r17	; 0x03
	oled_sram_write_char(0, &lp, 2, 56);
    12fe:	28 e3       	ldi	r18, 0x38	; 56
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	42 e0       	ldi	r20, 0x02	; 2
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	be 01       	movw	r22, r28
    1308:	6f 5f       	subi	r22, 0xFF	; 255
    130a:	7f 4f       	sbci	r23, 0xFF	; 255
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
	oled_sram_write_char(0, &mid, 2, 64);
    1314:	20 e4       	ldi	r18, 0x40	; 64
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	42 e0       	ldi	r20, 0x02	; 2
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	be 01       	movw	r22, r28
    131e:	6e 5f       	subi	r22, 0xFE	; 254
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
	oled_sram_write_char(0, &rp, 2, 72);
    132a:	28 e4       	ldi	r18, 0x48	; 72
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	42 e0       	ldi	r20, 0x02	; 2
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	be 01       	movw	r22, r28
    1334:	6d 5f       	subi	r22, 0xFD	; 253
    1336:	7f 4f       	sbci	r23, 0xFF	; 255
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
	oled_sram_flush(0);	
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
}
    1348:	0f 90       	pop	r0
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	08 95       	ret

00001358 <printEndScreen>:
void printEndScreen(char *endMessage){
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	8c 01       	movw	r16, r24
	oled_sram_clear_screen(0);
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	for(int i = 0; i < 10; i++){
    136a:	c0 e0       	ldi	r28, 0x00	; 0
    136c:	d0 e0       	ldi	r29, 0x00	; 0
		if( i % 2 ){
    136e:	c0 ff       	sbrs	r28, 0
    1370:	11 c0       	rjmp	.+34     	; 0x1394 <printEndScreen+0x3c>
			oled_sram_write_string(0, endMessage, 2);
    1372:	42 e0       	ldi	r20, 0x02	; 2
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	b8 01       	movw	r22, r16
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <oled_sram_write_string>
    1380:	8f ef       	ldi	r24, 0xFF	; 255
    1382:	9f e7       	ldi	r25, 0x7F	; 127
    1384:	24 e0       	ldi	r18, 0x04	; 4
    1386:	81 50       	subi	r24, 0x01	; 1
    1388:	90 40       	sbci	r25, 0x00	; 0
    138a:	20 40       	sbci	r18, 0x00	; 0
    138c:	e1 f7       	brne	.-8      	; 0x1386 <printEndScreen+0x2e>
    138e:	00 c0       	rjmp	.+0      	; 0x1390 <printEndScreen+0x38>
    1390:	00 00       	nop
    1392:	09 c0       	rjmp	.+18     	; 0x13a6 <printEndScreen+0x4e>
    1394:	8f ef       	ldi	r24, 0xFF	; 255
    1396:	9f e7       	ldi	r25, 0x7F	; 127
    1398:	24 e0       	ldi	r18, 0x04	; 4
    139a:	81 50       	subi	r24, 0x01	; 1
    139c:	90 40       	sbci	r25, 0x00	; 0
    139e:	20 40       	sbci	r18, 0x00	; 0
    13a0:	e1 f7       	brne	.-8      	; 0x139a <printEndScreen+0x42>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <printEndScreen+0x4c>
    13a4:	00 00       	nop
	oled_sram_write_char(0, &rp, 2, 72);
	oled_sram_flush(0);	
}
void printEndScreen(char *endMessage){
	oled_sram_clear_screen(0);
	for(int i = 0; i < 10; i++){
    13a6:	21 96       	adiw	r28, 0x01	; 1
    13a8:	ca 30       	cpi	r28, 0x0A	; 10
    13aa:	d1 05       	cpc	r29, r1
    13ac:	01 f7       	brne	.-64     	; 0x136e <printEndScreen+0x16>
			oled_sram_write_string(0, endMessage, 2);
			_delay_ms(300);
		}
		else _delay_ms(300);
	}
	oled_sram_flush(0);	
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
    13ba:	1f 91       	pop	r17
    13bc:	0f 91       	pop	r16
    13be:	08 95       	ret

000013c0 <playPong>:

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	}
}

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
    13c8:	00 e0       	ldi	r16, 0x00	; 0
    13ca:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(2);
	}
}

void playPong(){
	int pointLeft = 0;
    13cc:	c0 e0       	ldi	r28, 0x00	; 0
    13ce:	d0 e0       	ldi	r29, 0x00	; 0
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
	while(1){
		printScore(pointLeft, pointRight);
    13d0:	b8 01       	movw	r22, r16
    13d2:	ce 01       	movw	r24, r28
    13d4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <printScore>
    13d8:	2f ef       	ldi	r18, 0xFF	; 255
    13da:	8f ef       	ldi	r24, 0xFF	; 255
    13dc:	9d e1       	ldi	r25, 0x1D	; 29
    13de:	21 50       	subi	r18, 0x01	; 1
    13e0:	80 40       	sbci	r24, 0x00	; 0
    13e2:	90 40       	sbci	r25, 0x00	; 0
    13e4:	e1 f7       	brne	.-8      	; 0x13de <playPong+0x1e>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <playPong+0x28>
    13e8:	00 00       	nop
		_delay_ms(2000);
		point = playRound();
    13ea:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <playRound>
		if (point == LEFT) pointLeft++;
    13ee:	89 2b       	or	r24, r25
    13f0:	11 f4       	brne	.+4      	; 0x13f6 <playPong+0x36>
    13f2:	21 96       	adiw	r28, 0x01	; 1
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <playPong+0x3a>
		else pointRight++;
    13f6:	0f 5f       	subi	r16, 0xFF	; 255
    13f8:	1f 4f       	sbci	r17, 0xFF	; 255
		if(pointLeft == 5){
    13fa:	c5 30       	cpi	r28, 0x05	; 5
    13fc:	d1 05       	cpc	r29, r1
    13fe:	29 f4       	brne	.+10     	; 0x140a <playPong+0x4a>
			printEndScreen("Player Right won!");
    1400:	8e ea       	ldi	r24, 0xAE	; 174
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	0e 94 ac 09 	call	0x1358	; 0x1358 <printEndScreen>
    1408:	e3 cf       	rjmp	.-58     	; 0x13d0 <playPong+0x10>
		}
		else if(pointRight == 5){
    140a:	05 30       	cpi	r16, 0x05	; 5
    140c:	11 05       	cpc	r17, r1
    140e:	01 f7       	brne	.-64     	; 0x13d0 <playPong+0x10>
			printEndScreen("Player Left won!");
    1410:	80 ec       	ldi	r24, 0xC0	; 192
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	0e 94 ac 09 	call	0x1358	; 0x1358 <printEndScreen>
    1418:	db cf       	rjmp	.-74     	; 0x13d0 <playPong+0x10>

0000141a <detectCollision>:
#include <util/delay.h>
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
    141a:	fc 01       	movw	r30, r24
	while(s){
    141c:	00 97       	sbiw	r24, 0x00	; 0
    141e:	81 f0       	breq	.+32     	; 0x1440 <detectCollision+0x26>
		if (s->x == x && s->y == y){
    1420:	84 81       	ldd	r24, Z+4	; 0x04
    1422:	95 81       	ldd	r25, Z+5	; 0x05
    1424:	86 17       	cp	r24, r22
    1426:	97 07       	cpc	r25, r23
    1428:	29 f4       	brne	.+10     	; 0x1434 <detectCollision+0x1a>
    142a:	86 81       	ldd	r24, Z+6	; 0x06
    142c:	97 81       	ldd	r25, Z+7	; 0x07
    142e:	84 17       	cp	r24, r20
    1430:	95 07       	cpc	r25, r21
    1432:	49 f0       	breq	.+18     	; 0x1446 <detectCollision+0x2c>
			return 1;
		}
		s = s->next;
    1434:	01 90       	ld	r0, Z+
    1436:	f0 81       	ld	r31, Z
    1438:	e0 2d       	mov	r30, r0
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
	while(s){
    143a:	30 97       	sbiw	r30, 0x00	; 0
    143c:	89 f7       	brne	.-30     	; 0x1420 <detectCollision+0x6>
    143e:	06 c0       	rjmp	.+12     	; 0x144c <detectCollision+0x32>
		if (s->x == x && s->y == y){
			return 1;
		}
		s = s->next;
	}
	return 0;
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	08 95       	ret


int detectCollision(segment *s, int x, int y){
	while(s){
		if (s->x == x && s->y == y){
			return 1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	08 95       	ret
		}
		s = s->next;
	}
	return 0;
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	90 e0       	ldi	r25, 0x00	; 0
}
    1450:	08 95       	ret

00001452 <placeFood>:

void placeFood(int food[], segment *first){
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	ec 01       	movw	r28, r24
    145c:	8b 01       	movw	r16, r22
	do{
		food[0] = rand() % 64;
    145e:	0e 94 b0 11 	call	0x2360	; 0x2360 <rand>
    1462:	8f 73       	andi	r24, 0x3F	; 63
    1464:	90 78       	andi	r25, 0x80	; 128
    1466:	99 23       	and	r25, r25
    1468:	24 f4       	brge	.+8      	; 0x1472 <placeFood+0x20>
    146a:	01 97       	sbiw	r24, 0x01	; 1
    146c:	80 6c       	ori	r24, 0xC0	; 192
    146e:	9f 6f       	ori	r25, 0xFF	; 255
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	99 83       	std	Y+1, r25	; 0x01
    1474:	88 83       	st	Y, r24
		food[1] = rand() % 32;
    1476:	0e 94 b0 11 	call	0x2360	; 0x2360 <rand>
    147a:	ac 01       	movw	r20, r24
    147c:	4f 71       	andi	r20, 0x1F	; 31
    147e:	50 78       	andi	r21, 0x80	; 128
    1480:	55 23       	and	r21, r21
    1482:	34 f4       	brge	.+12     	; 0x1490 <placeFood+0x3e>
    1484:	41 50       	subi	r20, 0x01	; 1
    1486:	51 09       	sbc	r21, r1
    1488:	40 6e       	ori	r20, 0xE0	; 224
    148a:	5f 6f       	ori	r21, 0xFF	; 255
    148c:	4f 5f       	subi	r20, 0xFF	; 255
    148e:	5f 4f       	sbci	r21, 0xFF	; 255
    1490:	5b 83       	std	Y+3, r21	; 0x03
    1492:	4a 83       	std	Y+2, r20	; 0x02
	} while(detectCollision(first, food[0], food[1]));
    1494:	68 81       	ld	r22, Y
    1496:	79 81       	ldd	r23, Y+1	; 0x01
    1498:	c8 01       	movw	r24, r16
    149a:	0e 94 0d 0a 	call	0x141a	; 0x141a <detectCollision>
    149e:	89 2b       	or	r24, r25
    14a0:	f1 f6       	brne	.-68     	; 0x145e <placeFood+0xc>
}
    14a2:	df 91       	pop	r29
    14a4:	cf 91       	pop	r28
    14a6:	1f 91       	pop	r17
    14a8:	0f 91       	pop	r16
    14aa:	08 95       	ret

000014ac <drawBoard>:

void drawBoard(segment *s, int food[]){
    14ac:	cf 92       	push	r12
    14ae:	df 92       	push	r13
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	8c 01       	movw	r16, r24
    14be:	7b 01       	movw	r14, r22
	oled_sram_clear_screen(0);
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	while(s){
    14c8:	01 15       	cp	r16, r1
    14ca:	11 05       	cpc	r17, r1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <drawBoard+0x24>
    14ce:	59 c0       	rjmp	.+178    	; 0x1582 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    14d0:	c1 2c       	mov	r12, r1
    14d2:	d1 2c       	mov	r13, r1
    14d4:	2a c0       	rjmp	.+84     	; 0x152a <drawBoard+0x7e>
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
    14d6:	f8 01       	movw	r30, r16
    14d8:	46 81       	ldd	r20, Z+6	; 0x06
    14da:	57 81       	ldd	r21, Z+7	; 0x07
    14dc:	44 0f       	add	r20, r20
    14de:	55 1f       	adc	r21, r21
    14e0:	64 81       	ldd	r22, Z+4	; 0x04
    14e2:	75 81       	ldd	r23, Z+5	; 0x05
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	6c 0f       	add	r22, r28
    14ea:	7d 1f       	adc	r23, r29
    14ec:	8c 2d       	mov	r24, r12
    14ee:	9d 2d       	mov	r25, r13
    14f0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
    14f4:	f8 01       	movw	r30, r16
    14f6:	46 81       	ldd	r20, Z+6	; 0x06
    14f8:	57 81       	ldd	r21, Z+7	; 0x07
    14fa:	44 0f       	add	r20, r20
    14fc:	55 1f       	adc	r21, r21
    14fe:	4f 5f       	subi	r20, 0xFF	; 255
    1500:	5f 4f       	sbci	r21, 0xFF	; 255
    1502:	64 81       	ldd	r22, Z+4	; 0x04
    1504:	75 81       	ldd	r23, Z+5	; 0x05
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	6c 0f       	add	r22, r28
    150c:	7d 1f       	adc	r23, r29
    150e:	8c 2d       	mov	r24, r12
    1510:	9d 2d       	mov	r25, r13
    1512:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
    1516:	21 96       	adiw	r28, 0x01	; 1
    1518:	c2 30       	cpi	r28, 0x02	; 2
    151a:	d1 05       	cpc	r29, r1
    151c:	e1 f6       	brne	.-72     	; 0x14d6 <drawBoard+0x2a>
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
    151e:	f8 01       	movw	r30, r16
    1520:	00 81       	ld	r16, Z
    1522:	11 81       	ldd	r17, Z+1	; 0x01
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
    1524:	01 15       	cp	r16, r1
    1526:	11 05       	cpc	r17, r1
    1528:	61 f1       	breq	.+88     	; 0x1582 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    152a:	cc 2d       	mov	r28, r12
    152c:	dd 2d       	mov	r29, r13
    152e:	d3 cf       	rjmp	.-90     	; 0x14d6 <drawBoard+0x2a>
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
    1530:	f7 01       	movw	r30, r14
    1532:	42 81       	ldd	r20, Z+2	; 0x02
    1534:	53 81       	ldd	r21, Z+3	; 0x03
    1536:	44 0f       	add	r20, r20
    1538:	55 1f       	adc	r21, r21
    153a:	60 81       	ld	r22, Z
    153c:	71 81       	ldd	r23, Z+1	; 0x01
    153e:	66 0f       	add	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	6c 0f       	add	r22, r28
    1544:	7d 1f       	adc	r23, r29
    1546:	80 e0       	ldi	r24, 0x00	; 0
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
    154e:	f7 01       	movw	r30, r14
    1550:	42 81       	ldd	r20, Z+2	; 0x02
    1552:	53 81       	ldd	r21, Z+3	; 0x03
    1554:	44 0f       	add	r20, r20
    1556:	55 1f       	adc	r21, r21
    1558:	4f 5f       	subi	r20, 0xFF	; 255
    155a:	5f 4f       	sbci	r21, 0xFF	; 255
    155c:	60 81       	ld	r22, Z
    155e:	71 81       	ldd	r23, Z+1	; 0x01
    1560:	66 0f       	add	r22, r22
    1562:	77 1f       	adc	r23, r23
    1564:	6c 0f       	add	r22, r28
    1566:	7d 1f       	adc	r23, r29
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <oled_sram_write_bit>
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
    1570:	21 96       	adiw	r28, 0x01	; 1
    1572:	c2 30       	cpi	r28, 0x02	; 2
    1574:	d1 05       	cpc	r29, r1
    1576:	e1 f6       	brne	.-72     	; 0x1530 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
    1580:	03 c0       	rjmp	.+6      	; 0x1588 <drawBoard+0xdc>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1582:	c0 e0       	ldi	r28, 0x00	; 0
    1584:	d0 e0       	ldi	r29, 0x00	; 0
    1586:	d4 cf       	rjmp	.-88     	; 0x1530 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
}
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	ff 90       	pop	r15
    1592:	ef 90       	pop	r14
    1594:	df 90       	pop	r13
    1596:	cf 90       	pop	r12
    1598:	08 95       	ret

0000159a <playSnake>:

void playSnake(){
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	00 d0       	rcall	.+0      	; 0x15b0 <playSnake+0x16>
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <playSnake+0x18>
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    15b6:	88 e0       	ldi	r24, 0x08	; 8
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 3b 10 	call	0x2076	; 0x2076 <malloc>
    15be:	6c 01       	movw	r12, r24
	first->x = 32;
    15c0:	80 e2       	ldi	r24, 0x20	; 32
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	f6 01       	movw	r30, r12
    15c6:	95 83       	std	Z+5, r25	; 0x05
    15c8:	84 83       	std	Z+4, r24	; 0x04
	first->y = 16;
    15ca:	80 e1       	ldi	r24, 0x10	; 16
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	97 83       	std	Z+7, r25	; 0x07
    15d0:	86 83       	std	Z+6, r24	; 0x06
	segment *last = first;
	first->next = 0;
    15d2:	11 82       	std	Z+1, r1	; 0x01
    15d4:	10 82       	st	Z, r1
	first->prev = 0;
    15d6:	13 82       	std	Z+3, r1	; 0x03
    15d8:	12 82       	std	Z+2, r1	; 0x02
	oled_sram_flush(0);
}

void playSnake(){
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    15da:	86 01       	movw	r16, r12
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
    15dc:	68 94       	set
    15de:	aa 24       	eor	r10, r10
    15e0:	a2 f8       	bld	r10, 2
    15e2:	b1 2c       	mov	r11, r1
	for(int i = 0; i < 4; i++){
		segment *temp = (segment*)malloc(sizeof(segment));
    15e4:	88 e0       	ldi	r24, 0x08	; 8
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 3b 10 	call	0x2076	; 0x2076 <malloc>
    15ec:	7c 01       	movw	r14, r24
		temp->x = first->x + 1;
    15ee:	f8 01       	movw	r30, r16
    15f0:	84 81       	ldd	r24, Z+4	; 0x04
    15f2:	95 81       	ldd	r25, Z+5	; 0x05
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	f7 01       	movw	r30, r14
    15f8:	95 83       	std	Z+5, r25	; 0x05
    15fa:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    15fc:	f8 01       	movw	r30, r16
    15fe:	86 81       	ldd	r24, Z+6	; 0x06
    1600:	97 81       	ldd	r25, Z+7	; 0x07
    1602:	f7 01       	movw	r30, r14
    1604:	97 83       	std	Z+7, r25	; 0x07
    1606:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    1608:	11 83       	std	Z+1, r17	; 0x01
    160a:	00 83       	st	Z, r16
		temp->prev = 0;
    160c:	13 82       	std	Z+3, r1	; 0x03
    160e:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1610:	f8 01       	movw	r30, r16
    1612:	f3 82       	std	Z+3, r15	; 0x03
    1614:	e2 82       	std	Z+2, r14	; 0x02
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	af 1a       	sub	r10, r31
    161a:	b1 08       	sbc	r11, r1
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
	for(int i = 0; i < 4; i++){
    161c:	a1 14       	cp	r10, r1
    161e:	b1 04       	cpc	r11, r1
    1620:	11 f0       	breq	.+4      	; 0x1626 <playSnake+0x8c>
		segment *temp = (segment*)malloc(sizeof(segment));
    1622:	87 01       	movw	r16, r14
    1624:	df cf       	rjmp	.-66     	; 0x15e4 <playSnake+0x4a>
	}


	//initalize food
	int food[2];
	placeFood(food, first);
    1626:	b7 01       	movw	r22, r14
    1628:	ce 01       	movw	r24, r28
    162a:	01 96       	adiw	r24, 0x01	; 1
    162c:	0e 94 29 0a 	call	0x1452	; 0x1452 <placeFood>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	//initalize food
	int food[2];
	placeFood(food, first);

	//initialize direction of snake
	direction S = RIGHT;
    1638:	aa 24       	eor	r10, r10
    163a:	a3 94       	inc	r10
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    163c:	70 c0       	rjmp	.+224    	; 0x171e <playSnake+0x184>
		Joystick j = getJoystickPosition();
    163e:	0e 94 b7 03 	call	0x76e	; 0x76e <getJoystickPosition>
    1642:	b8 2e       	mov	r11, r24
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    1644:	24 e0       	ldi	r18, 0x04	; 4
    1646:	82 13       	cpse	r24, r18
    1648:	01 c0       	rjmp	.+2      	; 0x164c <playSnake+0xb2>
    164a:	ba 2c       	mov	r11, r10
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    164c:	88 e0       	ldi	r24, 0x08	; 8
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 3b 10 	call	0x2076	; 0x2076 <malloc>
    1654:	8c 01       	movw	r16, r24
		
		temp->x = first->x;
    1656:	f7 01       	movw	r30, r14
    1658:	24 81       	ldd	r18, Z+4	; 0x04
    165a:	35 81       	ldd	r19, Z+5	; 0x05
    165c:	fc 01       	movw	r30, r24
    165e:	35 83       	std	Z+5, r19	; 0x05
    1660:	24 83       	std	Z+4, r18	; 0x04
		temp->y = first->y;
    1662:	f7 01       	movw	r30, r14
    1664:	26 81       	ldd	r18, Z+6	; 0x06
    1666:	37 81       	ldd	r19, Z+7	; 0x07
    1668:	fc 01       	movw	r30, r24
    166a:	37 83       	std	Z+7, r19	; 0x07
    166c:	26 83       	std	Z+6, r18	; 0x06
		temp->next = first;
    166e:	f1 82       	std	Z+1, r15	; 0x01
    1670:	e0 82       	st	Z, r14
		temp->prev = 0;
    1672:	13 82       	std	Z+3, r1	; 0x03
    1674:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1676:	f7 01       	movw	r30, r14
    1678:	93 83       	std	Z+3, r25	; 0x03
    167a:	82 83       	std	Z+2, r24	; 0x02

		//Find direction of snake movement
		switch (S){
    167c:	f1 e0       	ldi	r31, 0x01	; 1
    167e:	bf 16       	cp	r11, r31
    1680:	f1 f0       	breq	.+60     	; 0x16be <playSnake+0x124>
    1682:	bf 16       	cp	r11, r31
    1684:	a8 f0       	brcs	.+42     	; 0x16b0 <playSnake+0x116>
    1686:	22 e0       	ldi	r18, 0x02	; 2
    1688:	b2 16       	cp	r11, r18
    168a:	21 f0       	breq	.+8      	; 0x1694 <playSnake+0xfa>
    168c:	83 e0       	ldi	r24, 0x03	; 3
    168e:	b8 16       	cp	r11, r24
    1690:	41 f0       	breq	.+16     	; 0x16a2 <playSnake+0x108>
    1692:	1b c0       	rjmp	.+54     	; 0x16ca <playSnake+0x130>
			case UP:
			temp->y--;
    1694:	fc 01       	movw	r30, r24
    1696:	86 81       	ldd	r24, Z+6	; 0x06
    1698:	97 81       	ldd	r25, Z+7	; 0x07
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	97 83       	std	Z+7, r25	; 0x07
    169e:	86 83       	std	Z+6, r24	; 0x06
			break;
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <playSnake+0x130>
			case DOWN:
			temp->y++;
    16a2:	f8 01       	movw	r30, r16
    16a4:	86 81       	ldd	r24, Z+6	; 0x06
    16a6:	97 81       	ldd	r25, Z+7	; 0x07
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	97 83       	std	Z+7, r25	; 0x07
    16ac:	86 83       	std	Z+6, r24	; 0x06
			break;
    16ae:	0d c0       	rjmp	.+26     	; 0x16ca <playSnake+0x130>
			case LEFT:
			temp->x--;
    16b0:	fc 01       	movw	r30, r24
    16b2:	84 81       	ldd	r24, Z+4	; 0x04
    16b4:	95 81       	ldd	r25, Z+5	; 0x05
    16b6:	01 97       	sbiw	r24, 0x01	; 1
    16b8:	95 83       	std	Z+5, r25	; 0x05
    16ba:	84 83       	std	Z+4, r24	; 0x04
			break;
    16bc:	06 c0       	rjmp	.+12     	; 0x16ca <playSnake+0x130>
			case RIGHT:
			temp->x++;
    16be:	fc 01       	movw	r30, r24
    16c0:	84 81       	ldd	r24, Z+4	; 0x04
    16c2:	95 81       	ldd	r25, Z+5	; 0x05
    16c4:	01 96       	adiw	r24, 0x01	; 1
    16c6:	95 83       	std	Z+5, r25	; 0x05
    16c8:	84 83       	std	Z+4, r24	; 0x04
			break;
		}

		first = temp;
		
		if(detectCollision(first, food[0], food[1])){//hit food?
    16ca:	4b 81       	ldd	r20, Y+3	; 0x03
    16cc:	5c 81       	ldd	r21, Y+4	; 0x04
    16ce:	69 81       	ldd	r22, Y+1	; 0x01
    16d0:	7a 81       	ldd	r23, Y+2	; 0x02
    16d2:	c8 01       	movw	r24, r16
    16d4:	0e 94 0d 0a 	call	0x141a	; 0x141a <detectCollision>
    16d8:	89 2b       	or	r24, r25
    16da:	31 f0       	breq	.+12     	; 0x16e8 <playSnake+0x14e>
			placeFood(food, first);
    16dc:	b8 01       	movw	r22, r16
    16de:	ce 01       	movw	r24, r28
    16e0:	01 96       	adiw	r24, 0x01	; 1
    16e2:	0e 94 29 0a 	call	0x1452	; 0x1452 <placeFood>
    16e6:	0a c0       	rjmp	.+20     	; 0x16fc <playSnake+0x162>
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    16e8:	f6 01       	movw	r30, r12
    16ea:	e2 80       	ldd	r14, Z+2	; 0x02
    16ec:	f3 80       	ldd	r15, Z+3	; 0x03
			last->next = 0;
    16ee:	f7 01       	movw	r30, r14
    16f0:	11 82       	std	Z+1, r1	; 0x01
    16f2:	10 82       	st	Z, r1
			free(temp);
    16f4:	c6 01       	movw	r24, r12
    16f6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <free>
			placeFood(food, first);
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    16fa:	67 01       	movw	r12, r14
			last->next = 0;
			free(temp);
		}
		drawBoard(first, food);
    16fc:	be 01       	movw	r22, r28
    16fe:	6f 5f       	subi	r22, 0xFF	; 255
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	c8 01       	movw	r24, r16
    1704:	0e 94 56 0a 	call	0x14ac	; 0x14ac <drawBoard>
    1708:	ff ef       	ldi	r31, 0xFF	; 255
    170a:	2f e7       	ldi	r18, 0x7F	; 127
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	f1 50       	subi	r31, 0x01	; 1
    1710:	20 40       	sbci	r18, 0x00	; 0
    1712:	80 40       	sbci	r24, 0x00	; 0
    1714:	e1 f7       	brne	.-8      	; 0x170e <playSnake+0x174>
    1716:	00 c0       	rjmp	.+0      	; 0x1718 <playSnake+0x17e>
    1718:	00 c0       	rjmp	.+0      	; 0x171a <playSnake+0x180>
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
		Joystick j = getJoystickPosition();
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    171a:	ab 2c       	mov	r10, r11
			break;
			default:
			break;
		}

		first = temp;
    171c:	78 01       	movw	r14, r16

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    171e:	f7 01       	movw	r30, r14
    1720:	46 81       	ldd	r20, Z+6	; 0x06
    1722:	57 81       	ldd	r21, Z+7	; 0x07
    1724:	64 81       	ldd	r22, Z+4	; 0x04
    1726:	75 81       	ldd	r23, Z+5	; 0x05
    1728:	80 81       	ld	r24, Z
    172a:	91 81       	ldd	r25, Z+1	; 0x01
    172c:	0e 94 0d 0a 	call	0x141a	; 0x141a <detectCollision>
    1730:	89 2b       	or	r24, r25
    1732:	09 f4       	brne	.+2      	; 0x1736 <playSnake+0x19c>
    1734:	84 cf       	rjmp	.-248    	; 0x163e <playSnake+0xa4>
		}
		drawBoard(first, food);
		_delay_ms(100);
	}

    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	df 91       	pop	r29
    1740:	cf 91       	pop	r28
    1742:	1f 91       	pop	r17
    1744:	0f 91       	pop	r16
    1746:	ff 90       	pop	r15
    1748:	ef 90       	pop	r14
    174a:	df 90       	pop	r13
    174c:	cf 90       	pop	r12
    174e:	bf 90       	pop	r11
    1750:	af 90       	pop	r10
    1752:	08 95       	ret

00001754 <make_screen>:
	}
	
	
}

void make_screen(menu* m){
    1754:	2f 92       	push	r2
    1756:	3f 92       	push	r3
    1758:	4f 92       	push	r4
    175a:	5f 92       	push	r5
    175c:	6f 92       	push	r6
    175e:	7f 92       	push	r7
    1760:	8f 92       	push	r8
    1762:	9f 92       	push	r9
    1764:	af 92       	push	r10
    1766:	bf 92       	push	r11
    1768:	cf 92       	push	r12
    176a:	df 92       	push	r13
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	00 d0       	rcall	.+0      	; 0x177a <make_screen+0x26>
    177a:	1f 92       	push	r1
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0e 94 92 06 	call	0xd24	; 0xd24 <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
    178a:	d7 01       	movw	r26, r14
    178c:	6d 91       	ld	r22, X+
    178e:	7c 91       	ld	r23, X
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
    179c:	f7 01       	movw	r30, r14
    179e:	84 89       	ldd	r24, Z+20	; 0x14
    17a0:	95 89       	ldd	r25, Z+21	; 0x15
    17a2:	18 16       	cp	r1, r24
    17a4:	19 06       	cpc	r1, r25
    17a6:	0c f0       	brlt	.+2      	; 0x17aa <make_screen+0x56>
    17a8:	6d c0       	rjmp	.+218    	; 0x1884 <make_screen+0x130>
    17aa:	c7 01       	movw	r24, r14
    17ac:	04 96       	adiw	r24, 0x04	; 4
    17ae:	9b 83       	std	Y+3, r25	; 0x03
    17b0:	8a 83       	std	Y+2, r24	; 0x02
    17b2:	cc 24       	eor	r12, r12
    17b4:	c3 94       	inc	r12
    17b6:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    17b8:	68 94       	set
    17ba:	22 24       	eor	r2, r2
    17bc:	23 f8       	bld	r2, 3
    17be:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
    17c0:	aa 81       	ldd	r26, Y+2	; 0x02
    17c2:	bb 81       	ldd	r27, Y+3	; 0x03
    17c4:	6d 90       	ld	r6, X+
    17c6:	7d 90       	ld	r7, X+
    17c8:	bb 83       	std	Y+3, r27	; 0x03
    17ca:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
    17cc:	d3 01       	movw	r26, r6
    17ce:	ed 91       	ld	r30, X+
    17d0:	fc 91       	ld	r31, X
    17d2:	80 81       	ld	r24, Z
    17d4:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
    17d6:	f7 01       	movw	r30, r14
    17d8:	40 ad       	ldd	r20, Z+56	; 0x38
    17da:	51 ad       	ldd	r21, Z+57	; 0x39
    17dc:	c6 01       	movw	r24, r12
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	48 17       	cp	r20, r24
    17e2:	59 07       	cpc	r21, r25
    17e4:	59 f4       	brne	.+22     	; 0x17fc <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
    17e6:	4f 5f       	subi	r20, 0xFF	; 255
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	61 ed       	ldi	r22, 0xD1	; 209
    17f0:	71 e0       	ldi	r23, 0x01	; 1
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
    17fa:	09 c0       	rjmp	.+18     	; 0x180e <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	a6 01       	movw	r20, r12
    1802:	6c e6       	ldi	r22, 0x6C	; 108
    1804:	71 e0       	ldi	r23, 0x01	; 1
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
		}
		while(c != '\0'){
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	88 23       	and	r24, r24
    1812:	59 f1       	breq	.+86     	; 0x186a <make_screen+0x116>
    1814:	68 94       	set
    1816:	aa 24       	eor	r10, r10
    1818:	a3 f8       	bld	r10, 3
    181a:	b1 2c       	mov	r11, r1
    181c:	88 24       	eor	r8, r8
    181e:	83 94       	inc	r8
    1820:	91 2c       	mov	r9, r1
    1822:	1e c0       	rjmp	.+60     	; 0x1860 <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1824:	24 2d       	mov	r18, r4
    1826:	35 2d       	mov	r19, r5
    1828:	a6 01       	movw	r20, r12
    182a:	be 01       	movw	r22, r28
    182c:	6f 5f       	subi	r22, 0xFF	; 255
    182e:	7f 4f       	sbci	r23, 0xFF	; 255
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
    1838:	01 50       	subi	r16, 0x01	; 1
    183a:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    183c:	01 15       	cp	r16, r1
    183e:	11 05       	cpc	r17, r1
    1840:	89 f7       	brne	.-30     	; 0x1824 <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
    1842:	d3 01       	movw	r26, r6
    1844:	ed 91       	ld	r30, X+
    1846:	fc 91       	ld	r31, X
    1848:	e8 0d       	add	r30, r8
    184a:	f9 1d       	adc	r31, r9
    184c:	80 81       	ld	r24, Z
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	bf ef       	ldi	r27, 0xFF	; 255
    1852:	8b 1a       	sub	r8, r27
    1854:	9b 0a       	sbc	r9, r27
    1856:	e8 e0       	ldi	r30, 0x08	; 8
    1858:	ae 0e       	add	r10, r30
    185a:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
    185c:	88 23       	and	r24, r24
    185e:	29 f0       	breq	.+10     	; 0x186a <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1860:	4a 2c       	mov	r4, r10
    1862:	5b 2c       	mov	r5, r11
    1864:	02 2d       	mov	r16, r2
    1866:	13 2d       	mov	r17, r3
    1868:	dd cf       	rjmp	.-70     	; 0x1824 <make_screen+0xd0>
void make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
    186a:	c6 01       	movw	r24, r12
    186c:	ff ef       	ldi	r31, 0xFF	; 255
    186e:	cf 1a       	sub	r12, r31
    1870:	df 0a       	sbc	r13, r31
    1872:	d7 01       	movw	r26, r14
    1874:	54 96       	adiw	r26, 0x14	; 20
    1876:	2d 91       	ld	r18, X+
    1878:	3c 91       	ld	r19, X
    187a:	55 97       	sbiw	r26, 0x15	; 21
    187c:	82 17       	cp	r24, r18
    187e:	93 07       	cpc	r25, r19
    1880:	0c f4       	brge	.+2      	; 0x1884 <make_screen+0x130>
    1882:	9e cf       	rjmp	.-196    	; 0x17c0 <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    1884:	f7 01       	movw	r30, r14
    1886:	86 a9       	ldd	r24, Z+54	; 0x36
    1888:	97 a9       	ldd	r25, Z+55	; 0x37
    188a:	18 16       	cp	r1, r24
    188c:	19 06       	cpc	r1, r25
    188e:	0c f0       	brlt	.+2      	; 0x1892 <make_screen+0x13e>
    1890:	6f c0       	rjmp	.+222    	; 0x1970 <make_screen+0x21c>
    1892:	37 01       	movw	r6, r14
    1894:	f6 e1       	ldi	r31, 0x16	; 22
    1896:	6f 0e       	add	r6, r31
    1898:	71 1c       	adc	r7, r1
    189a:	c1 2c       	mov	r12, r1
    189c:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    189e:	68 94       	set
    18a0:	44 24       	eor	r4, r4
    18a2:	43 f8       	bld	r4, 3
    18a4:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
    18a6:	d3 01       	movw	r26, r6
    18a8:	8d 90       	ld	r8, X+
    18aa:	9d 90       	ld	r9, X+
    18ac:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
    18ae:	f4 01       	movw	r30, r8
    18b0:	80 81       	ld	r24, Z
    18b2:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
    18b4:	d7 01       	movw	r26, r14
    18b6:	d8 96       	adiw	r26, 0x38	; 56
    18b8:	8d 91       	ld	r24, X+
    18ba:	9c 91       	ld	r25, X
    18bc:	d9 97       	sbiw	r26, 0x39	; 57
    18be:	54 96       	adiw	r26, 0x14	; 20
    18c0:	4d 91       	ld	r20, X+
    18c2:	5c 91       	ld	r21, X
    18c4:	55 97       	sbiw	r26, 0x15	; 21
    18c6:	4c 0d       	add	r20, r12
    18c8:	5d 1d       	adc	r21, r13
    18ca:	84 17       	cp	r24, r20
    18cc:	95 07       	cpc	r25, r21
    18ce:	61 f4       	brne	.+24     	; 0x18e8 <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
    18d0:	ac 01       	movw	r20, r24
    18d2:	4f 5f       	subi	r20, 0xFF	; 255
    18d4:	5f 4f       	sbci	r21, 0xFF	; 255
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	61 ed       	ldi	r22, 0xD1	; 209
    18dc:	71 e0       	ldi	r23, 0x01	; 1
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
    18e6:	0a c0       	rjmp	.+20     	; 0x18fc <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
    18e8:	4f 5f       	subi	r20, 0xFF	; 255
    18ea:	5f 4f       	sbci	r21, 0xFF	; 255
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	6c e6       	ldi	r22, 0x6C	; 108
    18f2:	71 e0       	ldi	r23, 0x01	; 1
    18f4:	80 e0       	ldi	r24, 0x00	; 0
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
		}
		while(c != '\0'){
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	88 23       	and	r24, r24
    1900:	59 f1       	breq	.+86     	; 0x1958 <make_screen+0x204>
    1902:	bf ef       	ldi	r27, 0xFF	; 255
    1904:	8b 1a       	sub	r8, r27
    1906:	9b 0a       	sbc	r9, r27
    1908:	68 94       	set
    190a:	aa 24       	eor	r10, r10
    190c:	a3 f8       	bld	r10, 3
    190e:	b1 2c       	mov	r11, r1
    1910:	1e c0       	rjmp	.+60     	; 0x194e <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    1912:	f7 01       	movw	r30, r14
    1914:	44 89       	ldd	r20, Z+20	; 0x14
    1916:	55 89       	ldd	r21, Z+21	; 0x15
    1918:	4c 0d       	add	r20, r12
    191a:	5d 1d       	adc	r21, r13
    191c:	4f 5f       	subi	r20, 0xFF	; 255
    191e:	5f 4f       	sbci	r21, 0xFF	; 255
    1920:	22 2d       	mov	r18, r2
    1922:	33 2d       	mov	r19, r3
    1924:	be 01       	movw	r22, r28
    1926:	6f 5f       	subi	r22, 0xFF	; 255
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 40 06 	call	0xc80	; 0xc80 <oled_sram_write_char>
    1932:	01 50       	subi	r16, 0x01	; 1
    1934:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    1936:	01 15       	cp	r16, r1
    1938:	11 05       	cpc	r17, r1
    193a:	59 f7       	brne	.-42     	; 0x1912 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
    193c:	d4 01       	movw	r26, r8
    193e:	8d 91       	ld	r24, X+
    1940:	4d 01       	movw	r8, r26
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	b8 e0       	ldi	r27, 0x08	; 8
    1946:	ab 0e       	add	r10, r27
    1948:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
    194a:	88 23       	and	r24, r24
    194c:	29 f0       	breq	.+10     	; 0x1958 <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    194e:	2a 2c       	mov	r2, r10
    1950:	3b 2c       	mov	r3, r11
    1952:	04 2d       	mov	r16, r4
    1954:	15 2d       	mov	r17, r5
    1956:	dd cf       	rjmp	.-70     	; 0x1912 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    1958:	ef ef       	ldi	r30, 0xFF	; 255
    195a:	ce 1a       	sub	r12, r30
    195c:	de 0a       	sbc	r13, r30
    195e:	d7 01       	movw	r26, r14
    1960:	d6 96       	adiw	r26, 0x36	; 54
    1962:	8d 91       	ld	r24, X+
    1964:	9c 91       	ld	r25, X
    1966:	d7 97       	sbiw	r26, 0x37	; 55
    1968:	c8 16       	cp	r12, r24
    196a:	d9 06       	cpc	r13, r25
    196c:	0c f4       	brge	.+2      	; 0x1970 <make_screen+0x21c>
    196e:	9b cf       	rjmp	.-202    	; 0x18a6 <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	0e 94 92 05 	call	0xb24	; 0xb24 <oled_sram_flush>
} 
    1978:	0f 90       	pop	r0
    197a:	0f 90       	pop	r0
    197c:	0f 90       	pop	r0
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	ff 90       	pop	r15
    1988:	ef 90       	pop	r14
    198a:	df 90       	pop	r13
    198c:	cf 90       	pop	r12
    198e:	bf 90       	pop	r11
    1990:	af 90       	pop	r10
    1992:	9f 90       	pop	r9
    1994:	8f 90       	pop	r8
    1996:	7f 90       	pop	r7
    1998:	6f 90       	pop	r6
    199a:	5f 90       	pop	r5
    199c:	4f 90       	pop	r4
    199e:	3f 90       	pop	r3
    19a0:	2f 90       	pop	r2
    19a2:	08 95       	ret

000019a4 <menuSystem>:
#include "../Game_files/pong.h"
#include "../Game_files/pingpong.h"



void menuSystem(){
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	c8 5e       	subi	r28, 0xE8	; 232
    19ae:	d1 09       	sbc	r29, r1
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	de bf       	out	0x3e, r29	; 62
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 3};
    19ba:	2a e3       	ldi	r18, 0x3A	; 58
    19bc:	8e 01       	movw	r16, r28
    19be:	0f 5f       	subi	r16, 0xFF	; 255
    19c0:	1f 4f       	sbci	r17, 0xFF	; 255
    19c2:	d8 01       	movw	r26, r16
    19c4:	e2 2f       	mov	r30, r18
    19c6:	1d 92       	st	X+, r1
    19c8:	ea 95       	dec	r30
    19ca:	e9 f7       	brne	.-6      	; 0x19c6 <menuSystem+0x22>
    19cc:	83 ed       	ldi	r24, 0xD3	; 211
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	9a 83       	std	Y+2, r25	; 0x02
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	9e 8b       	std	Y+22, r25	; 0x16
    19da:	8d 8b       	std	Y+21, r24	; 0x15
		
	menu highscore = {.name = "Highscore", .parent = &mainMenu};
    19dc:	de 01       	movw	r26, r28
    19de:	db 96       	adiw	r26, 0x3b	; 59
    19e0:	fd 01       	movw	r30, r26
    19e2:	82 2f       	mov	r24, r18
    19e4:	11 92       	st	Z+, r1
    19e6:	8a 95       	dec	r24
    19e8:	e9 f7       	brne	.-6      	; 0x19e4 <menuSystem+0x40>
    19ea:	8d ed       	ldi	r24, 0xDD	; 221
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	9c af       	std	Y+60, r25	; 0x3c
    19f0:	8b af       	std	Y+59, r24	; 0x3b
    19f2:	1e af       	std	Y+62, r17	; 0x3e
    19f4:	0d af       	std	Y+61, r16	; 0x3d
	mainMenu.submenues[1] = &highscore;
    19f6:	b8 87       	std	Y+8, r27	; 0x08
    19f8:	af 83       	std	Y+7, r26	; 0x07
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 4};
    19fa:	fe 01       	movw	r30, r28
    19fc:	eb 58       	subi	r30, 0x8B	; 139
    19fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1a00:	df 01       	movw	r26, r30
    1a02:	82 2f       	mov	r24, r18
    1a04:	1d 92       	st	X+, r1
    1a06:	8a 95       	dec	r24
    1a08:	e9 f7       	brne	.-6      	; 0x1a04 <menuSystem+0x60>
    1a0a:	87 ee       	ldi	r24, 0xE7	; 231
    1a0c:	91 e0       	ldi	r25, 0x01	; 1
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	13 83       	std	Z+3, r17	; 0x03
    1a14:	02 83       	std	Z+2, r16	; 0x02
    1a16:	84 e0       	ldi	r24, 0x04	; 4
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	97 ab       	std	Z+55, r25	; 0x37
    1a1c:	86 ab       	std	Z+54, r24	; 0x36
	playGame.functions[0] = &play_draw;
    1a1e:	8d e0       	ldi	r24, 0x0D	; 13
    1a20:	97 e0       	ldi	r25, 0x07	; 7
    1a22:	97 a3       	std	Z+39, r25	; 0x27
    1a24:	86 a3       	std	Z+38, r24	; 0x26
	playGame.functions[1] = &playSnake;
    1a26:	8d ec       	ldi	r24, 0xCD	; 205
    1a28:	9a e0       	ldi	r25, 0x0A	; 10
    1a2a:	91 a7       	std	Z+41, r25	; 0x29
    1a2c:	80 a7       	std	Z+40, r24	; 0x28
	playGame.functions[2] = &playPong;
    1a2e:	80 ee       	ldi	r24, 0xE0	; 224
    1a30:	99 e0       	ldi	r25, 0x09	; 9
    1a32:	93 a7       	std	Z+43, r25	; 0x2b
    1a34:	82 a7       	std	Z+42, r24	; 0x2a
	playGame.functions[3] = &start_pingpong;
    1a36:	86 e6       	ldi	r24, 0x66	; 102
    1a38:	92 e0       	ldi	r25, 0x02	; 2
    1a3a:	95 a7       	std	Z+45, r25	; 0x2d
    1a3c:	84 a7       	std	Z+44, r24	; 0x2c
	playGame.name_functions[0] = "Draw";
    1a3e:	81 ef       	ldi	r24, 0xF1	; 241
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	97 8b       	std	Z+23, r25	; 0x17
    1a44:	86 8b       	std	Z+22, r24	; 0x16
	playGame.name_functions[1] = "Snake";
    1a46:	86 ef       	ldi	r24, 0xF6	; 246
    1a48:	91 e0       	ldi	r25, 0x01	; 1
    1a4a:	91 8f       	std	Z+25, r25	; 0x19
    1a4c:	80 8f       	std	Z+24, r24	; 0x18
	playGame.name_functions[2] = "Pong";
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	92 e0       	ldi	r25, 0x02	; 2
    1a52:	93 8f       	std	Z+27, r25	; 0x1b
    1a54:	82 8f       	std	Z+26, r24	; 0x1a
	playGame.name_functions[3] = "Ping Pong";
    1a56:	8c ef       	ldi	r24, 0xFC	; 252
    1a58:	91 e0       	ldi	r25, 0x01	; 1
    1a5a:	95 8f       	std	Z+29, r25	; 0x1d
    1a5c:	84 8f       	std	Z+28, r24	; 0x1c
	mainMenu.submenues[0] = &playGame;
    1a5e:	fe 83       	std	Y+6, r31	; 0x06
    1a60:	ed 83       	std	Y+5, r30	; 0x05
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 1};
    1a62:	fa 96       	adiw	r30, 0x3a	; 58
    1a64:	df 01       	movw	r26, r30
    1a66:	1d 92       	st	X+, r1
    1a68:	2a 95       	dec	r18
    1a6a:	e9 f7       	brne	.-6      	; 0x1a66 <menuSystem+0xc2>
    1a6c:	86 e0       	ldi	r24, 0x06	; 6
    1a6e:	92 e0       	ldi	r25, 0x02	; 2
    1a70:	91 83       	std	Z+1, r25	; 0x01
    1a72:	80 83       	st	Z, r24
    1a74:	13 83       	std	Z+3, r17	; 0x03
    1a76:	02 83       	std	Z+2, r16	; 0x02
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	97 ab       	std	Z+55, r25	; 0x37
    1a7e:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrateJoystick;
    1a80:	8f e4       	ldi	r24, 0x4F	; 79
    1a82:	94 e0       	ldi	r25, 0x04	; 4
    1a84:	97 a3       	std	Z+39, r25	; 0x27
    1a86:	86 a3       	std	Z+38, r24	; 0x26
	settings.name_functions[0] = "Calibrate Joy";
    1a88:	8f e0       	ldi	r24, 0x0F	; 15
    1a8a:	92 e0       	ldi	r25, 0x02	; 2
    1a8c:	97 8b       	std	Z+23, r25	; 0x17
    1a8e:	86 8b       	std	Z+22, r24	; 0x16
	mainMenu.submenues[2] = &settings;
    1a90:	fa 87       	std	Y+10, r31	; 0x0a
    1a92:	e9 87       	std	Y+9, r30	; 0x09
	
	
	
	direction previousDirection = NEUTRAL;
    1a94:	68 94       	set
    1a96:	aa 24       	eor	r10, r10
    1a98:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1a9a:	f8 01       	movw	r30, r16
    1a9c:	c6 a8       	ldd	r12, Z+54	; 0x36
    1a9e:	d7 a8       	ldd	r13, Z+55	; 0x37
    1aa0:	e4 88       	ldd	r14, Z+20	; 0x14
    1aa2:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = getJoystickPosition();
    1aa4:	0e 94 b7 03 	call	0x76e	; 0x76e <getJoystickPosition>
    1aa8:	b8 2e       	mov	r11, r24
		if (joy.D != previousDirection){
    1aaa:	a8 16       	cp	r10, r24
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <menuSystem+0x10c>
    1aae:	51 c0       	rjmp	.+162    	; 0x1b52 <menuSystem+0x1ae>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	6e 0d       	add	r22, r14
    1ab4:	7f 1d       	adc	r23, r15
		joy = getJoystickPosition();
		if (joy.D != previousDirection){
			switch(joy.D){
    1ab6:	f1 e0       	ldi	r31, 0x01	; 1
    1ab8:	8f 17       	cp	r24, r31
    1aba:	69 f1       	breq	.+90     	; 0x1b16 <menuSystem+0x172>
    1abc:	8f 17       	cp	r24, r31
    1abe:	08 f1       	brcs	.+66     	; 0x1b02 <menuSystem+0x15e>
    1ac0:	22 e0       	ldi	r18, 0x02	; 2
    1ac2:	82 17       	cp	r24, r18
    1ac4:	21 f0       	breq	.+8      	; 0x1ace <menuSystem+0x12a>
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	b8 16       	cp	r11, r24
    1aca:	79 f0       	breq	.+30     	; 0x1aea <menuSystem+0x146>
    1acc:	42 c0       	rjmp	.+132    	; 0x1b52 <menuSystem+0x1ae>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
    1ace:	d8 01       	movw	r26, r16
    1ad0:	d8 96       	adiw	r26, 0x38	; 56
    1ad2:	8d 91       	ld	r24, X+
    1ad4:	9c 91       	ld	r25, X
    1ad6:	d9 97       	sbiw	r26, 0x39	; 57
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	86 0f       	add	r24, r22
    1adc:	97 1f       	adc	r25, r23
    1ade:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	91 af       	std	Z+57, r25	; 0x39
    1ae6:	80 af       	std	Z+56, r24	; 0x38
					break;
    1ae8:	34 c0       	rjmp	.+104    	; 0x1b52 <menuSystem+0x1ae>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
    1aea:	d8 01       	movw	r26, r16
    1aec:	d8 96       	adiw	r26, 0x38	; 56
    1aee:	8d 91       	ld	r24, X+
    1af0:	9c 91       	ld	r25, X
    1af2:	d9 97       	sbiw	r26, 0x39	; 57
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__divmodhi4>
    1afa:	f8 01       	movw	r30, r16
    1afc:	91 af       	std	Z+57, r25	; 0x39
    1afe:	80 af       	std	Z+56, r24	; 0x38
					break;
    1b00:	28 c0       	rjmp	.+80     	; 0x1b52 <menuSystem+0x1ae>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
    1b02:	d8 01       	movw	r26, r16
    1b04:	12 96       	adiw	r26, 0x02	; 2
    1b06:	2d 91       	ld	r18, X+
    1b08:	3c 91       	ld	r19, X
    1b0a:	13 97       	sbiw	r26, 0x03	; 3
    1b0c:	21 15       	cp	r18, r1
    1b0e:	31 05       	cpc	r19, r1
    1b10:	01 f1       	breq	.+64     	; 0x1b52 <menuSystem+0x1ae>
    1b12:	89 01       	movw	r16, r18
    1b14:	1e c0       	rjmp	.+60     	; 0x1b52 <menuSystem+0x1ae>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
    1b16:	f8 01       	movw	r30, r16
    1b18:	20 ad       	ldd	r18, Z+56	; 0x38
    1b1a:	31 ad       	ldd	r19, Z+57	; 0x39
    1b1c:	44 89       	ldd	r20, Z+20	; 0x14
    1b1e:	55 89       	ldd	r21, Z+21	; 0x15
    1b20:	24 17       	cp	r18, r20
    1b22:	35 07       	cpc	r19, r21
    1b24:	4c f4       	brge	.+18     	; 0x1b38 <menuSystem+0x194>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
    1b26:	2e 5f       	subi	r18, 0xFE	; 254
    1b28:	3f 4f       	sbci	r19, 0xFF	; 255
    1b2a:	22 0f       	add	r18, r18
    1b2c:	33 1f       	adc	r19, r19
    1b2e:	e2 0f       	add	r30, r18
    1b30:	f3 1f       	adc	r31, r19
    1b32:	00 81       	ld	r16, Z
    1b34:	11 81       	ldd	r17, Z+1	; 0x01
    1b36:	0d c0       	rjmp	.+26     	; 0x1b52 <menuSystem+0x1ae>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
    1b38:	24 1b       	sub	r18, r20
    1b3a:	35 0b       	sbc	r19, r21
    1b3c:	2d 5e       	subi	r18, 0xED	; 237
    1b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b40:	f9 01       	movw	r30, r18
    1b42:	ee 0f       	add	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	e0 0f       	add	r30, r16
    1b48:	f1 1f       	adc	r31, r17
    1b4a:	01 90       	ld	r0, Z+
    1b4c:	f0 81       	ld	r31, Z
    1b4e:	e0 2d       	mov	r30, r0
    1b50:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
    1b52:	c8 01       	movw	r24, r16
    1b54:	0e 94 aa 0b 	call	0x1754	; 0x1754 <make_screen>
    1b58:	ff ef       	ldi	r31, 0xFF	; 255
    1b5a:	2f e7       	ldi	r18, 0x7F	; 127
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	f1 50       	subi	r31, 0x01	; 1
    1b60:	20 40       	sbci	r18, 0x00	; 0
    1b62:	80 40       	sbci	r24, 0x00	; 0
    1b64:	e1 f7       	brne	.-8      	; 0x1b5e <menuSystem+0x1ba>
    1b66:	00 c0       	rjmp	.+0      	; 0x1b68 <menuSystem+0x1c4>
    1b68:	00 c0       	rjmp	.+0      	; 0x1b6a <menuSystem+0x1c6>
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
    1b6a:	ab 2c       	mov	r10, r11
    1b6c:	96 cf       	rjmp	.-212    	; 0x1a9a <menuSystem+0xf6>

00001b6e <__subsf3>:
    1b6e:	50 58       	subi	r21, 0x80	; 128

00001b70 <__addsf3>:
    1b70:	bb 27       	eor	r27, r27
    1b72:	aa 27       	eor	r26, r26
    1b74:	0e d0       	rcall	.+28     	; 0x1b92 <__addsf3x>
    1b76:	75 c1       	rjmp	.+746    	; 0x1e62 <__fp_round>
    1b78:	66 d1       	rcall	.+716    	; 0x1e46 <__fp_pscA>
    1b7a:	30 f0       	brcs	.+12     	; 0x1b88 <__addsf3+0x18>
    1b7c:	6b d1       	rcall	.+726    	; 0x1e54 <__fp_pscB>
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <__addsf3+0x18>
    1b80:	31 f4       	brne	.+12     	; 0x1b8e <__addsf3+0x1e>
    1b82:	9f 3f       	cpi	r25, 0xFF	; 255
    1b84:	11 f4       	brne	.+4      	; 0x1b8a <__addsf3+0x1a>
    1b86:	1e f4       	brtc	.+6      	; 0x1b8e <__addsf3+0x1e>
    1b88:	5b c1       	rjmp	.+694    	; 0x1e40 <__fp_nan>
    1b8a:	0e f4       	brtc	.+2      	; 0x1b8e <__addsf3+0x1e>
    1b8c:	e0 95       	com	r30
    1b8e:	e7 fb       	bst	r30, 7
    1b90:	51 c1       	rjmp	.+674    	; 0x1e34 <__fp_inf>

00001b92 <__addsf3x>:
    1b92:	e9 2f       	mov	r30, r25
    1b94:	77 d1       	rcall	.+750    	; 0x1e84 <__fp_split3>
    1b96:	80 f3       	brcs	.-32     	; 0x1b78 <__addsf3+0x8>
    1b98:	ba 17       	cp	r27, r26
    1b9a:	62 07       	cpc	r22, r18
    1b9c:	73 07       	cpc	r23, r19
    1b9e:	84 07       	cpc	r24, r20
    1ba0:	95 07       	cpc	r25, r21
    1ba2:	18 f0       	brcs	.+6      	; 0x1baa <__addsf3x+0x18>
    1ba4:	71 f4       	brne	.+28     	; 0x1bc2 <__addsf3x+0x30>
    1ba6:	9e f5       	brtc	.+102    	; 0x1c0e <__addsf3x+0x7c>
    1ba8:	8f c1       	rjmp	.+798    	; 0x1ec8 <__fp_zero>
    1baa:	0e f4       	brtc	.+2      	; 0x1bae <__addsf3x+0x1c>
    1bac:	e0 95       	com	r30
    1bae:	0b 2e       	mov	r0, r27
    1bb0:	ba 2f       	mov	r27, r26
    1bb2:	a0 2d       	mov	r26, r0
    1bb4:	0b 01       	movw	r0, r22
    1bb6:	b9 01       	movw	r22, r18
    1bb8:	90 01       	movw	r18, r0
    1bba:	0c 01       	movw	r0, r24
    1bbc:	ca 01       	movw	r24, r20
    1bbe:	a0 01       	movw	r20, r0
    1bc0:	11 24       	eor	r1, r1
    1bc2:	ff 27       	eor	r31, r31
    1bc4:	59 1b       	sub	r21, r25
    1bc6:	99 f0       	breq	.+38     	; 0x1bee <__addsf3x+0x5c>
    1bc8:	59 3f       	cpi	r21, 0xF9	; 249
    1bca:	50 f4       	brcc	.+20     	; 0x1be0 <__addsf3x+0x4e>
    1bcc:	50 3e       	cpi	r21, 0xE0	; 224
    1bce:	68 f1       	brcs	.+90     	; 0x1c2a <__addsf3x+0x98>
    1bd0:	1a 16       	cp	r1, r26
    1bd2:	f0 40       	sbci	r31, 0x00	; 0
    1bd4:	a2 2f       	mov	r26, r18
    1bd6:	23 2f       	mov	r18, r19
    1bd8:	34 2f       	mov	r19, r20
    1bda:	44 27       	eor	r20, r20
    1bdc:	58 5f       	subi	r21, 0xF8	; 248
    1bde:	f3 cf       	rjmp	.-26     	; 0x1bc6 <__addsf3x+0x34>
    1be0:	46 95       	lsr	r20
    1be2:	37 95       	ror	r19
    1be4:	27 95       	ror	r18
    1be6:	a7 95       	ror	r26
    1be8:	f0 40       	sbci	r31, 0x00	; 0
    1bea:	53 95       	inc	r21
    1bec:	c9 f7       	brne	.-14     	; 0x1be0 <__addsf3x+0x4e>
    1bee:	7e f4       	brtc	.+30     	; 0x1c0e <__addsf3x+0x7c>
    1bf0:	1f 16       	cp	r1, r31
    1bf2:	ba 0b       	sbc	r27, r26
    1bf4:	62 0b       	sbc	r22, r18
    1bf6:	73 0b       	sbc	r23, r19
    1bf8:	84 0b       	sbc	r24, r20
    1bfa:	ba f0       	brmi	.+46     	; 0x1c2a <__addsf3x+0x98>
    1bfc:	91 50       	subi	r25, 0x01	; 1
    1bfe:	a1 f0       	breq	.+40     	; 0x1c28 <__addsf3x+0x96>
    1c00:	ff 0f       	add	r31, r31
    1c02:	bb 1f       	adc	r27, r27
    1c04:	66 1f       	adc	r22, r22
    1c06:	77 1f       	adc	r23, r23
    1c08:	88 1f       	adc	r24, r24
    1c0a:	c2 f7       	brpl	.-16     	; 0x1bfc <__addsf3x+0x6a>
    1c0c:	0e c0       	rjmp	.+28     	; 0x1c2a <__addsf3x+0x98>
    1c0e:	ba 0f       	add	r27, r26
    1c10:	62 1f       	adc	r22, r18
    1c12:	73 1f       	adc	r23, r19
    1c14:	84 1f       	adc	r24, r20
    1c16:	48 f4       	brcc	.+18     	; 0x1c2a <__addsf3x+0x98>
    1c18:	87 95       	ror	r24
    1c1a:	77 95       	ror	r23
    1c1c:	67 95       	ror	r22
    1c1e:	b7 95       	ror	r27
    1c20:	f7 95       	ror	r31
    1c22:	9e 3f       	cpi	r25, 0xFE	; 254
    1c24:	08 f0       	brcs	.+2      	; 0x1c28 <__addsf3x+0x96>
    1c26:	b3 cf       	rjmp	.-154    	; 0x1b8e <__addsf3+0x1e>
    1c28:	93 95       	inc	r25
    1c2a:	88 0f       	add	r24, r24
    1c2c:	08 f0       	brcs	.+2      	; 0x1c30 <__addsf3x+0x9e>
    1c2e:	99 27       	eor	r25, r25
    1c30:	ee 0f       	add	r30, r30
    1c32:	97 95       	ror	r25
    1c34:	87 95       	ror	r24
    1c36:	08 95       	ret

00001c38 <__cmpsf2>:
    1c38:	d9 d0       	rcall	.+434    	; 0x1dec <__fp_cmp>
    1c3a:	08 f4       	brcc	.+2      	; 0x1c3e <__cmpsf2+0x6>
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	08 95       	ret

00001c40 <__divsf3>:
    1c40:	0c d0       	rcall	.+24     	; 0x1c5a <__divsf3x>
    1c42:	0f c1       	rjmp	.+542    	; 0x1e62 <__fp_round>
    1c44:	07 d1       	rcall	.+526    	; 0x1e54 <__fp_pscB>
    1c46:	40 f0       	brcs	.+16     	; 0x1c58 <__divsf3+0x18>
    1c48:	fe d0       	rcall	.+508    	; 0x1e46 <__fp_pscA>
    1c4a:	30 f0       	brcs	.+12     	; 0x1c58 <__divsf3+0x18>
    1c4c:	21 f4       	brne	.+8      	; 0x1c56 <__divsf3+0x16>
    1c4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1c50:	19 f0       	breq	.+6      	; 0x1c58 <__divsf3+0x18>
    1c52:	f0 c0       	rjmp	.+480    	; 0x1e34 <__fp_inf>
    1c54:	51 11       	cpse	r21, r1
    1c56:	39 c1       	rjmp	.+626    	; 0x1eca <__fp_szero>
    1c58:	f3 c0       	rjmp	.+486    	; 0x1e40 <__fp_nan>

00001c5a <__divsf3x>:
    1c5a:	14 d1       	rcall	.+552    	; 0x1e84 <__fp_split3>
    1c5c:	98 f3       	brcs	.-26     	; 0x1c44 <__divsf3+0x4>

00001c5e <__divsf3_pse>:
    1c5e:	99 23       	and	r25, r25
    1c60:	c9 f3       	breq	.-14     	; 0x1c54 <__divsf3+0x14>
    1c62:	55 23       	and	r21, r21
    1c64:	b1 f3       	breq	.-20     	; 0x1c52 <__divsf3+0x12>
    1c66:	95 1b       	sub	r25, r21
    1c68:	55 0b       	sbc	r21, r21
    1c6a:	bb 27       	eor	r27, r27
    1c6c:	aa 27       	eor	r26, r26
    1c6e:	62 17       	cp	r22, r18
    1c70:	73 07       	cpc	r23, r19
    1c72:	84 07       	cpc	r24, r20
    1c74:	38 f0       	brcs	.+14     	; 0x1c84 <__divsf3_pse+0x26>
    1c76:	9f 5f       	subi	r25, 0xFF	; 255
    1c78:	5f 4f       	sbci	r21, 0xFF	; 255
    1c7a:	22 0f       	add	r18, r18
    1c7c:	33 1f       	adc	r19, r19
    1c7e:	44 1f       	adc	r20, r20
    1c80:	aa 1f       	adc	r26, r26
    1c82:	a9 f3       	breq	.-22     	; 0x1c6e <__divsf3_pse+0x10>
    1c84:	33 d0       	rcall	.+102    	; 0x1cec <__divsf3_pse+0x8e>
    1c86:	0e 2e       	mov	r0, r30
    1c88:	3a f0       	brmi	.+14     	; 0x1c98 <__divsf3_pse+0x3a>
    1c8a:	e0 e8       	ldi	r30, 0x80	; 128
    1c8c:	30 d0       	rcall	.+96     	; 0x1cee <__divsf3_pse+0x90>
    1c8e:	91 50       	subi	r25, 0x01	; 1
    1c90:	50 40       	sbci	r21, 0x00	; 0
    1c92:	e6 95       	lsr	r30
    1c94:	00 1c       	adc	r0, r0
    1c96:	ca f7       	brpl	.-14     	; 0x1c8a <__divsf3_pse+0x2c>
    1c98:	29 d0       	rcall	.+82     	; 0x1cec <__divsf3_pse+0x8e>
    1c9a:	fe 2f       	mov	r31, r30
    1c9c:	27 d0       	rcall	.+78     	; 0x1cec <__divsf3_pse+0x8e>
    1c9e:	66 0f       	add	r22, r22
    1ca0:	77 1f       	adc	r23, r23
    1ca2:	88 1f       	adc	r24, r24
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	26 17       	cp	r18, r22
    1ca8:	37 07       	cpc	r19, r23
    1caa:	48 07       	cpc	r20, r24
    1cac:	ab 07       	cpc	r26, r27
    1cae:	b0 e8       	ldi	r27, 0x80	; 128
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <__divsf3_pse+0x56>
    1cb2:	bb 0b       	sbc	r27, r27
    1cb4:	80 2d       	mov	r24, r0
    1cb6:	bf 01       	movw	r22, r30
    1cb8:	ff 27       	eor	r31, r31
    1cba:	93 58       	subi	r25, 0x83	; 131
    1cbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbe:	2a f0       	brmi	.+10     	; 0x1cca <__divsf3_pse+0x6c>
    1cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    1cc2:	51 05       	cpc	r21, r1
    1cc4:	68 f0       	brcs	.+26     	; 0x1ce0 <__divsf3_pse+0x82>
    1cc6:	b6 c0       	rjmp	.+364    	; 0x1e34 <__fp_inf>
    1cc8:	00 c1       	rjmp	.+512    	; 0x1eca <__fp_szero>
    1cca:	5f 3f       	cpi	r21, 0xFF	; 255
    1ccc:	ec f3       	brlt	.-6      	; 0x1cc8 <__divsf3_pse+0x6a>
    1cce:	98 3e       	cpi	r25, 0xE8	; 232
    1cd0:	dc f3       	brlt	.-10     	; 0x1cc8 <__divsf3_pse+0x6a>
    1cd2:	86 95       	lsr	r24
    1cd4:	77 95       	ror	r23
    1cd6:	67 95       	ror	r22
    1cd8:	b7 95       	ror	r27
    1cda:	f7 95       	ror	r31
    1cdc:	9f 5f       	subi	r25, 0xFF	; 255
    1cde:	c9 f7       	brne	.-14     	; 0x1cd2 <__divsf3_pse+0x74>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	91 1d       	adc	r25, r1
    1ce4:	96 95       	lsr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	97 f9       	bld	r25, 7
    1cea:	08 95       	ret
    1cec:	e1 e0       	ldi	r30, 0x01	; 1
    1cee:	66 0f       	add	r22, r22
    1cf0:	77 1f       	adc	r23, r23
    1cf2:	88 1f       	adc	r24, r24
    1cf4:	bb 1f       	adc	r27, r27
    1cf6:	62 17       	cp	r22, r18
    1cf8:	73 07       	cpc	r23, r19
    1cfa:	84 07       	cpc	r24, r20
    1cfc:	ba 07       	cpc	r27, r26
    1cfe:	20 f0       	brcs	.+8      	; 0x1d08 <__divsf3_pse+0xaa>
    1d00:	62 1b       	sub	r22, r18
    1d02:	73 0b       	sbc	r23, r19
    1d04:	84 0b       	sbc	r24, r20
    1d06:	ba 0b       	sbc	r27, r26
    1d08:	ee 1f       	adc	r30, r30
    1d0a:	88 f7       	brcc	.-30     	; 0x1cee <__divsf3_pse+0x90>
    1d0c:	e0 95       	com	r30
    1d0e:	08 95       	ret

00001d10 <__fixsfsi>:
    1d10:	04 d0       	rcall	.+8      	; 0x1d1a <__fixunssfsi>
    1d12:	68 94       	set
    1d14:	b1 11       	cpse	r27, r1
    1d16:	d9 c0       	rjmp	.+434    	; 0x1eca <__fp_szero>
    1d18:	08 95       	ret

00001d1a <__fixunssfsi>:
    1d1a:	bc d0       	rcall	.+376    	; 0x1e94 <__fp_splitA>
    1d1c:	88 f0       	brcs	.+34     	; 0x1d40 <__fixunssfsi+0x26>
    1d1e:	9f 57       	subi	r25, 0x7F	; 127
    1d20:	90 f0       	brcs	.+36     	; 0x1d46 <__fixunssfsi+0x2c>
    1d22:	b9 2f       	mov	r27, r25
    1d24:	99 27       	eor	r25, r25
    1d26:	b7 51       	subi	r27, 0x17	; 23
    1d28:	a0 f0       	brcs	.+40     	; 0x1d52 <__fixunssfsi+0x38>
    1d2a:	d1 f0       	breq	.+52     	; 0x1d60 <__fixunssfsi+0x46>
    1d2c:	66 0f       	add	r22, r22
    1d2e:	77 1f       	adc	r23, r23
    1d30:	88 1f       	adc	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	1a f0       	brmi	.+6      	; 0x1d3c <__fixunssfsi+0x22>
    1d36:	ba 95       	dec	r27
    1d38:	c9 f7       	brne	.-14     	; 0x1d2c <__fixunssfsi+0x12>
    1d3a:	12 c0       	rjmp	.+36     	; 0x1d60 <__fixunssfsi+0x46>
    1d3c:	b1 30       	cpi	r27, 0x01	; 1
    1d3e:	81 f0       	breq	.+32     	; 0x1d60 <__fixunssfsi+0x46>
    1d40:	c3 d0       	rcall	.+390    	; 0x1ec8 <__fp_zero>
    1d42:	b1 e0       	ldi	r27, 0x01	; 1
    1d44:	08 95       	ret
    1d46:	c0 c0       	rjmp	.+384    	; 0x1ec8 <__fp_zero>
    1d48:	67 2f       	mov	r22, r23
    1d4a:	78 2f       	mov	r23, r24
    1d4c:	88 27       	eor	r24, r24
    1d4e:	b8 5f       	subi	r27, 0xF8	; 248
    1d50:	39 f0       	breq	.+14     	; 0x1d60 <__fixunssfsi+0x46>
    1d52:	b9 3f       	cpi	r27, 0xF9	; 249
    1d54:	cc f3       	brlt	.-14     	; 0x1d48 <__fixunssfsi+0x2e>
    1d56:	86 95       	lsr	r24
    1d58:	77 95       	ror	r23
    1d5a:	67 95       	ror	r22
    1d5c:	b3 95       	inc	r27
    1d5e:	d9 f7       	brne	.-10     	; 0x1d56 <__fixunssfsi+0x3c>
    1d60:	3e f4       	brtc	.+14     	; 0x1d70 <__fixunssfsi+0x56>
    1d62:	90 95       	com	r25
    1d64:	80 95       	com	r24
    1d66:	70 95       	com	r23
    1d68:	61 95       	neg	r22
    1d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d70:	08 95       	ret

00001d72 <__floatunsisf>:
    1d72:	e8 94       	clt
    1d74:	09 c0       	rjmp	.+18     	; 0x1d88 <__floatsisf+0x12>

00001d76 <__floatsisf>:
    1d76:	97 fb       	bst	r25, 7
    1d78:	3e f4       	brtc	.+14     	; 0x1d88 <__floatsisf+0x12>
    1d7a:	90 95       	com	r25
    1d7c:	80 95       	com	r24
    1d7e:	70 95       	com	r23
    1d80:	61 95       	neg	r22
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	8f 4f       	sbci	r24, 0xFF	; 255
    1d86:	9f 4f       	sbci	r25, 0xFF	; 255
    1d88:	99 23       	and	r25, r25
    1d8a:	a9 f0       	breq	.+42     	; 0x1db6 <__floatsisf+0x40>
    1d8c:	f9 2f       	mov	r31, r25
    1d8e:	96 e9       	ldi	r25, 0x96	; 150
    1d90:	bb 27       	eor	r27, r27
    1d92:	93 95       	inc	r25
    1d94:	f6 95       	lsr	r31
    1d96:	87 95       	ror	r24
    1d98:	77 95       	ror	r23
    1d9a:	67 95       	ror	r22
    1d9c:	b7 95       	ror	r27
    1d9e:	f1 11       	cpse	r31, r1
    1da0:	f8 cf       	rjmp	.-16     	; 0x1d92 <__floatsisf+0x1c>
    1da2:	fa f4       	brpl	.+62     	; 0x1de2 <__floatsisf+0x6c>
    1da4:	bb 0f       	add	r27, r27
    1da6:	11 f4       	brne	.+4      	; 0x1dac <__floatsisf+0x36>
    1da8:	60 ff       	sbrs	r22, 0
    1daa:	1b c0       	rjmp	.+54     	; 0x1de2 <__floatsisf+0x6c>
    1dac:	6f 5f       	subi	r22, 0xFF	; 255
    1dae:	7f 4f       	sbci	r23, 0xFF	; 255
    1db0:	8f 4f       	sbci	r24, 0xFF	; 255
    1db2:	9f 4f       	sbci	r25, 0xFF	; 255
    1db4:	16 c0       	rjmp	.+44     	; 0x1de2 <__floatsisf+0x6c>
    1db6:	88 23       	and	r24, r24
    1db8:	11 f0       	breq	.+4      	; 0x1dbe <__floatsisf+0x48>
    1dba:	96 e9       	ldi	r25, 0x96	; 150
    1dbc:	11 c0       	rjmp	.+34     	; 0x1de0 <__floatsisf+0x6a>
    1dbe:	77 23       	and	r23, r23
    1dc0:	21 f0       	breq	.+8      	; 0x1dca <__floatsisf+0x54>
    1dc2:	9e e8       	ldi	r25, 0x8E	; 142
    1dc4:	87 2f       	mov	r24, r23
    1dc6:	76 2f       	mov	r23, r22
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <__floatsisf+0x5e>
    1dca:	66 23       	and	r22, r22
    1dcc:	71 f0       	breq	.+28     	; 0x1dea <__floatsisf+0x74>
    1dce:	96 e8       	ldi	r25, 0x86	; 134
    1dd0:	86 2f       	mov	r24, r22
    1dd2:	70 e0       	ldi	r23, 0x00	; 0
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	2a f0       	brmi	.+10     	; 0x1de2 <__floatsisf+0x6c>
    1dd8:	9a 95       	dec	r25
    1dda:	66 0f       	add	r22, r22
    1ddc:	77 1f       	adc	r23, r23
    1dde:	88 1f       	adc	r24, r24
    1de0:	da f7       	brpl	.-10     	; 0x1dd8 <__floatsisf+0x62>
    1de2:	88 0f       	add	r24, r24
    1de4:	96 95       	lsr	r25
    1de6:	87 95       	ror	r24
    1de8:	97 f9       	bld	r25, 7
    1dea:	08 95       	ret

00001dec <__fp_cmp>:
    1dec:	99 0f       	add	r25, r25
    1dee:	00 08       	sbc	r0, r0
    1df0:	55 0f       	add	r21, r21
    1df2:	aa 0b       	sbc	r26, r26
    1df4:	e0 e8       	ldi	r30, 0x80	; 128
    1df6:	fe ef       	ldi	r31, 0xFE	; 254
    1df8:	16 16       	cp	r1, r22
    1dfa:	17 06       	cpc	r1, r23
    1dfc:	e8 07       	cpc	r30, r24
    1dfe:	f9 07       	cpc	r31, r25
    1e00:	c0 f0       	brcs	.+48     	; 0x1e32 <__fp_cmp+0x46>
    1e02:	12 16       	cp	r1, r18
    1e04:	13 06       	cpc	r1, r19
    1e06:	e4 07       	cpc	r30, r20
    1e08:	f5 07       	cpc	r31, r21
    1e0a:	98 f0       	brcs	.+38     	; 0x1e32 <__fp_cmp+0x46>
    1e0c:	62 1b       	sub	r22, r18
    1e0e:	73 0b       	sbc	r23, r19
    1e10:	84 0b       	sbc	r24, r20
    1e12:	95 0b       	sbc	r25, r21
    1e14:	39 f4       	brne	.+14     	; 0x1e24 <__fp_cmp+0x38>
    1e16:	0a 26       	eor	r0, r26
    1e18:	61 f0       	breq	.+24     	; 0x1e32 <__fp_cmp+0x46>
    1e1a:	23 2b       	or	r18, r19
    1e1c:	24 2b       	or	r18, r20
    1e1e:	25 2b       	or	r18, r21
    1e20:	21 f4       	brne	.+8      	; 0x1e2a <__fp_cmp+0x3e>
    1e22:	08 95       	ret
    1e24:	0a 26       	eor	r0, r26
    1e26:	09 f4       	brne	.+2      	; 0x1e2a <__fp_cmp+0x3e>
    1e28:	a1 40       	sbci	r26, 0x01	; 1
    1e2a:	a6 95       	lsr	r26
    1e2c:	8f ef       	ldi	r24, 0xFF	; 255
    1e2e:	81 1d       	adc	r24, r1
    1e30:	81 1d       	adc	r24, r1
    1e32:	08 95       	ret

00001e34 <__fp_inf>:
    1e34:	97 f9       	bld	r25, 7
    1e36:	9f 67       	ori	r25, 0x7F	; 127
    1e38:	80 e8       	ldi	r24, 0x80	; 128
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	08 95       	ret

00001e40 <__fp_nan>:
    1e40:	9f ef       	ldi	r25, 0xFF	; 255
    1e42:	80 ec       	ldi	r24, 0xC0	; 192
    1e44:	08 95       	ret

00001e46 <__fp_pscA>:
    1e46:	00 24       	eor	r0, r0
    1e48:	0a 94       	dec	r0
    1e4a:	16 16       	cp	r1, r22
    1e4c:	17 06       	cpc	r1, r23
    1e4e:	18 06       	cpc	r1, r24
    1e50:	09 06       	cpc	r0, r25
    1e52:	08 95       	ret

00001e54 <__fp_pscB>:
    1e54:	00 24       	eor	r0, r0
    1e56:	0a 94       	dec	r0
    1e58:	12 16       	cp	r1, r18
    1e5a:	13 06       	cpc	r1, r19
    1e5c:	14 06       	cpc	r1, r20
    1e5e:	05 06       	cpc	r0, r21
    1e60:	08 95       	ret

00001e62 <__fp_round>:
    1e62:	09 2e       	mov	r0, r25
    1e64:	03 94       	inc	r0
    1e66:	00 0c       	add	r0, r0
    1e68:	11 f4       	brne	.+4      	; 0x1e6e <__fp_round+0xc>
    1e6a:	88 23       	and	r24, r24
    1e6c:	52 f0       	brmi	.+20     	; 0x1e82 <__fp_round+0x20>
    1e6e:	bb 0f       	add	r27, r27
    1e70:	40 f4       	brcc	.+16     	; 0x1e82 <__fp_round+0x20>
    1e72:	bf 2b       	or	r27, r31
    1e74:	11 f4       	brne	.+4      	; 0x1e7a <__fp_round+0x18>
    1e76:	60 ff       	sbrs	r22, 0
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <__fp_round+0x20>
    1e7a:	6f 5f       	subi	r22, 0xFF	; 255
    1e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e80:	9f 4f       	sbci	r25, 0xFF	; 255
    1e82:	08 95       	ret

00001e84 <__fp_split3>:
    1e84:	57 fd       	sbrc	r21, 7
    1e86:	90 58       	subi	r25, 0x80	; 128
    1e88:	44 0f       	add	r20, r20
    1e8a:	55 1f       	adc	r21, r21
    1e8c:	59 f0       	breq	.+22     	; 0x1ea4 <__fp_splitA+0x10>
    1e8e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e90:	71 f0       	breq	.+28     	; 0x1eae <__fp_splitA+0x1a>
    1e92:	47 95       	ror	r20

00001e94 <__fp_splitA>:
    1e94:	88 0f       	add	r24, r24
    1e96:	97 fb       	bst	r25, 7
    1e98:	99 1f       	adc	r25, r25
    1e9a:	61 f0       	breq	.+24     	; 0x1eb4 <__fp_splitA+0x20>
    1e9c:	9f 3f       	cpi	r25, 0xFF	; 255
    1e9e:	79 f0       	breq	.+30     	; 0x1ebe <__fp_splitA+0x2a>
    1ea0:	87 95       	ror	r24
    1ea2:	08 95       	ret
    1ea4:	12 16       	cp	r1, r18
    1ea6:	13 06       	cpc	r1, r19
    1ea8:	14 06       	cpc	r1, r20
    1eaa:	55 1f       	adc	r21, r21
    1eac:	f2 cf       	rjmp	.-28     	; 0x1e92 <__fp_split3+0xe>
    1eae:	46 95       	lsr	r20
    1eb0:	f1 df       	rcall	.-30     	; 0x1e94 <__fp_splitA>
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <__fp_splitA+0x30>
    1eb4:	16 16       	cp	r1, r22
    1eb6:	17 06       	cpc	r1, r23
    1eb8:	18 06       	cpc	r1, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	f1 cf       	rjmp	.-30     	; 0x1ea0 <__fp_splitA+0xc>
    1ebe:	86 95       	lsr	r24
    1ec0:	71 05       	cpc	r23, r1
    1ec2:	61 05       	cpc	r22, r1
    1ec4:	08 94       	sec
    1ec6:	08 95       	ret

00001ec8 <__fp_zero>:
    1ec8:	e8 94       	clt

00001eca <__fp_szero>:
    1eca:	bb 27       	eor	r27, r27
    1ecc:	66 27       	eor	r22, r22
    1ece:	77 27       	eor	r23, r23
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	97 f9       	bld	r25, 7
    1ed4:	08 95       	ret

00001ed6 <__gesf2>:
    1ed6:	8a df       	rcall	.-236    	; 0x1dec <__fp_cmp>
    1ed8:	08 f4       	brcc	.+2      	; 0x1edc <__gesf2+0x6>
    1eda:	8f ef       	ldi	r24, 0xFF	; 255
    1edc:	08 95       	ret

00001ede <__mulsf3>:
    1ede:	0b d0       	rcall	.+22     	; 0x1ef6 <__mulsf3x>
    1ee0:	c0 cf       	rjmp	.-128    	; 0x1e62 <__fp_round>
    1ee2:	b1 df       	rcall	.-158    	; 0x1e46 <__fp_pscA>
    1ee4:	28 f0       	brcs	.+10     	; 0x1ef0 <__mulsf3+0x12>
    1ee6:	b6 df       	rcall	.-148    	; 0x1e54 <__fp_pscB>
    1ee8:	18 f0       	brcs	.+6      	; 0x1ef0 <__mulsf3+0x12>
    1eea:	95 23       	and	r25, r21
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <__mulsf3+0x12>
    1eee:	a2 cf       	rjmp	.-188    	; 0x1e34 <__fp_inf>
    1ef0:	a7 cf       	rjmp	.-178    	; 0x1e40 <__fp_nan>
    1ef2:	11 24       	eor	r1, r1
    1ef4:	ea cf       	rjmp	.-44     	; 0x1eca <__fp_szero>

00001ef6 <__mulsf3x>:
    1ef6:	c6 df       	rcall	.-116    	; 0x1e84 <__fp_split3>
    1ef8:	a0 f3       	brcs	.-24     	; 0x1ee2 <__mulsf3+0x4>

00001efa <__mulsf3_pse>:
    1efa:	95 9f       	mul	r25, r21
    1efc:	d1 f3       	breq	.-12     	; 0x1ef2 <__mulsf3+0x14>
    1efe:	95 0f       	add	r25, r21
    1f00:	50 e0       	ldi	r21, 0x00	; 0
    1f02:	55 1f       	adc	r21, r21
    1f04:	62 9f       	mul	r22, r18
    1f06:	f0 01       	movw	r30, r0
    1f08:	72 9f       	mul	r23, r18
    1f0a:	bb 27       	eor	r27, r27
    1f0c:	f0 0d       	add	r31, r0
    1f0e:	b1 1d       	adc	r27, r1
    1f10:	63 9f       	mul	r22, r19
    1f12:	aa 27       	eor	r26, r26
    1f14:	f0 0d       	add	r31, r0
    1f16:	b1 1d       	adc	r27, r1
    1f18:	aa 1f       	adc	r26, r26
    1f1a:	64 9f       	mul	r22, r20
    1f1c:	66 27       	eor	r22, r22
    1f1e:	b0 0d       	add	r27, r0
    1f20:	a1 1d       	adc	r26, r1
    1f22:	66 1f       	adc	r22, r22
    1f24:	82 9f       	mul	r24, r18
    1f26:	22 27       	eor	r18, r18
    1f28:	b0 0d       	add	r27, r0
    1f2a:	a1 1d       	adc	r26, r1
    1f2c:	62 1f       	adc	r22, r18
    1f2e:	73 9f       	mul	r23, r19
    1f30:	b0 0d       	add	r27, r0
    1f32:	a1 1d       	adc	r26, r1
    1f34:	62 1f       	adc	r22, r18
    1f36:	83 9f       	mul	r24, r19
    1f38:	a0 0d       	add	r26, r0
    1f3a:	61 1d       	adc	r22, r1
    1f3c:	22 1f       	adc	r18, r18
    1f3e:	74 9f       	mul	r23, r20
    1f40:	33 27       	eor	r19, r19
    1f42:	a0 0d       	add	r26, r0
    1f44:	61 1d       	adc	r22, r1
    1f46:	23 1f       	adc	r18, r19
    1f48:	84 9f       	mul	r24, r20
    1f4a:	60 0d       	add	r22, r0
    1f4c:	21 1d       	adc	r18, r1
    1f4e:	82 2f       	mov	r24, r18
    1f50:	76 2f       	mov	r23, r22
    1f52:	6a 2f       	mov	r22, r26
    1f54:	11 24       	eor	r1, r1
    1f56:	9f 57       	subi	r25, 0x7F	; 127
    1f58:	50 40       	sbci	r21, 0x00	; 0
    1f5a:	8a f0       	brmi	.+34     	; 0x1f7e <__mulsf3_pse+0x84>
    1f5c:	e1 f0       	breq	.+56     	; 0x1f96 <__mulsf3_pse+0x9c>
    1f5e:	88 23       	and	r24, r24
    1f60:	4a f0       	brmi	.+18     	; 0x1f74 <__mulsf3_pse+0x7a>
    1f62:	ee 0f       	add	r30, r30
    1f64:	ff 1f       	adc	r31, r31
    1f66:	bb 1f       	adc	r27, r27
    1f68:	66 1f       	adc	r22, r22
    1f6a:	77 1f       	adc	r23, r23
    1f6c:	88 1f       	adc	r24, r24
    1f6e:	91 50       	subi	r25, 0x01	; 1
    1f70:	50 40       	sbci	r21, 0x00	; 0
    1f72:	a9 f7       	brne	.-22     	; 0x1f5e <__mulsf3_pse+0x64>
    1f74:	9e 3f       	cpi	r25, 0xFE	; 254
    1f76:	51 05       	cpc	r21, r1
    1f78:	70 f0       	brcs	.+28     	; 0x1f96 <__mulsf3_pse+0x9c>
    1f7a:	5c cf       	rjmp	.-328    	; 0x1e34 <__fp_inf>
    1f7c:	a6 cf       	rjmp	.-180    	; 0x1eca <__fp_szero>
    1f7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1f80:	ec f3       	brlt	.-6      	; 0x1f7c <__mulsf3_pse+0x82>
    1f82:	98 3e       	cpi	r25, 0xE8	; 232
    1f84:	dc f3       	brlt	.-10     	; 0x1f7c <__mulsf3_pse+0x82>
    1f86:	86 95       	lsr	r24
    1f88:	77 95       	ror	r23
    1f8a:	67 95       	ror	r22
    1f8c:	b7 95       	ror	r27
    1f8e:	f7 95       	ror	r31
    1f90:	e7 95       	ror	r30
    1f92:	9f 5f       	subi	r25, 0xFF	; 255
    1f94:	c1 f7       	brne	.-16     	; 0x1f86 <__mulsf3_pse+0x8c>
    1f96:	fe 2b       	or	r31, r30
    1f98:	88 0f       	add	r24, r24
    1f9a:	91 1d       	adc	r25, r1
    1f9c:	96 95       	lsr	r25
    1f9e:	87 95       	ror	r24
    1fa0:	97 f9       	bld	r25, 7
    1fa2:	08 95       	ret

00001fa4 <__divmodhi4>:
    1fa4:	97 fb       	bst	r25, 7
    1fa6:	07 2e       	mov	r0, r23
    1fa8:	16 f4       	brtc	.+4      	; 0x1fae <__divmodhi4+0xa>
    1faa:	00 94       	com	r0
    1fac:	07 d0       	rcall	.+14     	; 0x1fbc <__divmodhi4_neg1>
    1fae:	77 fd       	sbrc	r23, 7
    1fb0:	09 d0       	rcall	.+18     	; 0x1fc4 <__divmodhi4_neg2>
    1fb2:	0e 94 05 10 	call	0x200a	; 0x200a <__udivmodhi4>
    1fb6:	07 fc       	sbrc	r0, 7
    1fb8:	05 d0       	rcall	.+10     	; 0x1fc4 <__divmodhi4_neg2>
    1fba:	3e f4       	brtc	.+14     	; 0x1fca <__divmodhi4_exit>

00001fbc <__divmodhi4_neg1>:
    1fbc:	90 95       	com	r25
    1fbe:	81 95       	neg	r24
    1fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc2:	08 95       	ret

00001fc4 <__divmodhi4_neg2>:
    1fc4:	70 95       	com	r23
    1fc6:	61 95       	neg	r22
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255

00001fca <__divmodhi4_exit>:
    1fca:	08 95       	ret

00001fcc <__divmodsi4>:
    1fcc:	05 2e       	mov	r0, r21
    1fce:	97 fb       	bst	r25, 7
    1fd0:	1e f4       	brtc	.+6      	; 0x1fd8 <__divmodsi4+0xc>
    1fd2:	00 94       	com	r0
    1fd4:	0e 94 fd 0f 	call	0x1ffa	; 0x1ffa <__negsi2>
    1fd8:	57 fd       	sbrc	r21, 7
    1fda:	07 d0       	rcall	.+14     	; 0x1fea <__divmodsi4_neg2>
    1fdc:	0e 94 19 10 	call	0x2032	; 0x2032 <__udivmodsi4>
    1fe0:	07 fc       	sbrc	r0, 7
    1fe2:	03 d0       	rcall	.+6      	; 0x1fea <__divmodsi4_neg2>
    1fe4:	4e f4       	brtc	.+18     	; 0x1ff8 <__divmodsi4_exit>
    1fe6:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__negsi2>

00001fea <__divmodsi4_neg2>:
    1fea:	50 95       	com	r21
    1fec:	40 95       	com	r20
    1fee:	30 95       	com	r19
    1ff0:	21 95       	neg	r18
    1ff2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ff4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ff6:	5f 4f       	sbci	r21, 0xFF	; 255

00001ff8 <__divmodsi4_exit>:
    1ff8:	08 95       	ret

00001ffa <__negsi2>:
    1ffa:	90 95       	com	r25
    1ffc:	80 95       	com	r24
    1ffe:	70 95       	com	r23
    2000:	61 95       	neg	r22
    2002:	7f 4f       	sbci	r23, 0xFF	; 255
    2004:	8f 4f       	sbci	r24, 0xFF	; 255
    2006:	9f 4f       	sbci	r25, 0xFF	; 255
    2008:	08 95       	ret

0000200a <__udivmodhi4>:
    200a:	aa 1b       	sub	r26, r26
    200c:	bb 1b       	sub	r27, r27
    200e:	51 e1       	ldi	r21, 0x11	; 17
    2010:	07 c0       	rjmp	.+14     	; 0x2020 <__udivmodhi4_ep>

00002012 <__udivmodhi4_loop>:
    2012:	aa 1f       	adc	r26, r26
    2014:	bb 1f       	adc	r27, r27
    2016:	a6 17       	cp	r26, r22
    2018:	b7 07       	cpc	r27, r23
    201a:	10 f0       	brcs	.+4      	; 0x2020 <__udivmodhi4_ep>
    201c:	a6 1b       	sub	r26, r22
    201e:	b7 0b       	sbc	r27, r23

00002020 <__udivmodhi4_ep>:
    2020:	88 1f       	adc	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	5a 95       	dec	r21
    2026:	a9 f7       	brne	.-22     	; 0x2012 <__udivmodhi4_loop>
    2028:	80 95       	com	r24
    202a:	90 95       	com	r25
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	08 95       	ret

00002032 <__udivmodsi4>:
    2032:	a1 e2       	ldi	r26, 0x21	; 33
    2034:	1a 2e       	mov	r1, r26
    2036:	aa 1b       	sub	r26, r26
    2038:	bb 1b       	sub	r27, r27
    203a:	fd 01       	movw	r30, r26
    203c:	0d c0       	rjmp	.+26     	; 0x2058 <__udivmodsi4_ep>

0000203e <__udivmodsi4_loop>:
    203e:	aa 1f       	adc	r26, r26
    2040:	bb 1f       	adc	r27, r27
    2042:	ee 1f       	adc	r30, r30
    2044:	ff 1f       	adc	r31, r31
    2046:	a2 17       	cp	r26, r18
    2048:	b3 07       	cpc	r27, r19
    204a:	e4 07       	cpc	r30, r20
    204c:	f5 07       	cpc	r31, r21
    204e:	20 f0       	brcs	.+8      	; 0x2058 <__udivmodsi4_ep>
    2050:	a2 1b       	sub	r26, r18
    2052:	b3 0b       	sbc	r27, r19
    2054:	e4 0b       	sbc	r30, r20
    2056:	f5 0b       	sbc	r31, r21

00002058 <__udivmodsi4_ep>:
    2058:	66 1f       	adc	r22, r22
    205a:	77 1f       	adc	r23, r23
    205c:	88 1f       	adc	r24, r24
    205e:	99 1f       	adc	r25, r25
    2060:	1a 94       	dec	r1
    2062:	69 f7       	brne	.-38     	; 0x203e <__udivmodsi4_loop>
    2064:	60 95       	com	r22
    2066:	70 95       	com	r23
    2068:	80 95       	com	r24
    206a:	90 95       	com	r25
    206c:	9b 01       	movw	r18, r22
    206e:	ac 01       	movw	r20, r24
    2070:	bd 01       	movw	r22, r26
    2072:	cf 01       	movw	r24, r30
    2074:	08 95       	ret

00002076 <malloc>:
    2076:	cf 93       	push	r28
    2078:	df 93       	push	r29
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	91 05       	cpc	r25, r1
    207e:	10 f4       	brcc	.+4      	; 0x2084 <malloc+0xe>
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	e0 91 20 02 	lds	r30, 0x0220
    2088:	f0 91 21 02 	lds	r31, 0x0221
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	a0 e0       	ldi	r26, 0x00	; 0
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	30 97       	sbiw	r30, 0x00	; 0
    2096:	39 f1       	breq	.+78     	; 0x20e6 <malloc+0x70>
    2098:	40 81       	ld	r20, Z
    209a:	51 81       	ldd	r21, Z+1	; 0x01
    209c:	48 17       	cp	r20, r24
    209e:	59 07       	cpc	r21, r25
    20a0:	b8 f0       	brcs	.+46     	; 0x20d0 <malloc+0x5a>
    20a2:	48 17       	cp	r20, r24
    20a4:	59 07       	cpc	r21, r25
    20a6:	71 f4       	brne	.+28     	; 0x20c4 <malloc+0x4e>
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	10 97       	sbiw	r26, 0x00	; 0
    20ae:	29 f0       	breq	.+10     	; 0x20ba <malloc+0x44>
    20b0:	13 96       	adiw	r26, 0x03	; 3
    20b2:	9c 93       	st	X, r25
    20b4:	8e 93       	st	-X, r24
    20b6:	12 97       	sbiw	r26, 0x02	; 2
    20b8:	2c c0       	rjmp	.+88     	; 0x2112 <malloc+0x9c>
    20ba:	90 93 21 02 	sts	0x0221, r25
    20be:	80 93 20 02 	sts	0x0220, r24
    20c2:	27 c0       	rjmp	.+78     	; 0x2112 <malloc+0x9c>
    20c4:	21 15       	cp	r18, r1
    20c6:	31 05       	cpc	r19, r1
    20c8:	31 f0       	breq	.+12     	; 0x20d6 <malloc+0x60>
    20ca:	42 17       	cp	r20, r18
    20cc:	53 07       	cpc	r21, r19
    20ce:	18 f0       	brcs	.+6      	; 0x20d6 <malloc+0x60>
    20d0:	a9 01       	movw	r20, r18
    20d2:	db 01       	movw	r26, r22
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <malloc+0x62>
    20d6:	ef 01       	movw	r28, r30
    20d8:	9a 01       	movw	r18, r20
    20da:	bd 01       	movw	r22, r26
    20dc:	df 01       	movw	r26, r30
    20de:	02 80       	ldd	r0, Z+2	; 0x02
    20e0:	f3 81       	ldd	r31, Z+3	; 0x03
    20e2:	e0 2d       	mov	r30, r0
    20e4:	d7 cf       	rjmp	.-82     	; 0x2094 <malloc+0x1e>
    20e6:	21 15       	cp	r18, r1
    20e8:	31 05       	cpc	r19, r1
    20ea:	f9 f0       	breq	.+62     	; 0x212a <malloc+0xb4>
    20ec:	28 1b       	sub	r18, r24
    20ee:	39 0b       	sbc	r19, r25
    20f0:	24 30       	cpi	r18, 0x04	; 4
    20f2:	31 05       	cpc	r19, r1
    20f4:	80 f4       	brcc	.+32     	; 0x2116 <malloc+0xa0>
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	9b 81       	ldd	r25, Y+3	; 0x03
    20fa:	61 15       	cp	r22, r1
    20fc:	71 05       	cpc	r23, r1
    20fe:	21 f0       	breq	.+8      	; 0x2108 <malloc+0x92>
    2100:	fb 01       	movw	r30, r22
    2102:	93 83       	std	Z+3, r25	; 0x03
    2104:	82 83       	std	Z+2, r24	; 0x02
    2106:	04 c0       	rjmp	.+8      	; 0x2110 <malloc+0x9a>
    2108:	90 93 21 02 	sts	0x0221, r25
    210c:	80 93 20 02 	sts	0x0220, r24
    2110:	fe 01       	movw	r30, r28
    2112:	32 96       	adiw	r30, 0x02	; 2
    2114:	44 c0       	rjmp	.+136    	; 0x219e <malloc+0x128>
    2116:	fe 01       	movw	r30, r28
    2118:	e2 0f       	add	r30, r18
    211a:	f3 1f       	adc	r31, r19
    211c:	81 93       	st	Z+, r24
    211e:	91 93       	st	Z+, r25
    2120:	22 50       	subi	r18, 0x02	; 2
    2122:	31 09       	sbc	r19, r1
    2124:	39 83       	std	Y+1, r19	; 0x01
    2126:	28 83       	st	Y, r18
    2128:	3a c0       	rjmp	.+116    	; 0x219e <malloc+0x128>
    212a:	20 91 1e 02 	lds	r18, 0x021E
    212e:	30 91 1f 02 	lds	r19, 0x021F
    2132:	23 2b       	or	r18, r19
    2134:	41 f4       	brne	.+16     	; 0x2146 <malloc+0xd0>
    2136:	20 91 02 01 	lds	r18, 0x0102
    213a:	30 91 03 01 	lds	r19, 0x0103
    213e:	30 93 1f 02 	sts	0x021F, r19
    2142:	20 93 1e 02 	sts	0x021E, r18
    2146:	20 91 00 01 	lds	r18, 0x0100
    214a:	30 91 01 01 	lds	r19, 0x0101
    214e:	21 15       	cp	r18, r1
    2150:	31 05       	cpc	r19, r1
    2152:	41 f4       	brne	.+16     	; 0x2164 <malloc+0xee>
    2154:	2d b7       	in	r18, 0x3d	; 61
    2156:	3e b7       	in	r19, 0x3e	; 62
    2158:	40 91 04 01 	lds	r20, 0x0104
    215c:	50 91 05 01 	lds	r21, 0x0105
    2160:	24 1b       	sub	r18, r20
    2162:	35 0b       	sbc	r19, r21
    2164:	e0 91 1e 02 	lds	r30, 0x021E
    2168:	f0 91 1f 02 	lds	r31, 0x021F
    216c:	e2 17       	cp	r30, r18
    216e:	f3 07       	cpc	r31, r19
    2170:	a0 f4       	brcc	.+40     	; 0x219a <malloc+0x124>
    2172:	2e 1b       	sub	r18, r30
    2174:	3f 0b       	sbc	r19, r31
    2176:	28 17       	cp	r18, r24
    2178:	39 07       	cpc	r19, r25
    217a:	78 f0       	brcs	.+30     	; 0x219a <malloc+0x124>
    217c:	ac 01       	movw	r20, r24
    217e:	4e 5f       	subi	r20, 0xFE	; 254
    2180:	5f 4f       	sbci	r21, 0xFF	; 255
    2182:	24 17       	cp	r18, r20
    2184:	35 07       	cpc	r19, r21
    2186:	48 f0       	brcs	.+18     	; 0x219a <malloc+0x124>
    2188:	4e 0f       	add	r20, r30
    218a:	5f 1f       	adc	r21, r31
    218c:	50 93 1f 02 	sts	0x021F, r21
    2190:	40 93 1e 02 	sts	0x021E, r20
    2194:	81 93       	st	Z+, r24
    2196:	91 93       	st	Z+, r25
    2198:	02 c0       	rjmp	.+4      	; 0x219e <malloc+0x128>
    219a:	e0 e0       	ldi	r30, 0x00	; 0
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	cf 01       	movw	r24, r30
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	08 95       	ret

000021a6 <free>:
    21a6:	cf 93       	push	r28
    21a8:	df 93       	push	r29
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <free+0xa>
    21ae:	87 c0       	rjmp	.+270    	; 0x22be <free+0x118>
    21b0:	fc 01       	movw	r30, r24
    21b2:	32 97       	sbiw	r30, 0x02	; 2
    21b4:	13 82       	std	Z+3, r1	; 0x03
    21b6:	12 82       	std	Z+2, r1	; 0x02
    21b8:	c0 91 20 02 	lds	r28, 0x0220
    21bc:	d0 91 21 02 	lds	r29, 0x0221
    21c0:	20 97       	sbiw	r28, 0x00	; 0
    21c2:	81 f4       	brne	.+32     	; 0x21e4 <free+0x3e>
    21c4:	20 81       	ld	r18, Z
    21c6:	31 81       	ldd	r19, Z+1	; 0x01
    21c8:	28 0f       	add	r18, r24
    21ca:	39 1f       	adc	r19, r25
    21cc:	80 91 1e 02 	lds	r24, 0x021E
    21d0:	90 91 1f 02 	lds	r25, 0x021F
    21d4:	82 17       	cp	r24, r18
    21d6:	93 07       	cpc	r25, r19
    21d8:	79 f5       	brne	.+94     	; 0x2238 <free+0x92>
    21da:	f0 93 1f 02 	sts	0x021F, r31
    21de:	e0 93 1e 02 	sts	0x021E, r30
    21e2:	6d c0       	rjmp	.+218    	; 0x22be <free+0x118>
    21e4:	de 01       	movw	r26, r28
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	ae 17       	cp	r26, r30
    21ec:	bf 07       	cpc	r27, r31
    21ee:	50 f4       	brcc	.+20     	; 0x2204 <free+0x5e>
    21f0:	12 96       	adiw	r26, 0x02	; 2
    21f2:	4d 91       	ld	r20, X+
    21f4:	5c 91       	ld	r21, X
    21f6:	13 97       	sbiw	r26, 0x03	; 3
    21f8:	9d 01       	movw	r18, r26
    21fa:	41 15       	cp	r20, r1
    21fc:	51 05       	cpc	r21, r1
    21fe:	09 f1       	breq	.+66     	; 0x2242 <free+0x9c>
    2200:	da 01       	movw	r26, r20
    2202:	f3 cf       	rjmp	.-26     	; 0x21ea <free+0x44>
    2204:	b3 83       	std	Z+3, r27	; 0x03
    2206:	a2 83       	std	Z+2, r26	; 0x02
    2208:	40 81       	ld	r20, Z
    220a:	51 81       	ldd	r21, Z+1	; 0x01
    220c:	84 0f       	add	r24, r20
    220e:	95 1f       	adc	r25, r21
    2210:	8a 17       	cp	r24, r26
    2212:	9b 07       	cpc	r25, r27
    2214:	71 f4       	brne	.+28     	; 0x2232 <free+0x8c>
    2216:	8d 91       	ld	r24, X+
    2218:	9c 91       	ld	r25, X
    221a:	11 97       	sbiw	r26, 0x01	; 1
    221c:	84 0f       	add	r24, r20
    221e:	95 1f       	adc	r25, r21
    2220:	02 96       	adiw	r24, 0x02	; 2
    2222:	91 83       	std	Z+1, r25	; 0x01
    2224:	80 83       	st	Z, r24
    2226:	12 96       	adiw	r26, 0x02	; 2
    2228:	8d 91       	ld	r24, X+
    222a:	9c 91       	ld	r25, X
    222c:	13 97       	sbiw	r26, 0x03	; 3
    222e:	93 83       	std	Z+3, r25	; 0x03
    2230:	82 83       	std	Z+2, r24	; 0x02
    2232:	21 15       	cp	r18, r1
    2234:	31 05       	cpc	r19, r1
    2236:	29 f4       	brne	.+10     	; 0x2242 <free+0x9c>
    2238:	f0 93 21 02 	sts	0x0221, r31
    223c:	e0 93 20 02 	sts	0x0220, r30
    2240:	3e c0       	rjmp	.+124    	; 0x22be <free+0x118>
    2242:	d9 01       	movw	r26, r18
    2244:	13 96       	adiw	r26, 0x03	; 3
    2246:	fc 93       	st	X, r31
    2248:	ee 93       	st	-X, r30
    224a:	12 97       	sbiw	r26, 0x02	; 2
    224c:	4d 91       	ld	r20, X+
    224e:	5d 91       	ld	r21, X+
    2250:	a4 0f       	add	r26, r20
    2252:	b5 1f       	adc	r27, r21
    2254:	ea 17       	cp	r30, r26
    2256:	fb 07       	cpc	r31, r27
    2258:	79 f4       	brne	.+30     	; 0x2278 <free+0xd2>
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	84 0f       	add	r24, r20
    2260:	95 1f       	adc	r25, r21
    2262:	02 96       	adiw	r24, 0x02	; 2
    2264:	d9 01       	movw	r26, r18
    2266:	11 96       	adiw	r26, 0x01	; 1
    2268:	9c 93       	st	X, r25
    226a:	8e 93       	st	-X, r24
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	13 96       	adiw	r26, 0x03	; 3
    2272:	9c 93       	st	X, r25
    2274:	8e 93       	st	-X, r24
    2276:	12 97       	sbiw	r26, 0x02	; 2
    2278:	e0 e0       	ldi	r30, 0x00	; 0
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	8a 81       	ldd	r24, Y+2	; 0x02
    227e:	9b 81       	ldd	r25, Y+3	; 0x03
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	19 f0       	breq	.+6      	; 0x228a <free+0xe4>
    2284:	fe 01       	movw	r30, r28
    2286:	ec 01       	movw	r28, r24
    2288:	f9 cf       	rjmp	.-14     	; 0x227c <free+0xd6>
    228a:	ce 01       	movw	r24, r28
    228c:	02 96       	adiw	r24, 0x02	; 2
    228e:	28 81       	ld	r18, Y
    2290:	39 81       	ldd	r19, Y+1	; 0x01
    2292:	82 0f       	add	r24, r18
    2294:	93 1f       	adc	r25, r19
    2296:	20 91 1e 02 	lds	r18, 0x021E
    229a:	30 91 1f 02 	lds	r19, 0x021F
    229e:	28 17       	cp	r18, r24
    22a0:	39 07       	cpc	r19, r25
    22a2:	69 f4       	brne	.+26     	; 0x22be <free+0x118>
    22a4:	30 97       	sbiw	r30, 0x00	; 0
    22a6:	29 f4       	brne	.+10     	; 0x22b2 <free+0x10c>
    22a8:	10 92 21 02 	sts	0x0221, r1
    22ac:	10 92 20 02 	sts	0x0220, r1
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <free+0x110>
    22b2:	13 82       	std	Z+3, r1	; 0x03
    22b4:	12 82       	std	Z+2, r1	; 0x02
    22b6:	d0 93 1f 02 	sts	0x021F, r29
    22ba:	c0 93 1e 02 	sts	0x021E, r28
    22be:	df 91       	pop	r29
    22c0:	cf 91       	pop	r28
    22c2:	08 95       	ret

000022c4 <do_rand>:
    22c4:	8f 92       	push	r8
    22c6:	9f 92       	push	r9
    22c8:	af 92       	push	r10
    22ca:	bf 92       	push	r11
    22cc:	cf 92       	push	r12
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	ec 01       	movw	r28, r24
    22da:	68 81       	ld	r22, Y
    22dc:	79 81       	ldd	r23, Y+1	; 0x01
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	9b 81       	ldd	r25, Y+3	; 0x03
    22e2:	61 15       	cp	r22, r1
    22e4:	71 05       	cpc	r23, r1
    22e6:	81 05       	cpc	r24, r1
    22e8:	91 05       	cpc	r25, r1
    22ea:	21 f4       	brne	.+8      	; 0x22f4 <do_rand+0x30>
    22ec:	64 e2       	ldi	r22, 0x24	; 36
    22ee:	79 ed       	ldi	r23, 0xD9	; 217
    22f0:	8b e5       	ldi	r24, 0x5B	; 91
    22f2:	97 e0       	ldi	r25, 0x07	; 7
    22f4:	2d e1       	ldi	r18, 0x1D	; 29
    22f6:	33 ef       	ldi	r19, 0xF3	; 243
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__divmodsi4>
    2300:	49 01       	movw	r8, r18
    2302:	5a 01       	movw	r10, r20
    2304:	9b 01       	movw	r18, r22
    2306:	ac 01       	movw	r20, r24
    2308:	a7 ea       	ldi	r26, 0xA7	; 167
    230a:	b1 e4       	ldi	r27, 0x41	; 65
    230c:	0e 94 ba 14 	call	0x2974	; 0x2974 <__muluhisi3>
    2310:	6b 01       	movw	r12, r22
    2312:	7c 01       	movw	r14, r24
    2314:	ac ee       	ldi	r26, 0xEC	; 236
    2316:	b4 ef       	ldi	r27, 0xF4	; 244
    2318:	a5 01       	movw	r20, r10
    231a:	94 01       	movw	r18, r8
    231c:	0e 94 c8 14 	call	0x2990	; 0x2990 <__mulohisi3>
    2320:	c6 0e       	add	r12, r22
    2322:	d7 1e       	adc	r13, r23
    2324:	e8 1e       	adc	r14, r24
    2326:	f9 1e       	adc	r15, r25
    2328:	f7 fe       	sbrs	r15, 7
    232a:	06 c0       	rjmp	.+12     	; 0x2338 <do_rand+0x74>
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	c8 1a       	sub	r12, r24
    2330:	d1 08       	sbc	r13, r1
    2332:	e1 08       	sbc	r14, r1
    2334:	80 e8       	ldi	r24, 0x80	; 128
    2336:	f8 0a       	sbc	r15, r24
    2338:	c8 82       	st	Y, r12
    233a:	d9 82       	std	Y+1, r13	; 0x01
    233c:	ea 82       	std	Y+2, r14	; 0x02
    233e:	fb 82       	std	Y+3, r15	; 0x03
    2340:	c6 01       	movw	r24, r12
    2342:	9f 77       	andi	r25, 0x7F	; 127
    2344:	df 91       	pop	r29
    2346:	cf 91       	pop	r28
    2348:	ff 90       	pop	r15
    234a:	ef 90       	pop	r14
    234c:	df 90       	pop	r13
    234e:	cf 90       	pop	r12
    2350:	bf 90       	pop	r11
    2352:	af 90       	pop	r10
    2354:	9f 90       	pop	r9
    2356:	8f 90       	pop	r8
    2358:	08 95       	ret

0000235a <rand_r>:
    235a:	0e 94 62 11 	call	0x22c4	; 0x22c4 <do_rand>
    235e:	08 95       	ret

00002360 <rand>:
    2360:	86 e0       	ldi	r24, 0x06	; 6
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	0e 94 62 11 	call	0x22c4	; 0x22c4 <do_rand>
    2368:	08 95       	ret

0000236a <srand>:
    236a:	a0 e0       	ldi	r26, 0x00	; 0
    236c:	b0 e0       	ldi	r27, 0x00	; 0
    236e:	80 93 06 01 	sts	0x0106, r24
    2372:	90 93 07 01 	sts	0x0107, r25
    2376:	a0 93 08 01 	sts	0x0108, r26
    237a:	b0 93 09 01 	sts	0x0109, r27
    237e:	08 95       	ret

00002380 <fdevopen>:
    2380:	0f 93       	push	r16
    2382:	1f 93       	push	r17
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	ec 01       	movw	r28, r24
    238a:	8b 01       	movw	r16, r22
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	31 f4       	brne	.+12     	; 0x239c <fdevopen+0x1c>
    2390:	61 15       	cp	r22, r1
    2392:	71 05       	cpc	r23, r1
    2394:	19 f4       	brne	.+6      	; 0x239c <fdevopen+0x1c>
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	38 c0       	rjmp	.+112    	; 0x240c <fdevopen+0x8c>
    239c:	6e e0       	ldi	r22, 0x0E	; 14
    239e:	70 e0       	ldi	r23, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <calloc>
    23a8:	fc 01       	movw	r30, r24
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	a1 f3       	breq	.-24     	; 0x2396 <fdevopen+0x16>
    23ae:	80 e8       	ldi	r24, 0x80	; 128
    23b0:	83 83       	std	Z+3, r24	; 0x03
    23b2:	01 15       	cp	r16, r1
    23b4:	11 05       	cpc	r17, r1
    23b6:	71 f0       	breq	.+28     	; 0x23d4 <fdevopen+0x54>
    23b8:	13 87       	std	Z+11, r17	; 0x0b
    23ba:	02 87       	std	Z+10, r16	; 0x0a
    23bc:	81 e8       	ldi	r24, 0x81	; 129
    23be:	83 83       	std	Z+3, r24	; 0x03
    23c0:	80 91 22 02 	lds	r24, 0x0222
    23c4:	90 91 23 02 	lds	r25, 0x0223
    23c8:	89 2b       	or	r24, r25
    23ca:	21 f4       	brne	.+8      	; 0x23d4 <fdevopen+0x54>
    23cc:	f0 93 23 02 	sts	0x0223, r31
    23d0:	e0 93 22 02 	sts	0x0222, r30
    23d4:	20 97       	sbiw	r28, 0x00	; 0
    23d6:	c9 f0       	breq	.+50     	; 0x240a <fdevopen+0x8a>
    23d8:	d1 87       	std	Z+9, r29	; 0x09
    23da:	c0 87       	std	Z+8, r28	; 0x08
    23dc:	83 81       	ldd	r24, Z+3	; 0x03
    23de:	82 60       	ori	r24, 0x02	; 2
    23e0:	83 83       	std	Z+3, r24	; 0x03
    23e2:	80 91 24 02 	lds	r24, 0x0224
    23e6:	90 91 25 02 	lds	r25, 0x0225
    23ea:	89 2b       	or	r24, r25
    23ec:	71 f4       	brne	.+28     	; 0x240a <fdevopen+0x8a>
    23ee:	f0 93 25 02 	sts	0x0225, r31
    23f2:	e0 93 24 02 	sts	0x0224, r30
    23f6:	80 91 26 02 	lds	r24, 0x0226
    23fa:	90 91 27 02 	lds	r25, 0x0227
    23fe:	89 2b       	or	r24, r25
    2400:	21 f4       	brne	.+8      	; 0x240a <fdevopen+0x8a>
    2402:	f0 93 27 02 	sts	0x0227, r31
    2406:	e0 93 26 02 	sts	0x0226, r30
    240a:	cf 01       	movw	r24, r30
    240c:	df 91       	pop	r29
    240e:	cf 91       	pop	r28
    2410:	1f 91       	pop	r17
    2412:	0f 91       	pop	r16
    2414:	08 95       	ret

00002416 <printf>:
    2416:	a0 e0       	ldi	r26, 0x00	; 0
    2418:	b0 e0       	ldi	r27, 0x00	; 0
    241a:	e1 e1       	ldi	r30, 0x11	; 17
    241c:	f2 e1       	ldi	r31, 0x12	; 18
    241e:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x20>
    2422:	fe 01       	movw	r30, r28
    2424:	35 96       	adiw	r30, 0x05	; 5
    2426:	61 91       	ld	r22, Z+
    2428:	71 91       	ld	r23, Z+
    242a:	af 01       	movw	r20, r30
    242c:	80 91 24 02 	lds	r24, 0x0224
    2430:	90 91 25 02 	lds	r25, 0x0225
    2434:	0e 94 1f 12 	call	0x243e	; 0x243e <vfprintf>
    2438:	e2 e0       	ldi	r30, 0x02	; 2
    243a:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x20>

0000243e <vfprintf>:
    243e:	ac e0       	ldi	r26, 0x0C	; 12
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e5 e2       	ldi	r30, 0x25	; 37
    2444:	f2 e1       	ldi	r31, 0x12	; 18
    2446:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__prologue_saves__>
    244a:	7c 01       	movw	r14, r24
    244c:	6b 01       	movw	r12, r22
    244e:	8a 01       	movw	r16, r20
    2450:	fc 01       	movw	r30, r24
    2452:	17 82       	std	Z+7, r1	; 0x07
    2454:	16 82       	std	Z+6, r1	; 0x06
    2456:	83 81       	ldd	r24, Z+3	; 0x03
    2458:	81 ff       	sbrs	r24, 1
    245a:	bd c1       	rjmp	.+890    	; 0x27d6 <vfprintf+0x398>
    245c:	ce 01       	movw	r24, r28
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	4c 01       	movw	r8, r24
    2462:	f7 01       	movw	r30, r14
    2464:	93 81       	ldd	r25, Z+3	; 0x03
    2466:	f6 01       	movw	r30, r12
    2468:	93 fd       	sbrc	r25, 3
    246a:	85 91       	lpm	r24, Z+
    246c:	93 ff       	sbrs	r25, 3
    246e:	81 91       	ld	r24, Z+
    2470:	6f 01       	movw	r12, r30
    2472:	88 23       	and	r24, r24
    2474:	09 f4       	brne	.+2      	; 0x2478 <vfprintf+0x3a>
    2476:	ab c1       	rjmp	.+854    	; 0x27ce <vfprintf+0x390>
    2478:	85 32       	cpi	r24, 0x25	; 37
    247a:	39 f4       	brne	.+14     	; 0x248a <vfprintf+0x4c>
    247c:	93 fd       	sbrc	r25, 3
    247e:	85 91       	lpm	r24, Z+
    2480:	93 ff       	sbrs	r25, 3
    2482:	81 91       	ld	r24, Z+
    2484:	6f 01       	movw	r12, r30
    2486:	85 32       	cpi	r24, 0x25	; 37
    2488:	29 f4       	brne	.+10     	; 0x2494 <vfprintf+0x56>
    248a:	b7 01       	movw	r22, r14
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    2492:	e7 cf       	rjmp	.-50     	; 0x2462 <vfprintf+0x24>
    2494:	51 2c       	mov	r5, r1
    2496:	31 2c       	mov	r3, r1
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	20 32       	cpi	r18, 0x20	; 32
    249c:	a0 f4       	brcc	.+40     	; 0x24c6 <vfprintf+0x88>
    249e:	8b 32       	cpi	r24, 0x2B	; 43
    24a0:	69 f0       	breq	.+26     	; 0x24bc <vfprintf+0x7e>
    24a2:	30 f4       	brcc	.+12     	; 0x24b0 <vfprintf+0x72>
    24a4:	80 32       	cpi	r24, 0x20	; 32
    24a6:	59 f0       	breq	.+22     	; 0x24be <vfprintf+0x80>
    24a8:	83 32       	cpi	r24, 0x23	; 35
    24aa:	69 f4       	brne	.+26     	; 0x24c6 <vfprintf+0x88>
    24ac:	20 61       	ori	r18, 0x10	; 16
    24ae:	2c c0       	rjmp	.+88     	; 0x2508 <vfprintf+0xca>
    24b0:	8d 32       	cpi	r24, 0x2D	; 45
    24b2:	39 f0       	breq	.+14     	; 0x24c2 <vfprintf+0x84>
    24b4:	80 33       	cpi	r24, 0x30	; 48
    24b6:	39 f4       	brne	.+14     	; 0x24c6 <vfprintf+0x88>
    24b8:	21 60       	ori	r18, 0x01	; 1
    24ba:	26 c0       	rjmp	.+76     	; 0x2508 <vfprintf+0xca>
    24bc:	22 60       	ori	r18, 0x02	; 2
    24be:	24 60       	ori	r18, 0x04	; 4
    24c0:	23 c0       	rjmp	.+70     	; 0x2508 <vfprintf+0xca>
    24c2:	28 60       	ori	r18, 0x08	; 8
    24c4:	21 c0       	rjmp	.+66     	; 0x2508 <vfprintf+0xca>
    24c6:	27 fd       	sbrc	r18, 7
    24c8:	27 c0       	rjmp	.+78     	; 0x2518 <vfprintf+0xda>
    24ca:	30 ed       	ldi	r19, 0xD0	; 208
    24cc:	38 0f       	add	r19, r24
    24ce:	3a 30       	cpi	r19, 0x0A	; 10
    24d0:	78 f4       	brcc	.+30     	; 0x24f0 <vfprintf+0xb2>
    24d2:	26 ff       	sbrs	r18, 6
    24d4:	06 c0       	rjmp	.+12     	; 0x24e2 <vfprintf+0xa4>
    24d6:	fa e0       	ldi	r31, 0x0A	; 10
    24d8:	5f 9e       	mul	r5, r31
    24da:	30 0d       	add	r19, r0
    24dc:	11 24       	eor	r1, r1
    24de:	53 2e       	mov	r5, r19
    24e0:	13 c0       	rjmp	.+38     	; 0x2508 <vfprintf+0xca>
    24e2:	8a e0       	ldi	r24, 0x0A	; 10
    24e4:	38 9e       	mul	r3, r24
    24e6:	30 0d       	add	r19, r0
    24e8:	11 24       	eor	r1, r1
    24ea:	33 2e       	mov	r3, r19
    24ec:	20 62       	ori	r18, 0x20	; 32
    24ee:	0c c0       	rjmp	.+24     	; 0x2508 <vfprintf+0xca>
    24f0:	8e 32       	cpi	r24, 0x2E	; 46
    24f2:	21 f4       	brne	.+8      	; 0x24fc <vfprintf+0xbe>
    24f4:	26 fd       	sbrc	r18, 6
    24f6:	6b c1       	rjmp	.+726    	; 0x27ce <vfprintf+0x390>
    24f8:	20 64       	ori	r18, 0x40	; 64
    24fa:	06 c0       	rjmp	.+12     	; 0x2508 <vfprintf+0xca>
    24fc:	8c 36       	cpi	r24, 0x6C	; 108
    24fe:	11 f4       	brne	.+4      	; 0x2504 <vfprintf+0xc6>
    2500:	20 68       	ori	r18, 0x80	; 128
    2502:	02 c0       	rjmp	.+4      	; 0x2508 <vfprintf+0xca>
    2504:	88 36       	cpi	r24, 0x68	; 104
    2506:	41 f4       	brne	.+16     	; 0x2518 <vfprintf+0xda>
    2508:	f6 01       	movw	r30, r12
    250a:	93 fd       	sbrc	r25, 3
    250c:	85 91       	lpm	r24, Z+
    250e:	93 ff       	sbrs	r25, 3
    2510:	81 91       	ld	r24, Z+
    2512:	6f 01       	movw	r12, r30
    2514:	81 11       	cpse	r24, r1
    2516:	c1 cf       	rjmp	.-126    	; 0x249a <vfprintf+0x5c>
    2518:	98 2f       	mov	r25, r24
    251a:	9f 7d       	andi	r25, 0xDF	; 223
    251c:	95 54       	subi	r25, 0x45	; 69
    251e:	93 30       	cpi	r25, 0x03	; 3
    2520:	28 f4       	brcc	.+10     	; 0x252c <vfprintf+0xee>
    2522:	0c 5f       	subi	r16, 0xFC	; 252
    2524:	1f 4f       	sbci	r17, 0xFF	; 255
    2526:	ff e3       	ldi	r31, 0x3F	; 63
    2528:	f9 83       	std	Y+1, r31	; 0x01
    252a:	0d c0       	rjmp	.+26     	; 0x2546 <vfprintf+0x108>
    252c:	83 36       	cpi	r24, 0x63	; 99
    252e:	31 f0       	breq	.+12     	; 0x253c <vfprintf+0xfe>
    2530:	83 37       	cpi	r24, 0x73	; 115
    2532:	71 f0       	breq	.+28     	; 0x2550 <vfprintf+0x112>
    2534:	83 35       	cpi	r24, 0x53	; 83
    2536:	09 f0       	breq	.+2      	; 0x253a <vfprintf+0xfc>
    2538:	5b c0       	rjmp	.+182    	; 0x25f0 <vfprintf+0x1b2>
    253a:	22 c0       	rjmp	.+68     	; 0x2580 <vfprintf+0x142>
    253c:	f8 01       	movw	r30, r16
    253e:	80 81       	ld	r24, Z
    2540:	89 83       	std	Y+1, r24	; 0x01
    2542:	0e 5f       	subi	r16, 0xFE	; 254
    2544:	1f 4f       	sbci	r17, 0xFF	; 255
    2546:	44 24       	eor	r4, r4
    2548:	43 94       	inc	r4
    254a:	51 2c       	mov	r5, r1
    254c:	54 01       	movw	r10, r8
    254e:	15 c0       	rjmp	.+42     	; 0x257a <vfprintf+0x13c>
    2550:	38 01       	movw	r6, r16
    2552:	f2 e0       	ldi	r31, 0x02	; 2
    2554:	6f 0e       	add	r6, r31
    2556:	71 1c       	adc	r7, r1
    2558:	f8 01       	movw	r30, r16
    255a:	a0 80       	ld	r10, Z
    255c:	b1 80       	ldd	r11, Z+1	; 0x01
    255e:	26 ff       	sbrs	r18, 6
    2560:	03 c0       	rjmp	.+6      	; 0x2568 <vfprintf+0x12a>
    2562:	65 2d       	mov	r22, r5
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	02 c0       	rjmp	.+4      	; 0x256c <vfprintf+0x12e>
    2568:	6f ef       	ldi	r22, 0xFF	; 255
    256a:	7f ef       	ldi	r23, 0xFF	; 255
    256c:	c5 01       	movw	r24, r10
    256e:	2c 87       	std	Y+12, r18	; 0x0c
    2570:	0e 94 1f 14 	call	0x283e	; 0x283e <strnlen>
    2574:	2c 01       	movw	r4, r24
    2576:	83 01       	movw	r16, r6
    2578:	2c 85       	ldd	r18, Y+12	; 0x0c
    257a:	2f 77       	andi	r18, 0x7F	; 127
    257c:	22 2e       	mov	r2, r18
    257e:	17 c0       	rjmp	.+46     	; 0x25ae <vfprintf+0x170>
    2580:	38 01       	movw	r6, r16
    2582:	f2 e0       	ldi	r31, 0x02	; 2
    2584:	6f 0e       	add	r6, r31
    2586:	71 1c       	adc	r7, r1
    2588:	f8 01       	movw	r30, r16
    258a:	a0 80       	ld	r10, Z
    258c:	b1 80       	ldd	r11, Z+1	; 0x01
    258e:	26 ff       	sbrs	r18, 6
    2590:	03 c0       	rjmp	.+6      	; 0x2598 <vfprintf+0x15a>
    2592:	65 2d       	mov	r22, r5
    2594:	70 e0       	ldi	r23, 0x00	; 0
    2596:	02 c0       	rjmp	.+4      	; 0x259c <vfprintf+0x15e>
    2598:	6f ef       	ldi	r22, 0xFF	; 255
    259a:	7f ef       	ldi	r23, 0xFF	; 255
    259c:	c5 01       	movw	r24, r10
    259e:	2c 87       	std	Y+12, r18	; 0x0c
    25a0:	0e 94 0d 14 	call	0x281a	; 0x281a <strnlen_P>
    25a4:	2c 01       	movw	r4, r24
    25a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    25a8:	20 68       	ori	r18, 0x80	; 128
    25aa:	22 2e       	mov	r2, r18
    25ac:	83 01       	movw	r16, r6
    25ae:	23 fc       	sbrc	r2, 3
    25b0:	1b c0       	rjmp	.+54     	; 0x25e8 <vfprintf+0x1aa>
    25b2:	83 2d       	mov	r24, r3
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	48 16       	cp	r4, r24
    25b8:	59 06       	cpc	r5, r25
    25ba:	b0 f4       	brcc	.+44     	; 0x25e8 <vfprintf+0x1aa>
    25bc:	b7 01       	movw	r22, r14
    25be:	80 e2       	ldi	r24, 0x20	; 32
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    25c6:	3a 94       	dec	r3
    25c8:	f4 cf       	rjmp	.-24     	; 0x25b2 <vfprintf+0x174>
    25ca:	f5 01       	movw	r30, r10
    25cc:	27 fc       	sbrc	r2, 7
    25ce:	85 91       	lpm	r24, Z+
    25d0:	27 fe       	sbrs	r2, 7
    25d2:	81 91       	ld	r24, Z+
    25d4:	5f 01       	movw	r10, r30
    25d6:	b7 01       	movw	r22, r14
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    25de:	31 10       	cpse	r3, r1
    25e0:	3a 94       	dec	r3
    25e2:	f1 e0       	ldi	r31, 0x01	; 1
    25e4:	4f 1a       	sub	r4, r31
    25e6:	51 08       	sbc	r5, r1
    25e8:	41 14       	cp	r4, r1
    25ea:	51 04       	cpc	r5, r1
    25ec:	71 f7       	brne	.-36     	; 0x25ca <vfprintf+0x18c>
    25ee:	e5 c0       	rjmp	.+458    	; 0x27ba <vfprintf+0x37c>
    25f0:	84 36       	cpi	r24, 0x64	; 100
    25f2:	11 f0       	breq	.+4      	; 0x25f8 <vfprintf+0x1ba>
    25f4:	89 36       	cpi	r24, 0x69	; 105
    25f6:	39 f5       	brne	.+78     	; 0x2646 <vfprintf+0x208>
    25f8:	f8 01       	movw	r30, r16
    25fa:	27 ff       	sbrs	r18, 7
    25fc:	07 c0       	rjmp	.+14     	; 0x260c <vfprintf+0x1ce>
    25fe:	60 81       	ld	r22, Z
    2600:	71 81       	ldd	r23, Z+1	; 0x01
    2602:	82 81       	ldd	r24, Z+2	; 0x02
    2604:	93 81       	ldd	r25, Z+3	; 0x03
    2606:	0c 5f       	subi	r16, 0xFC	; 252
    2608:	1f 4f       	sbci	r17, 0xFF	; 255
    260a:	08 c0       	rjmp	.+16     	; 0x261c <vfprintf+0x1de>
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	88 27       	eor	r24, r24
    2612:	77 fd       	sbrc	r23, 7
    2614:	80 95       	com	r24
    2616:	98 2f       	mov	r25, r24
    2618:	0e 5f       	subi	r16, 0xFE	; 254
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	2f 76       	andi	r18, 0x6F	; 111
    261e:	b2 2e       	mov	r11, r18
    2620:	97 ff       	sbrs	r25, 7
    2622:	09 c0       	rjmp	.+18     	; 0x2636 <vfprintf+0x1f8>
    2624:	90 95       	com	r25
    2626:	80 95       	com	r24
    2628:	70 95       	com	r23
    262a:	61 95       	neg	r22
    262c:	7f 4f       	sbci	r23, 0xFF	; 255
    262e:	8f 4f       	sbci	r24, 0xFF	; 255
    2630:	9f 4f       	sbci	r25, 0xFF	; 255
    2632:	20 68       	ori	r18, 0x80	; 128
    2634:	b2 2e       	mov	r11, r18
    2636:	2a e0       	ldi	r18, 0x0A	; 10
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	a4 01       	movw	r20, r8
    263c:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__ultoa_invert>
    2640:	a8 2e       	mov	r10, r24
    2642:	a8 18       	sub	r10, r8
    2644:	44 c0       	rjmp	.+136    	; 0x26ce <vfprintf+0x290>
    2646:	85 37       	cpi	r24, 0x75	; 117
    2648:	29 f4       	brne	.+10     	; 0x2654 <vfprintf+0x216>
    264a:	2f 7e       	andi	r18, 0xEF	; 239
    264c:	b2 2e       	mov	r11, r18
    264e:	2a e0       	ldi	r18, 0x0A	; 10
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	25 c0       	rjmp	.+74     	; 0x269e <vfprintf+0x260>
    2654:	f2 2f       	mov	r31, r18
    2656:	f9 7f       	andi	r31, 0xF9	; 249
    2658:	bf 2e       	mov	r11, r31
    265a:	8f 36       	cpi	r24, 0x6F	; 111
    265c:	c1 f0       	breq	.+48     	; 0x268e <vfprintf+0x250>
    265e:	18 f4       	brcc	.+6      	; 0x2666 <vfprintf+0x228>
    2660:	88 35       	cpi	r24, 0x58	; 88
    2662:	79 f0       	breq	.+30     	; 0x2682 <vfprintf+0x244>
    2664:	b4 c0       	rjmp	.+360    	; 0x27ce <vfprintf+0x390>
    2666:	80 37       	cpi	r24, 0x70	; 112
    2668:	19 f0       	breq	.+6      	; 0x2670 <vfprintf+0x232>
    266a:	88 37       	cpi	r24, 0x78	; 120
    266c:	21 f0       	breq	.+8      	; 0x2676 <vfprintf+0x238>
    266e:	af c0       	rjmp	.+350    	; 0x27ce <vfprintf+0x390>
    2670:	2f 2f       	mov	r18, r31
    2672:	20 61       	ori	r18, 0x10	; 16
    2674:	b2 2e       	mov	r11, r18
    2676:	b4 fe       	sbrs	r11, 4
    2678:	0d c0       	rjmp	.+26     	; 0x2694 <vfprintf+0x256>
    267a:	8b 2d       	mov	r24, r11
    267c:	84 60       	ori	r24, 0x04	; 4
    267e:	b8 2e       	mov	r11, r24
    2680:	09 c0       	rjmp	.+18     	; 0x2694 <vfprintf+0x256>
    2682:	24 ff       	sbrs	r18, 4
    2684:	0a c0       	rjmp	.+20     	; 0x269a <vfprintf+0x25c>
    2686:	9f 2f       	mov	r25, r31
    2688:	96 60       	ori	r25, 0x06	; 6
    268a:	b9 2e       	mov	r11, r25
    268c:	06 c0       	rjmp	.+12     	; 0x269a <vfprintf+0x25c>
    268e:	28 e0       	ldi	r18, 0x08	; 8
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	05 c0       	rjmp	.+10     	; 0x269e <vfprintf+0x260>
    2694:	20 e1       	ldi	r18, 0x10	; 16
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	02 c0       	rjmp	.+4      	; 0x269e <vfprintf+0x260>
    269a:	20 e1       	ldi	r18, 0x10	; 16
    269c:	32 e0       	ldi	r19, 0x02	; 2
    269e:	f8 01       	movw	r30, r16
    26a0:	b7 fe       	sbrs	r11, 7
    26a2:	07 c0       	rjmp	.+14     	; 0x26b2 <vfprintf+0x274>
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	0c 5f       	subi	r16, 0xFC	; 252
    26ae:	1f 4f       	sbci	r17, 0xFF	; 255
    26b0:	06 c0       	rjmp	.+12     	; 0x26be <vfprintf+0x280>
    26b2:	60 81       	ld	r22, Z
    26b4:	71 81       	ldd	r23, Z+1	; 0x01
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 5f       	subi	r16, 0xFE	; 254
    26bc:	1f 4f       	sbci	r17, 0xFF	; 255
    26be:	a4 01       	movw	r20, r8
    26c0:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <__ultoa_invert>
    26c4:	a8 2e       	mov	r10, r24
    26c6:	a8 18       	sub	r10, r8
    26c8:	fb 2d       	mov	r31, r11
    26ca:	ff 77       	andi	r31, 0x7F	; 127
    26cc:	bf 2e       	mov	r11, r31
    26ce:	b6 fe       	sbrs	r11, 6
    26d0:	0b c0       	rjmp	.+22     	; 0x26e8 <vfprintf+0x2aa>
    26d2:	2b 2d       	mov	r18, r11
    26d4:	2e 7f       	andi	r18, 0xFE	; 254
    26d6:	a5 14       	cp	r10, r5
    26d8:	50 f4       	brcc	.+20     	; 0x26ee <vfprintf+0x2b0>
    26da:	b4 fe       	sbrs	r11, 4
    26dc:	0a c0       	rjmp	.+20     	; 0x26f2 <vfprintf+0x2b4>
    26de:	b2 fc       	sbrc	r11, 2
    26e0:	08 c0       	rjmp	.+16     	; 0x26f2 <vfprintf+0x2b4>
    26e2:	2b 2d       	mov	r18, r11
    26e4:	2e 7e       	andi	r18, 0xEE	; 238
    26e6:	05 c0       	rjmp	.+10     	; 0x26f2 <vfprintf+0x2b4>
    26e8:	7a 2c       	mov	r7, r10
    26ea:	2b 2d       	mov	r18, r11
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <vfprintf+0x2b6>
    26ee:	7a 2c       	mov	r7, r10
    26f0:	01 c0       	rjmp	.+2      	; 0x26f4 <vfprintf+0x2b6>
    26f2:	75 2c       	mov	r7, r5
    26f4:	24 ff       	sbrs	r18, 4
    26f6:	0d c0       	rjmp	.+26     	; 0x2712 <vfprintf+0x2d4>
    26f8:	fe 01       	movw	r30, r28
    26fa:	ea 0d       	add	r30, r10
    26fc:	f1 1d       	adc	r31, r1
    26fe:	80 81       	ld	r24, Z
    2700:	80 33       	cpi	r24, 0x30	; 48
    2702:	11 f4       	brne	.+4      	; 0x2708 <vfprintf+0x2ca>
    2704:	29 7e       	andi	r18, 0xE9	; 233
    2706:	09 c0       	rjmp	.+18     	; 0x271a <vfprintf+0x2dc>
    2708:	22 ff       	sbrs	r18, 2
    270a:	06 c0       	rjmp	.+12     	; 0x2718 <vfprintf+0x2da>
    270c:	73 94       	inc	r7
    270e:	73 94       	inc	r7
    2710:	04 c0       	rjmp	.+8      	; 0x271a <vfprintf+0x2dc>
    2712:	82 2f       	mov	r24, r18
    2714:	86 78       	andi	r24, 0x86	; 134
    2716:	09 f0       	breq	.+2      	; 0x271a <vfprintf+0x2dc>
    2718:	73 94       	inc	r7
    271a:	23 fd       	sbrc	r18, 3
    271c:	13 c0       	rjmp	.+38     	; 0x2744 <vfprintf+0x306>
    271e:	20 ff       	sbrs	r18, 0
    2720:	06 c0       	rjmp	.+12     	; 0x272e <vfprintf+0x2f0>
    2722:	5a 2c       	mov	r5, r10
    2724:	73 14       	cp	r7, r3
    2726:	18 f4       	brcc	.+6      	; 0x272e <vfprintf+0x2f0>
    2728:	53 0c       	add	r5, r3
    272a:	57 18       	sub	r5, r7
    272c:	73 2c       	mov	r7, r3
    272e:	73 14       	cp	r7, r3
    2730:	68 f4       	brcc	.+26     	; 0x274c <vfprintf+0x30e>
    2732:	b7 01       	movw	r22, r14
    2734:	80 e2       	ldi	r24, 0x20	; 32
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	2c 87       	std	Y+12, r18	; 0x0c
    273a:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    273e:	73 94       	inc	r7
    2740:	2c 85       	ldd	r18, Y+12	; 0x0c
    2742:	f5 cf       	rjmp	.-22     	; 0x272e <vfprintf+0x2f0>
    2744:	73 14       	cp	r7, r3
    2746:	10 f4       	brcc	.+4      	; 0x274c <vfprintf+0x30e>
    2748:	37 18       	sub	r3, r7
    274a:	01 c0       	rjmp	.+2      	; 0x274e <vfprintf+0x310>
    274c:	31 2c       	mov	r3, r1
    274e:	24 ff       	sbrs	r18, 4
    2750:	12 c0       	rjmp	.+36     	; 0x2776 <vfprintf+0x338>
    2752:	b7 01       	movw	r22, r14
    2754:	80 e3       	ldi	r24, 0x30	; 48
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	2c 87       	std	Y+12, r18	; 0x0c
    275a:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    275e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2760:	22 ff       	sbrs	r18, 2
    2762:	17 c0       	rjmp	.+46     	; 0x2792 <vfprintf+0x354>
    2764:	21 ff       	sbrs	r18, 1
    2766:	03 c0       	rjmp	.+6      	; 0x276e <vfprintf+0x330>
    2768:	88 e5       	ldi	r24, 0x58	; 88
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	02 c0       	rjmp	.+4      	; 0x2772 <vfprintf+0x334>
    276e:	88 e7       	ldi	r24, 0x78	; 120
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	b7 01       	movw	r22, r14
    2774:	0c c0       	rjmp	.+24     	; 0x278e <vfprintf+0x350>
    2776:	82 2f       	mov	r24, r18
    2778:	86 78       	andi	r24, 0x86	; 134
    277a:	59 f0       	breq	.+22     	; 0x2792 <vfprintf+0x354>
    277c:	21 fd       	sbrc	r18, 1
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <vfprintf+0x346>
    2780:	80 e2       	ldi	r24, 0x20	; 32
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <vfprintf+0x348>
    2784:	8b e2       	ldi	r24, 0x2B	; 43
    2786:	27 fd       	sbrc	r18, 7
    2788:	8d e2       	ldi	r24, 0x2D	; 45
    278a:	b7 01       	movw	r22, r14
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    2792:	a5 14       	cp	r10, r5
    2794:	38 f4       	brcc	.+14     	; 0x27a4 <vfprintf+0x366>
    2796:	b7 01       	movw	r22, r14
    2798:	80 e3       	ldi	r24, 0x30	; 48
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    27a0:	5a 94       	dec	r5
    27a2:	f7 cf       	rjmp	.-18     	; 0x2792 <vfprintf+0x354>
    27a4:	aa 94       	dec	r10
    27a6:	f4 01       	movw	r30, r8
    27a8:	ea 0d       	add	r30, r10
    27aa:	f1 1d       	adc	r31, r1
    27ac:	80 81       	ld	r24, Z
    27ae:	b7 01       	movw	r22, r14
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    27b6:	a1 10       	cpse	r10, r1
    27b8:	f5 cf       	rjmp	.-22     	; 0x27a4 <vfprintf+0x366>
    27ba:	33 20       	and	r3, r3
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <vfprintf+0x382>
    27be:	51 ce       	rjmp	.-862    	; 0x2462 <vfprintf+0x24>
    27c0:	b7 01       	movw	r22, r14
    27c2:	80 e2       	ldi	r24, 0x20	; 32
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 2a 14 	call	0x2854	; 0x2854 <fputc>
    27ca:	3a 94       	dec	r3
    27cc:	f6 cf       	rjmp	.-20     	; 0x27ba <vfprintf+0x37c>
    27ce:	f7 01       	movw	r30, r14
    27d0:	86 81       	ldd	r24, Z+6	; 0x06
    27d2:	97 81       	ldd	r25, Z+7	; 0x07
    27d4:	02 c0       	rjmp	.+4      	; 0x27da <vfprintf+0x39c>
    27d6:	8f ef       	ldi	r24, 0xFF	; 255
    27d8:	9f ef       	ldi	r25, 0xFF	; 255
    27da:	2c 96       	adiw	r28, 0x0c	; 12
    27dc:	e2 e1       	ldi	r30, 0x12	; 18
    27de:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__epilogue_restores__>

000027e2 <calloc>:
    27e2:	0f 93       	push	r16
    27e4:	1f 93       	push	r17
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	86 9f       	mul	r24, r22
    27ec:	80 01       	movw	r16, r0
    27ee:	87 9f       	mul	r24, r23
    27f0:	10 0d       	add	r17, r0
    27f2:	96 9f       	mul	r25, r22
    27f4:	10 0d       	add	r17, r0
    27f6:	11 24       	eor	r1, r1
    27f8:	c8 01       	movw	r24, r16
    27fa:	0e 94 3b 10 	call	0x2076	; 0x2076 <malloc>
    27fe:	ec 01       	movw	r28, r24
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	29 f0       	breq	.+10     	; 0x280e <calloc+0x2c>
    2804:	a8 01       	movw	r20, r16
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	0e 94 18 14 	call	0x2830	; 0x2830 <memset>
    280e:	ce 01       	movw	r24, r28
    2810:	df 91       	pop	r29
    2812:	cf 91       	pop	r28
    2814:	1f 91       	pop	r17
    2816:	0f 91       	pop	r16
    2818:	08 95       	ret

0000281a <strnlen_P>:
    281a:	fc 01       	movw	r30, r24
    281c:	05 90       	lpm	r0, Z+
    281e:	61 50       	subi	r22, 0x01	; 1
    2820:	70 40       	sbci	r23, 0x00	; 0
    2822:	01 10       	cpse	r0, r1
    2824:	d8 f7       	brcc	.-10     	; 0x281c <strnlen_P+0x2>
    2826:	80 95       	com	r24
    2828:	90 95       	com	r25
    282a:	8e 0f       	add	r24, r30
    282c:	9f 1f       	adc	r25, r31
    282e:	08 95       	ret

00002830 <memset>:
    2830:	dc 01       	movw	r26, r24
    2832:	01 c0       	rjmp	.+2      	; 0x2836 <memset+0x6>
    2834:	6d 93       	st	X+, r22
    2836:	41 50       	subi	r20, 0x01	; 1
    2838:	50 40       	sbci	r21, 0x00	; 0
    283a:	e0 f7       	brcc	.-8      	; 0x2834 <memset+0x4>
    283c:	08 95       	ret

0000283e <strnlen>:
    283e:	fc 01       	movw	r30, r24
    2840:	61 50       	subi	r22, 0x01	; 1
    2842:	70 40       	sbci	r23, 0x00	; 0
    2844:	01 90       	ld	r0, Z+
    2846:	01 10       	cpse	r0, r1
    2848:	d8 f7       	brcc	.-10     	; 0x2840 <strnlen+0x2>
    284a:	80 95       	com	r24
    284c:	90 95       	com	r25
    284e:	8e 0f       	add	r24, r30
    2850:	9f 1f       	adc	r25, r31
    2852:	08 95       	ret

00002854 <fputc>:
    2854:	0f 93       	push	r16
    2856:	1f 93       	push	r17
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	18 2f       	mov	r17, r24
    285e:	09 2f       	mov	r16, r25
    2860:	eb 01       	movw	r28, r22
    2862:	8b 81       	ldd	r24, Y+3	; 0x03
    2864:	81 fd       	sbrc	r24, 1
    2866:	03 c0       	rjmp	.+6      	; 0x286e <fputc+0x1a>
    2868:	8f ef       	ldi	r24, 0xFF	; 255
    286a:	9f ef       	ldi	r25, 0xFF	; 255
    286c:	20 c0       	rjmp	.+64     	; 0x28ae <fputc+0x5a>
    286e:	82 ff       	sbrs	r24, 2
    2870:	10 c0       	rjmp	.+32     	; 0x2892 <fputc+0x3e>
    2872:	4e 81       	ldd	r20, Y+6	; 0x06
    2874:	5f 81       	ldd	r21, Y+7	; 0x07
    2876:	2c 81       	ldd	r18, Y+4	; 0x04
    2878:	3d 81       	ldd	r19, Y+5	; 0x05
    287a:	42 17       	cp	r20, r18
    287c:	53 07       	cpc	r21, r19
    287e:	7c f4       	brge	.+30     	; 0x289e <fputc+0x4a>
    2880:	e8 81       	ld	r30, Y
    2882:	f9 81       	ldd	r31, Y+1	; 0x01
    2884:	9f 01       	movw	r18, r30
    2886:	2f 5f       	subi	r18, 0xFF	; 255
    2888:	3f 4f       	sbci	r19, 0xFF	; 255
    288a:	39 83       	std	Y+1, r19	; 0x01
    288c:	28 83       	st	Y, r18
    288e:	10 83       	st	Z, r17
    2890:	06 c0       	rjmp	.+12     	; 0x289e <fputc+0x4a>
    2892:	e8 85       	ldd	r30, Y+8	; 0x08
    2894:	f9 85       	ldd	r31, Y+9	; 0x09
    2896:	81 2f       	mov	r24, r17
    2898:	09 95       	icall
    289a:	89 2b       	or	r24, r25
    289c:	29 f7       	brne	.-54     	; 0x2868 <fputc+0x14>
    289e:	2e 81       	ldd	r18, Y+6	; 0x06
    28a0:	3f 81       	ldd	r19, Y+7	; 0x07
    28a2:	2f 5f       	subi	r18, 0xFF	; 255
    28a4:	3f 4f       	sbci	r19, 0xFF	; 255
    28a6:	3f 83       	std	Y+7, r19	; 0x07
    28a8:	2e 83       	std	Y+6, r18	; 0x06
    28aa:	81 2f       	mov	r24, r17
    28ac:	90 2f       	mov	r25, r16
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	08 95       	ret

000028b8 <__ultoa_invert>:
    28b8:	fa 01       	movw	r30, r20
    28ba:	aa 27       	eor	r26, r26
    28bc:	28 30       	cpi	r18, 0x08	; 8
    28be:	51 f1       	breq	.+84     	; 0x2914 <__ultoa_invert+0x5c>
    28c0:	20 31       	cpi	r18, 0x10	; 16
    28c2:	81 f1       	breq	.+96     	; 0x2924 <__ultoa_invert+0x6c>
    28c4:	e8 94       	clt
    28c6:	6f 93       	push	r22
    28c8:	6e 7f       	andi	r22, 0xFE	; 254
    28ca:	6e 5f       	subi	r22, 0xFE	; 254
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255
    28ce:	8f 4f       	sbci	r24, 0xFF	; 255
    28d0:	9f 4f       	sbci	r25, 0xFF	; 255
    28d2:	af 4f       	sbci	r26, 0xFF	; 255
    28d4:	b1 e0       	ldi	r27, 0x01	; 1
    28d6:	3e d0       	rcall	.+124    	; 0x2954 <__ultoa_invert+0x9c>
    28d8:	b4 e0       	ldi	r27, 0x04	; 4
    28da:	3c d0       	rcall	.+120    	; 0x2954 <__ultoa_invert+0x9c>
    28dc:	67 0f       	add	r22, r23
    28de:	78 1f       	adc	r23, r24
    28e0:	89 1f       	adc	r24, r25
    28e2:	9a 1f       	adc	r25, r26
    28e4:	a1 1d       	adc	r26, r1
    28e6:	68 0f       	add	r22, r24
    28e8:	79 1f       	adc	r23, r25
    28ea:	8a 1f       	adc	r24, r26
    28ec:	91 1d       	adc	r25, r1
    28ee:	a1 1d       	adc	r26, r1
    28f0:	6a 0f       	add	r22, r26
    28f2:	71 1d       	adc	r23, r1
    28f4:	81 1d       	adc	r24, r1
    28f6:	91 1d       	adc	r25, r1
    28f8:	a1 1d       	adc	r26, r1
    28fa:	20 d0       	rcall	.+64     	; 0x293c <__ultoa_invert+0x84>
    28fc:	09 f4       	brne	.+2      	; 0x2900 <__ultoa_invert+0x48>
    28fe:	68 94       	set
    2900:	3f 91       	pop	r19
    2902:	2a e0       	ldi	r18, 0x0A	; 10
    2904:	26 9f       	mul	r18, r22
    2906:	11 24       	eor	r1, r1
    2908:	30 19       	sub	r19, r0
    290a:	30 5d       	subi	r19, 0xD0	; 208
    290c:	31 93       	st	Z+, r19
    290e:	de f6       	brtc	.-74     	; 0x28c6 <__ultoa_invert+0xe>
    2910:	cf 01       	movw	r24, r30
    2912:	08 95       	ret
    2914:	46 2f       	mov	r20, r22
    2916:	47 70       	andi	r20, 0x07	; 7
    2918:	40 5d       	subi	r20, 0xD0	; 208
    291a:	41 93       	st	Z+, r20
    291c:	b3 e0       	ldi	r27, 0x03	; 3
    291e:	0f d0       	rcall	.+30     	; 0x293e <__ultoa_invert+0x86>
    2920:	c9 f7       	brne	.-14     	; 0x2914 <__ultoa_invert+0x5c>
    2922:	f6 cf       	rjmp	.-20     	; 0x2910 <__ultoa_invert+0x58>
    2924:	46 2f       	mov	r20, r22
    2926:	4f 70       	andi	r20, 0x0F	; 15
    2928:	40 5d       	subi	r20, 0xD0	; 208
    292a:	4a 33       	cpi	r20, 0x3A	; 58
    292c:	18 f0       	brcs	.+6      	; 0x2934 <__ultoa_invert+0x7c>
    292e:	49 5d       	subi	r20, 0xD9	; 217
    2930:	31 fd       	sbrc	r19, 1
    2932:	40 52       	subi	r20, 0x20	; 32
    2934:	41 93       	st	Z+, r20
    2936:	02 d0       	rcall	.+4      	; 0x293c <__ultoa_invert+0x84>
    2938:	a9 f7       	brne	.-22     	; 0x2924 <__ultoa_invert+0x6c>
    293a:	ea cf       	rjmp	.-44     	; 0x2910 <__ultoa_invert+0x58>
    293c:	b4 e0       	ldi	r27, 0x04	; 4
    293e:	a6 95       	lsr	r26
    2940:	97 95       	ror	r25
    2942:	87 95       	ror	r24
    2944:	77 95       	ror	r23
    2946:	67 95       	ror	r22
    2948:	ba 95       	dec	r27
    294a:	c9 f7       	brne	.-14     	; 0x293e <__ultoa_invert+0x86>
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	61 05       	cpc	r22, r1
    2950:	71 05       	cpc	r23, r1
    2952:	08 95       	ret
    2954:	9b 01       	movw	r18, r22
    2956:	ac 01       	movw	r20, r24
    2958:	0a 2e       	mov	r0, r26
    295a:	06 94       	lsr	r0
    295c:	57 95       	ror	r21
    295e:	47 95       	ror	r20
    2960:	37 95       	ror	r19
    2962:	27 95       	ror	r18
    2964:	ba 95       	dec	r27
    2966:	c9 f7       	brne	.-14     	; 0x295a <__ultoa_invert+0xa2>
    2968:	62 0f       	add	r22, r18
    296a:	73 1f       	adc	r23, r19
    296c:	84 1f       	adc	r24, r20
    296e:	95 1f       	adc	r25, r21
    2970:	a0 1d       	adc	r26, r0
    2972:	08 95       	ret

00002974 <__muluhisi3>:
    2974:	0e 94 04 15 	call	0x2a08	; 0x2a08 <__umulhisi3>
    2978:	a5 9f       	mul	r26, r21
    297a:	90 0d       	add	r25, r0
    297c:	b4 9f       	mul	r27, r20
    297e:	90 0d       	add	r25, r0
    2980:	a4 9f       	mul	r26, r20
    2982:	80 0d       	add	r24, r0
    2984:	91 1d       	adc	r25, r1
    2986:	11 24       	eor	r1, r1
    2988:	08 95       	ret

0000298a <__mulshisi3>:
    298a:	b7 ff       	sbrs	r27, 7
    298c:	0c 94 ba 14 	jmp	0x2974	; 0x2974 <__muluhisi3>

00002990 <__mulohisi3>:
    2990:	0e 94 ba 14 	call	0x2974	; 0x2974 <__muluhisi3>
    2994:	82 1b       	sub	r24, r18
    2996:	93 0b       	sbc	r25, r19
    2998:	08 95       	ret

0000299a <__prologue_saves__>:
    299a:	2f 92       	push	r2
    299c:	3f 92       	push	r3
    299e:	4f 92       	push	r4
    29a0:	5f 92       	push	r5
    29a2:	6f 92       	push	r6
    29a4:	7f 92       	push	r7
    29a6:	8f 92       	push	r8
    29a8:	9f 92       	push	r9
    29aa:	af 92       	push	r10
    29ac:	bf 92       	push	r11
    29ae:	cf 92       	push	r12
    29b0:	df 92       	push	r13
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	ca 1b       	sub	r28, r26
    29c4:	db 0b       	sbc	r29, r27
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	09 94       	ijmp

000029d2 <__epilogue_restores__>:
    29d2:	2a 88       	ldd	r2, Y+18	; 0x12
    29d4:	39 88       	ldd	r3, Y+17	; 0x11
    29d6:	48 88       	ldd	r4, Y+16	; 0x10
    29d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29da:	6e 84       	ldd	r6, Y+14	; 0x0e
    29dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    29de:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29e4:	b9 84       	ldd	r11, Y+9	; 0x09
    29e6:	c8 84       	ldd	r12, Y+8	; 0x08
    29e8:	df 80       	ldd	r13, Y+7	; 0x07
    29ea:	ee 80       	ldd	r14, Y+6	; 0x06
    29ec:	fd 80       	ldd	r15, Y+5	; 0x05
    29ee:	0c 81       	ldd	r16, Y+4	; 0x04
    29f0:	1b 81       	ldd	r17, Y+3	; 0x03
    29f2:	aa 81       	ldd	r26, Y+2	; 0x02
    29f4:	b9 81       	ldd	r27, Y+1	; 0x01
    29f6:	ce 0f       	add	r28, r30
    29f8:	d1 1d       	adc	r29, r1
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	ed 01       	movw	r28, r26
    2a06:	08 95       	ret

00002a08 <__umulhisi3>:
    2a08:	a2 9f       	mul	r26, r18
    2a0a:	b0 01       	movw	r22, r0
    2a0c:	b3 9f       	mul	r27, r19
    2a0e:	c0 01       	movw	r24, r0
    2a10:	a3 9f       	mul	r26, r19
    2a12:	70 0d       	add	r23, r0
    2a14:	81 1d       	adc	r24, r1
    2a16:	11 24       	eor	r1, r1
    2a18:	91 1d       	adc	r25, r1
    2a1a:	b2 9f       	mul	r27, r18
    2a1c:	70 0d       	add	r23, r0
    2a1e:	81 1d       	adc	r24, r1
    2a20:	11 24       	eor	r1, r1
    2a22:	91 1d       	adc	r25, r1
    2a24:	08 95       	ret

00002a26 <_exit>:
    2a26:	f8 94       	cli

00002a28 <__stop_program>:
    2a28:	ff cf       	rjmp	.-2      	; 0x2a28 <__stop_program>
