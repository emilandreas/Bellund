
ByggernBellLund_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  00002ce8  00002d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800222  00800222  00002e9e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e9e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000430  00000000  00000000  00002efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004abb  00000000  00000000  0000332a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001bf7  00000000  00000000  00007de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001cc2  00000000  00000000  000099dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d38  00000000  00000000  0000b6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000afb  00000000  00000000  0000c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003647  00000000  00000000  0000ced3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000468  00000000  00000000  0001051a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 32 02 	jmp	0x464	; 0x464 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__vector_14>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <calibrate_joystick+0x2a>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 ee       	ldi	r30, 0xE8	; 232
     37c:	fc e2       	ldi	r31, 0x2C	; 44
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 32       	cpi	r26, 0x22	; 34
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 e2       	ldi	r26, 0x22	; 34
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 32       	cpi	r26, 0x2E	; 46
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 c5 03 	call	0x78a	; 0x78a <main>
     39e:	0c 94 72 16 	jmp	0x2ce4	; 0x2ce4 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <EEPROM_read>:

// The Atmega 162 contains a 512 bytes EEPROM space.

uint8_t EEPROM_read(unsigned int address){
	//Wait for compleated preveouse write
	while(EECR & (1<<EEWE));
     3a6:	e1 99       	sbic	0x1c, 1	; 28
     3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <EEPROM_read>
	
	//Set write address
	EEAR = address;
     3aa:	9f bb       	out	0x1f, r25	; 31
     3ac:	8e bb       	out	0x1e, r24	; 30
	
	//Start read
	EECR |= (1<<EERE);
     3ae:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     3b0:	8d b3       	in	r24, 0x1d	; 29
}
     3b2:	08 95       	ret

000003b4 <init_handler>:
volatile int handelingMessage = 0;


void init_handler(){
	// Set pin as input (PD3 = INT1)
	DDRD &= ~(1 << PD3);
     3b4:	8b 98       	cbi	0x11, 3	; 17
	// Set internal pull-up
	PORTD |= (1 << PD3);
     3b6:	93 9a       	sbi	0x12, 3	; 18
	
	//initialize external interrupt on falling edge
	MCUCR |= (1<<ISC11);
     3b8:	85 b7       	in	r24, 0x35	; 53
     3ba:	88 60       	ori	r24, 0x08	; 8
     3bc:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     3be:	85 b7       	in	r24, 0x35	; 53
     3c0:	8b 7f       	andi	r24, 0xFB	; 251
     3c2:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
     3c4:	80 e8       	ldi	r24, 0x80	; 128
     3c6:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     3c8:	78 94       	sei
     3ca:	08 95       	ret

000003cc <send_controlls>:
		default:
			break;
	}
}

void send_controlls(){
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	cd b7       	in	r28, 0x3d	; 61
     3d2:	de b7       	in	r29, 0x3e	; 62
     3d4:	2a 97       	sbiw	r28, 0x0a	; 10
     3d6:	0f b6       	in	r0, 0x3f	; 63
     3d8:	f8 94       	cli
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	cd bf       	out	0x3d, r28	; 61
	Message m;
	Joystick J;
	Slider S;
		
	//Joystick
	J = get_joystick_position();
     3e0:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <get_joystick_position>
	m.id = JOY;
     3e4:	19 82       	std	Y+1, r1	; 0x01
	m.length = 8;
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	2a 83       	std	Y+2, r18	; 0x02
	m.data[0] = J.X;
     3ea:	6b 83       	std	Y+3, r22	; 0x03
	m.data[1] = J.Y;
     3ec:	7c 83       	std	Y+4, r23	; 0x04
	m.data[2] = J.D;
     3ee:	8d 83       	std	Y+5, r24	; 0x05
	m.data[3] = J.Button;
     3f0:	9e 83       	std	Y+6, r25	; 0x06
		
	//Slider
	S = get_slider_position();
     3f2:	0e 94 77 04 	call	0x8ee	; 0x8ee <get_slider_position>
	m.data[4] = S.left;
     3f6:	6f 83       	std	Y+7, r22	; 0x07
	m.data[5] = S.right;
     3f8:	78 87       	std	Y+8, r23	; 0x08
	m.data[6] = S.leftButton;
     3fa:	89 87       	std	Y+9, r24	; 0x09
	m.data[7] = S.rightButton;
     3fc:	9a 87       	std	Y+10, r25	; 0x0a
		
	//Send can message
	CAN_transmit(&m);
     3fe:	ce 01       	movw	r24, r28
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	0e 94 09 04 	call	0x812	; 0x812 <CAN_transmit>
}
     406:	2a 96       	adiw	r28, 0x0a	; 10
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	f8 94       	cli
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	0f be       	out	0x3f, r0	; 63
     410:	cd bf       	out	0x3d, r28	; 61
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <handle_message>:
ISR(INT1_vect){
	handle_message();
}


void handle_message(){
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	2a 97       	sbiw	r28, 0x0a	; 10
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
	Message m;
	CAN_receive(&m);
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	0e 94 3c 04 	call	0x878	; 0x878 <CAN_receive>
	
	//Decide what to do
	switch(m.id){
     434:	89 81       	ldd	r24, Y+1	; 0x01
     436:	81 30       	cpi	r24, 0x01	; 1
     438:	19 f0       	breq	.+6      	; 0x440 <handle_message+0x28>
     43a:	82 30       	cpi	r24, 0x02	; 2
     43c:	21 f0       	breq	.+8      	; 0x446 <handle_message+0x2e>
     43e:	09 c0       	rjmp	.+18     	; 0x452 <handle_message+0x3a>
		case JOY:
			break;
		case JOYREQ:
			send_controlls();
     440:	0e 94 e6 01 	call	0x3cc	; 0x3cc <send_controlls>
			break;
     444:	06 c0       	rjmp	.+12     	; 0x452 <handle_message+0x3a>
		case GAME_STATUS:
			state_set(m.data[0]);
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	0e 94 b8 03 	call	0x770	; 0x770 <state_set>
			score_set(m.data[1]);
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	0e 94 bb 03 	call	0x776	; 0x776 <score_set>
			break;
		default:
			break;
	}
}
     452:	2a 96       	adiw	r28, 0x0a	; 10
     454:	0f b6       	in	r0, 0x3f	; 63
     456:	f8 94       	cli
     458:	de bf       	out	0x3e, r29	; 62
     45a:	0f be       	out	0x3f, r0	; 63
     45c:	cd bf       	out	0x3d, r28	; 61
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <__vector_2>:
	
	//Enable global interrupts
	sei();
}

ISR(INT1_vect){
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	0f 92       	push	r0
     46c:	11 24       	eor	r1, r1
     46e:	2f 93       	push	r18
     470:	3f 93       	push	r19
     472:	4f 93       	push	r20
     474:	5f 93       	push	r21
     476:	6f 93       	push	r22
     478:	7f 93       	push	r23
     47a:	8f 93       	push	r24
     47c:	9f 93       	push	r25
     47e:	af 93       	push	r26
     480:	bf 93       	push	r27
     482:	ef 93       	push	r30
     484:	ff 93       	push	r31
	handle_message();
     486:	0e 94 0c 02 	call	0x418	; 0x418 <handle_message>
}
     48a:	ff 91       	pop	r31
     48c:	ef 91       	pop	r30
     48e:	bf 91       	pop	r27
     490:	af 91       	pop	r26
     492:	9f 91       	pop	r25
     494:	8f 91       	pop	r24
     496:	7f 91       	pop	r23
     498:	6f 91       	pop	r22
     49a:	5f 91       	pop	r21
     49c:	4f 91       	pop	r20
     49e:	3f 91       	pop	r19
     4a0:	2f 91       	pop	r18
     4a2:	0f 90       	pop	r0
     4a4:	0f be       	out	0x3f, r0	; 63
     4a6:	0f 90       	pop	r0
     4a8:	1f 90       	pop	r1
     4aa:	18 95       	reti

000004ac <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
     4ac:	80 eb       	ldi	r24, 0xB0	; 176
     4ae:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     4b0:	81 e5       	ldi	r24, 0x51	; 81
     4b2:	8d b9       	out	0x0d, r24	; 13
     4b4:	08 95       	ret

000004b6 <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
     4b6:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
     4b8:	77 9b       	sbis	0x0e, 7	; 14
     4ba:	fe cf       	rjmp	.-4      	; 0x4b8 <SPI_transmit+0x2>
	//Return answer
	return SPDR;
     4bc:	8f b1       	in	r24, 0x0f	; 15
}
     4be:	08 95       	ret

000004c0 <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
     4c0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SPI_transmit>
     4c4:	08 95       	ret

000004c6 <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
     4c6:	8c ec       	ldi	r24, 0xCC	; 204
     4c8:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SPI_transmit>
}
     4cc:	08 95       	ret

000004ce <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
     4ce:	c4 9a       	sbi	0x18, 4	; 24
     4d0:	08 95       	ret

000004d2 <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
     4d2:	c4 98       	cbi	0x18, 4	; 24
     4d4:	08 95       	ret

000004d6 <highscore_get>:
		}
		return score->place;
	}
}

highscore highscore_get(uint8_t game, uint8_t position){
     4d6:	5f 92       	push	r5
     4d8:	6f 92       	push	r6
     4da:	7f 92       	push	r7
     4dc:	8f 92       	push	r8
     4de:	9f 92       	push	r9
     4e0:	af 92       	push	r10
     4e2:	bf 92       	push	r11
     4e4:	cf 92       	push	r12
     4e6:	df 92       	push	r13
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	cd b7       	in	r28, 0x3d	; 61
     4f6:	de b7       	in	r29, 0x3e	; 62
     4f8:	2a 97       	sbiw	r28, 0x0a	; 10
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	56 2e       	mov	r5, r22
	highscore hs;
	
	//Make sure legal position between 1 and 16
	position = (position > 0 && position < 17)? position : 0;
     506:	9f ef       	ldi	r25, 0xFF	; 255
     508:	96 0f       	add	r25, r22
     50a:	90 31       	cpi	r25, 0x10	; 16
     50c:	08 f0       	brcs	.+2      	; 0x510 <__stack+0x11>
     50e:	51 2c       	mov	r5, r1
	hs.place = position;
	
	//Calculate index of score
	int index = (position-1)*4;
     510:	65 2c       	mov	r6, r5
     512:	71 2c       	mov	r7, r1
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	69 1a       	sub	r6, r25
     518:	71 08       	sbc	r7, r1
     51a:	66 0c       	add	r6, r6
     51c:	77 1c       	adc	r7, r7
     51e:	66 0c       	add	r6, r6
     520:	77 1c       	adc	r7, r7
     522:	8e 01       	movw	r16, r28
     524:	0a 5f       	subi	r16, 0xFA	; 250
     526:	1f 4f       	sbci	r17, 0xFF	; 255
     528:	4e 01       	movw	r8, r28
     52a:	e9 e0       	ldi	r30, 0x09	; 9
     52c:	8e 0e       	add	r8, r30
     52e:	91 1c       	adc	r9, r1
	
	//Get name, score from EEPROM
	for (int i = 0; i < 3; i++){
		hs.name[i] = EEPROM_read(game + index + i);
     530:	e8 2e       	mov	r14, r24
     532:	f1 2c       	mov	r15, r1
     534:	57 01       	movw	r10, r14
     536:	a0 1a       	sub	r10, r16
     538:	b1 0a       	sbc	r11, r17
     53a:	a6 0c       	add	r10, r6
     53c:	b7 1c       	adc	r11, r7
     53e:	c5 01       	movw	r24, r10
     540:	80 0f       	add	r24, r16
     542:	91 1f       	adc	r25, r17
     544:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <EEPROM_read>
     548:	f8 01       	movw	r30, r16
     54a:	81 93       	st	Z+, r24
     54c:	8f 01       	movw	r16, r30
	
	//Calculate index of score
	int index = (position-1)*4;
	
	//Get name, score from EEPROM
	for (int i = 0; i < 3; i++){
     54e:	e8 15       	cp	r30, r8
     550:	f9 05       	cpc	r31, r9
     552:	a9 f7       	brne	.-22     	; 0x53e <__stack+0x3f>
		hs.name[i] = EEPROM_read(game + index + i);
	}
	hs.score = EEPROM_read(game + index + 3);
     554:	c3 01       	movw	r24, r6
     556:	8e 0d       	add	r24, r14
     558:	9f 1d       	adc	r25, r15
     55a:	03 96       	adiw	r24, 0x03	; 3
     55c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <EEPROM_read>
	return hs;
     560:	89 87       	std	Y+9, r24	; 0x09
     562:	5a 86       	std	Y+10, r5	; 0x0a
     564:	85 e0       	ldi	r24, 0x05	; 5
     566:	fe 01       	movw	r30, r28
     568:	36 96       	adiw	r30, 0x06	; 6
     56a:	de 01       	movw	r26, r28
     56c:	11 96       	adiw	r26, 0x01	; 1
     56e:	01 90       	ld	r0, Z+
     570:	0d 92       	st	X+, r0
     572:	8a 95       	dec	r24
     574:	e1 f7       	brne	.-8      	; 0x56e <__stack+0x6f>
     576:	29 81       	ldd	r18, Y+1	; 0x01
     578:	3a 81       	ldd	r19, Y+2	; 0x02
     57a:	4b 81       	ldd	r20, Y+3	; 0x03
     57c:	5c 81       	ldd	r21, Y+4	; 0x04
     57e:	6d 81       	ldd	r22, Y+5	; 0x05
}
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	2a 96       	adiw	r28, 0x0a	; 10
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	cf 90       	pop	r12
     5a2:	bf 90       	pop	r11
     5a4:	af 90       	pop	r10
     5a6:	9f 90       	pop	r9
     5a8:	8f 90       	pop	r8
     5aa:	7f 90       	pop	r7
     5ac:	6f 90       	pop	r6
     5ae:	5f 90       	pop	r5
     5b0:	08 95       	ret

000005b2 <highscore_leaderboard>:


void highscore_leaderboard(uint8_t game, highscore leaderboard[], int length){
     5b2:	df 92       	push	r13
     5b4:	ef 92       	push	r14
     5b6:	ff 92       	push	r15
     5b8:	0f 93       	push	r16
     5ba:	1f 93       	push	r17
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	d8 2e       	mov	r13, r24
	for (int i = 0; i < length; i++){
     5c2:	14 16       	cp	r1, r20
     5c4:	15 06       	cpc	r1, r21
     5c6:	bc f4       	brge	.+46     	; 0x5f6 <highscore_leaderboard+0x44>
     5c8:	c6 2f       	mov	r28, r22
     5ca:	d7 2f       	mov	r29, r23
     5cc:	7a 01       	movw	r14, r20
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	e8 1a       	sub	r14, r24
     5d2:	f8 0a       	sbc	r15, r24
     5d4:	01 e0       	ldi	r16, 0x01	; 1
     5d6:	10 e0       	ldi	r17, 0x00	; 0
		leaderboard[i] = highscore_get(game, i+1);
     5d8:	60 2f       	mov	r22, r16
     5da:	8d 2d       	mov	r24, r13
     5dc:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <highscore_get>
     5e0:	28 83       	st	Y, r18
     5e2:	39 83       	std	Y+1, r19	; 0x01
     5e4:	4a 83       	std	Y+2, r20	; 0x02
     5e6:	5b 83       	std	Y+3, r21	; 0x03
     5e8:	6c 83       	std	Y+4, r22	; 0x04
     5ea:	0f 5f       	subi	r16, 0xFF	; 255
     5ec:	1f 4f       	sbci	r17, 0xFF	; 255
     5ee:	25 96       	adiw	r28, 0x05	; 5
	return hs;
}


void highscore_leaderboard(uint8_t game, highscore leaderboard[], int length){
	for (int i = 0; i < length; i++){
     5f0:	0e 15       	cp	r16, r14
     5f2:	1f 05       	cpc	r17, r15
     5f4:	89 f7       	brne	.-30     	; 0x5d8 <highscore_leaderboard+0x26>
		leaderboard[i] = highscore_get(game, i+1);
	}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	ef 90       	pop	r14
     602:	df 90       	pop	r13
     604:	08 95       	ret

00000606 <play_pingpong>:
#include "highscore.h"

volatile State current_state;
volatile uint8_t current_score;

void play_pingpong(){
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	0f 93       	push	r16
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	ca 56       	subi	r28, 0x6A	; 106
     61c:	d1 09       	sbc	r29, r1
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	f8 94       	cli
     622:	de bf       	out	0x3e, r29	; 62
     624:	0f be       	out	0x3f, r0	; 63
     626:	cd bf       	out	0x3d, r28	; 61
}


void state_set(State state){
	
	current_state = state;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 22 02 	sts	0x0222, r24
}

void score_set(uint8_t score){
	current_score = score;
     62e:	10 92 23 02 	sts	0x0223, r1
	state_set(PLAY_PINGPONG);
	score_set(0);
	
	//Send message to node 2, and go into waiting mode
	Message m;
	m.id = GAME_STATUS;
     632:	92 e0       	ldi	r25, 0x02	; 2
     634:	99 83       	std	Y+1, r25	; 0x01
	m.length = 1;
     636:	8a 83       	std	Y+2, r24	; 0x02
	m.data[0] = PLAY_PINGPONG;
     638:	8b 83       	std	Y+3, r24	; 0x03
	CAN_transmit(&m);
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	0e 94 09 04 	call	0x812	; 0x812 <CAN_transmit>
	
	//Print message on screen
	oled_sram_clear_screen(0);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	oled_sram_write_string(0, "Playing pingpong", 2);
     64a:	42 e0       	ldi	r20, 0x02	; 2
     64c:	50 e0       	ldi	r21, 0x00	; 0
     64e:	62 e1       	ldi	r22, 0x12	; 18
     650:	71 e0       	ldi	r23, 0x01	; 1
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 2f 07 	call	0xe5e	; 0xe5e <oled_sram_write_string>
	char score[16];
	printf("State %i \n", current_state);
     65a:	80 91 22 02 	lds	r24, 0x0222
     65e:	1f 92       	push	r1
     660:	8f 93       	push	r24
     662:	83 e2       	ldi	r24, 0x23	; 35
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	9f 93       	push	r25
     668:	8f 93       	push	r24
     66a:	0e 94 48 13 	call	0x2690	; 0x2690 <printf>
	while(current_state == PLAY_PINGPONG){
     66e:	80 91 22 02 	lds	r24, 0x0222
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	81 30       	cpi	r24, 0x01	; 1
     67c:	99 f5       	brne	.+102    	; 0x6e4 <play_pingpong+0xde>
		_delay_ms(100);
		send_controlls();
		sprintf(score, "Score: %d", current_score);
     67e:	0f 2e       	mov	r0, r31
     680:	fe e2       	ldi	r31, 0x2E	; 46
     682:	ef 2e       	mov	r14, r31
     684:	f1 e0       	ldi	r31, 0x01	; 1
     686:	ff 2e       	mov	r15, r31
     688:	f0 2d       	mov	r31, r0
     68a:	8e 01       	movw	r16, r28
     68c:	05 5f       	subi	r16, 0xF5	; 245
     68e:	1f 4f       	sbci	r17, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	8f e7       	ldi	r24, 0x7F	; 127
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	21 50       	subi	r18, 0x01	; 1
     698:	80 40       	sbci	r24, 0x00	; 0
     69a:	90 40       	sbci	r25, 0x00	; 0
     69c:	e1 f7       	brne	.-8      	; 0x696 <play_pingpong+0x90>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <play_pingpong+0x9a>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <play_pingpong+0x9c>
	oled_sram_write_string(0, "Playing pingpong", 2);
	char score[16];
	printf("State %i \n", current_state);
	while(current_state == PLAY_PINGPONG){
		_delay_ms(100);
		send_controlls();
     6a2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <send_controlls>
		sprintf(score, "Score: %d", current_score);
     6a6:	80 91 23 02 	lds	r24, 0x0223
     6aa:	1f 92       	push	r1
     6ac:	8f 93       	push	r24
     6ae:	ff 92       	push	r15
     6b0:	ef 92       	push	r14
     6b2:	1f 93       	push	r17
     6b4:	0f 93       	push	r16
     6b6:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <sprintf>
		oled_sram_write_string(0, score, 4);
     6ba:	44 e0       	ldi	r20, 0x04	; 4
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	b8 01       	movw	r22, r16
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 2f 07 	call	0xe5e	; 0xe5e <oled_sram_write_string>
		oled_sram_flush(0);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
	//Print message on screen
	oled_sram_clear_screen(0);
	oled_sram_write_string(0, "Playing pingpong", 2);
	char score[16];
	printf("State %i \n", current_state);
	while(current_state == PLAY_PINGPONG){
     6d0:	80 91 22 02 	lds	r24, 0x0222
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	81 30       	cpi	r24, 0x01	; 1
     6e2:	b1 f2       	breq	.-84     	; 0x690 <play_pingpong+0x8a>
	
	highscore hs;
	hs.name[0] = 'e';
	hs.name[1] = 'a';
	hs.name[2] = 'l';
	hs.score = current_score;
     6e4:	80 91 23 02 	lds	r24, 0x0223
     6e8:	e0 e0       	ldi	r30, 0x00	; 0
     6ea:	f0 ef       	ldi	r31, 0xF0	; 240
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <play_pingpong+0xe6>
	hs.place = 0;
	//highscore_add(PINGPONG, &hs);
	_delay_ms(50);
	highscore hslist[16];
	highscore_leaderboard(PINGPONG, hslist, 10);
     6f0:	4a e0       	ldi	r20, 0x0A	; 10
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	be 01       	movw	r22, r28
     6f6:	65 5e       	subi	r22, 0xE5	; 229
     6f8:	7f 4f       	sbci	r23, 0xFF	; 255
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <highscore_leaderboard>
     700:	8e 01       	movw	r16, r28
     702:	01 5e       	subi	r16, 0xE1	; 225
     704:	1f 4f       	sbci	r17, 0xFF	; 255
     706:	6e 01       	movw	r12, r28
     708:	ff e6       	ldi	r31, 0x6F	; 111
     70a:	cf 0e       	add	r12, r31
     70c:	d1 1c       	adc	r13, r1
	for (int i = 0; i < 16; i++){
		printf("leaderboard: %i, %s, %i\n\r", hslist[i].place, hslist[i].name, hslist[i].score );
     70e:	0f 2e       	mov	r0, r31
     710:	f8 e3       	ldi	r31, 0x38	; 56
     712:	ef 2e       	mov	r14, r31
     714:	f1 e0       	ldi	r31, 0x01	; 1
     716:	ff 2e       	mov	r15, r31
     718:	f0 2d       	mov	r31, r0
     71a:	f8 01       	movw	r30, r16
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	80 81       	ld	r24, Z
     720:	1f 92       	push	r1
     722:	8f 93       	push	r24
     724:	c8 01       	movw	r24, r16
     726:	04 97       	sbiw	r24, 0x04	; 4
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	f8 01       	movw	r30, r16
     72e:	80 81       	ld	r24, Z
     730:	1f 92       	push	r1
     732:	8f 93       	push	r24
     734:	ff 92       	push	r15
     736:	ef 92       	push	r14
     738:	0e 94 48 13 	call	0x2690	; 0x2690 <printf>
     73c:	0b 5f       	subi	r16, 0xFB	; 251
     73e:	1f 4f       	sbci	r17, 0xFF	; 255
	hs.place = 0;
	//highscore_add(PINGPONG, &hs);
	_delay_ms(50);
	highscore hslist[16];
	highscore_leaderboard(PINGPONG, hslist, 10);
	for (int i = 0; i < 16; i++){
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	0c 15       	cp	r16, r12
     74c:	1d 05       	cpc	r17, r13
     74e:	29 f7       	brne	.-54     	; 0x71a <play_pingpong+0x114>
		printf("leaderboard: %i, %s, %i\n\r", hslist[i].place, hslist[i].name, hslist[i].score );
	}
}
     750:	c6 59       	subi	r28, 0x96	; 150
     752:	df 4f       	sbci	r29, 0xFF	; 255
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	08 95       	ret

00000770 <state_set>:


void state_set(State state){
	
	current_state = state;
     770:	80 93 22 02 	sts	0x0222, r24
     774:	08 95       	ret

00000776 <score_set>:
}

void score_set(uint8_t score){
	current_score = score;
     776:	80 93 23 02 	sts	0x0223, r24
     77a:	08 95       	ret

0000077c <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     77c:	80 b7       	in	r24, 0x30	; 48
     77e:	80 62       	ori	r24, 0x20	; 32
     780:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     782:	85 b7       	in	r24, 0x35	; 53
     784:	80 68       	ori	r24, 0x80	; 128
     786:	85 bf       	out	0x35, r24	; 53
     788:	08 95       	ret

0000078a <main>:
#include "Driver_files/message_handler.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
     78a:	80 e8       	ldi	r24, 0x80	; 128
     78c:	95 e2       	ldi	r25, 0x25	; 37
     78e:	0e 94 2e 08 	call	0x105c	; 0x105c <uartInit>
	bus_init();
     792:	0e 94 be 03 	call	0x77c	; 0x77c <bus_init>
	oled_init();
     796:	0e 94 a1 06 	call	0xd42	; 0xd42 <oled_init>
	init_handler();
     79a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <init_handler>
	//oled_sram_init();
	CAN_init();
     79e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <CAN_init>
	printf("Reset?");
     7a2:	82 e5       	ldi	r24, 0x52	; 82
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	9f 93       	push	r25
     7a8:	8f 93       	push	r24
     7aa:	0e 94 48 13 	call	0x2690	; 0x2690 <printf>
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
    while(1)
    {
		menuSystem();
     7b2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <menuSystem>
     7b6:	fd cf       	rjmp	.-6      	; 0x7b2 <main+0x28>

000007b8 <get_adc>:
}

uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc

	adc[0] = 4 + (channel%4);
     7b8:	83 70       	andi	r24, 0x03	; 3
     7ba:	90 78       	andi	r25, 0x80	; 128
     7bc:	99 23       	and	r25, r25
     7be:	24 f4       	brge	.+8      	; 0x7c8 <get_adc+0x10>
     7c0:	01 97       	sbiw	r24, 0x01	; 1
     7c2:	8c 6f       	ori	r24, 0xFC	; 252
     7c4:	9f 6f       	ori	r25, 0xFF	; 255
     7c6:	01 96       	adiw	r24, 0x01	; 1
     7c8:	8c 5f       	subi	r24, 0xFC	; 252
     7ca:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ce:	85 ef       	ldi	r24, 0xF5	; 245
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	f1 f7       	brne	.-4      	; 0x7d2 <get_adc+0x1a>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <get_adc+0x20>
     7d8:	00 00       	nop
	_delay_us(200);
	return adc[0];
     7da:	80 91 00 14 	lds	r24, 0x1400
}
     7de:	08 95       	ret

000007e0 <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
     7e0:	0e 94 36 06 	call	0xc6c	; 0xc6c <MCP_init>
	//Enter config mode
	MCP_reset();
     7e4:	0e 94 1c 06 	call	0xc38	; 0xc38 <MCP_reset>
	//set normal mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	60 ee       	ldi	r22, 0xE0	; 224
     7ec:	8f e0       	ldi	r24, 0x0F	; 15
     7ee:	0e 94 87 06 	call	0xd0e	; 0xd0e <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
     7f2:	4f ef       	ldi	r20, 0xFF	; 255
     7f4:	63 e0       	ldi	r22, 0x03	; 3
     7f6:	8b e2       	ldi	r24, 0x2B	; 43
     7f8:	0e 94 87 06 	call	0xd0e	; 0xd0e <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
     7fc:	8e e0       	ldi	r24, 0x0E	; 14
     7fe:	0e 94 24 06 	call	0xc48	; 0xc48 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     802:	28 2f       	mov	r18, r24
     804:	20 7e       	andi	r18, 0xE0	; 224
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	11 f4       	brne	.+4      	; 0x810 <CAN_init+0x30>
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     810:	08 95       	ret

00000812 <CAN_transmit>:

void CAN_transmit(Message *m){
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_bit_modify(MCP_TXB0SIDL, 0xE0, m->id<<5);
     81a:	48 81       	ld	r20, Y
     81c:	42 95       	swap	r20
     81e:	44 0f       	add	r20, r20
     820:	40 7e       	andi	r20, 0xE0	; 224
     822:	60 ee       	ldi	r22, 0xE0	; 224
     824:	82 e3       	ldi	r24, 0x32	; 50
     826:	0e 94 87 06 	call	0xd0e	; 0xd0e <MCP_bit_modify>
	MCP_bit_modify(MCP_TXB0SIDH, 0xFF, m->id>>3);
     82a:	48 81       	ld	r20, Y
     82c:	46 95       	lsr	r20
     82e:	46 95       	lsr	r20
     830:	46 95       	lsr	r20
     832:	6f ef       	ldi	r22, 0xFF	; 255
     834:	81 e3       	ldi	r24, 0x31	; 49
     836:	0e 94 87 06 	call	0xd0e	; 0xd0e <MCP_bit_modify>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     83a:	69 81       	ldd	r22, Y+1	; 0x01
     83c:	85 e3       	ldi	r24, 0x35	; 53
     83e:	0e 94 52 06 	call	0xca4	; 0xca4 <MCP_write>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     842:	69 81       	ldd	r22, Y+1	; 0x01
     844:	85 e3       	ldi	r24, 0x35	; 53
     846:	0e 94 52 06 	call	0xca4	; 0xca4 <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     84a:	89 81       	ldd	r24, Y+1	; 0x01
     84c:	88 23       	and	r24, r24
     84e:	69 f0       	breq	.+26     	; 0x86a <CAN_transmit+0x58>
     850:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
     852:	fe 01       	movw	r30, r28
     854:	e1 0f       	add	r30, r17
     856:	f1 1d       	adc	r31, r1
     858:	62 81       	ldd	r22, Z+2	; 0x02
     85a:	86 e3       	ldi	r24, 0x36	; 54
     85c:	81 0f       	add	r24, r17
     85e:	0e 94 52 06 	call	0xca4	; 0xca4 <MCP_write>
	MCP_write(MCP_TXB0DLC, m->length);
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     862:	1f 5f       	subi	r17, 0xFF	; 255
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	18 17       	cp	r17, r24
     868:	a0 f3       	brcs	.-24     	; 0x852 <CAN_transmit+0x40>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	0e 94 66 06 	call	0xccc	; 0xccc <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	08 95       	ret

00000878 <CAN_receive>:

int CAN_receive(Message *m){
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
     880:	8c e2       	ldi	r24, 0x2C	; 44
     882:	0e 94 24 06 	call	0xc48	; 0xc48 <MCP_read>
     886:	80 ff       	sbrs	r24, 0
     888:	2c c0       	rjmp	.+88     	; 0x8e2 <CAN_receive+0x6a>
		m->length = MCP_read(MCP_RBB0DLC);
     88a:	85 e6       	ldi	r24, 0x65	; 101
     88c:	0e 94 24 06 	call	0xc48	; 0xc48 <MCP_read>
     890:	89 83       	std	Y+1, r24	; 0x01
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
     892:	82 e6       	ldi	r24, 0x62	; 98
     894:	0e 94 24 06 	call	0xc48	; 0xc48 <MCP_read>
     898:	18 2f       	mov	r17, r24
     89a:	12 95       	swap	r17
     89c:	16 95       	lsr	r17
     89e:	17 70       	andi	r17, 0x07	; 7
     8a0:	18 83       	st	Y, r17
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
     8a2:	81 e6       	ldi	r24, 0x61	; 97
     8a4:	0e 94 24 06 	call	0xc48	; 0xc48 <MCP_read>
     8a8:	88 0f       	add	r24, r24
     8aa:	88 0f       	add	r24, r24
     8ac:	88 0f       	add	r24, r24
     8ae:	18 0f       	add	r17, r24
     8b0:	18 83       	st	Y, r17
		for(uint8_t i = 0; i < m->length; i++){
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	88 23       	and	r24, r24
     8b6:	69 f0       	breq	.+26     	; 0x8d2 <CAN_receive+0x5a>
     8b8:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
     8ba:	86 e6       	ldi	r24, 0x66	; 102
     8bc:	81 0f       	add	r24, r17
     8be:	0e 94 24 06 	call	0xc48	; 0xc48 <MCP_read>
     8c2:	fe 01       	movw	r30, r28
     8c4:	e1 0f       	add	r30, r17
     8c6:	f1 1d       	adc	r31, r1
     8c8:	82 83       	std	Z+2, r24	; 0x02
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
		for(uint8_t i = 0; i < m->length; i++){
     8ca:	1f 5f       	subi	r17, 0xFF	; 255
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	18 17       	cp	r17, r24
     8d0:	a0 f3       	brcs	.-24     	; 0x8ba <CAN_receive+0x42>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     8d2:	40 e0       	ldi	r20, 0x00	; 0
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	8c e2       	ldi	r24, 0x2C	; 44
     8d8:	0e 94 87 06 	call	0xd0e	; 0xd0e <MCP_bit_modify>
		return 0;
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <CAN_receive+0x6e>
	}
	return 1;
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	08 95       	ret

000008ee <get_slider_position>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Slider get_slider_position(){
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <get_adc>
     8fa:	ec 01       	movw	r28, r24
	slide.right = ((get_adc(0))*100)/255;
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <get_adc>
     904:	fc 01       	movw	r30, r24
float xMean = 127;
float yMean = 127;

Slider get_slider_position(){
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     906:	44 e6       	ldi	r20, 0x64	; 100
     908:	4c 9f       	mul	r20, r28
     90a:	c0 01       	movw	r24, r0
     90c:	4d 9f       	mul	r20, r29
     90e:	90 0d       	add	r25, r0
     910:	11 24       	eor	r1, r1
     912:	2f ef       	ldi	r18, 0xFF	; 255
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	b9 01       	movw	r22, r18
     918:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
     91c:	c6 2f       	mov	r28, r22
	slide.right = ((get_adc(0))*100)/255;
     91e:	4e 9f       	mul	r20, r30
     920:	c0 01       	movw	r24, r0
     922:	4f 9f       	mul	r20, r31
     924:	90 0d       	add	r25, r0
     926:	11 24       	eor	r1, r1
     928:	b9 01       	movw	r22, r18
     92a:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
     92e:	76 2f       	mov	r23, r22
	return slide;
}
     930:	6c 2f       	mov	r22, r28
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	08 95       	ret

0000093c <get_joystick_direction>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = get_joystick_direction(joy.X, joy.Y);
	return joy;
}

direction get_joystick_direction(int x, int y){
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	8c 01       	movw	r16, r24
     94e:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
     950:	bc 01       	movw	r22, r24
     952:	88 27       	eor	r24, r24
     954:	77 fd       	sbrc	r23, 7
     956:	80 95       	com	r24
     958:	98 2f       	mov	r25, r24
     95a:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     95e:	6b 01       	movw	r12, r22
     960:	7c 01       	movw	r14, r24
     962:	e8 94       	clt
     964:	f7 f8       	bld	r15, 7
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	48 e4       	ldi	r20, 0x48	; 72
     96c:	52 e4       	ldi	r21, 0x42	; 66
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__cmpsf2>
     976:	88 23       	and	r24, r24
     978:	84 f4       	brge	.+32     	; 0x99a <get_joystick_direction+0x5e>
     97a:	be 01       	movw	r22, r28
     97c:	88 27       	eor	r24, r24
     97e:	77 fd       	sbrc	r23, 7
     980:	80 95       	com	r24
     982:	98 2f       	mov	r25, r24
     984:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     988:	9f 77       	andi	r25, 0x7F	; 127
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	48 e4       	ldi	r20, 0x48	; 72
     990:	52 e4       	ldi	r21, 0x42	; 66
     992:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__cmpsf2>
     996:	88 23       	and	r24, r24
     998:	dc f0       	brlt	.+54     	; 0x9d0 <get_joystick_direction+0x94>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
     99a:	be 01       	movw	r22, r28
     99c:	88 27       	eor	r24, r24
     99e:	77 fd       	sbrc	r23, 7
     9a0:	80 95       	com	r24
     9a2:	98 2f       	mov	r25, r24
     9a4:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     9a8:	9b 01       	movw	r18, r22
     9aa:	ac 01       	movw	r20, r24
     9ac:	5f 77       	andi	r21, 0x7F	; 127
     9ae:	c7 01       	movw	r24, r14
     9b0:	b6 01       	movw	r22, r12
     9b2:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__cmpsf2>
     9b6:	88 23       	and	r24, r24
     9b8:	2c f4       	brge	.+10     	; 0x9c4 <get_joystick_direction+0x88>
		if(y > 0){
     9ba:	1c 16       	cp	r1, r28
     9bc:	1d 06       	cpc	r1, r29
     9be:	54 f4       	brge	.+20     	; 0x9d4 <get_joystick_direction+0x98>
			return UP;
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	09 c0       	rjmp	.+18     	; 0x9d6 <get_joystick_direction+0x9a>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	10 16       	cp	r1, r16
     9c8:	11 06       	cpc	r1, r17
     9ca:	2c f0       	brlt	.+10     	; 0x9d6 <get_joystick_direction+0x9a>
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <get_joystick_direction+0x9a>
}

direction get_joystick_direction(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
     9d0:	84 e0       	ldi	r24, 0x04	; 4
     9d2:	01 c0       	rjmp	.+2      	; 0x9d6 <get_joystick_direction+0x9a>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
     9d4:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	1f 91       	pop	r17
     9dc:	0f 91       	pop	r16
     9de:	ff 90       	pop	r15
     9e0:	ef 90       	pop	r14
     9e2:	df 90       	pop	r13
     9e4:	cf 90       	pop	r12
     9e6:	08 95       	ret

000009e8 <get_joystick_position>:
	slide.left = ((get_adc(1))*100)/255;
	slide.right = ((get_adc(0))*100)/255;
	return slide;
}

Joystick get_joystick_position(){
     9e8:	cf 92       	push	r12
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	cf 93       	push	r28
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <get_adc>
     9fa:	c0 90 0a 01 	lds	r12, 0x010A
     9fe:	d0 90 0b 01 	lds	r13, 0x010B
     a02:	e0 90 0c 01 	lds	r14, 0x010C
     a06:	f0 90 0d 01 	lds	r15, 0x010D
     a0a:	bc 01       	movw	r22, r24
     a0c:	88 27       	eor	r24, r24
     a0e:	77 fd       	sbrc	r23, 7
     a10:	80 95       	com	r24
     a12:	98 2f       	mov	r25, r24
     a14:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     a18:	a7 01       	movw	r20, r14
     a1a:	96 01       	movw	r18, r12
     a1c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__subsf3>
     a20:	20 e0       	ldi	r18, 0x00	; 0
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	48 ec       	ldi	r20, 0xC8	; 200
     a26:	52 e4       	ldi	r21, 0x42	; 66
     a28:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     a2c:	a7 01       	movw	r20, r14
     a2e:	96 01       	movw	r18, r12
     a30:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__divsf3>
     a34:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixsfsi>
     a38:	c6 2f       	mov	r28, r22
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
     a3a:	83 e0       	ldi	r24, 0x03	; 3
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <get_adc>
     a42:	c0 90 0e 01 	lds	r12, 0x010E
     a46:	d0 90 0f 01 	lds	r13, 0x010F
     a4a:	e0 90 10 01 	lds	r14, 0x0110
     a4e:	f0 90 11 01 	lds	r15, 0x0111
     a52:	bc 01       	movw	r22, r24
     a54:	88 27       	eor	r24, r24
     a56:	77 fd       	sbrc	r23, 7
     a58:	80 95       	com	r24
     a5a:	98 2f       	mov	r25, r24
     a5c:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     a60:	a7 01       	movw	r20, r14
     a62:	96 01       	movw	r18, r12
     a64:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__subsf3>
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	48 ec       	ldi	r20, 0xC8	; 200
     a6e:	52 e4       	ldi	r21, 0x42	; 66
     a70:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     a74:	a7 01       	movw	r20, r14
     a76:	96 01       	movw	r18, r12
     a78:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__divsf3>
     a7c:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixsfsi>
     a80:	f6 2e       	mov	r15, r22
	joy.D = get_joystick_direction(joy.X, joy.Y);
     a82:	6c 2f       	mov	r22, r28
     a84:	77 27       	eor	r23, r23
     a86:	67 fd       	sbrc	r22, 7
     a88:	70 95       	com	r23
     a8a:	8f 2d       	mov	r24, r15
     a8c:	99 27       	eor	r25, r25
     a8e:	87 fd       	sbrc	r24, 7
     a90:	90 95       	com	r25
     a92:	0e 94 9e 04 	call	0x93c	; 0x93c <get_joystick_direction>
	return joy;
}
     a96:	6f 2d       	mov	r22, r15
     a98:	7c 2f       	mov	r23, r28
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	cf 91       	pop	r28
     a9e:	ff 90       	pop	r15
     aa0:	ef 90       	pop	r14
     aa2:	df 90       	pop	r13
     aa4:	cf 90       	pop	r12
     aa6:	08 95       	ret

00000aa8 <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	1f 92       	push	r1
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
     ab2:	28 ee       	ldi	r18, 0xE8	; 232
     ab4:	33 e0       	ldi	r19, 0x03	; 3
     ab6:	a9 01       	movw	r20, r18
     ab8:	48 1b       	sub	r20, r24
     aba:	59 0b       	sbc	r21, r25
     abc:	ca 01       	movw	r24, r20
     abe:	68 ec       	ldi	r22, 0xC8	; 200
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
     ac6:	60 5d       	subi	r22, 0xD0	; 208
     ac8:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	69 e5       	ldi	r22, 0x59	; 89
     ad8:	71 e0       	ldi	r23, 0x01	; 1
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0e 94 2f 07 	call	0xe5e	; 0xe5e <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
     ae2:	42 e0       	ldi	r20, 0x02	; 2
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	67 e6       	ldi	r22, 0x67	; 103
     ae8:	71 e0       	ldi	r23, 0x01	; 1
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	0e 94 2f 07 	call	0xe5e	; 0xe5e <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
     af2:	20 e6       	ldi	r18, 0x60	; 96
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	42 e0       	ldi	r20, 0x02	; 2
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	be 01       	movw	r22, r28
     afc:	6f 5f       	subi	r22, 0xFF	; 255
     afe:	7f 4f       	sbci	r23, 0xFF	; 255
     b00:	80 e0       	ldi	r24, 0x00	; 0
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
	oled_sram_flush(0);
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <calibrate_joystick>:
			return LEFT;
		} 
	}
}

void calibrate_joystick(){
     b18:	bf 92       	push	r11
     b1a:	cf 92       	push	r12
     b1c:	df 92       	push	r13
     b1e:	ef 92       	push	r14
     b20:	ff 92       	push	r15
     b22:	0f 93       	push	r16
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     b2a:	e1 2c       	mov	r14, r1
     b2c:	f1 2c       	mov	r15, r1

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
     b2e:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
     b30:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
     b32:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrate_joystick(){
	uint8_t yMax = 127;
     b34:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
     b36:	0f 2e       	mov	r0, r31
     b38:	f8 ec       	ldi	r31, 0xC8	; 200
     b3a:	cf 2e       	mov	r12, r31
     b3c:	d1 2c       	mov	r13, r1
     b3e:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <get_adc>
     b48:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
     b52:	bc 16       	cp	r11, r28
     b54:	08 f4       	brcc	.+2      	; 0xb58 <calibrate_joystick+0x40>
     b56:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
     b58:	81 17       	cp	r24, r17
     b5a:	08 f4       	brcc	.+2      	; 0xb5e <calibrate_joystick+0x46>
     b5c:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
     b5e:	08 17       	cp	r16, r24
     b60:	08 f4       	brcc	.+2      	; 0xb64 <calibrate_joystick+0x4c>
     b62:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
     b64:	db 15       	cp	r29, r11
     b66:	08 f4       	brcc	.+2      	; 0xb6a <calibrate_joystick+0x52>
     b68:	db 2d       	mov	r29, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	97 e1       	ldi	r25, 0x17	; 23
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	f1 f7       	brne	.-4      	; 0xb6e <calibrate_joystick+0x56>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <calibrate_joystick+0x5c>
     b74:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
     b76:	c7 01       	movw	r24, r14
     b78:	b6 01       	movw	r22, r12
     b7a:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
     b7e:	89 2b       	or	r24, r25
     b80:	19 f4       	brne	.+6      	; 0xb88 <calibrate_joystick+0x70>
			calibration_visual_countdown(i);
     b82:	c7 01       	movw	r24, r14
     b84:	0e 94 54 05 	call	0xaa8	; 0xaa8 <calibration_visual_countdown>
void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     b88:	9f ef       	ldi	r25, 0xFF	; 255
     b8a:	e9 1a       	sub	r14, r25
     b8c:	f9 0a       	sbc	r15, r25
     b8e:	88 ee       	ldi	r24, 0xE8	; 232
     b90:	e8 16       	cp	r14, r24
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	f8 06       	cpc	r15, r24
     b96:	a1 f6       	brne	.-88     	; 0xb40 <calibrate_joystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
     b98:	6d 2f       	mov	r22, r29
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	6c 1b       	sub	r22, r28
     b9e:	71 09       	sbc	r23, r1
     ba0:	88 27       	eor	r24, r24
     ba2:	77 fd       	sbrc	r23, 7
     ba4:	80 95       	com	r24
     ba6:	98 2f       	mov	r25, r24
     ba8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     bac:	20 e0       	ldi	r18, 0x00	; 0
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	5f e3       	ldi	r21, 0x3F	; 63
     bb4:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     bb8:	60 93 0a 01 	sts	0x010A, r22
     bbc:	70 93 0b 01 	sts	0x010B, r23
     bc0:	80 93 0c 01 	sts	0x010C, r24
     bc4:	90 93 0d 01 	sts	0x010D, r25
	xMean = (xMax - xMin)/2.0;
     bc8:	60 2f       	mov	r22, r16
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	61 1b       	sub	r22, r17
     bce:	71 09       	sbc	r23, r1
     bd0:	88 27       	eor	r24, r24
     bd2:	77 fd       	sbrc	r23, 7
     bd4:	80 95       	com	r24
     bd6:	98 2f       	mov	r25, r24
     bd8:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
     be8:	60 93 0e 01 	sts	0x010E, r22
     bec:	70 93 0f 01 	sts	0x010F, r23
     bf0:	80 93 10 01 	sts	0x0110, r24
     bf4:	90 93 11 01 	sts	0x0111, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
     bf8:	1f 92       	push	r1
     bfa:	0f 93       	push	r16
     bfc:	1f 92       	push	r1
     bfe:	1f 93       	push	r17
     c00:	1f 92       	push	r1
     c02:	df 93       	push	r29
     c04:	1f 92       	push	r1
     c06:	cf 93       	push	r28
     c08:	83 e7       	ldi	r24, 0x73	; 115
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	9f 93       	push	r25
     c0e:	8f 93       	push	r24
     c10:	0e 94 48 13 	call	0x2690	; 0x2690 <printf>
     c14:	8d b7       	in	r24, 0x3d	; 61
     c16:	9e b7       	in	r25, 0x3e	; 62
     c18:	0a 96       	adiw	r24, 0x0a	; 10
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	9e bf       	out	0x3e, r25	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	8d bf       	out	0x3d, r24	; 61
}
     c24:	df 91       	pop	r29
     c26:	cf 91       	pop	r28
     c28:	1f 91       	pop	r17
     c2a:	0f 91       	pop	r16
     c2c:	ff 90       	pop	r15
     c2e:	ef 90       	pop	r14
     c30:	df 90       	pop	r13
     c32:	cf 90       	pop	r12
     c34:	bf 90       	pop	r11
     c36:	08 95       	ret

00000c38 <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     c38:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
     c3c:	80 ec       	ldi	r24, 0xC0	; 192
     c3e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     c42:	0e 94 67 02 	call	0x4ce	; 0x4ce <SPI_ss_high>
     c46:	08 95       	ret

00000c48 <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
     c48:	cf 93       	push	r28
     c4a:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     c4c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	SPI_send(address);
     c56:	8c 2f       	mov	r24, r28
     c58:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	uint8_t data = SPI_receive();
     c5c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <SPI_receive>
     c60:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     c62:	0e 94 67 02 	call	0x4ce	; 0x4ce <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
     c66:	8c 2f       	mov	r24, r28
     c68:	cf 91       	pop	r28
     c6a:	08 95       	ret

00000c6c <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
     c6c:	80 e8       	ldi	r24, 0x80	; 128
     c6e:	95 e2       	ldi	r25, 0x25	; 37
     c70:	0e 94 2e 08 	call	0x105c	; 0x105c <uartInit>
	
	//Start SPI driver
	SPI_init();
     c74:	0e 94 56 02 	call	0x4ac	; 0x4ac <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
     c78:	0e 94 1c 06 	call	0xc38	; 0xc38 <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
     c7c:	8e e0       	ldi	r24, 0x0E	; 14
     c7e:	0e 94 24 06 	call	0xc48	; 0xc48 <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
     c82:	80 7e       	andi	r24, 0xE0	; 224
     c84:	80 38       	cpi	r24, 0x80	; 128
     c86:	59 f0       	breq	.+22     	; 0xc9e <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
     c88:	8f e7       	ldi	r24, 0x7F	; 127
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	9f 93       	push	r25
     c8e:	8f 93       	push	r24
     c90:	0e 94 48 13 	call	0x2690	; 0x2690 <printf>
		return 1;
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	08 95       	ret
	}
	return 0;
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
}
     ca2:	08 95       	ret

00000ca4 <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	d8 2f       	mov	r29, r24
     caa:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     cac:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
     cb0:	82 e0       	ldi	r24, 0x02	; 2
     cb2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	SPI_send(address);
     cb6:	8d 2f       	mov	r24, r29
     cb8:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	SPI_send(data);
     cbc:	8c 2f       	mov	r24, r28
     cbe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     cc2:	0e 94 67 02 	call	0x4ce	; 0x4ce <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
     ccc:	cf 93       	push	r28
     cce:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     cd0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
     cd4:	8c 2f       	mov	r24, r28
     cd6:	83 70       	andi	r24, 0x03	; 3
     cd8:	81 30       	cpi	r24, 0x01	; 1
     cda:	51 f0       	breq	.+20     	; 0xcf0 <MCP_rts+0x24>
     cdc:	28 f0       	brcs	.+10     	; 0xce8 <MCP_rts+0x1c>
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	59 f0       	breq	.+22     	; 0xcf8 <MCP_rts+0x2c>
     ce2:	83 30       	cpi	r24, 0x03	; 3
     ce4:	69 f0       	breq	.+26     	; 0xd00 <MCP_rts+0x34>
     ce6:	0f c0       	rjmp	.+30     	; 0xd06 <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
     ce8:	81 e8       	ldi	r24, 0x81	; 129
     cea:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
			break;
     cee:	0b c0       	rjmp	.+22     	; 0xd06 <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
     cf0:	82 e8       	ldi	r24, 0x82	; 130
     cf2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
			break;
     cf6:	07 c0       	rjmp	.+14     	; 0xd06 <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
     cf8:	84 e8       	ldi	r24, 0x84	; 132
     cfa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
			break;
     cfe:	03 c0       	rjmp	.+6      	; 0xd06 <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
     d00:	87 e8       	ldi	r24, 0x87	; 135
     d02:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     d06:	0e 94 67 02 	call	0x4ce	; 0x4ce <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
     d14:	18 2f       	mov	r17, r24
     d16:	d6 2f       	mov	r29, r22
     d18:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     d1a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
     d1e:	85 e0       	ldi	r24, 0x05	; 5
     d20:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	SPI_send(address);
     d24:	81 2f       	mov	r24, r17
     d26:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	SPI_send(mask);
     d2a:	8d 2f       	mov	r24, r29
     d2c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	SPI_send(data);
     d30:	8c 2f       	mov	r24, r28
     d32:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     d36:	0e 94 67 02 	call	0x4ce	; 0x4ce <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
     d3a:	df 91       	pop	r29
     d3c:	cf 91       	pop	r28
     d3e:	1f 91       	pop	r17
     d40:	08 95       	ret

00000d42 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     d42:	e0 e0       	ldi	r30, 0x00	; 0
     d44:	f0 e1       	ldi	r31, 0x10	; 16
     d46:	8e ea       	ldi	r24, 0xAE	; 174
     d48:	80 83       	st	Z, r24
     d4a:	81 ea       	ldi	r24, 0xA1	; 161
     d4c:	80 83       	st	Z, r24
     d4e:	8a ed       	ldi	r24, 0xDA	; 218
     d50:	80 83       	st	Z, r24
     d52:	82 e1       	ldi	r24, 0x12	; 18
     d54:	80 83       	st	Z, r24
     d56:	88 ec       	ldi	r24, 0xC8	; 200
     d58:	80 83       	st	Z, r24
     d5a:	88 ea       	ldi	r24, 0xA8	; 168
     d5c:	80 83       	st	Z, r24
     d5e:	8f e3       	ldi	r24, 0x3F	; 63
     d60:	80 83       	st	Z, r24
     d62:	85 ed       	ldi	r24, 0xD5	; 213
     d64:	80 83       	st	Z, r24
     d66:	80 e8       	ldi	r24, 0x80	; 128
     d68:	80 83       	st	Z, r24
     d6a:	81 e8       	ldi	r24, 0x81	; 129
     d6c:	80 83       	st	Z, r24
     d6e:	80 e5       	ldi	r24, 0x50	; 80
     d70:	80 83       	st	Z, r24
     d72:	89 ed       	ldi	r24, 0xD9	; 217
     d74:	80 83       	st	Z, r24
     d76:	81 e2       	ldi	r24, 0x21	; 33
     d78:	80 83       	st	Z, r24
     d7a:	80 e2       	ldi	r24, 0x20	; 32
     d7c:	80 83       	st	Z, r24
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	80 83       	st	Z, r24
     d82:	8b ed       	ldi	r24, 0xDB	; 219
     d84:	80 83       	st	Z, r24
     d86:	80 e3       	ldi	r24, 0x30	; 48
     d88:	80 83       	st	Z, r24
     d8a:	8d ea       	ldi	r24, 0xAD	; 173
     d8c:	80 83       	st	Z, r24
     d8e:	10 82       	st	Z, r1
     d90:	84 ea       	ldi	r24, 0xA4	; 164
     d92:	80 83       	st	Z, r24
     d94:	86 ea       	ldi	r24, 0xA6	; 166
     d96:	80 83       	st	Z, r24
     d98:	8f ea       	ldi	r24, 0xAF	; 175
     d9a:	80 83       	st	Z, r24
     d9c:	08 95       	ret

00000d9e <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
     d9e:	af 92       	push	r10
     da0:	bf 92       	push	r11
     da2:	cf 92       	push	r12
     da4:	df 92       	push	r13
     da6:	ef 92       	push	r14
     da8:	ff 92       	push	r15
     daa:	0f 93       	push	r16
     dac:	1f 93       	push	r17
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     db4:	c0 e0       	ldi	r28, 0x00	; 0
     db6:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
     db8:	e1 2c       	mov	r14, r1
     dba:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     dbc:	c1 2c       	mov	r12, r1
     dbe:	68 94       	set
     dc0:	dd 24       	eor	r13, r13
     dc2:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     dc4:	00 e0       	ldi	r16, 0x00	; 0
     dc6:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
     dc8:	ce 01       	movw	r24, r28
     dca:	9e 01       	movw	r18, r28
     dcc:	2f 77       	andi	r18, 0x7F	; 127
     dce:	33 27       	eor	r19, r19
     dd0:	23 2b       	or	r18, r19
     dd2:	39 f4       	brne	.+14     	; 0xde2 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
     dd4:	20 eb       	ldi	r18, 0xB0	; 176
     dd6:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     dd8:	f6 01       	movw	r30, r12
     dda:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
     ddc:	ff ef       	ldi	r31, 0xFF	; 255
     dde:	ef 1a       	sub	r14, r31
     de0:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
     de2:	8a 0d       	add	r24, r10
     de4:	9b 1d       	adc	r25, r11
     de6:	0e 94 1f 08 	call	0x103e	; 0x103e <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     dea:	f8 01       	movw	r30, r16
     dec:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     dee:	21 96       	adiw	r28, 0x01	; 1
     df0:	c1 15       	cp	r28, r1
     df2:	f4 e0       	ldi	r31, 0x04	; 4
     df4:	df 07       	cpc	r29, r31
     df6:	41 f7       	brne	.-48     	; 0xdc8 <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	cf 90       	pop	r12
     e08:	bf 90       	pop	r11
     e0a:	af 90       	pop	r10
     e0c:	08 95       	ret

00000e0e <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
     e0e:	1f 92       	push	r1
     e10:	0f 92       	push	r0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	0f 92       	push	r0
     e16:	11 24       	eor	r1, r1
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	ef 93       	push	r30
     e2e:	ff 93       	push	r31
	oled_sram_flush(0);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
	TCNT1 = 0;
     e38:	1d bc       	out	0x2d, r1	; 45
     e3a:	1c bc       	out	0x2c, r1	; 44
}
     e3c:	ff 91       	pop	r31
     e3e:	ef 91       	pop	r30
     e40:	bf 91       	pop	r27
     e42:	af 91       	pop	r26
     e44:	9f 91       	pop	r25
     e46:	8f 91       	pop	r24
     e48:	7f 91       	pop	r23
     e4a:	6f 91       	pop	r22
     e4c:	5f 91       	pop	r21
     e4e:	4f 91       	pop	r20
     e50:	3f 91       	pop	r19
     e52:	2f 91       	pop	r18
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	0f 90       	pop	r0
     e5a:	1f 90       	pop	r1
     e5c:	18 95       	reti

00000e5e <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
     e5e:	af 92       	push	r10
     e60:	bf 92       	push	r11
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
     e72:	6a 01       	movw	r12, r20
     e74:	d6 94       	lsr	r13
     e76:	dc 2c       	mov	r13, r12
     e78:	cc 24       	eor	r12, r12
     e7a:	d7 94       	ror	r13
     e7c:	c7 94       	ror	r12
     e7e:	c8 0e       	add	r12, r24
     e80:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
     e82:	fb 01       	movw	r30, r22
     e84:	e0 80       	ld	r14, Z
	while(c != '\0'){
     e86:	ee 20       	and	r14, r14
     e88:	69 f1       	breq	.+90     	; 0xee4 <oled_sram_write_string+0x86>
     e8a:	5b 01       	movw	r10, r22
     e8c:	ff ef       	ldi	r31, 0xFF	; 255
     e8e:	af 1a       	sub	r10, r31
     e90:	bf 0a       	sbc	r11, r31
     e92:	15 c0       	rjmp	.+42     	; 0xebe <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     e94:	ce 01       	movw	r24, r28
     e96:	f7 01       	movw	r30, r14
     e98:	e8 0f       	add	r30, r24
     e9a:	f9 1f       	adc	r31, r25
     e9c:	64 91       	lpm	r22, Z
     e9e:	ec 01       	movw	r28, r24
     ea0:	21 96       	adiw	r28, 0x01	; 1
     ea2:	70 e0       	ldi	r23, 0x00	; 0
     ea4:	0e 94 23 08 	call	0x1046	; 0x1046 <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
     ea8:	c0 17       	cp	r28, r16
     eaa:	d1 07       	cpc	r29, r17
     eac:	99 f7       	brne	.-26     	; 0xe94 <oled_sram_write_string+0x36>
     eae:	48 e0       	ldi	r20, 0x08	; 8
     eb0:	c4 0e       	add	r12, r20
     eb2:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
     eb4:	f5 01       	movw	r30, r10
     eb6:	e1 90       	ld	r14, Z+
     eb8:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
     eba:	ee 20       	and	r14, r14
     ebc:	99 f0       	breq	.+38     	; 0xee4 <oled_sram_write_string+0x86>
     ebe:	86 01       	movw	r16, r12
     ec0:	08 5f       	subi	r16, 0xF8	; 248
     ec2:	1f 4f       	sbci	r17, 0xFF	; 255
     ec4:	f1 2c       	mov	r15, r1
     ec6:	ee 0c       	add	r14, r14
     ec8:	ff 1c       	adc	r15, r15
     eca:	ee 0c       	add	r14, r14
     ecc:	ff 1c       	adc	r15, r15
     ece:	ee 0c       	add	r14, r14
     ed0:	ff 1c       	adc	r15, r15
     ed2:	97 01       	movw	r18, r14
     ed4:	2c 19       	sub	r18, r12
     ed6:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     ed8:	c6 01       	movw	r24, r12
     eda:	a9 01       	movw	r20, r18
     edc:	40 59       	subi	r20, 0x90	; 144
     ede:	50 40       	sbci	r21, 0x00	; 0
     ee0:	7a 01       	movw	r14, r20
     ee2:	d9 cf       	rjmp	.-78     	; 0xe96 <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ff 90       	pop	r15
     eee:	ef 90       	pop	r14
     ef0:	df 90       	pop	r13
     ef2:	cf 90       	pop	r12
     ef4:	bf 90       	pop	r11
     ef6:	af 90       	pop	r10
     ef8:	08 95       	ret

00000efa <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	7b 01       	movw	r14, r22
	start = start + page*128+col;
     f08:	8a 01       	movw	r16, r20
     f0a:	16 95       	lsr	r17
     f0c:	10 2f       	mov	r17, r16
     f0e:	00 27       	eor	r16, r16
     f10:	17 95       	ror	r17
     f12:	07 95       	ror	r16
     f14:	80 0f       	add	r24, r16
     f16:	91 1f       	adc	r25, r17
     f18:	8c 01       	movw	r16, r24
     f1a:	02 0f       	add	r16, r18
     f1c:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
     f1e:	c0 e0       	ldi	r28, 0x00	; 0
     f20:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
     f22:	d7 01       	movw	r26, r14
     f24:	ec 91       	ld	r30, X
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	b0 97       	sbiw	r30, 0x20	; 32
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	ec 0f       	add	r30, r28
     f38:	fd 1f       	adc	r31, r29
     f3a:	e0 59       	subi	r30, 0x90	; 144
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	64 91       	lpm	r22, Z
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	ce 01       	movw	r24, r28
     f44:	80 0f       	add	r24, r16
     f46:	91 1f       	adc	r25, r17
     f48:	0e 94 23 08 	call	0x1046	; 0x1046 <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
     f4c:	21 96       	adiw	r28, 0x01	; 1
     f4e:	c8 30       	cpi	r28, 0x08	; 8
     f50:	d1 05       	cpc	r29, r1
     f52:	39 f7       	brne	.-50     	; 0xf22 <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	ff 90       	pop	r15
     f5e:	ef 90       	pop	r14
     f60:	08 95       	ret

00000f62 <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
     f62:	0f 93       	push	r16
     f64:	1f 93       	push	r17
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
     f6a:	8b 01       	movw	r16, r22
     f6c:	16 95       	lsr	r17
     f6e:	10 2f       	mov	r17, r16
     f70:	00 27       	eor	r16, r16
     f72:	17 95       	ror	r17
     f74:	07 95       	ror	r16
     f76:	08 0f       	add	r16, r24
     f78:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
     f7a:	c0 e0       	ldi	r28, 0x00	; 0
     f7c:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	ce 01       	movw	r24, r28
     f84:	80 0f       	add	r24, r16
     f86:	91 1f       	adc	r25, r17
     f88:	0e 94 23 08 	call	0x1046	; 0x1046 <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
     f8c:	21 96       	adiw	r28, 0x01	; 1
     f8e:	c0 38       	cpi	r28, 0x80	; 128
     f90:	d1 05       	cpc	r29, r1
     f92:	a9 f7       	brne	.-22     	; 0xf7e <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	08 95       	ret

00000f9e <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
     fa8:	c0 e0       	ldi	r28, 0x00	; 0
     faa:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
     fac:	be 01       	movw	r22, r28
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 b1 07 	call	0xf62	; 0xf62 <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
     fb4:	21 96       	adiw	r28, 0x01	; 1
     fb6:	c8 30       	cpi	r28, 0x08	; 8
     fb8:	d1 05       	cpc	r29, r1
     fba:	c1 f7       	brne	.-16     	; 0xfac <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
     fbc:	df 91       	pop	r29
     fbe:	cf 91       	pop	r28
     fc0:	1f 91       	pop	r17
     fc2:	0f 91       	pop	r16
     fc4:	08 95       	ret

00000fc6 <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	ea 01       	movw	r28, r20
	int page = y/8;
     fd0:	9a 01       	movw	r18, r20
     fd2:	dd 23       	and	r29, r29
     fd4:	14 f4       	brge	.+4      	; 0xfda <oled_sram_write_bit+0x14>
     fd6:	29 5f       	subi	r18, 0xF9	; 249
     fd8:	3f 4f       	sbci	r19, 0xFF	; 255
     fda:	89 01       	movw	r16, r18
     fdc:	15 95       	asr	r17
     fde:	07 95       	ror	r16
     fe0:	15 95       	asr	r17
     fe2:	07 95       	ror	r16
     fe4:	15 95       	asr	r17
     fe6:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
     fe8:	16 95       	lsr	r17
     fea:	10 2f       	mov	r17, r16
     fec:	00 27       	eor	r16, r16
     fee:	17 95       	ror	r17
     ff0:	07 95       	ror	r16
     ff2:	08 0f       	add	r16, r24
     ff4:	19 1f       	adc	r17, r25
     ff6:	06 0f       	add	r16, r22
     ff8:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
     ffa:	c8 01       	movw	r24, r16
     ffc:	0e 94 1f 08 	call	0x103e	; 0x103e <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
    1000:	ae 01       	movw	r20, r28
    1002:	47 70       	andi	r20, 0x07	; 7
    1004:	50 78       	andi	r21, 0x80	; 128
    1006:	55 23       	and	r21, r21
    1008:	34 f4       	brge	.+12     	; 0x1016 <oled_sram_write_bit+0x50>
    100a:	41 50       	subi	r20, 0x01	; 1
    100c:	51 09       	sbc	r21, r1
    100e:	48 6f       	ori	r20, 0xF8	; 248
    1010:	5f 6f       	ori	r21, 0xFF	; 255
    1012:	4f 5f       	subi	r20, 0xFF	; 255
    1014:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
    1016:	21 e0       	ldi	r18, 0x01	; 1
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	b9 01       	movw	r22, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <oled_sram_write_bit+0x5c>
    101e:	66 0f       	add	r22, r22
    1020:	77 1f       	adc	r23, r23
    1022:	4a 95       	dec	r20
    1024:	e2 f7       	brpl	.-8      	; 0x101e <oled_sram_write_bit+0x58>
    1026:	ab 01       	movw	r20, r22
    1028:	48 2b       	or	r20, r24
	setSRAM(index, temp);
    102a:	64 2f       	mov	r22, r20
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	c8 01       	movw	r24, r16
    1030:	0e 94 23 08 	call	0x1046	; 0x1046 <setSRAM>
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	08 95       	ret

0000103e <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
    103e:	98 5e       	subi	r25, 0xE8	; 232
    1040:	fc 01       	movw	r30, r24
    1042:	80 81       	ld	r24, Z
}
    1044:	08 95       	ret

00001046 <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
    1046:	fc 01       	movw	r30, r24
    1048:	f8 5e       	subi	r31, 0xE8	; 232
    104a:	80 81       	ld	r24, Z
		ext_ram[index] = value;
    104c:	60 83       	st	Z, r22
		return temp;
}
    104e:	08 95       	ret

00001050 <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
    1050:	5d 9b       	sbis	0x0b, 5	; 11
    1052:	fe cf       	rjmp	.-4      	; 0x1050 <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
    1054:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	08 95       	ret

0000105c <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
    105c:	9c 01       	movw	r18, r24
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	70 eb       	ldi	r23, 0xB0	; 176
    1066:	84 e0       	ldi	r24, 0x04	; 4
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 23 11 	call	0x2246	; 0x2246 <__divmodsi4>
    106e:	21 50       	subi	r18, 0x01	; 1
    1070:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    1072:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
    1074:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    1076:	8a b1       	in	r24, 0x0a	; 10
    1078:	88 61       	ori	r24, 0x18	; 24
    107a:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
    107c:	80 b5       	in	r24, 0x20	; 32
    107e:	86 68       	ori	r24, 0x86	; 134
    1080:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
    1082:	60 e0       	ldi	r22, 0x00	; 0
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	88 e2       	ldi	r24, 0x28	; 40
    1088:	98 e0       	ldi	r25, 0x08	; 8
    108a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <fdevopen>
	
	return 0;
}
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	08 95       	ret

00001094 <play_draw>:
#include "../Driver_files/oled_driver.h"
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
    109c:	0f e1       	ldi	r16, 0x1F	; 31
    109e:	10 e0       	ldi	r17, 0x00	; 0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
    10a0:	cf e3       	ldi	r28, 0x3F	; 63
    10a2:	d0 e0       	ldi	r29, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = get_joystick_position();
    10a4:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <get_joystick_position>
		switch(joy.D){
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	71 f0       	breq	.+28     	; 0x10c8 <play_draw+0x34>
    10ac:	58 f0       	brcs	.+22     	; 0x10c4 <play_draw+0x30>
    10ae:	82 30       	cpi	r24, 0x02	; 2
    10b0:	19 f0       	breq	.+6      	; 0x10b8 <play_draw+0x24>
    10b2:	83 30       	cpi	r24, 0x03	; 3
    10b4:	21 f0       	breq	.+8      	; 0x10be <play_draw+0x2a>
    10b6:	09 c0       	rjmp	.+18     	; 0x10ca <play_draw+0x36>
			case NEUTRAL:
				break;
			case UP:
				y--;
    10b8:	01 50       	subi	r16, 0x01	; 1
    10ba:	11 09       	sbc	r17, r1
				break;
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <play_draw+0x36>
			case DOWN:
				y++;
    10be:	0f 5f       	subi	r16, 0xFF	; 255
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <play_draw+0x36>
			case LEFT:
				x--;
    10c4:	21 97       	sbiw	r28, 0x01	; 1
				break;
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <play_draw+0x36>
			case RIGHT:
				x++;
    10c8:	21 96       	adiw	r28, 0x01	; 1
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
    10ca:	a8 01       	movw	r20, r16
    10cc:	be 01       	movw	r22, r28
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
		oled_sram_flush(0);
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
    10de:	2f ef       	ldi	r18, 0xFF	; 255
    10e0:	8f e7       	ldi	r24, 0x7F	; 127
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	21 50       	subi	r18, 0x01	; 1
    10e6:	80 40       	sbci	r24, 0x00	; 0
    10e8:	90 40       	sbci	r25, 0x00	; 0
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <play_draw+0x50>
    10ec:	00 c0       	rjmp	.+0      	; 0x10ee <play_draw+0x5a>
    10ee:	00 c0       	rjmp	.+0      	; 0x10f0 <play_draw+0x5c>
    10f0:	d9 cf       	rjmp	.-78     	; 0x10a4 <play_draw+0x10>

000010f2 <racketHit>:

typedef struct{
	int pos; // from 0 to 45 (16 in width)
} Racket;

int racketHit(Ball *ball, int racketPos){
    10f2:	cf 92       	push	r12
    10f4:	df 92       	push	r13
    10f6:	ef 92       	push	r14
    10f8:	ff 92       	push	r15
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	eb 01       	movw	r28, r22
	if (ball->posY >= racketPos && ball->posY < racketPos + RACKETSIZE )
    1100:	fc 01       	movw	r30, r24
    1102:	c2 80       	ldd	r12, Z+2	; 0x02
    1104:	d3 80       	ldd	r13, Z+3	; 0x03
    1106:	e4 80       	ldd	r14, Z+4	; 0x04
    1108:	f5 80       	ldd	r15, Z+5	; 0x05
    110a:	88 27       	eor	r24, r24
    110c:	77 fd       	sbrc	r23, 7
    110e:	80 95       	com	r24
    1110:	98 2f       	mov	r25, r24
    1112:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	c7 01       	movw	r24, r14
    111c:	b6 01       	movw	r22, r12
    111e:	0e 94 a8 10 	call	0x2150	; 0x2150 <__gesf2>
    1122:	88 23       	and	r24, r24
    1124:	bc f0       	brlt	.+46     	; 0x1154 <racketHit+0x62>
    1126:	be 01       	movw	r22, r28
    1128:	60 5f       	subi	r22, 0xF0	; 240
    112a:	7f 4f       	sbci	r23, 0xFF	; 255
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
    1138:	9b 01       	movw	r18, r22
    113a:	ac 01       	movw	r20, r24
    113c:	d1 e0       	ldi	r29, 0x01	; 1
    113e:	c0 e0       	ldi	r28, 0x00	; 0
    1140:	c7 01       	movw	r24, r14
    1142:	b6 01       	movw	r22, r12
    1144:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__cmpsf2>
    1148:	88 23       	and	r24, r24
    114a:	0c f0       	brlt	.+2      	; 0x114e <racketHit+0x5c>
    114c:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
    114e:	8d 2f       	mov	r24, r29
    1150:	9c 2f       	mov	r25, r28
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <racketHit+0x66>
	return 0;
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
}
    1158:	df 91       	pop	r29
    115a:	cf 91       	pop	r28
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	08 95       	ret

00001166 <updateBallAngle>:

void updateBallAngle(Ball *ball, int racketPos){
    1166:	cf 92       	push	r12
    1168:	df 92       	push	r13
    116a:	ef 92       	push	r14
    116c:	ff 92       	push	r15
    116e:	0f 93       	push	r16
    1170:	1f 93       	push	r17
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	ec 01       	movw	r28, r24
    1178:	8b 01       	movw	r16, r22
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
	int newBallAngle = ball->angle + hitPos * 45;
    117a:	6e 81       	ldd	r22, Y+6	; 0x06
    117c:	7f 81       	ldd	r23, Y+7	; 0x07
    117e:	88 27       	eor	r24, r24
    1180:	77 fd       	sbrc	r23, 7
    1182:	80 95       	com	r24
    1184:	98 2f       	mov	r25, r24
    1186:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
    118a:	6b 01       	movw	r12, r22
    118c:	7c 01       	movw	r14, r24
		return 1;
	return 0;
}

void updateBallAngle(Ball *ball, int racketPos){
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
    118e:	b8 01       	movw	r22, r16
    1190:	88 27       	eor	r24, r24
    1192:	77 fd       	sbrc	r23, 7
    1194:	80 95       	com	r24
    1196:	98 2f       	mov	r25, r24
    1198:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
    119c:	9b 01       	movw	r18, r22
    119e:	ac 01       	movw	r20, r24
    11a0:	6a 81       	ldd	r22, Y+2	; 0x02
    11a2:	7b 81       	ldd	r23, Y+3	; 0x03
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	9d 81       	ldd	r25, Y+5	; 0x05
    11a8:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__subsf3>
    11ac:	20 e0       	ldi	r18, 0x00	; 0
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	51 e4       	ldi	r21, 0x41	; 65
    11b4:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__subsf3>
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	5e e3       	ldi	r21, 0x3E	; 62
    11c0:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
	int newBallAngle = ball->angle + hitPos * 45;
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	44 e3       	ldi	r20, 0x34	; 52
    11ca:	52 e4       	ldi	r21, 0x42	; 66
    11cc:	0e 94 ac 10 	call	0x2158	; 0x2158 <__mulsf3>
    11d0:	9b 01       	movw	r18, r22
    11d2:	ac 01       	movw	r20, r24
    11d4:	c7 01       	movw	r24, r14
    11d6:	b6 01       	movw	r22, r12
    11d8:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__addsf3>
    11dc:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixsfsi>
	if(newBallAngle > 45) ball->angle = 45;
    11e0:	6e 32       	cpi	r22, 0x2E	; 46
    11e2:	71 05       	cpc	r23, r1
    11e4:	2c f0       	brlt	.+10     	; 0x11f0 <updateBallAngle+0x8a>
    11e6:	8d e2       	ldi	r24, 0x2D	; 45
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9f 83       	std	Y+7, r25	; 0x07
    11ec:	8e 83       	std	Y+6, r24	; 0x06
    11ee:	0b c0       	rjmp	.+22     	; 0x1206 <updateBallAngle+0xa0>
	else if(newBallAngle < -45) ball->angle = 45;
    11f0:	63 3d       	cpi	r22, 0xD3	; 211
    11f2:	4f ef       	ldi	r20, 0xFF	; 255
    11f4:	74 07       	cpc	r23, r20
    11f6:	2c f4       	brge	.+10     	; 0x1202 <updateBallAngle+0x9c>
    11f8:	8d e2       	ldi	r24, 0x2D	; 45
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	9f 83       	std	Y+7, r25	; 0x07
    11fe:	8e 83       	std	Y+6, r24	; 0x06
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <updateBallAngle+0xa0>
	else ball->angle = newBallAngle;
    1202:	7f 83       	std	Y+7, r23	; 0x07
    1204:	6e 83       	std	Y+6, r22	; 0x06
}
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
    1212:	df 90       	pop	r13
    1214:	cf 90       	pop	r12
    1216:	08 95       	ret

00001218 <ballInit>:

void ballInit(Ball *ball){
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	ec 01       	movw	r28, r24
	ball->dir = rand() % 2;
    121e:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	90 78       	andi	r25, 0x80	; 128
    1226:	99 23       	and	r25, r25
    1228:	24 f4       	brge	.+8      	; 0x1232 <ballInit+0x1a>
    122a:	01 97       	sbiw	r24, 0x01	; 1
    122c:	8e 6f       	ori	r24, 0xFE	; 254
    122e:	9f 6f       	ori	r25, 0xFF	; 255
    1230:	01 96       	adiw	r24, 0x01	; 1
    1232:	99 87       	std	Y+9, r25	; 0x09
    1234:	88 87       	std	Y+8, r24	; 0x08
	ball->angle = (rand() % 91) - 45;
    1236:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    123a:	6b e5       	ldi	r22, 0x5B	; 91
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
    1242:	8d 97       	sbiw	r24, 0x2d	; 45
    1244:	9f 83       	std	Y+7, r25	; 0x07
    1246:	8e 83       	std	Y+6, r24	; 0x06
	ball->posX = 63;
    1248:	8f e3       	ldi	r24, 0x3F	; 63
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	99 83       	std	Y+1, r25	; 0x01
    124e:	88 83       	st	Y, r24
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	08 95       	ret

00001256 <updateBallPosition>:

void updateBallPosition(Ball *ball){
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	ec 01       	movw	r28, r24
	float tempPosY = ball->posY + ((float)(ball->angle)/45);
    1268:	0e 81       	ldd	r16, Y+6	; 0x06
    126a:	1f 81       	ldd	r17, Y+7	; 0x07
    126c:	b8 01       	movw	r22, r16
    126e:	88 27       	eor	r24, r24
    1270:	77 fd       	sbrc	r23, 7
    1272:	80 95       	com	r24
    1274:	98 2f       	mov	r25, r24
    1276:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__floatsisf>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	44 e3       	ldi	r20, 0x34	; 52
    1280:	52 e4       	ldi	r21, 0x42	; 66
    1282:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <__divsf3>
    1286:	2a 81       	ldd	r18, Y+2	; 0x02
    1288:	3b 81       	ldd	r19, Y+3	; 0x03
    128a:	4c 81       	ldd	r20, Y+4	; 0x04
    128c:	5d 81       	ldd	r21, Y+5	; 0x05
    128e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__addsf3>
    1292:	6b 01       	movw	r12, r22
    1294:	7c 01       	movw	r14, r24
	
	//hits the wall
	if (tempPosY > 63){ 
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	4c e7       	ldi	r20, 0x7C	; 124
    129c:	52 e4       	ldi	r21, 0x42	; 66
    129e:	0e 94 a8 10 	call	0x2150	; 0x2150 <__gesf2>
    12a2:	18 16       	cp	r1, r24
    12a4:	d4 f4       	brge	.+52     	; 0x12da <updateBallPosition+0x84>
		ball->posY = 63 - (tempPosY - 63);
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	4c e7       	ldi	r20, 0x7C	; 124
    12ac:	52 e4       	ldi	r21, 0x42	; 66
    12ae:	c7 01       	movw	r24, r14
    12b0:	b6 01       	movw	r22, r12
    12b2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__subsf3>
    12b6:	9b 01       	movw	r18, r22
    12b8:	ac 01       	movw	r20, r24
    12ba:	60 e0       	ldi	r22, 0x00	; 0
    12bc:	70 e0       	ldi	r23, 0x00	; 0
    12be:	8c e7       	ldi	r24, 0x7C	; 124
    12c0:	92 e4       	ldi	r25, 0x42	; 66
    12c2:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <__subsf3>
    12c6:	6a 83       	std	Y+2, r22	; 0x02
    12c8:	7b 83       	std	Y+3, r23	; 0x03
    12ca:	8c 83       	std	Y+4, r24	; 0x04
    12cc:	9d 83       	std	Y+5, r25	; 0x05
		ball->angle *= -1;
    12ce:	11 95       	neg	r17
    12d0:	01 95       	neg	r16
    12d2:	11 09       	sbc	r17, r1
    12d4:	1f 83       	std	Y+7, r17	; 0x07
    12d6:	0e 83       	std	Y+6, r16	; 0x06
    12d8:	1b c0       	rjmp	.+54     	; 0x1310 <updateBallPosition+0xba>
	}
	else if (tempPosY < 0){
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	a9 01       	movw	r20, r18
    12e0:	c7 01       	movw	r24, r14
    12e2:	b6 01       	movw	r22, r12
    12e4:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <__cmpsf2>
    12e8:	88 23       	and	r24, r24
    12ea:	74 f4       	brge	.+28     	; 0x1308 <updateBallPosition+0xb2>
		ball->posY = -1*tempPosY;
    12ec:	f7 fa       	bst	r15, 7
    12ee:	f0 94       	com	r15
    12f0:	f7 f8       	bld	r15, 7
    12f2:	f0 94       	com	r15
    12f4:	ca 82       	std	Y+2, r12	; 0x02
    12f6:	db 82       	std	Y+3, r13	; 0x03
    12f8:	ec 82       	std	Y+4, r14	; 0x04
    12fa:	fd 82       	std	Y+5, r15	; 0x05
		ball->angle *= -1;
    12fc:	11 95       	neg	r17
    12fe:	01 95       	neg	r16
    1300:	11 09       	sbc	r17, r1
    1302:	1f 83       	std	Y+7, r17	; 0x07
    1304:	0e 83       	std	Y+6, r16	; 0x06
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <updateBallPosition+0xba>
	}
	else ball->posY = tempPosY;
    1308:	ca 82       	std	Y+2, r12	; 0x02
    130a:	db 82       	std	Y+3, r13	; 0x03
    130c:	ec 82       	std	Y+4, r14	; 0x04
    130e:	fd 82       	std	Y+5, r15	; 0x05
	if(ball->dir == RIGHT)
    1310:	88 85       	ldd	r24, Y+8	; 0x08
    1312:	99 85       	ldd	r25, Y+9	; 0x09
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	31 f4       	brne	.+12     	; 0x1324 <updateBallPosition+0xce>
		ball->posX++;
    1318:	88 81       	ld	r24, Y
    131a:	99 81       	ldd	r25, Y+1	; 0x01
    131c:	01 96       	adiw	r24, 0x01	; 1
    131e:	99 83       	std	Y+1, r25	; 0x01
    1320:	88 83       	st	Y, r24
    1322:	05 c0       	rjmp	.+10     	; 0x132e <updateBallPosition+0xd8>
	else ball->posX--;
    1324:	88 81       	ld	r24, Y
    1326:	99 81       	ldd	r25, Y+1	; 0x01
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	99 83       	std	Y+1, r25	; 0x01
    132c:	88 83       	st	Y, r24
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	08 95       	ret

00001340 <updateSliderPosition>:
void updateSliderPosition(Slider *slide){
    1340:	cf 93       	push	r28
    1342:	df 93       	push	r29
    1344:	ec 01       	movw	r28, r24
	*slide = get_slider_position();
    1346:	0e 94 77 04 	call	0x8ee	; 0x8ee <get_slider_position>
    134a:	79 83       	std	Y+1, r23	; 0x01
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	9b 83       	std	Y+3, r25	; 0x03
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
    1350:	4f e2       	ldi	r20, 0x2F	; 47
    1352:	46 9f       	mul	r20, r22
    1354:	c0 01       	movw	r24, r0
    1356:	11 24       	eor	r1, r1
    1358:	24 e6       	ldi	r18, 0x64	; 100
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	b9 01       	movw	r22, r18
    135e:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
    1362:	68 83       	st	Y, r22
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	48 9f       	mul	r20, r24
    1368:	c0 01       	movw	r24, r0
    136a:	11 24       	eor	r1, r1
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
    1372:	69 83       	std	Y+1, r22	; 0x01
} 
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <updateScreen>:
			printEndScreen("Player Left won!");
		}
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	2a 97       	sbiw	r28, 0x0a	; 10
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	09 83       	std	Y+1, r16	; 0x01
    139c:	1a 83       	std	Y+2, r17	; 0x02
    139e:	2b 83       	std	Y+3, r18	; 0x03
    13a0:	3c 83       	std	Y+4, r19	; 0x04
    13a2:	4d 83       	std	Y+5, r20	; 0x05
    13a4:	5e 83       	std	Y+6, r21	; 0x06
	oled_sram_clear_screen(0);
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	for (int i = 0; i < RACKETSIZE; i++){
    13ae:	00 e0       	ldi	r16, 0x00	; 0
    13b0:	10 e0       	ldi	r17, 0x00	; 0
    13b2:	a8 01       	movw	r20, r16
    13b4:	4e 0d       	add	r20, r14
    13b6:	5f 1d       	adc	r21, r15
		oled_sram_write_bit(0, 1, leftRacketPos + i);
    13b8:	61 e0       	ldi	r22, 0x01	; 1
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
    13c4:	a8 01       	movw	r20, r16
    13c6:	4c 0d       	add	r20, r12
    13c8:	5d 1d       	adc	r21, r13
		oled_sram_write_bit(0,127, rightRacketPos + i);
    13ca:	6f e7       	ldi	r22, 0x7F	; 127
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
    13d6:	0f 5f       	subi	r16, 0xFF	; 255
    13d8:	1f 4f       	sbci	r17, 0xFF	; 255
    13da:	00 31       	cpi	r16, 0x10	; 16
    13dc:	11 05       	cpc	r17, r1
    13de:	49 f7       	brne	.-46     	; 0x13b2 <updateScreen+0x38>
    13e0:	00 e0       	ldi	r16, 0x00	; 0
    13e2:	10 e0       	ldi	r17, 0x00	; 0
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	6b 81       	ldd	r22, Y+3	; 0x03
    13ec:	7c 81       	ldd	r23, Y+4	; 0x04
    13ee:	8d 81       	ldd	r24, Y+5	; 0x05
    13f0:	9e 81       	ldd	r25, Y+6	; 0x06
    13f2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__addsf3>
    13f6:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixsfsi>
    13fa:	29 81       	ldd	r18, Y+1	; 0x01
    13fc:	3a 81       	ldd	r19, Y+2	; 0x02
    13fe:	20 0f       	add	r18, r16
    1400:	31 1f       	adc	r19, r17
    1402:	ab 01       	movw	r20, r22
    1404:	b9 01       	movw	r22, r18
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e8       	ldi	r20, 0x80	; 128
    1414:	5f e3       	ldi	r21, 0x3F	; 63
    1416:	6b 81       	ldd	r22, Y+3	; 0x03
    1418:	7c 81       	ldd	r23, Y+4	; 0x04
    141a:	8d 81       	ldd	r24, Y+5	; 0x05
    141c:	9e 81       	ldd	r25, Y+6	; 0x06
    141e:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <__addsf3>
    1422:	0e 94 c5 0f 	call	0x1f8a	; 0x1f8a <__fixsfsi>
    1426:	29 81       	ldd	r18, Y+1	; 0x01
    1428:	3a 81       	ldd	r19, Y+2	; 0x02
    142a:	20 0f       	add	r18, r16
    142c:	31 1f       	adc	r19, r17
    142e:	ab 01       	movw	r20, r22
    1430:	b9 01       	movw	r22, r18
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
    143a:	0f 5f       	subi	r16, 0xFF	; 255
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	02 30       	cpi	r16, 0x02	; 2
    1440:	11 05       	cpc	r17, r1
    1442:	81 f6       	brne	.-96     	; 0x13e4 <updateScreen+0x6a>
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
}
    144c:	2a 96       	adiw	r28, 0x0a	; 10
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	de bf       	out	0x3e, r29	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	cd bf       	out	0x3d, r28	; 61
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	1f 91       	pop	r17
    145e:	0f 91       	pop	r16
    1460:	ff 90       	pop	r15
    1462:	ef 90       	pop	r14
    1464:	df 90       	pop	r13
    1466:	cf 90       	pop	r12
    1468:	08 95       	ret

0000146a <playRound>:
	*slide = get_slider_position();
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
} 

int playRound(){
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	2e 97       	sbiw	r28, 0x0e	; 14
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
	Ball ball;
	Slider slide;
	ballInit(&ball);
    148e:	ce 01       	movw	r24, r28
    1490:	01 96       	adiw	r24, 0x01	; 1
    1492:	0e 94 0c 09 	call	0x1218	; 0x1218 <ballInit>
				return LEFT;
			}
		}
		else if (ball.posX == 1){
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
    1496:	aa 24       	eor	r10, r10
    1498:	a3 94       	inc	r10
    149a:	b1 2c       	mov	r11, r1
	Ball ball;
	Slider slide;
	ballInit(&ball);
	int time = 25;
	while(1){
		updateSliderPosition(&slide);
    149c:	ce 01       	movw	r24, r28
    149e:	0b 96       	adiw	r24, 0x0b	; 11
    14a0:	0e 94 a0 09 	call	0x1340	; 0x1340 <updateSliderPosition>
		if (ball.posX >= 126){
    14a4:	09 81       	ldd	r16, Y+1	; 0x01
    14a6:	1a 81       	ldd	r17, Y+2	; 0x02
    14a8:	0e 37       	cpi	r16, 0x7E	; 126
    14aa:	11 05       	cpc	r17, r1
    14ac:	94 f0       	brlt	.+36     	; 0x14d2 <playRound+0x68>
			if (racketHit(&ball, slide.right) ){
    14ae:	ec 84       	ldd	r14, Y+12	; 0x0c
    14b0:	f1 2c       	mov	r15, r1
    14b2:	b7 01       	movw	r22, r14
    14b4:	ce 01       	movw	r24, r28
    14b6:	01 96       	adiw	r24, 0x01	; 1
    14b8:	0e 94 79 08 	call	0x10f2	; 0x10f2 <racketHit>
    14bc:	8c 01       	movw	r16, r24
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	a9 f1       	breq	.+106    	; 0x152c <playRound+0xc2>
				ball.dir = LEFT;
    14c2:	1a 86       	std	Y+10, r1	; 0x0a
    14c4:	19 86       	std	Y+9, r1	; 0x09
				updateBallAngle(&ball, slide.right);
    14c6:	b7 01       	movw	r22, r14
    14c8:	ce 01       	movw	r24, r28
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	0e 94 b3 08 	call	0x1166	; 0x1166 <updateBallAngle>
    14d0:	13 c0       	rjmp	.+38     	; 0x14f8 <playRound+0x8e>
			}
			else{
				return LEFT;
			}
		}
		else if (ball.posX == 1){
    14d2:	01 30       	cpi	r16, 0x01	; 1
    14d4:	11 05       	cpc	r17, r1
    14d6:	81 f4       	brne	.+32     	; 0x14f8 <playRound+0x8e>
			if (racketHit(&ball, slide.left) ){
    14d8:	eb 84       	ldd	r14, Y+11	; 0x0b
    14da:	f1 2c       	mov	r15, r1
    14dc:	b7 01       	movw	r22, r14
    14de:	ce 01       	movw	r24, r28
    14e0:	01 96       	adiw	r24, 0x01	; 1
    14e2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <racketHit>
    14e6:	89 2b       	or	r24, r25
    14e8:	09 f1       	breq	.+66     	; 0x152c <playRound+0xc2>
				ball.dir = RIGHT;
    14ea:	ba 86       	std	Y+10, r11	; 0x0a
    14ec:	a9 86       	std	Y+9, r10	; 0x09
				updateBallAngle(&ball, slide.left);
    14ee:	b7 01       	movw	r22, r14
    14f0:	ce 01       	movw	r24, r28
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	0e 94 b3 08 	call	0x1166	; 0x1166 <updateBallAngle>
			}
			else {
				return RIGHT;
			}
		}
		updateBallPosition(&ball);
    14f8:	ce 01       	movw	r24, r28
    14fa:	01 96       	adiw	r24, 0x01	; 1
    14fc:	0e 94 2b 09 	call	0x1256	; 0x1256 <updateBallPosition>
		updateScreen(ball, slide.left, slide.right);
    1500:	cc 84       	ldd	r12, Y+12	; 0x0c
    1502:	d1 2c       	mov	r13, r1
    1504:	eb 84       	ldd	r14, Y+11	; 0x0b
    1506:	f1 2c       	mov	r15, r1
    1508:	09 81       	ldd	r16, Y+1	; 0x01
    150a:	1a 81       	ldd	r17, Y+2	; 0x02
    150c:	2b 81       	ldd	r18, Y+3	; 0x03
    150e:	3c 81       	ldd	r19, Y+4	; 0x04
    1510:	4d 81       	ldd	r20, Y+5	; 0x05
    1512:	5e 81       	ldd	r21, Y+6	; 0x06
    1514:	6f 81       	ldd	r22, Y+7	; 0x07
    1516:	78 85       	ldd	r23, Y+8	; 0x08
    1518:	89 85       	ldd	r24, Y+9	; 0x09
    151a:	9a 85       	ldd	r25, Y+10	; 0x0a
    151c:	0e 94 bd 09 	call	0x137a	; 0x137a <updateScreen>
    1520:	89 e9       	ldi	r24, 0x99	; 153
    1522:	99 e0       	ldi	r25, 0x09	; 9
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <playRound+0xba>
    1528:	00 c0       	rjmp	.+0      	; 0x152a <playRound+0xc0>
    152a:	b8 cf       	rjmp	.-144    	; 0x149c <playRound+0x32>
		_delay_ms(2);
	}
}
    152c:	c8 01       	movw	r24, r16
    152e:	2e 96       	adiw	r28, 0x0e	; 14
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	1f 91       	pop	r17
    1540:	0f 91       	pop	r16
    1542:	ff 90       	pop	r15
    1544:	ef 90       	pop	r14
    1546:	df 90       	pop	r13
    1548:	cf 90       	pop	r12
    154a:	bf 90       	pop	r11
    154c:	af 90       	pop	r10
    154e:	08 95       	ret

00001550 <printScore>:
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
}
void printScore(int leftPoints, int rightPoints){
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	00 d0       	rcall	.+0      	; 0x155a <printScore+0xa>
    155a:	1f 92       	push	r1
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	08 2f       	mov	r16, r24
    1562:	16 2f       	mov	r17, r22
	oled_sram_clear_screen(0);
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	char lp = leftPoints + '0';
    156c:	00 5d       	subi	r16, 0xD0	; 208
    156e:	09 83       	std	Y+1, r16	; 0x01
	char mid = '-';
    1570:	8d e2       	ldi	r24, 0x2D	; 45
    1572:	8a 83       	std	Y+2, r24	; 0x02
	char rp = rightPoints + '0';
    1574:	10 5d       	subi	r17, 0xD0	; 208
    1576:	1b 83       	std	Y+3, r17	; 0x03
	oled_sram_write_char(0, &lp, 2, 56);
    1578:	28 e3       	ldi	r18, 0x38	; 56
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	42 e0       	ldi	r20, 0x02	; 2
    157e:	50 e0       	ldi	r21, 0x00	; 0
    1580:	be 01       	movw	r22, r28
    1582:	6f 5f       	subi	r22, 0xFF	; 255
    1584:	7f 4f       	sbci	r23, 0xFF	; 255
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
	oled_sram_write_char(0, &mid, 2, 64);
    158e:	20 e4       	ldi	r18, 0x40	; 64
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	42 e0       	ldi	r20, 0x02	; 2
    1594:	50 e0       	ldi	r21, 0x00	; 0
    1596:	be 01       	movw	r22, r28
    1598:	6e 5f       	subi	r22, 0xFE	; 254
    159a:	7f 4f       	sbci	r23, 0xFF	; 255
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
	oled_sram_write_char(0, &rp, 2, 72);
    15a4:	28 e4       	ldi	r18, 0x48	; 72
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	42 e0       	ldi	r20, 0x02	; 2
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	be 01       	movw	r22, r28
    15ae:	6d 5f       	subi	r22, 0xFD	; 253
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
	oled_sram_flush(0);	
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
}
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	08 95       	ret

000015d2 <printEndScreen>:
void printEndScreen(char *endMessage){
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
    15d8:	df 93       	push	r29
    15da:	8c 01       	movw	r16, r24
	oled_sram_clear_screen(0);
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	for(int i = 0; i < 10; i++){
    15e4:	c0 e0       	ldi	r28, 0x00	; 0
    15e6:	d0 e0       	ldi	r29, 0x00	; 0
		if( i % 2 ){
    15e8:	c0 ff       	sbrs	r28, 0
    15ea:	11 c0       	rjmp	.+34     	; 0x160e <printEndScreen+0x3c>
			oled_sram_write_string(0, endMessage, 2);
    15ec:	42 e0       	ldi	r20, 0x02	; 2
    15ee:	50 e0       	ldi	r21, 0x00	; 0
    15f0:	b8 01       	movw	r22, r16
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 2f 07 	call	0xe5e	; 0xe5e <oled_sram_write_string>
    15fa:	8f ef       	ldi	r24, 0xFF	; 255
    15fc:	9f e7       	ldi	r25, 0x7F	; 127
    15fe:	24 e0       	ldi	r18, 0x04	; 4
    1600:	81 50       	subi	r24, 0x01	; 1
    1602:	90 40       	sbci	r25, 0x00	; 0
    1604:	20 40       	sbci	r18, 0x00	; 0
    1606:	e1 f7       	brne	.-8      	; 0x1600 <printEndScreen+0x2e>
    1608:	00 c0       	rjmp	.+0      	; 0x160a <printEndScreen+0x38>
    160a:	00 00       	nop
    160c:	09 c0       	rjmp	.+18     	; 0x1620 <printEndScreen+0x4e>
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	9f e7       	ldi	r25, 0x7F	; 127
    1612:	24 e0       	ldi	r18, 0x04	; 4
    1614:	81 50       	subi	r24, 0x01	; 1
    1616:	90 40       	sbci	r25, 0x00	; 0
    1618:	20 40       	sbci	r18, 0x00	; 0
    161a:	e1 f7       	brne	.-8      	; 0x1614 <printEndScreen+0x42>
    161c:	00 c0       	rjmp	.+0      	; 0x161e <printEndScreen+0x4c>
    161e:	00 00       	nop
	oled_sram_write_char(0, &rp, 2, 72);
	oled_sram_flush(0);	
}
void printEndScreen(char *endMessage){
	oled_sram_clear_screen(0);
	for(int i = 0; i < 10; i++){
    1620:	21 96       	adiw	r28, 0x01	; 1
    1622:	ca 30       	cpi	r28, 0x0A	; 10
    1624:	d1 05       	cpc	r29, r1
    1626:	01 f7       	brne	.-64     	; 0x15e8 <printEndScreen+0x16>
			oled_sram_write_string(0, endMessage, 2);
			_delay_ms(300);
		}
		else _delay_ms(300);
	}
	oled_sram_flush(0);	
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	08 95       	ret

0000163a <playPong>:

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	}
}

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
    1642:	00 e0       	ldi	r16, 0x00	; 0
    1644:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(2);
	}
}

void playPong(){
	int pointLeft = 0;
    1646:	c0 e0       	ldi	r28, 0x00	; 0
    1648:	d0 e0       	ldi	r29, 0x00	; 0
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
	while(1){
		printScore(pointLeft, pointRight);
    164a:	b8 01       	movw	r22, r16
    164c:	ce 01       	movw	r24, r28
    164e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <printScore>
    1652:	2f ef       	ldi	r18, 0xFF	; 255
    1654:	8f ef       	ldi	r24, 0xFF	; 255
    1656:	9d e1       	ldi	r25, 0x1D	; 29
    1658:	21 50       	subi	r18, 0x01	; 1
    165a:	80 40       	sbci	r24, 0x00	; 0
    165c:	90 40       	sbci	r25, 0x00	; 0
    165e:	e1 f7       	brne	.-8      	; 0x1658 <playPong+0x1e>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <playPong+0x28>
    1662:	00 00       	nop
		_delay_ms(2000);
		point = playRound();
    1664:	0e 94 35 0a 	call	0x146a	; 0x146a <playRound>
		if (point == LEFT) pointLeft++;
    1668:	89 2b       	or	r24, r25
    166a:	11 f4       	brne	.+4      	; 0x1670 <playPong+0x36>
    166c:	21 96       	adiw	r28, 0x01	; 1
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <playPong+0x3a>
		else pointRight++;
    1670:	0f 5f       	subi	r16, 0xFF	; 255
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
		if(pointLeft == 5){
    1674:	c5 30       	cpi	r28, 0x05	; 5
    1676:	d1 05       	cpc	r29, r1
    1678:	29 f4       	brne	.+10     	; 0x1684 <playPong+0x4a>
			printEndScreen("Player Right won!");
    167a:	83 eb       	ldi	r24, 0xB3	; 179
    167c:	91 e0       	ldi	r25, 0x01	; 1
    167e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <printEndScreen>
    1682:	e3 cf       	rjmp	.-58     	; 0x164a <playPong+0x10>
		}
		else if(pointRight == 5){
    1684:	05 30       	cpi	r16, 0x05	; 5
    1686:	11 05       	cpc	r17, r1
    1688:	01 f7       	brne	.-64     	; 0x164a <playPong+0x10>
			printEndScreen("Player Left won!");
    168a:	85 ec       	ldi	r24, 0xC5	; 197
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <printEndScreen>
    1692:	db cf       	rjmp	.-74     	; 0x164a <playPong+0x10>

00001694 <detectCollision>:
#include <util/delay.h>
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
    1694:	fc 01       	movw	r30, r24
	while(s){
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	81 f0       	breq	.+32     	; 0x16ba <detectCollision+0x26>
		if (s->x == x && s->y == y){
    169a:	84 81       	ldd	r24, Z+4	; 0x04
    169c:	95 81       	ldd	r25, Z+5	; 0x05
    169e:	86 17       	cp	r24, r22
    16a0:	97 07       	cpc	r25, r23
    16a2:	29 f4       	brne	.+10     	; 0x16ae <detectCollision+0x1a>
    16a4:	86 81       	ldd	r24, Z+6	; 0x06
    16a6:	97 81       	ldd	r25, Z+7	; 0x07
    16a8:	84 17       	cp	r24, r20
    16aa:	95 07       	cpc	r25, r21
    16ac:	49 f0       	breq	.+18     	; 0x16c0 <detectCollision+0x2c>
			return 1;
		}
		s = s->next;
    16ae:	01 90       	ld	r0, Z+
    16b0:	f0 81       	ld	r31, Z
    16b2:	e0 2d       	mov	r30, r0
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
	while(s){
    16b4:	30 97       	sbiw	r30, 0x00	; 0
    16b6:	89 f7       	brne	.-30     	; 0x169a <detectCollision+0x6>
    16b8:	06 c0       	rjmp	.+12     	; 0x16c6 <detectCollision+0x32>
		if (s->x == x && s->y == y){
			return 1;
		}
		s = s->next;
	}
	return 0;
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	08 95       	ret


int detectCollision(segment *s, int x, int y){
	while(s){
		if (s->x == x && s->y == y){
			return 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	08 95       	ret
		}
		s = s->next;
	}
	return 0;
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
}
    16ca:	08 95       	ret

000016cc <placeFood>:

void placeFood(int food[], segment *first){
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
    16d6:	8b 01       	movw	r16, r22
	do{
		food[0] = rand() % 64;
    16d8:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    16dc:	8f 73       	andi	r24, 0x3F	; 63
    16de:	90 78       	andi	r25, 0x80	; 128
    16e0:	99 23       	and	r25, r25
    16e2:	24 f4       	brge	.+8      	; 0x16ec <placeFood+0x20>
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	80 6c       	ori	r24, 0xC0	; 192
    16e8:	9f 6f       	ori	r25, 0xFF	; 255
    16ea:	01 96       	adiw	r24, 0x01	; 1
    16ec:	99 83       	std	Y+1, r25	; 0x01
    16ee:	88 83       	st	Y, r24
		food[1] = rand() % 32;
    16f0:	0e 94 ed 12 	call	0x25da	; 0x25da <rand>
    16f4:	ac 01       	movw	r20, r24
    16f6:	4f 71       	andi	r20, 0x1F	; 31
    16f8:	50 78       	andi	r21, 0x80	; 128
    16fa:	55 23       	and	r21, r21
    16fc:	34 f4       	brge	.+12     	; 0x170a <placeFood+0x3e>
    16fe:	41 50       	subi	r20, 0x01	; 1
    1700:	51 09       	sbc	r21, r1
    1702:	40 6e       	ori	r20, 0xE0	; 224
    1704:	5f 6f       	ori	r21, 0xFF	; 255
    1706:	4f 5f       	subi	r20, 0xFF	; 255
    1708:	5f 4f       	sbci	r21, 0xFF	; 255
    170a:	5b 83       	std	Y+3, r21	; 0x03
    170c:	4a 83       	std	Y+2, r20	; 0x02
	} while(detectCollision(first, food[0], food[1]));
    170e:	68 81       	ld	r22, Y
    1710:	79 81       	ldd	r23, Y+1	; 0x01
    1712:	c8 01       	movw	r24, r16
    1714:	0e 94 4a 0b 	call	0x1694	; 0x1694 <detectCollision>
    1718:	89 2b       	or	r24, r25
    171a:	f1 f6       	brne	.-68     	; 0x16d8 <placeFood+0xc>
}
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	08 95       	ret

00001726 <drawBoard>:

void drawBoard(segment *s, int food[]){
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	8c 01       	movw	r16, r24
    1738:	7b 01       	movw	r14, r22
	oled_sram_clear_screen(0);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	while(s){
    1742:	01 15       	cp	r16, r1
    1744:	11 05       	cpc	r17, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <drawBoard+0x24>
    1748:	59 c0       	rjmp	.+178    	; 0x17fc <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    174a:	c1 2c       	mov	r12, r1
    174c:	d1 2c       	mov	r13, r1
    174e:	2a c0       	rjmp	.+84     	; 0x17a4 <drawBoard+0x7e>
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
    1750:	f8 01       	movw	r30, r16
    1752:	46 81       	ldd	r20, Z+6	; 0x06
    1754:	57 81       	ldd	r21, Z+7	; 0x07
    1756:	44 0f       	add	r20, r20
    1758:	55 1f       	adc	r21, r21
    175a:	64 81       	ldd	r22, Z+4	; 0x04
    175c:	75 81       	ldd	r23, Z+5	; 0x05
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	6c 0f       	add	r22, r28
    1764:	7d 1f       	adc	r23, r29
    1766:	8c 2d       	mov	r24, r12
    1768:	9d 2d       	mov	r25, r13
    176a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
    176e:	f8 01       	movw	r30, r16
    1770:	46 81       	ldd	r20, Z+6	; 0x06
    1772:	57 81       	ldd	r21, Z+7	; 0x07
    1774:	44 0f       	add	r20, r20
    1776:	55 1f       	adc	r21, r21
    1778:	4f 5f       	subi	r20, 0xFF	; 255
    177a:	5f 4f       	sbci	r21, 0xFF	; 255
    177c:	64 81       	ldd	r22, Z+4	; 0x04
    177e:	75 81       	ldd	r23, Z+5	; 0x05
    1780:	66 0f       	add	r22, r22
    1782:	77 1f       	adc	r23, r23
    1784:	6c 0f       	add	r22, r28
    1786:	7d 1f       	adc	r23, r29
    1788:	8c 2d       	mov	r24, r12
    178a:	9d 2d       	mov	r25, r13
    178c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
    1790:	21 96       	adiw	r28, 0x01	; 1
    1792:	c2 30       	cpi	r28, 0x02	; 2
    1794:	d1 05       	cpc	r29, r1
    1796:	e1 f6       	brne	.-72     	; 0x1750 <drawBoard+0x2a>
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
    1798:	f8 01       	movw	r30, r16
    179a:	00 81       	ld	r16, Z
    179c:	11 81       	ldd	r17, Z+1	; 0x01
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
    179e:	01 15       	cp	r16, r1
    17a0:	11 05       	cpc	r17, r1
    17a2:	61 f1       	breq	.+88     	; 0x17fc <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    17a4:	cc 2d       	mov	r28, r12
    17a6:	dd 2d       	mov	r29, r13
    17a8:	d3 cf       	rjmp	.-90     	; 0x1750 <drawBoard+0x2a>
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
    17aa:	f7 01       	movw	r30, r14
    17ac:	42 81       	ldd	r20, Z+2	; 0x02
    17ae:	53 81       	ldd	r21, Z+3	; 0x03
    17b0:	44 0f       	add	r20, r20
    17b2:	55 1f       	adc	r21, r21
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	66 0f       	add	r22, r22
    17ba:	77 1f       	adc	r23, r23
    17bc:	6c 0f       	add	r22, r28
    17be:	7d 1f       	adc	r23, r29
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
    17c8:	f7 01       	movw	r30, r14
    17ca:	42 81       	ldd	r20, Z+2	; 0x02
    17cc:	53 81       	ldd	r21, Z+3	; 0x03
    17ce:	44 0f       	add	r20, r20
    17d0:	55 1f       	adc	r21, r21
    17d2:	4f 5f       	subi	r20, 0xFF	; 255
    17d4:	5f 4f       	sbci	r21, 0xFF	; 255
    17d6:	60 81       	ld	r22, Z
    17d8:	71 81       	ldd	r23, Z+1	; 0x01
    17da:	66 0f       	add	r22, r22
    17dc:	77 1f       	adc	r23, r23
    17de:	6c 0f       	add	r22, r28
    17e0:	7d 1f       	adc	r23, r29
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <oled_sram_write_bit>
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
    17ea:	21 96       	adiw	r28, 0x01	; 1
    17ec:	c2 30       	cpi	r28, 0x02	; 2
    17ee:	d1 05       	cpc	r29, r1
    17f0:	e1 f6       	brne	.-72     	; 0x17aa <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <drawBoard+0xdc>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    17fc:	c0 e0       	ldi	r28, 0x00	; 0
    17fe:	d0 e0       	ldi	r29, 0x00	; 0
    1800:	d4 cf       	rjmp	.-88     	; 0x17aa <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
}
    1802:	df 91       	pop	r29
    1804:	cf 91       	pop	r28
    1806:	1f 91       	pop	r17
    1808:	0f 91       	pop	r16
    180a:	ff 90       	pop	r15
    180c:	ef 90       	pop	r14
    180e:	df 90       	pop	r13
    1810:	cf 90       	pop	r12
    1812:	08 95       	ret

00001814 <playSnake>:

void playSnake(){
    1814:	af 92       	push	r10
    1816:	bf 92       	push	r11
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	00 d0       	rcall	.+0      	; 0x182a <playSnake+0x16>
    182a:	00 d0       	rcall	.+0      	; 0x182c <playSnake+0x18>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    1830:	88 e0       	ldi	r24, 0x08	; 8
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 78 11 	call	0x22f0	; 0x22f0 <malloc>
    1838:	6c 01       	movw	r12, r24
	first->x = 32;
    183a:	80 e2       	ldi	r24, 0x20	; 32
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	f6 01       	movw	r30, r12
    1840:	95 83       	std	Z+5, r25	; 0x05
    1842:	84 83       	std	Z+4, r24	; 0x04
	first->y = 16;
    1844:	80 e1       	ldi	r24, 0x10	; 16
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	97 83       	std	Z+7, r25	; 0x07
    184a:	86 83       	std	Z+6, r24	; 0x06
	segment *last = first;
	first->next = 0;
    184c:	11 82       	std	Z+1, r1	; 0x01
    184e:	10 82       	st	Z, r1
	first->prev = 0;
    1850:	13 82       	std	Z+3, r1	; 0x03
    1852:	12 82       	std	Z+2, r1	; 0x02
	oled_sram_flush(0);
}

void playSnake(){
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    1854:	86 01       	movw	r16, r12
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
    1856:	68 94       	set
    1858:	aa 24       	eor	r10, r10
    185a:	a2 f8       	bld	r10, 2
    185c:	b1 2c       	mov	r11, r1
	for(int i = 0; i < 4; i++){
		segment *temp = (segment*)malloc(sizeof(segment));
    185e:	88 e0       	ldi	r24, 0x08	; 8
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	0e 94 78 11 	call	0x22f0	; 0x22f0 <malloc>
    1866:	7c 01       	movw	r14, r24
		temp->x = first->x + 1;
    1868:	f8 01       	movw	r30, r16
    186a:	84 81       	ldd	r24, Z+4	; 0x04
    186c:	95 81       	ldd	r25, Z+5	; 0x05
    186e:	01 96       	adiw	r24, 0x01	; 1
    1870:	f7 01       	movw	r30, r14
    1872:	95 83       	std	Z+5, r25	; 0x05
    1874:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    1876:	f8 01       	movw	r30, r16
    1878:	86 81       	ldd	r24, Z+6	; 0x06
    187a:	97 81       	ldd	r25, Z+7	; 0x07
    187c:	f7 01       	movw	r30, r14
    187e:	97 83       	std	Z+7, r25	; 0x07
    1880:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    1882:	11 83       	std	Z+1, r17	; 0x01
    1884:	00 83       	st	Z, r16
		temp->prev = 0;
    1886:	13 82       	std	Z+3, r1	; 0x03
    1888:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    188a:	f8 01       	movw	r30, r16
    188c:	f3 82       	std	Z+3, r15	; 0x03
    188e:	e2 82       	std	Z+2, r14	; 0x02
    1890:	f1 e0       	ldi	r31, 0x01	; 1
    1892:	af 1a       	sub	r10, r31
    1894:	b1 08       	sbc	r11, r1
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
	for(int i = 0; i < 4; i++){
    1896:	a1 14       	cp	r10, r1
    1898:	b1 04       	cpc	r11, r1
    189a:	11 f0       	breq	.+4      	; 0x18a0 <playSnake+0x8c>
		segment *temp = (segment*)malloc(sizeof(segment));
    189c:	87 01       	movw	r16, r14
    189e:	df cf       	rjmp	.-66     	; 0x185e <playSnake+0x4a>
	}


	//initalize food
	int food[2];
	placeFood(food, first);
    18a0:	b7 01       	movw	r22, r14
    18a2:	ce 01       	movw	r24, r28
    18a4:	01 96       	adiw	r24, 0x01	; 1
    18a6:	0e 94 66 0b 	call	0x16cc	; 0x16cc <placeFood>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	//initalize food
	int food[2];
	placeFood(food, first);

	//initialize direction of snake
	direction S = RIGHT;
    18b2:	aa 24       	eor	r10, r10
    18b4:	a3 94       	inc	r10
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    18b6:	70 c0       	rjmp	.+224    	; 0x1998 <playSnake+0x184>
		Joystick j = get_joystick_position();
    18b8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <get_joystick_position>
    18bc:	b8 2e       	mov	r11, r24
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    18be:	24 e0       	ldi	r18, 0x04	; 4
    18c0:	82 13       	cpse	r24, r18
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <playSnake+0xb2>
    18c4:	ba 2c       	mov	r11, r10
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    18c6:	88 e0       	ldi	r24, 0x08	; 8
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0e 94 78 11 	call	0x22f0	; 0x22f0 <malloc>
    18ce:	8c 01       	movw	r16, r24
		
		temp->x = first->x;
    18d0:	f7 01       	movw	r30, r14
    18d2:	24 81       	ldd	r18, Z+4	; 0x04
    18d4:	35 81       	ldd	r19, Z+5	; 0x05
    18d6:	fc 01       	movw	r30, r24
    18d8:	35 83       	std	Z+5, r19	; 0x05
    18da:	24 83       	std	Z+4, r18	; 0x04
		temp->y = first->y;
    18dc:	f7 01       	movw	r30, r14
    18de:	26 81       	ldd	r18, Z+6	; 0x06
    18e0:	37 81       	ldd	r19, Z+7	; 0x07
    18e2:	fc 01       	movw	r30, r24
    18e4:	37 83       	std	Z+7, r19	; 0x07
    18e6:	26 83       	std	Z+6, r18	; 0x06
		temp->next = first;
    18e8:	f1 82       	std	Z+1, r15	; 0x01
    18ea:	e0 82       	st	Z, r14
		temp->prev = 0;
    18ec:	13 82       	std	Z+3, r1	; 0x03
    18ee:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    18f0:	f7 01       	movw	r30, r14
    18f2:	93 83       	std	Z+3, r25	; 0x03
    18f4:	82 83       	std	Z+2, r24	; 0x02

		//Find direction of snake movement
		switch (S){
    18f6:	f1 e0       	ldi	r31, 0x01	; 1
    18f8:	bf 16       	cp	r11, r31
    18fa:	f1 f0       	breq	.+60     	; 0x1938 <playSnake+0x124>
    18fc:	bf 16       	cp	r11, r31
    18fe:	a8 f0       	brcs	.+42     	; 0x192a <playSnake+0x116>
    1900:	22 e0       	ldi	r18, 0x02	; 2
    1902:	b2 16       	cp	r11, r18
    1904:	21 f0       	breq	.+8      	; 0x190e <playSnake+0xfa>
    1906:	83 e0       	ldi	r24, 0x03	; 3
    1908:	b8 16       	cp	r11, r24
    190a:	41 f0       	breq	.+16     	; 0x191c <playSnake+0x108>
    190c:	1b c0       	rjmp	.+54     	; 0x1944 <playSnake+0x130>
			case UP:
			temp->y--;
    190e:	fc 01       	movw	r30, r24
    1910:	86 81       	ldd	r24, Z+6	; 0x06
    1912:	97 81       	ldd	r25, Z+7	; 0x07
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	97 83       	std	Z+7, r25	; 0x07
    1918:	86 83       	std	Z+6, r24	; 0x06
			break;
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <playSnake+0x130>
			case DOWN:
			temp->y++;
    191c:	f8 01       	movw	r30, r16
    191e:	86 81       	ldd	r24, Z+6	; 0x06
    1920:	97 81       	ldd	r25, Z+7	; 0x07
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	97 83       	std	Z+7, r25	; 0x07
    1926:	86 83       	std	Z+6, r24	; 0x06
			break;
    1928:	0d c0       	rjmp	.+26     	; 0x1944 <playSnake+0x130>
			case LEFT:
			temp->x--;
    192a:	fc 01       	movw	r30, r24
    192c:	84 81       	ldd	r24, Z+4	; 0x04
    192e:	95 81       	ldd	r25, Z+5	; 0x05
    1930:	01 97       	sbiw	r24, 0x01	; 1
    1932:	95 83       	std	Z+5, r25	; 0x05
    1934:	84 83       	std	Z+4, r24	; 0x04
			break;
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <playSnake+0x130>
			case RIGHT:
			temp->x++;
    1938:	fc 01       	movw	r30, r24
    193a:	84 81       	ldd	r24, Z+4	; 0x04
    193c:	95 81       	ldd	r25, Z+5	; 0x05
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	95 83       	std	Z+5, r25	; 0x05
    1942:	84 83       	std	Z+4, r24	; 0x04
			break;
		}

		first = temp;
		
		if(detectCollision(first, food[0], food[1])){//hit food?
    1944:	4b 81       	ldd	r20, Y+3	; 0x03
    1946:	5c 81       	ldd	r21, Y+4	; 0x04
    1948:	69 81       	ldd	r22, Y+1	; 0x01
    194a:	7a 81       	ldd	r23, Y+2	; 0x02
    194c:	c8 01       	movw	r24, r16
    194e:	0e 94 4a 0b 	call	0x1694	; 0x1694 <detectCollision>
    1952:	89 2b       	or	r24, r25
    1954:	31 f0       	breq	.+12     	; 0x1962 <playSnake+0x14e>
			placeFood(food, first);
    1956:	b8 01       	movw	r22, r16
    1958:	ce 01       	movw	r24, r28
    195a:	01 96       	adiw	r24, 0x01	; 1
    195c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <placeFood>
    1960:	0a c0       	rjmp	.+20     	; 0x1976 <playSnake+0x162>
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    1962:	f6 01       	movw	r30, r12
    1964:	e2 80       	ldd	r14, Z+2	; 0x02
    1966:	f3 80       	ldd	r15, Z+3	; 0x03
			last->next = 0;
    1968:	f7 01       	movw	r30, r14
    196a:	11 82       	std	Z+1, r1	; 0x01
    196c:	10 82       	st	Z, r1
			free(temp);
    196e:	c6 01       	movw	r24, r12
    1970:	0e 94 10 12 	call	0x2420	; 0x2420 <free>
			placeFood(food, first);
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    1974:	67 01       	movw	r12, r14
			last->next = 0;
			free(temp);
		}
		drawBoard(first, food);
    1976:	be 01       	movw	r22, r28
    1978:	6f 5f       	subi	r22, 0xFF	; 255
    197a:	7f 4f       	sbci	r23, 0xFF	; 255
    197c:	c8 01       	movw	r24, r16
    197e:	0e 94 93 0b 	call	0x1726	; 0x1726 <drawBoard>
    1982:	ff ef       	ldi	r31, 0xFF	; 255
    1984:	2f e7       	ldi	r18, 0x7F	; 127
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	f1 50       	subi	r31, 0x01	; 1
    198a:	20 40       	sbci	r18, 0x00	; 0
    198c:	80 40       	sbci	r24, 0x00	; 0
    198e:	e1 f7       	brne	.-8      	; 0x1988 <playSnake+0x174>
    1990:	00 c0       	rjmp	.+0      	; 0x1992 <playSnake+0x17e>
    1992:	00 c0       	rjmp	.+0      	; 0x1994 <playSnake+0x180>
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
		Joystick j = get_joystick_position();
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    1994:	ab 2c       	mov	r10, r11
			break;
			default:
			break;
		}

		first = temp;
    1996:	78 01       	movw	r14, r16

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    1998:	f7 01       	movw	r30, r14
    199a:	46 81       	ldd	r20, Z+6	; 0x06
    199c:	57 81       	ldd	r21, Z+7	; 0x07
    199e:	64 81       	ldd	r22, Z+4	; 0x04
    19a0:	75 81       	ldd	r23, Z+5	; 0x05
    19a2:	80 81       	ld	r24, Z
    19a4:	91 81       	ldd	r25, Z+1	; 0x01
    19a6:	0e 94 4a 0b 	call	0x1694	; 0x1694 <detectCollision>
    19aa:	89 2b       	or	r24, r25
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <playSnake+0x19c>
    19ae:	84 cf       	rjmp	.-248    	; 0x18b8 <playSnake+0xa4>
		}
		drawBoard(first, food);
		_delay_ms(100);
	}

    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	df 90       	pop	r13
    19c6:	cf 90       	pop	r12
    19c8:	bf 90       	pop	r11
    19ca:	af 90       	pop	r10
    19cc:	08 95       	ret

000019ce <make_screen>:
	
	
	
}

void make_screen(menu* m){
    19ce:	2f 92       	push	r2
    19d0:	3f 92       	push	r3
    19d2:	4f 92       	push	r4
    19d4:	5f 92       	push	r5
    19d6:	6f 92       	push	r6
    19d8:	7f 92       	push	r7
    19da:	8f 92       	push	r8
    19dc:	9f 92       	push	r9
    19de:	af 92       	push	r10
    19e0:	bf 92       	push	r11
    19e2:	cf 92       	push	r12
    19e4:	df 92       	push	r13
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <make_screen+0x26>
    19f4:	1f 92       	push	r1
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 cf 07 	call	0xf9e	; 0xf9e <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
    1a04:	d7 01       	movw	r26, r14
    1a06:	6d 91       	ld	r22, X+
    1a08:	7c 91       	ld	r23, X
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 2f 07 	call	0xe5e	; 0xe5e <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
    1a16:	f7 01       	movw	r30, r14
    1a18:	84 89       	ldd	r24, Z+20	; 0x14
    1a1a:	95 89       	ldd	r25, Z+21	; 0x15
    1a1c:	18 16       	cp	r1, r24
    1a1e:	19 06       	cpc	r1, r25
    1a20:	0c f0       	brlt	.+2      	; 0x1a24 <make_screen+0x56>
    1a22:	6d c0       	rjmp	.+218    	; 0x1afe <make_screen+0x130>
    1a24:	c7 01       	movw	r24, r14
    1a26:	04 96       	adiw	r24, 0x04	; 4
    1a28:	9b 83       	std	Y+3, r25	; 0x03
    1a2a:	8a 83       	std	Y+2, r24	; 0x02
    1a2c:	cc 24       	eor	r12, r12
    1a2e:	c3 94       	inc	r12
    1a30:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1a32:	68 94       	set
    1a34:	22 24       	eor	r2, r2
    1a36:	23 f8       	bld	r2, 3
    1a38:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
    1a3a:	aa 81       	ldd	r26, Y+2	; 0x02
    1a3c:	bb 81       	ldd	r27, Y+3	; 0x03
    1a3e:	6d 90       	ld	r6, X+
    1a40:	7d 90       	ld	r7, X+
    1a42:	bb 83       	std	Y+3, r27	; 0x03
    1a44:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
    1a46:	d3 01       	movw	r26, r6
    1a48:	ed 91       	ld	r30, X+
    1a4a:	fc 91       	ld	r31, X
    1a4c:	80 81       	ld	r24, Z
    1a4e:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
    1a50:	f7 01       	movw	r30, r14
    1a52:	40 ad       	ldd	r20, Z+56	; 0x38
    1a54:	51 ad       	ldd	r21, Z+57	; 0x39
    1a56:	c6 01       	movw	r24, r12
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	48 17       	cp	r20, r24
    1a5c:	59 07       	cpc	r21, r25
    1a5e:	59 f4       	brne	.+22     	; 0x1a76 <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
    1a60:	4f 5f       	subi	r20, 0xFF	; 255
    1a62:	5f 4f       	sbci	r21, 0xFF	; 255
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	66 ed       	ldi	r22, 0xD6	; 214
    1a6a:	71 e0       	ldi	r23, 0x01	; 1
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
    1a74:	09 c0       	rjmp	.+18     	; 0x1a88 <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	a6 01       	movw	r20, r12
    1a7c:	61 e7       	ldi	r22, 0x71	; 113
    1a7e:	71 e0       	ldi	r23, 0x01	; 1
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
		}
		while(c != '\0'){
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	88 23       	and	r24, r24
    1a8c:	59 f1       	breq	.+86     	; 0x1ae4 <make_screen+0x116>
    1a8e:	68 94       	set
    1a90:	aa 24       	eor	r10, r10
    1a92:	a3 f8       	bld	r10, 3
    1a94:	b1 2c       	mov	r11, r1
    1a96:	88 24       	eor	r8, r8
    1a98:	83 94       	inc	r8
    1a9a:	91 2c       	mov	r9, r1
    1a9c:	1e c0       	rjmp	.+60     	; 0x1ada <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1a9e:	24 2d       	mov	r18, r4
    1aa0:	35 2d       	mov	r19, r5
    1aa2:	a6 01       	movw	r20, r12
    1aa4:	be 01       	movw	r22, r28
    1aa6:	6f 5f       	subi	r22, 0xFF	; 255
    1aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
    1ab2:	01 50       	subi	r16, 0x01	; 1
    1ab4:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    1ab6:	01 15       	cp	r16, r1
    1ab8:	11 05       	cpc	r17, r1
    1aba:	89 f7       	brne	.-30     	; 0x1a9e <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
    1abc:	d3 01       	movw	r26, r6
    1abe:	ed 91       	ld	r30, X+
    1ac0:	fc 91       	ld	r31, X
    1ac2:	e8 0d       	add	r30, r8
    1ac4:	f9 1d       	adc	r31, r9
    1ac6:	80 81       	ld	r24, Z
    1ac8:	89 83       	std	Y+1, r24	; 0x01
    1aca:	bf ef       	ldi	r27, 0xFF	; 255
    1acc:	8b 1a       	sub	r8, r27
    1ace:	9b 0a       	sbc	r9, r27
    1ad0:	e8 e0       	ldi	r30, 0x08	; 8
    1ad2:	ae 0e       	add	r10, r30
    1ad4:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
    1ad6:	88 23       	and	r24, r24
    1ad8:	29 f0       	breq	.+10     	; 0x1ae4 <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1ada:	4a 2c       	mov	r4, r10
    1adc:	5b 2c       	mov	r5, r11
    1ade:	02 2d       	mov	r16, r2
    1ae0:	13 2d       	mov	r17, r3
    1ae2:	dd cf       	rjmp	.-70     	; 0x1a9e <make_screen+0xd0>
void make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
    1ae4:	c6 01       	movw	r24, r12
    1ae6:	ff ef       	ldi	r31, 0xFF	; 255
    1ae8:	cf 1a       	sub	r12, r31
    1aea:	df 0a       	sbc	r13, r31
    1aec:	d7 01       	movw	r26, r14
    1aee:	54 96       	adiw	r26, 0x14	; 20
    1af0:	2d 91       	ld	r18, X+
    1af2:	3c 91       	ld	r19, X
    1af4:	55 97       	sbiw	r26, 0x15	; 21
    1af6:	82 17       	cp	r24, r18
    1af8:	93 07       	cpc	r25, r19
    1afa:	0c f4       	brge	.+2      	; 0x1afe <make_screen+0x130>
    1afc:	9e cf       	rjmp	.-196    	; 0x1a3a <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    1afe:	f7 01       	movw	r30, r14
    1b00:	86 a9       	ldd	r24, Z+54	; 0x36
    1b02:	97 a9       	ldd	r25, Z+55	; 0x37
    1b04:	18 16       	cp	r1, r24
    1b06:	19 06       	cpc	r1, r25
    1b08:	0c f0       	brlt	.+2      	; 0x1b0c <make_screen+0x13e>
    1b0a:	6f c0       	rjmp	.+222    	; 0x1bea <make_screen+0x21c>
    1b0c:	37 01       	movw	r6, r14
    1b0e:	f6 e1       	ldi	r31, 0x16	; 22
    1b10:	6f 0e       	add	r6, r31
    1b12:	71 1c       	adc	r7, r1
    1b14:	c1 2c       	mov	r12, r1
    1b16:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    1b18:	68 94       	set
    1b1a:	44 24       	eor	r4, r4
    1b1c:	43 f8       	bld	r4, 3
    1b1e:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
    1b20:	d3 01       	movw	r26, r6
    1b22:	8d 90       	ld	r8, X+
    1b24:	9d 90       	ld	r9, X+
    1b26:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
    1b28:	f4 01       	movw	r30, r8
    1b2a:	80 81       	ld	r24, Z
    1b2c:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
    1b2e:	d7 01       	movw	r26, r14
    1b30:	d8 96       	adiw	r26, 0x38	; 56
    1b32:	8d 91       	ld	r24, X+
    1b34:	9c 91       	ld	r25, X
    1b36:	d9 97       	sbiw	r26, 0x39	; 57
    1b38:	54 96       	adiw	r26, 0x14	; 20
    1b3a:	4d 91       	ld	r20, X+
    1b3c:	5c 91       	ld	r21, X
    1b3e:	55 97       	sbiw	r26, 0x15	; 21
    1b40:	4c 0d       	add	r20, r12
    1b42:	5d 1d       	adc	r21, r13
    1b44:	84 17       	cp	r24, r20
    1b46:	95 07       	cpc	r25, r21
    1b48:	61 f4       	brne	.+24     	; 0x1b62 <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
    1b4a:	ac 01       	movw	r20, r24
    1b4c:	4f 5f       	subi	r20, 0xFF	; 255
    1b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	66 ed       	ldi	r22, 0xD6	; 214
    1b56:	71 e0       	ldi	r23, 0x01	; 1
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
    1b60:	0a c0       	rjmp	.+20     	; 0x1b76 <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
    1b62:	4f 5f       	subi	r20, 0xFF	; 255
    1b64:	5f 4f       	sbci	r21, 0xFF	; 255
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	61 e7       	ldi	r22, 0x71	; 113
    1b6c:	71 e0       	ldi	r23, 0x01	; 1
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
		}
		while(c != '\0'){
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
    1b78:	88 23       	and	r24, r24
    1b7a:	59 f1       	breq	.+86     	; 0x1bd2 <make_screen+0x204>
    1b7c:	bf ef       	ldi	r27, 0xFF	; 255
    1b7e:	8b 1a       	sub	r8, r27
    1b80:	9b 0a       	sbc	r9, r27
    1b82:	68 94       	set
    1b84:	aa 24       	eor	r10, r10
    1b86:	a3 f8       	bld	r10, 3
    1b88:	b1 2c       	mov	r11, r1
    1b8a:	1e c0       	rjmp	.+60     	; 0x1bc8 <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    1b8c:	f7 01       	movw	r30, r14
    1b8e:	44 89       	ldd	r20, Z+20	; 0x14
    1b90:	55 89       	ldd	r21, Z+21	; 0x15
    1b92:	4c 0d       	add	r20, r12
    1b94:	5d 1d       	adc	r21, r13
    1b96:	4f 5f       	subi	r20, 0xFF	; 255
    1b98:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9a:	22 2d       	mov	r18, r2
    1b9c:	33 2d       	mov	r19, r3
    1b9e:	be 01       	movw	r22, r28
    1ba0:	6f 5f       	subi	r22, 0xFF	; 255
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 7d 07 	call	0xefa	; 0xefa <oled_sram_write_char>
    1bac:	01 50       	subi	r16, 0x01	; 1
    1bae:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    1bb0:	01 15       	cp	r16, r1
    1bb2:	11 05       	cpc	r17, r1
    1bb4:	59 f7       	brne	.-42     	; 0x1b8c <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
    1bb6:	d4 01       	movw	r26, r8
    1bb8:	8d 91       	ld	r24, X+
    1bba:	4d 01       	movw	r8, r26
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	b8 e0       	ldi	r27, 0x08	; 8
    1bc0:	ab 0e       	add	r10, r27
    1bc2:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
    1bc4:	88 23       	and	r24, r24
    1bc6:	29 f0       	breq	.+10     	; 0x1bd2 <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    1bc8:	2a 2c       	mov	r2, r10
    1bca:	3b 2c       	mov	r3, r11
    1bcc:	04 2d       	mov	r16, r4
    1bce:	15 2d       	mov	r17, r5
    1bd0:	dd cf       	rjmp	.-70     	; 0x1b8c <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    1bd2:	ef ef       	ldi	r30, 0xFF	; 255
    1bd4:	ce 1a       	sub	r12, r30
    1bd6:	de 0a       	sbc	r13, r30
    1bd8:	d7 01       	movw	r26, r14
    1bda:	d6 96       	adiw	r26, 0x36	; 54
    1bdc:	8d 91       	ld	r24, X+
    1bde:	9c 91       	ld	r25, X
    1be0:	d7 97       	sbiw	r26, 0x37	; 55
    1be2:	c8 16       	cp	r12, r24
    1be4:	d9 06       	cpc	r13, r25
    1be6:	0c f4       	brge	.+2      	; 0x1bea <make_screen+0x21c>
    1be8:	9b cf       	rjmp	.-202    	; 0x1b20 <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 cf 06 	call	0xd9e	; 0xd9e <oled_sram_flush>
} 
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	1f 91       	pop	r17
    1bfe:	0f 91       	pop	r16
    1c00:	ff 90       	pop	r15
    1c02:	ef 90       	pop	r14
    1c04:	df 90       	pop	r13
    1c06:	cf 90       	pop	r12
    1c08:	bf 90       	pop	r11
    1c0a:	af 90       	pop	r10
    1c0c:	9f 90       	pop	r9
    1c0e:	8f 90       	pop	r8
    1c10:	7f 90       	pop	r7
    1c12:	6f 90       	pop	r6
    1c14:	5f 90       	pop	r5
    1c16:	4f 90       	pop	r4
    1c18:	3f 90       	pop	r3
    1c1a:	2f 90       	pop	r2
    1c1c:	08 95       	ret

00001c1e <menuSystem>:
#include "../Game_files/snake.h"
#include "../Game_files/pong.h"
#include "../Game_files/pingpong.h"


void menuSystem(){
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	c8 5e       	subi	r28, 0xE8	; 232
    1c28:	d1 09       	sbc	r29, r1
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 3};
    1c34:	2a e3       	ldi	r18, 0x3A	; 58
    1c36:	8e 01       	movw	r16, r28
    1c38:	0f 5f       	subi	r16, 0xFF	; 255
    1c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3c:	d8 01       	movw	r26, r16
    1c3e:	e2 2f       	mov	r30, r18
    1c40:	1d 92       	st	X+, r1
    1c42:	ea 95       	dec	r30
    1c44:	e9 f7       	brne	.-6      	; 0x1c40 <menuSystem+0x22>
    1c46:	88 ed       	ldi	r24, 0xD8	; 216
    1c48:	91 e0       	ldi	r25, 0x01	; 1
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	83 e0       	ldi	r24, 0x03	; 3
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9e 8b       	std	Y+22, r25	; 0x16
    1c54:	8d 8b       	std	Y+21, r24	; 0x15
		
	menu highscore = {.name = "Highscore", .parent = &mainMenu};
    1c56:	de 01       	movw	r26, r28
    1c58:	db 96       	adiw	r26, 0x3b	; 59
    1c5a:	fd 01       	movw	r30, r26
    1c5c:	82 2f       	mov	r24, r18
    1c5e:	11 92       	st	Z+, r1
    1c60:	8a 95       	dec	r24
    1c62:	e9 f7       	brne	.-6      	; 0x1c5e <menuSystem+0x40>
    1c64:	82 ee       	ldi	r24, 0xE2	; 226
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	9c af       	std	Y+60, r25	; 0x3c
    1c6a:	8b af       	std	Y+59, r24	; 0x3b
    1c6c:	1e af       	std	Y+62, r17	; 0x3e
    1c6e:	0d af       	std	Y+61, r16	; 0x3d
	mainMenu.submenues[1] = &highscore;
    1c70:	b8 87       	std	Y+8, r27	; 0x08
    1c72:	af 83       	std	Y+7, r26	; 0x07
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 4};
    1c74:	fe 01       	movw	r30, r28
    1c76:	eb 58       	subi	r30, 0x8B	; 139
    1c78:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7a:	df 01       	movw	r26, r30
    1c7c:	82 2f       	mov	r24, r18
    1c7e:	1d 92       	st	X+, r1
    1c80:	8a 95       	dec	r24
    1c82:	e9 f7       	brne	.-6      	; 0x1c7e <menuSystem+0x60>
    1c84:	8c ee       	ldi	r24, 0xEC	; 236
    1c86:	91 e0       	ldi	r25, 0x01	; 1
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
    1c8c:	13 83       	std	Z+3, r17	; 0x03
    1c8e:	02 83       	std	Z+2, r16	; 0x02
    1c90:	84 e0       	ldi	r24, 0x04	; 4
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	97 ab       	std	Z+55, r25	; 0x37
    1c96:	86 ab       	std	Z+54, r24	; 0x36
	playGame.functions[0] = &play_draw;
    1c98:	8a e4       	ldi	r24, 0x4A	; 74
    1c9a:	98 e0       	ldi	r25, 0x08	; 8
    1c9c:	97 a3       	std	Z+39, r25	; 0x27
    1c9e:	86 a3       	std	Z+38, r24	; 0x26
	playGame.functions[1] = &playSnake;
    1ca0:	8a e0       	ldi	r24, 0x0A	; 10
    1ca2:	9c e0       	ldi	r25, 0x0C	; 12
    1ca4:	91 a7       	std	Z+41, r25	; 0x29
    1ca6:	80 a7       	std	Z+40, r24	; 0x28
	playGame.functions[2] = &playPong;
    1ca8:	8d e1       	ldi	r24, 0x1D	; 29
    1caa:	9b e0       	ldi	r25, 0x0B	; 11
    1cac:	93 a7       	std	Z+43, r25	; 0x2b
    1cae:	82 a7       	std	Z+42, r24	; 0x2a
	playGame.functions[3] = &play_pingpong;
    1cb0:	83 e0       	ldi	r24, 0x03	; 3
    1cb2:	93 e0       	ldi	r25, 0x03	; 3
    1cb4:	95 a7       	std	Z+45, r25	; 0x2d
    1cb6:	84 a7       	std	Z+44, r24	; 0x2c
	playGame.name_functions[0] = "Draw";
    1cb8:	86 ef       	ldi	r24, 0xF6	; 246
    1cba:	91 e0       	ldi	r25, 0x01	; 1
    1cbc:	97 8b       	std	Z+23, r25	; 0x17
    1cbe:	86 8b       	std	Z+22, r24	; 0x16
	playGame.name_functions[1] = "Snake";
    1cc0:	8b ef       	ldi	r24, 0xFB	; 251
    1cc2:	91 e0       	ldi	r25, 0x01	; 1
    1cc4:	91 8f       	std	Z+25, r25	; 0x19
    1cc6:	80 8f       	std	Z+24, r24	; 0x18
	playGame.name_functions[2] = "Pong";
    1cc8:	86 e0       	ldi	r24, 0x06	; 6
    1cca:	92 e0       	ldi	r25, 0x02	; 2
    1ccc:	93 8f       	std	Z+27, r25	; 0x1b
    1cce:	82 8f       	std	Z+26, r24	; 0x1a
	playGame.name_functions[3] = "Ping Pong";
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	92 e0       	ldi	r25, 0x02	; 2
    1cd4:	95 8f       	std	Z+29, r25	; 0x1d
    1cd6:	84 8f       	std	Z+28, r24	; 0x1c
	mainMenu.submenues[0] = &playGame;
    1cd8:	fe 83       	std	Y+6, r31	; 0x06
    1cda:	ed 83       	std	Y+5, r30	; 0x05
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 1};
    1cdc:	fa 96       	adiw	r30, 0x3a	; 58
    1cde:	df 01       	movw	r26, r30
    1ce0:	1d 92       	st	X+, r1
    1ce2:	2a 95       	dec	r18
    1ce4:	e9 f7       	brne	.-6      	; 0x1ce0 <menuSystem+0xc2>
    1ce6:	8b e0       	ldi	r24, 0x0B	; 11
    1ce8:	92 e0       	ldi	r25, 0x02	; 2
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	13 83       	std	Z+3, r17	; 0x03
    1cf0:	02 83       	std	Z+2, r16	; 0x02
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	97 ab       	std	Z+55, r25	; 0x37
    1cf8:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrate_joystick;
    1cfa:	8c e8       	ldi	r24, 0x8C	; 140
    1cfc:	95 e0       	ldi	r25, 0x05	; 5
    1cfe:	97 a3       	std	Z+39, r25	; 0x27
    1d00:	86 a3       	std	Z+38, r24	; 0x26
	settings.name_functions[0] = "Calibrate Joy";
    1d02:	84 e1       	ldi	r24, 0x14	; 20
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	97 8b       	std	Z+23, r25	; 0x17
    1d08:	86 8b       	std	Z+22, r24	; 0x16
	mainMenu.submenues[2] = &settings;
    1d0a:	fa 87       	std	Y+10, r31	; 0x0a
    1d0c:	e9 87       	std	Y+9, r30	; 0x09
	

	
	direction previousDirection = NEUTRAL;
    1d0e:	68 94       	set
    1d10:	aa 24       	eor	r10, r10
    1d12:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1d14:	f8 01       	movw	r30, r16
    1d16:	c6 a8       	ldd	r12, Z+54	; 0x36
    1d18:	d7 a8       	ldd	r13, Z+55	; 0x37
    1d1a:	e4 88       	ldd	r14, Z+20	; 0x14
    1d1c:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = get_joystick_position();
    1d1e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <get_joystick_position>
    1d22:	b8 2e       	mov	r11, r24
		if (joy.D != previousDirection){
    1d24:	a8 16       	cp	r10, r24
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <menuSystem+0x10c>
    1d28:	51 c0       	rjmp	.+162    	; 0x1dcc <menuSystem+0x1ae>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	6e 0d       	add	r22, r14
    1d2e:	7f 1d       	adc	r23, r15
		joy = get_joystick_position();
		if (joy.D != previousDirection){
			switch(joy.D){
    1d30:	f1 e0       	ldi	r31, 0x01	; 1
    1d32:	8f 17       	cp	r24, r31
    1d34:	69 f1       	breq	.+90     	; 0x1d90 <menuSystem+0x172>
    1d36:	8f 17       	cp	r24, r31
    1d38:	08 f1       	brcs	.+66     	; 0x1d7c <menuSystem+0x15e>
    1d3a:	22 e0       	ldi	r18, 0x02	; 2
    1d3c:	82 17       	cp	r24, r18
    1d3e:	21 f0       	breq	.+8      	; 0x1d48 <menuSystem+0x12a>
    1d40:	83 e0       	ldi	r24, 0x03	; 3
    1d42:	b8 16       	cp	r11, r24
    1d44:	79 f0       	breq	.+30     	; 0x1d64 <menuSystem+0x146>
    1d46:	42 c0       	rjmp	.+132    	; 0x1dcc <menuSystem+0x1ae>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
    1d48:	d8 01       	movw	r26, r16
    1d4a:	d8 96       	adiw	r26, 0x38	; 56
    1d4c:	8d 91       	ld	r24, X+
    1d4e:	9c 91       	ld	r25, X
    1d50:	d9 97       	sbiw	r26, 0x39	; 57
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	86 0f       	add	r24, r22
    1d56:	97 1f       	adc	r25, r23
    1d58:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	91 af       	std	Z+57, r25	; 0x39
    1d60:	80 af       	std	Z+56, r24	; 0x38
					break;
    1d62:	34 c0       	rjmp	.+104    	; 0x1dcc <menuSystem+0x1ae>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
    1d64:	d8 01       	movw	r26, r16
    1d66:	d8 96       	adiw	r26, 0x38	; 56
    1d68:	8d 91       	ld	r24, X+
    1d6a:	9c 91       	ld	r25, X
    1d6c:	d9 97       	sbiw	r26, 0x39	; 57
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	0e 94 0f 11 	call	0x221e	; 0x221e <__divmodhi4>
    1d74:	f8 01       	movw	r30, r16
    1d76:	91 af       	std	Z+57, r25	; 0x39
    1d78:	80 af       	std	Z+56, r24	; 0x38
					break;
    1d7a:	28 c0       	rjmp	.+80     	; 0x1dcc <menuSystem+0x1ae>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
    1d7c:	d8 01       	movw	r26, r16
    1d7e:	12 96       	adiw	r26, 0x02	; 2
    1d80:	2d 91       	ld	r18, X+
    1d82:	3c 91       	ld	r19, X
    1d84:	13 97       	sbiw	r26, 0x03	; 3
    1d86:	21 15       	cp	r18, r1
    1d88:	31 05       	cpc	r19, r1
    1d8a:	01 f1       	breq	.+64     	; 0x1dcc <menuSystem+0x1ae>
    1d8c:	89 01       	movw	r16, r18
    1d8e:	1e c0       	rjmp	.+60     	; 0x1dcc <menuSystem+0x1ae>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
    1d90:	f8 01       	movw	r30, r16
    1d92:	20 ad       	ldd	r18, Z+56	; 0x38
    1d94:	31 ad       	ldd	r19, Z+57	; 0x39
    1d96:	44 89       	ldd	r20, Z+20	; 0x14
    1d98:	55 89       	ldd	r21, Z+21	; 0x15
    1d9a:	24 17       	cp	r18, r20
    1d9c:	35 07       	cpc	r19, r21
    1d9e:	4c f4       	brge	.+18     	; 0x1db2 <menuSystem+0x194>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
    1da0:	2e 5f       	subi	r18, 0xFE	; 254
    1da2:	3f 4f       	sbci	r19, 0xFF	; 255
    1da4:	22 0f       	add	r18, r18
    1da6:	33 1f       	adc	r19, r19
    1da8:	e2 0f       	add	r30, r18
    1daa:	f3 1f       	adc	r31, r19
    1dac:	00 81       	ld	r16, Z
    1dae:	11 81       	ldd	r17, Z+1	; 0x01
    1db0:	0d c0       	rjmp	.+26     	; 0x1dcc <menuSystem+0x1ae>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
    1db2:	24 1b       	sub	r18, r20
    1db4:	35 0b       	sbc	r19, r21
    1db6:	2d 5e       	subi	r18, 0xED	; 237
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	f9 01       	movw	r30, r18
    1dbc:	ee 0f       	add	r30, r30
    1dbe:	ff 1f       	adc	r31, r31
    1dc0:	e0 0f       	add	r30, r16
    1dc2:	f1 1f       	adc	r31, r17
    1dc4:	01 90       	ld	r0, Z+
    1dc6:	f0 81       	ld	r31, Z
    1dc8:	e0 2d       	mov	r30, r0
    1dca:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
    1dcc:	c8 01       	movw	r24, r16
    1dce:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <make_screen>
    1dd2:	ff ef       	ldi	r31, 0xFF	; 255
    1dd4:	2f e7       	ldi	r18, 0x7F	; 127
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	f1 50       	subi	r31, 0x01	; 1
    1dda:	20 40       	sbci	r18, 0x00	; 0
    1ddc:	80 40       	sbci	r24, 0x00	; 0
    1dde:	e1 f7       	brne	.-8      	; 0x1dd8 <menuSystem+0x1ba>
    1de0:	00 c0       	rjmp	.+0      	; 0x1de2 <menuSystem+0x1c4>
    1de2:	00 c0       	rjmp	.+0      	; 0x1de4 <menuSystem+0x1c6>
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
    1de4:	ab 2c       	mov	r10, r11
    1de6:	96 cf       	rjmp	.-212    	; 0x1d14 <menuSystem+0xf6>

00001de8 <__subsf3>:
    1de8:	50 58       	subi	r21, 0x80	; 128

00001dea <__addsf3>:
    1dea:	bb 27       	eor	r27, r27
    1dec:	aa 27       	eor	r26, r26
    1dee:	0e d0       	rcall	.+28     	; 0x1e0c <__addsf3x>
    1df0:	75 c1       	rjmp	.+746    	; 0x20dc <__fp_round>
    1df2:	66 d1       	rcall	.+716    	; 0x20c0 <__fp_pscA>
    1df4:	30 f0       	brcs	.+12     	; 0x1e02 <__addsf3+0x18>
    1df6:	6b d1       	rcall	.+726    	; 0x20ce <__fp_pscB>
    1df8:	20 f0       	brcs	.+8      	; 0x1e02 <__addsf3+0x18>
    1dfa:	31 f4       	brne	.+12     	; 0x1e08 <__addsf3+0x1e>
    1dfc:	9f 3f       	cpi	r25, 0xFF	; 255
    1dfe:	11 f4       	brne	.+4      	; 0x1e04 <__addsf3+0x1a>
    1e00:	1e f4       	brtc	.+6      	; 0x1e08 <__addsf3+0x1e>
    1e02:	5b c1       	rjmp	.+694    	; 0x20ba <__fp_nan>
    1e04:	0e f4       	brtc	.+2      	; 0x1e08 <__addsf3+0x1e>
    1e06:	e0 95       	com	r30
    1e08:	e7 fb       	bst	r30, 7
    1e0a:	51 c1       	rjmp	.+674    	; 0x20ae <__fp_inf>

00001e0c <__addsf3x>:
    1e0c:	e9 2f       	mov	r30, r25
    1e0e:	77 d1       	rcall	.+750    	; 0x20fe <__fp_split3>
    1e10:	80 f3       	brcs	.-32     	; 0x1df2 <__addsf3+0x8>
    1e12:	ba 17       	cp	r27, r26
    1e14:	62 07       	cpc	r22, r18
    1e16:	73 07       	cpc	r23, r19
    1e18:	84 07       	cpc	r24, r20
    1e1a:	95 07       	cpc	r25, r21
    1e1c:	18 f0       	brcs	.+6      	; 0x1e24 <__addsf3x+0x18>
    1e1e:	71 f4       	brne	.+28     	; 0x1e3c <__addsf3x+0x30>
    1e20:	9e f5       	brtc	.+102    	; 0x1e88 <__addsf3x+0x7c>
    1e22:	8f c1       	rjmp	.+798    	; 0x2142 <__fp_zero>
    1e24:	0e f4       	brtc	.+2      	; 0x1e28 <__addsf3x+0x1c>
    1e26:	e0 95       	com	r30
    1e28:	0b 2e       	mov	r0, r27
    1e2a:	ba 2f       	mov	r27, r26
    1e2c:	a0 2d       	mov	r26, r0
    1e2e:	0b 01       	movw	r0, r22
    1e30:	b9 01       	movw	r22, r18
    1e32:	90 01       	movw	r18, r0
    1e34:	0c 01       	movw	r0, r24
    1e36:	ca 01       	movw	r24, r20
    1e38:	a0 01       	movw	r20, r0
    1e3a:	11 24       	eor	r1, r1
    1e3c:	ff 27       	eor	r31, r31
    1e3e:	59 1b       	sub	r21, r25
    1e40:	99 f0       	breq	.+38     	; 0x1e68 <__addsf3x+0x5c>
    1e42:	59 3f       	cpi	r21, 0xF9	; 249
    1e44:	50 f4       	brcc	.+20     	; 0x1e5a <__addsf3x+0x4e>
    1e46:	50 3e       	cpi	r21, 0xE0	; 224
    1e48:	68 f1       	brcs	.+90     	; 0x1ea4 <__addsf3x+0x98>
    1e4a:	1a 16       	cp	r1, r26
    1e4c:	f0 40       	sbci	r31, 0x00	; 0
    1e4e:	a2 2f       	mov	r26, r18
    1e50:	23 2f       	mov	r18, r19
    1e52:	34 2f       	mov	r19, r20
    1e54:	44 27       	eor	r20, r20
    1e56:	58 5f       	subi	r21, 0xF8	; 248
    1e58:	f3 cf       	rjmp	.-26     	; 0x1e40 <__addsf3x+0x34>
    1e5a:	46 95       	lsr	r20
    1e5c:	37 95       	ror	r19
    1e5e:	27 95       	ror	r18
    1e60:	a7 95       	ror	r26
    1e62:	f0 40       	sbci	r31, 0x00	; 0
    1e64:	53 95       	inc	r21
    1e66:	c9 f7       	brne	.-14     	; 0x1e5a <__addsf3x+0x4e>
    1e68:	7e f4       	brtc	.+30     	; 0x1e88 <__addsf3x+0x7c>
    1e6a:	1f 16       	cp	r1, r31
    1e6c:	ba 0b       	sbc	r27, r26
    1e6e:	62 0b       	sbc	r22, r18
    1e70:	73 0b       	sbc	r23, r19
    1e72:	84 0b       	sbc	r24, r20
    1e74:	ba f0       	brmi	.+46     	; 0x1ea4 <__addsf3x+0x98>
    1e76:	91 50       	subi	r25, 0x01	; 1
    1e78:	a1 f0       	breq	.+40     	; 0x1ea2 <__addsf3x+0x96>
    1e7a:	ff 0f       	add	r31, r31
    1e7c:	bb 1f       	adc	r27, r27
    1e7e:	66 1f       	adc	r22, r22
    1e80:	77 1f       	adc	r23, r23
    1e82:	88 1f       	adc	r24, r24
    1e84:	c2 f7       	brpl	.-16     	; 0x1e76 <__addsf3x+0x6a>
    1e86:	0e c0       	rjmp	.+28     	; 0x1ea4 <__addsf3x+0x98>
    1e88:	ba 0f       	add	r27, r26
    1e8a:	62 1f       	adc	r22, r18
    1e8c:	73 1f       	adc	r23, r19
    1e8e:	84 1f       	adc	r24, r20
    1e90:	48 f4       	brcc	.+18     	; 0x1ea4 <__addsf3x+0x98>
    1e92:	87 95       	ror	r24
    1e94:	77 95       	ror	r23
    1e96:	67 95       	ror	r22
    1e98:	b7 95       	ror	r27
    1e9a:	f7 95       	ror	r31
    1e9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <__addsf3x+0x96>
    1ea0:	b3 cf       	rjmp	.-154    	; 0x1e08 <__addsf3+0x1e>
    1ea2:	93 95       	inc	r25
    1ea4:	88 0f       	add	r24, r24
    1ea6:	08 f0       	brcs	.+2      	; 0x1eaa <__addsf3x+0x9e>
    1ea8:	99 27       	eor	r25, r25
    1eaa:	ee 0f       	add	r30, r30
    1eac:	97 95       	ror	r25
    1eae:	87 95       	ror	r24
    1eb0:	08 95       	ret

00001eb2 <__cmpsf2>:
    1eb2:	d9 d0       	rcall	.+434    	; 0x2066 <__fp_cmp>
    1eb4:	08 f4       	brcc	.+2      	; 0x1eb8 <__cmpsf2+0x6>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	08 95       	ret

00001eba <__divsf3>:
    1eba:	0c d0       	rcall	.+24     	; 0x1ed4 <__divsf3x>
    1ebc:	0f c1       	rjmp	.+542    	; 0x20dc <__fp_round>
    1ebe:	07 d1       	rcall	.+526    	; 0x20ce <__fp_pscB>
    1ec0:	40 f0       	brcs	.+16     	; 0x1ed2 <__divsf3+0x18>
    1ec2:	fe d0       	rcall	.+508    	; 0x20c0 <__fp_pscA>
    1ec4:	30 f0       	brcs	.+12     	; 0x1ed2 <__divsf3+0x18>
    1ec6:	21 f4       	brne	.+8      	; 0x1ed0 <__divsf3+0x16>
    1ec8:	5f 3f       	cpi	r21, 0xFF	; 255
    1eca:	19 f0       	breq	.+6      	; 0x1ed2 <__divsf3+0x18>
    1ecc:	f0 c0       	rjmp	.+480    	; 0x20ae <__fp_inf>
    1ece:	51 11       	cpse	r21, r1
    1ed0:	39 c1       	rjmp	.+626    	; 0x2144 <__fp_szero>
    1ed2:	f3 c0       	rjmp	.+486    	; 0x20ba <__fp_nan>

00001ed4 <__divsf3x>:
    1ed4:	14 d1       	rcall	.+552    	; 0x20fe <__fp_split3>
    1ed6:	98 f3       	brcs	.-26     	; 0x1ebe <__divsf3+0x4>

00001ed8 <__divsf3_pse>:
    1ed8:	99 23       	and	r25, r25
    1eda:	c9 f3       	breq	.-14     	; 0x1ece <__divsf3+0x14>
    1edc:	55 23       	and	r21, r21
    1ede:	b1 f3       	breq	.-20     	; 0x1ecc <__divsf3+0x12>
    1ee0:	95 1b       	sub	r25, r21
    1ee2:	55 0b       	sbc	r21, r21
    1ee4:	bb 27       	eor	r27, r27
    1ee6:	aa 27       	eor	r26, r26
    1ee8:	62 17       	cp	r22, r18
    1eea:	73 07       	cpc	r23, r19
    1eec:	84 07       	cpc	r24, r20
    1eee:	38 f0       	brcs	.+14     	; 0x1efe <__divsf3_pse+0x26>
    1ef0:	9f 5f       	subi	r25, 0xFF	; 255
    1ef2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef4:	22 0f       	add	r18, r18
    1ef6:	33 1f       	adc	r19, r19
    1ef8:	44 1f       	adc	r20, r20
    1efa:	aa 1f       	adc	r26, r26
    1efc:	a9 f3       	breq	.-22     	; 0x1ee8 <__divsf3_pse+0x10>
    1efe:	33 d0       	rcall	.+102    	; 0x1f66 <__divsf3_pse+0x8e>
    1f00:	0e 2e       	mov	r0, r30
    1f02:	3a f0       	brmi	.+14     	; 0x1f12 <__divsf3_pse+0x3a>
    1f04:	e0 e8       	ldi	r30, 0x80	; 128
    1f06:	30 d0       	rcall	.+96     	; 0x1f68 <__divsf3_pse+0x90>
    1f08:	91 50       	subi	r25, 0x01	; 1
    1f0a:	50 40       	sbci	r21, 0x00	; 0
    1f0c:	e6 95       	lsr	r30
    1f0e:	00 1c       	adc	r0, r0
    1f10:	ca f7       	brpl	.-14     	; 0x1f04 <__divsf3_pse+0x2c>
    1f12:	29 d0       	rcall	.+82     	; 0x1f66 <__divsf3_pse+0x8e>
    1f14:	fe 2f       	mov	r31, r30
    1f16:	27 d0       	rcall	.+78     	; 0x1f66 <__divsf3_pse+0x8e>
    1f18:	66 0f       	add	r22, r22
    1f1a:	77 1f       	adc	r23, r23
    1f1c:	88 1f       	adc	r24, r24
    1f1e:	bb 1f       	adc	r27, r27
    1f20:	26 17       	cp	r18, r22
    1f22:	37 07       	cpc	r19, r23
    1f24:	48 07       	cpc	r20, r24
    1f26:	ab 07       	cpc	r26, r27
    1f28:	b0 e8       	ldi	r27, 0x80	; 128
    1f2a:	09 f0       	breq	.+2      	; 0x1f2e <__divsf3_pse+0x56>
    1f2c:	bb 0b       	sbc	r27, r27
    1f2e:	80 2d       	mov	r24, r0
    1f30:	bf 01       	movw	r22, r30
    1f32:	ff 27       	eor	r31, r31
    1f34:	93 58       	subi	r25, 0x83	; 131
    1f36:	5f 4f       	sbci	r21, 0xFF	; 255
    1f38:	2a f0       	brmi	.+10     	; 0x1f44 <__divsf3_pse+0x6c>
    1f3a:	9e 3f       	cpi	r25, 0xFE	; 254
    1f3c:	51 05       	cpc	r21, r1
    1f3e:	68 f0       	brcs	.+26     	; 0x1f5a <__divsf3_pse+0x82>
    1f40:	b6 c0       	rjmp	.+364    	; 0x20ae <__fp_inf>
    1f42:	00 c1       	rjmp	.+512    	; 0x2144 <__fp_szero>
    1f44:	5f 3f       	cpi	r21, 0xFF	; 255
    1f46:	ec f3       	brlt	.-6      	; 0x1f42 <__divsf3_pse+0x6a>
    1f48:	98 3e       	cpi	r25, 0xE8	; 232
    1f4a:	dc f3       	brlt	.-10     	; 0x1f42 <__divsf3_pse+0x6a>
    1f4c:	86 95       	lsr	r24
    1f4e:	77 95       	ror	r23
    1f50:	67 95       	ror	r22
    1f52:	b7 95       	ror	r27
    1f54:	f7 95       	ror	r31
    1f56:	9f 5f       	subi	r25, 0xFF	; 255
    1f58:	c9 f7       	brne	.-14     	; 0x1f4c <__divsf3_pse+0x74>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	91 1d       	adc	r25, r1
    1f5e:	96 95       	lsr	r25
    1f60:	87 95       	ror	r24
    1f62:	97 f9       	bld	r25, 7
    1f64:	08 95       	ret
    1f66:	e1 e0       	ldi	r30, 0x01	; 1
    1f68:	66 0f       	add	r22, r22
    1f6a:	77 1f       	adc	r23, r23
    1f6c:	88 1f       	adc	r24, r24
    1f6e:	bb 1f       	adc	r27, r27
    1f70:	62 17       	cp	r22, r18
    1f72:	73 07       	cpc	r23, r19
    1f74:	84 07       	cpc	r24, r20
    1f76:	ba 07       	cpc	r27, r26
    1f78:	20 f0       	brcs	.+8      	; 0x1f82 <__divsf3_pse+0xaa>
    1f7a:	62 1b       	sub	r22, r18
    1f7c:	73 0b       	sbc	r23, r19
    1f7e:	84 0b       	sbc	r24, r20
    1f80:	ba 0b       	sbc	r27, r26
    1f82:	ee 1f       	adc	r30, r30
    1f84:	88 f7       	brcc	.-30     	; 0x1f68 <__divsf3_pse+0x90>
    1f86:	e0 95       	com	r30
    1f88:	08 95       	ret

00001f8a <__fixsfsi>:
    1f8a:	04 d0       	rcall	.+8      	; 0x1f94 <__fixunssfsi>
    1f8c:	68 94       	set
    1f8e:	b1 11       	cpse	r27, r1
    1f90:	d9 c0       	rjmp	.+434    	; 0x2144 <__fp_szero>
    1f92:	08 95       	ret

00001f94 <__fixunssfsi>:
    1f94:	bc d0       	rcall	.+376    	; 0x210e <__fp_splitA>
    1f96:	88 f0       	brcs	.+34     	; 0x1fba <__fixunssfsi+0x26>
    1f98:	9f 57       	subi	r25, 0x7F	; 127
    1f9a:	90 f0       	brcs	.+36     	; 0x1fc0 <__fixunssfsi+0x2c>
    1f9c:	b9 2f       	mov	r27, r25
    1f9e:	99 27       	eor	r25, r25
    1fa0:	b7 51       	subi	r27, 0x17	; 23
    1fa2:	a0 f0       	brcs	.+40     	; 0x1fcc <__fixunssfsi+0x38>
    1fa4:	d1 f0       	breq	.+52     	; 0x1fda <__fixunssfsi+0x46>
    1fa6:	66 0f       	add	r22, r22
    1fa8:	77 1f       	adc	r23, r23
    1faa:	88 1f       	adc	r24, r24
    1fac:	99 1f       	adc	r25, r25
    1fae:	1a f0       	brmi	.+6      	; 0x1fb6 <__fixunssfsi+0x22>
    1fb0:	ba 95       	dec	r27
    1fb2:	c9 f7       	brne	.-14     	; 0x1fa6 <__fixunssfsi+0x12>
    1fb4:	12 c0       	rjmp	.+36     	; 0x1fda <__fixunssfsi+0x46>
    1fb6:	b1 30       	cpi	r27, 0x01	; 1
    1fb8:	81 f0       	breq	.+32     	; 0x1fda <__fixunssfsi+0x46>
    1fba:	c3 d0       	rcall	.+390    	; 0x2142 <__fp_zero>
    1fbc:	b1 e0       	ldi	r27, 0x01	; 1
    1fbe:	08 95       	ret
    1fc0:	c0 c0       	rjmp	.+384    	; 0x2142 <__fp_zero>
    1fc2:	67 2f       	mov	r22, r23
    1fc4:	78 2f       	mov	r23, r24
    1fc6:	88 27       	eor	r24, r24
    1fc8:	b8 5f       	subi	r27, 0xF8	; 248
    1fca:	39 f0       	breq	.+14     	; 0x1fda <__fixunssfsi+0x46>
    1fcc:	b9 3f       	cpi	r27, 0xF9	; 249
    1fce:	cc f3       	brlt	.-14     	; 0x1fc2 <__fixunssfsi+0x2e>
    1fd0:	86 95       	lsr	r24
    1fd2:	77 95       	ror	r23
    1fd4:	67 95       	ror	r22
    1fd6:	b3 95       	inc	r27
    1fd8:	d9 f7       	brne	.-10     	; 0x1fd0 <__fixunssfsi+0x3c>
    1fda:	3e f4       	brtc	.+14     	; 0x1fea <__fixunssfsi+0x56>
    1fdc:	90 95       	com	r25
    1fde:	80 95       	com	r24
    1fe0:	70 95       	com	r23
    1fe2:	61 95       	neg	r22
    1fe4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fea:	08 95       	ret

00001fec <__floatunsisf>:
    1fec:	e8 94       	clt
    1fee:	09 c0       	rjmp	.+18     	; 0x2002 <__floatsisf+0x12>

00001ff0 <__floatsisf>:
    1ff0:	97 fb       	bst	r25, 7
    1ff2:	3e f4       	brtc	.+14     	; 0x2002 <__floatsisf+0x12>
    1ff4:	90 95       	com	r25
    1ff6:	80 95       	com	r24
    1ff8:	70 95       	com	r23
    1ffa:	61 95       	neg	r22
    1ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    2000:	9f 4f       	sbci	r25, 0xFF	; 255
    2002:	99 23       	and	r25, r25
    2004:	a9 f0       	breq	.+42     	; 0x2030 <__floatsisf+0x40>
    2006:	f9 2f       	mov	r31, r25
    2008:	96 e9       	ldi	r25, 0x96	; 150
    200a:	bb 27       	eor	r27, r27
    200c:	93 95       	inc	r25
    200e:	f6 95       	lsr	r31
    2010:	87 95       	ror	r24
    2012:	77 95       	ror	r23
    2014:	67 95       	ror	r22
    2016:	b7 95       	ror	r27
    2018:	f1 11       	cpse	r31, r1
    201a:	f8 cf       	rjmp	.-16     	; 0x200c <__floatsisf+0x1c>
    201c:	fa f4       	brpl	.+62     	; 0x205c <__floatsisf+0x6c>
    201e:	bb 0f       	add	r27, r27
    2020:	11 f4       	brne	.+4      	; 0x2026 <__floatsisf+0x36>
    2022:	60 ff       	sbrs	r22, 0
    2024:	1b c0       	rjmp	.+54     	; 0x205c <__floatsisf+0x6c>
    2026:	6f 5f       	subi	r22, 0xFF	; 255
    2028:	7f 4f       	sbci	r23, 0xFF	; 255
    202a:	8f 4f       	sbci	r24, 0xFF	; 255
    202c:	9f 4f       	sbci	r25, 0xFF	; 255
    202e:	16 c0       	rjmp	.+44     	; 0x205c <__floatsisf+0x6c>
    2030:	88 23       	and	r24, r24
    2032:	11 f0       	breq	.+4      	; 0x2038 <__floatsisf+0x48>
    2034:	96 e9       	ldi	r25, 0x96	; 150
    2036:	11 c0       	rjmp	.+34     	; 0x205a <__floatsisf+0x6a>
    2038:	77 23       	and	r23, r23
    203a:	21 f0       	breq	.+8      	; 0x2044 <__floatsisf+0x54>
    203c:	9e e8       	ldi	r25, 0x8E	; 142
    203e:	87 2f       	mov	r24, r23
    2040:	76 2f       	mov	r23, r22
    2042:	05 c0       	rjmp	.+10     	; 0x204e <__floatsisf+0x5e>
    2044:	66 23       	and	r22, r22
    2046:	71 f0       	breq	.+28     	; 0x2064 <__floatsisf+0x74>
    2048:	96 e8       	ldi	r25, 0x86	; 134
    204a:	86 2f       	mov	r24, r22
    204c:	70 e0       	ldi	r23, 0x00	; 0
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	2a f0       	brmi	.+10     	; 0x205c <__floatsisf+0x6c>
    2052:	9a 95       	dec	r25
    2054:	66 0f       	add	r22, r22
    2056:	77 1f       	adc	r23, r23
    2058:	88 1f       	adc	r24, r24
    205a:	da f7       	brpl	.-10     	; 0x2052 <__floatsisf+0x62>
    205c:	88 0f       	add	r24, r24
    205e:	96 95       	lsr	r25
    2060:	87 95       	ror	r24
    2062:	97 f9       	bld	r25, 7
    2064:	08 95       	ret

00002066 <__fp_cmp>:
    2066:	99 0f       	add	r25, r25
    2068:	00 08       	sbc	r0, r0
    206a:	55 0f       	add	r21, r21
    206c:	aa 0b       	sbc	r26, r26
    206e:	e0 e8       	ldi	r30, 0x80	; 128
    2070:	fe ef       	ldi	r31, 0xFE	; 254
    2072:	16 16       	cp	r1, r22
    2074:	17 06       	cpc	r1, r23
    2076:	e8 07       	cpc	r30, r24
    2078:	f9 07       	cpc	r31, r25
    207a:	c0 f0       	brcs	.+48     	; 0x20ac <__fp_cmp+0x46>
    207c:	12 16       	cp	r1, r18
    207e:	13 06       	cpc	r1, r19
    2080:	e4 07       	cpc	r30, r20
    2082:	f5 07       	cpc	r31, r21
    2084:	98 f0       	brcs	.+38     	; 0x20ac <__fp_cmp+0x46>
    2086:	62 1b       	sub	r22, r18
    2088:	73 0b       	sbc	r23, r19
    208a:	84 0b       	sbc	r24, r20
    208c:	95 0b       	sbc	r25, r21
    208e:	39 f4       	brne	.+14     	; 0x209e <__fp_cmp+0x38>
    2090:	0a 26       	eor	r0, r26
    2092:	61 f0       	breq	.+24     	; 0x20ac <__fp_cmp+0x46>
    2094:	23 2b       	or	r18, r19
    2096:	24 2b       	or	r18, r20
    2098:	25 2b       	or	r18, r21
    209a:	21 f4       	brne	.+8      	; 0x20a4 <__fp_cmp+0x3e>
    209c:	08 95       	ret
    209e:	0a 26       	eor	r0, r26
    20a0:	09 f4       	brne	.+2      	; 0x20a4 <__fp_cmp+0x3e>
    20a2:	a1 40       	sbci	r26, 0x01	; 1
    20a4:	a6 95       	lsr	r26
    20a6:	8f ef       	ldi	r24, 0xFF	; 255
    20a8:	81 1d       	adc	r24, r1
    20aa:	81 1d       	adc	r24, r1
    20ac:	08 95       	ret

000020ae <__fp_inf>:
    20ae:	97 f9       	bld	r25, 7
    20b0:	9f 67       	ori	r25, 0x7F	; 127
    20b2:	80 e8       	ldi	r24, 0x80	; 128
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	60 e0       	ldi	r22, 0x00	; 0
    20b8:	08 95       	ret

000020ba <__fp_nan>:
    20ba:	9f ef       	ldi	r25, 0xFF	; 255
    20bc:	80 ec       	ldi	r24, 0xC0	; 192
    20be:	08 95       	ret

000020c0 <__fp_pscA>:
    20c0:	00 24       	eor	r0, r0
    20c2:	0a 94       	dec	r0
    20c4:	16 16       	cp	r1, r22
    20c6:	17 06       	cpc	r1, r23
    20c8:	18 06       	cpc	r1, r24
    20ca:	09 06       	cpc	r0, r25
    20cc:	08 95       	ret

000020ce <__fp_pscB>:
    20ce:	00 24       	eor	r0, r0
    20d0:	0a 94       	dec	r0
    20d2:	12 16       	cp	r1, r18
    20d4:	13 06       	cpc	r1, r19
    20d6:	14 06       	cpc	r1, r20
    20d8:	05 06       	cpc	r0, r21
    20da:	08 95       	ret

000020dc <__fp_round>:
    20dc:	09 2e       	mov	r0, r25
    20de:	03 94       	inc	r0
    20e0:	00 0c       	add	r0, r0
    20e2:	11 f4       	brne	.+4      	; 0x20e8 <__fp_round+0xc>
    20e4:	88 23       	and	r24, r24
    20e6:	52 f0       	brmi	.+20     	; 0x20fc <__fp_round+0x20>
    20e8:	bb 0f       	add	r27, r27
    20ea:	40 f4       	brcc	.+16     	; 0x20fc <__fp_round+0x20>
    20ec:	bf 2b       	or	r27, r31
    20ee:	11 f4       	brne	.+4      	; 0x20f4 <__fp_round+0x18>
    20f0:	60 ff       	sbrs	r22, 0
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <__fp_round+0x20>
    20f4:	6f 5f       	subi	r22, 0xFF	; 255
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	8f 4f       	sbci	r24, 0xFF	; 255
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	08 95       	ret

000020fe <__fp_split3>:
    20fe:	57 fd       	sbrc	r21, 7
    2100:	90 58       	subi	r25, 0x80	; 128
    2102:	44 0f       	add	r20, r20
    2104:	55 1f       	adc	r21, r21
    2106:	59 f0       	breq	.+22     	; 0x211e <__fp_splitA+0x10>
    2108:	5f 3f       	cpi	r21, 0xFF	; 255
    210a:	71 f0       	breq	.+28     	; 0x2128 <__fp_splitA+0x1a>
    210c:	47 95       	ror	r20

0000210e <__fp_splitA>:
    210e:	88 0f       	add	r24, r24
    2110:	97 fb       	bst	r25, 7
    2112:	99 1f       	adc	r25, r25
    2114:	61 f0       	breq	.+24     	; 0x212e <__fp_splitA+0x20>
    2116:	9f 3f       	cpi	r25, 0xFF	; 255
    2118:	79 f0       	breq	.+30     	; 0x2138 <__fp_splitA+0x2a>
    211a:	87 95       	ror	r24
    211c:	08 95       	ret
    211e:	12 16       	cp	r1, r18
    2120:	13 06       	cpc	r1, r19
    2122:	14 06       	cpc	r1, r20
    2124:	55 1f       	adc	r21, r21
    2126:	f2 cf       	rjmp	.-28     	; 0x210c <__fp_split3+0xe>
    2128:	46 95       	lsr	r20
    212a:	f1 df       	rcall	.-30     	; 0x210e <__fp_splitA>
    212c:	08 c0       	rjmp	.+16     	; 0x213e <__fp_splitA+0x30>
    212e:	16 16       	cp	r1, r22
    2130:	17 06       	cpc	r1, r23
    2132:	18 06       	cpc	r1, r24
    2134:	99 1f       	adc	r25, r25
    2136:	f1 cf       	rjmp	.-30     	; 0x211a <__fp_splitA+0xc>
    2138:	86 95       	lsr	r24
    213a:	71 05       	cpc	r23, r1
    213c:	61 05       	cpc	r22, r1
    213e:	08 94       	sec
    2140:	08 95       	ret

00002142 <__fp_zero>:
    2142:	e8 94       	clt

00002144 <__fp_szero>:
    2144:	bb 27       	eor	r27, r27
    2146:	66 27       	eor	r22, r22
    2148:	77 27       	eor	r23, r23
    214a:	cb 01       	movw	r24, r22
    214c:	97 f9       	bld	r25, 7
    214e:	08 95       	ret

00002150 <__gesf2>:
    2150:	8a df       	rcall	.-236    	; 0x2066 <__fp_cmp>
    2152:	08 f4       	brcc	.+2      	; 0x2156 <__gesf2+0x6>
    2154:	8f ef       	ldi	r24, 0xFF	; 255
    2156:	08 95       	ret

00002158 <__mulsf3>:
    2158:	0b d0       	rcall	.+22     	; 0x2170 <__mulsf3x>
    215a:	c0 cf       	rjmp	.-128    	; 0x20dc <__fp_round>
    215c:	b1 df       	rcall	.-158    	; 0x20c0 <__fp_pscA>
    215e:	28 f0       	brcs	.+10     	; 0x216a <__mulsf3+0x12>
    2160:	b6 df       	rcall	.-148    	; 0x20ce <__fp_pscB>
    2162:	18 f0       	brcs	.+6      	; 0x216a <__mulsf3+0x12>
    2164:	95 23       	and	r25, r21
    2166:	09 f0       	breq	.+2      	; 0x216a <__mulsf3+0x12>
    2168:	a2 cf       	rjmp	.-188    	; 0x20ae <__fp_inf>
    216a:	a7 cf       	rjmp	.-178    	; 0x20ba <__fp_nan>
    216c:	11 24       	eor	r1, r1
    216e:	ea cf       	rjmp	.-44     	; 0x2144 <__fp_szero>

00002170 <__mulsf3x>:
    2170:	c6 df       	rcall	.-116    	; 0x20fe <__fp_split3>
    2172:	a0 f3       	brcs	.-24     	; 0x215c <__mulsf3+0x4>

00002174 <__mulsf3_pse>:
    2174:	95 9f       	mul	r25, r21
    2176:	d1 f3       	breq	.-12     	; 0x216c <__mulsf3+0x14>
    2178:	95 0f       	add	r25, r21
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	55 1f       	adc	r21, r21
    217e:	62 9f       	mul	r22, r18
    2180:	f0 01       	movw	r30, r0
    2182:	72 9f       	mul	r23, r18
    2184:	bb 27       	eor	r27, r27
    2186:	f0 0d       	add	r31, r0
    2188:	b1 1d       	adc	r27, r1
    218a:	63 9f       	mul	r22, r19
    218c:	aa 27       	eor	r26, r26
    218e:	f0 0d       	add	r31, r0
    2190:	b1 1d       	adc	r27, r1
    2192:	aa 1f       	adc	r26, r26
    2194:	64 9f       	mul	r22, r20
    2196:	66 27       	eor	r22, r22
    2198:	b0 0d       	add	r27, r0
    219a:	a1 1d       	adc	r26, r1
    219c:	66 1f       	adc	r22, r22
    219e:	82 9f       	mul	r24, r18
    21a0:	22 27       	eor	r18, r18
    21a2:	b0 0d       	add	r27, r0
    21a4:	a1 1d       	adc	r26, r1
    21a6:	62 1f       	adc	r22, r18
    21a8:	73 9f       	mul	r23, r19
    21aa:	b0 0d       	add	r27, r0
    21ac:	a1 1d       	adc	r26, r1
    21ae:	62 1f       	adc	r22, r18
    21b0:	83 9f       	mul	r24, r19
    21b2:	a0 0d       	add	r26, r0
    21b4:	61 1d       	adc	r22, r1
    21b6:	22 1f       	adc	r18, r18
    21b8:	74 9f       	mul	r23, r20
    21ba:	33 27       	eor	r19, r19
    21bc:	a0 0d       	add	r26, r0
    21be:	61 1d       	adc	r22, r1
    21c0:	23 1f       	adc	r18, r19
    21c2:	84 9f       	mul	r24, r20
    21c4:	60 0d       	add	r22, r0
    21c6:	21 1d       	adc	r18, r1
    21c8:	82 2f       	mov	r24, r18
    21ca:	76 2f       	mov	r23, r22
    21cc:	6a 2f       	mov	r22, r26
    21ce:	11 24       	eor	r1, r1
    21d0:	9f 57       	subi	r25, 0x7F	; 127
    21d2:	50 40       	sbci	r21, 0x00	; 0
    21d4:	8a f0       	brmi	.+34     	; 0x21f8 <__mulsf3_pse+0x84>
    21d6:	e1 f0       	breq	.+56     	; 0x2210 <__mulsf3_pse+0x9c>
    21d8:	88 23       	and	r24, r24
    21da:	4a f0       	brmi	.+18     	; 0x21ee <__mulsf3_pse+0x7a>
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	bb 1f       	adc	r27, r27
    21e2:	66 1f       	adc	r22, r22
    21e4:	77 1f       	adc	r23, r23
    21e6:	88 1f       	adc	r24, r24
    21e8:	91 50       	subi	r25, 0x01	; 1
    21ea:	50 40       	sbci	r21, 0x00	; 0
    21ec:	a9 f7       	brne	.-22     	; 0x21d8 <__mulsf3_pse+0x64>
    21ee:	9e 3f       	cpi	r25, 0xFE	; 254
    21f0:	51 05       	cpc	r21, r1
    21f2:	70 f0       	brcs	.+28     	; 0x2210 <__mulsf3_pse+0x9c>
    21f4:	5c cf       	rjmp	.-328    	; 0x20ae <__fp_inf>
    21f6:	a6 cf       	rjmp	.-180    	; 0x2144 <__fp_szero>
    21f8:	5f 3f       	cpi	r21, 0xFF	; 255
    21fa:	ec f3       	brlt	.-6      	; 0x21f6 <__mulsf3_pse+0x82>
    21fc:	98 3e       	cpi	r25, 0xE8	; 232
    21fe:	dc f3       	brlt	.-10     	; 0x21f6 <__mulsf3_pse+0x82>
    2200:	86 95       	lsr	r24
    2202:	77 95       	ror	r23
    2204:	67 95       	ror	r22
    2206:	b7 95       	ror	r27
    2208:	f7 95       	ror	r31
    220a:	e7 95       	ror	r30
    220c:	9f 5f       	subi	r25, 0xFF	; 255
    220e:	c1 f7       	brne	.-16     	; 0x2200 <__mulsf3_pse+0x8c>
    2210:	fe 2b       	or	r31, r30
    2212:	88 0f       	add	r24, r24
    2214:	91 1d       	adc	r25, r1
    2216:	96 95       	lsr	r25
    2218:	87 95       	ror	r24
    221a:	97 f9       	bld	r25, 7
    221c:	08 95       	ret

0000221e <__divmodhi4>:
    221e:	97 fb       	bst	r25, 7
    2220:	07 2e       	mov	r0, r23
    2222:	16 f4       	brtc	.+4      	; 0x2228 <__divmodhi4+0xa>
    2224:	00 94       	com	r0
    2226:	07 d0       	rcall	.+14     	; 0x2236 <__divmodhi4_neg1>
    2228:	77 fd       	sbrc	r23, 7
    222a:	09 d0       	rcall	.+18     	; 0x223e <__divmodhi4_neg2>
    222c:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodhi4>
    2230:	07 fc       	sbrc	r0, 7
    2232:	05 d0       	rcall	.+10     	; 0x223e <__divmodhi4_neg2>
    2234:	3e f4       	brtc	.+14     	; 0x2244 <__divmodhi4_exit>

00002236 <__divmodhi4_neg1>:
    2236:	90 95       	com	r25
    2238:	81 95       	neg	r24
    223a:	9f 4f       	sbci	r25, 0xFF	; 255
    223c:	08 95       	ret

0000223e <__divmodhi4_neg2>:
    223e:	70 95       	com	r23
    2240:	61 95       	neg	r22
    2242:	7f 4f       	sbci	r23, 0xFF	; 255

00002244 <__divmodhi4_exit>:
    2244:	08 95       	ret

00002246 <__divmodsi4>:
    2246:	05 2e       	mov	r0, r21
    2248:	97 fb       	bst	r25, 7
    224a:	1e f4       	brtc	.+6      	; 0x2252 <__divmodsi4+0xc>
    224c:	00 94       	com	r0
    224e:	0e 94 3a 11 	call	0x2274	; 0x2274 <__negsi2>
    2252:	57 fd       	sbrc	r21, 7
    2254:	07 d0       	rcall	.+14     	; 0x2264 <__divmodsi4_neg2>
    2256:	0e 94 56 11 	call	0x22ac	; 0x22ac <__udivmodsi4>
    225a:	07 fc       	sbrc	r0, 7
    225c:	03 d0       	rcall	.+6      	; 0x2264 <__divmodsi4_neg2>
    225e:	4e f4       	brtc	.+18     	; 0x2272 <__divmodsi4_exit>
    2260:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__negsi2>

00002264 <__divmodsi4_neg2>:
    2264:	50 95       	com	r21
    2266:	40 95       	com	r20
    2268:	30 95       	com	r19
    226a:	21 95       	neg	r18
    226c:	3f 4f       	sbci	r19, 0xFF	; 255
    226e:	4f 4f       	sbci	r20, 0xFF	; 255
    2270:	5f 4f       	sbci	r21, 0xFF	; 255

00002272 <__divmodsi4_exit>:
    2272:	08 95       	ret

00002274 <__negsi2>:
    2274:	90 95       	com	r25
    2276:	80 95       	com	r24
    2278:	70 95       	com	r23
    227a:	61 95       	neg	r22
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	8f 4f       	sbci	r24, 0xFF	; 255
    2280:	9f 4f       	sbci	r25, 0xFF	; 255
    2282:	08 95       	ret

00002284 <__udivmodhi4>:
    2284:	aa 1b       	sub	r26, r26
    2286:	bb 1b       	sub	r27, r27
    2288:	51 e1       	ldi	r21, 0x11	; 17
    228a:	07 c0       	rjmp	.+14     	; 0x229a <__udivmodhi4_ep>

0000228c <__udivmodhi4_loop>:
    228c:	aa 1f       	adc	r26, r26
    228e:	bb 1f       	adc	r27, r27
    2290:	a6 17       	cp	r26, r22
    2292:	b7 07       	cpc	r27, r23
    2294:	10 f0       	brcs	.+4      	; 0x229a <__udivmodhi4_ep>
    2296:	a6 1b       	sub	r26, r22
    2298:	b7 0b       	sbc	r27, r23

0000229a <__udivmodhi4_ep>:
    229a:	88 1f       	adc	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	5a 95       	dec	r21
    22a0:	a9 f7       	brne	.-22     	; 0x228c <__udivmodhi4_loop>
    22a2:	80 95       	com	r24
    22a4:	90 95       	com	r25
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	08 95       	ret

000022ac <__udivmodsi4>:
    22ac:	a1 e2       	ldi	r26, 0x21	; 33
    22ae:	1a 2e       	mov	r1, r26
    22b0:	aa 1b       	sub	r26, r26
    22b2:	bb 1b       	sub	r27, r27
    22b4:	fd 01       	movw	r30, r26
    22b6:	0d c0       	rjmp	.+26     	; 0x22d2 <__udivmodsi4_ep>

000022b8 <__udivmodsi4_loop>:
    22b8:	aa 1f       	adc	r26, r26
    22ba:	bb 1f       	adc	r27, r27
    22bc:	ee 1f       	adc	r30, r30
    22be:	ff 1f       	adc	r31, r31
    22c0:	a2 17       	cp	r26, r18
    22c2:	b3 07       	cpc	r27, r19
    22c4:	e4 07       	cpc	r30, r20
    22c6:	f5 07       	cpc	r31, r21
    22c8:	20 f0       	brcs	.+8      	; 0x22d2 <__udivmodsi4_ep>
    22ca:	a2 1b       	sub	r26, r18
    22cc:	b3 0b       	sbc	r27, r19
    22ce:	e4 0b       	sbc	r30, r20
    22d0:	f5 0b       	sbc	r31, r21

000022d2 <__udivmodsi4_ep>:
    22d2:	66 1f       	adc	r22, r22
    22d4:	77 1f       	adc	r23, r23
    22d6:	88 1f       	adc	r24, r24
    22d8:	99 1f       	adc	r25, r25
    22da:	1a 94       	dec	r1
    22dc:	69 f7       	brne	.-38     	; 0x22b8 <__udivmodsi4_loop>
    22de:	60 95       	com	r22
    22e0:	70 95       	com	r23
    22e2:	80 95       	com	r24
    22e4:	90 95       	com	r25
    22e6:	9b 01       	movw	r18, r22
    22e8:	ac 01       	movw	r20, r24
    22ea:	bd 01       	movw	r22, r26
    22ec:	cf 01       	movw	r24, r30
    22ee:	08 95       	ret

000022f0 <malloc>:
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	82 30       	cpi	r24, 0x02	; 2
    22f6:	91 05       	cpc	r25, r1
    22f8:	10 f4       	brcc	.+4      	; 0x22fe <malloc+0xe>
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	e0 91 26 02 	lds	r30, 0x0226
    2302:	f0 91 27 02 	lds	r31, 0x0227
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	a0 e0       	ldi	r26, 0x00	; 0
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	30 97       	sbiw	r30, 0x00	; 0
    2310:	39 f1       	breq	.+78     	; 0x2360 <malloc+0x70>
    2312:	40 81       	ld	r20, Z
    2314:	51 81       	ldd	r21, Z+1	; 0x01
    2316:	48 17       	cp	r20, r24
    2318:	59 07       	cpc	r21, r25
    231a:	b8 f0       	brcs	.+46     	; 0x234a <malloc+0x5a>
    231c:	48 17       	cp	r20, r24
    231e:	59 07       	cpc	r21, r25
    2320:	71 f4       	brne	.+28     	; 0x233e <malloc+0x4e>
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	10 97       	sbiw	r26, 0x00	; 0
    2328:	29 f0       	breq	.+10     	; 0x2334 <malloc+0x44>
    232a:	13 96       	adiw	r26, 0x03	; 3
    232c:	9c 93       	st	X, r25
    232e:	8e 93       	st	-X, r24
    2330:	12 97       	sbiw	r26, 0x02	; 2
    2332:	2c c0       	rjmp	.+88     	; 0x238c <malloc+0x9c>
    2334:	90 93 27 02 	sts	0x0227, r25
    2338:	80 93 26 02 	sts	0x0226, r24
    233c:	27 c0       	rjmp	.+78     	; 0x238c <malloc+0x9c>
    233e:	21 15       	cp	r18, r1
    2340:	31 05       	cpc	r19, r1
    2342:	31 f0       	breq	.+12     	; 0x2350 <malloc+0x60>
    2344:	42 17       	cp	r20, r18
    2346:	53 07       	cpc	r21, r19
    2348:	18 f0       	brcs	.+6      	; 0x2350 <malloc+0x60>
    234a:	a9 01       	movw	r20, r18
    234c:	db 01       	movw	r26, r22
    234e:	01 c0       	rjmp	.+2      	; 0x2352 <malloc+0x62>
    2350:	ef 01       	movw	r28, r30
    2352:	9a 01       	movw	r18, r20
    2354:	bd 01       	movw	r22, r26
    2356:	df 01       	movw	r26, r30
    2358:	02 80       	ldd	r0, Z+2	; 0x02
    235a:	f3 81       	ldd	r31, Z+3	; 0x03
    235c:	e0 2d       	mov	r30, r0
    235e:	d7 cf       	rjmp	.-82     	; 0x230e <malloc+0x1e>
    2360:	21 15       	cp	r18, r1
    2362:	31 05       	cpc	r19, r1
    2364:	f9 f0       	breq	.+62     	; 0x23a4 <malloc+0xb4>
    2366:	28 1b       	sub	r18, r24
    2368:	39 0b       	sbc	r19, r25
    236a:	24 30       	cpi	r18, 0x04	; 4
    236c:	31 05       	cpc	r19, r1
    236e:	80 f4       	brcc	.+32     	; 0x2390 <malloc+0xa0>
    2370:	8a 81       	ldd	r24, Y+2	; 0x02
    2372:	9b 81       	ldd	r25, Y+3	; 0x03
    2374:	61 15       	cp	r22, r1
    2376:	71 05       	cpc	r23, r1
    2378:	21 f0       	breq	.+8      	; 0x2382 <malloc+0x92>
    237a:	fb 01       	movw	r30, r22
    237c:	93 83       	std	Z+3, r25	; 0x03
    237e:	82 83       	std	Z+2, r24	; 0x02
    2380:	04 c0       	rjmp	.+8      	; 0x238a <malloc+0x9a>
    2382:	90 93 27 02 	sts	0x0227, r25
    2386:	80 93 26 02 	sts	0x0226, r24
    238a:	fe 01       	movw	r30, r28
    238c:	32 96       	adiw	r30, 0x02	; 2
    238e:	44 c0       	rjmp	.+136    	; 0x2418 <malloc+0x128>
    2390:	fe 01       	movw	r30, r28
    2392:	e2 0f       	add	r30, r18
    2394:	f3 1f       	adc	r31, r19
    2396:	81 93       	st	Z+, r24
    2398:	91 93       	st	Z+, r25
    239a:	22 50       	subi	r18, 0x02	; 2
    239c:	31 09       	sbc	r19, r1
    239e:	39 83       	std	Y+1, r19	; 0x01
    23a0:	28 83       	st	Y, r18
    23a2:	3a c0       	rjmp	.+116    	; 0x2418 <malloc+0x128>
    23a4:	20 91 24 02 	lds	r18, 0x0224
    23a8:	30 91 25 02 	lds	r19, 0x0225
    23ac:	23 2b       	or	r18, r19
    23ae:	41 f4       	brne	.+16     	; 0x23c0 <malloc+0xd0>
    23b0:	20 91 02 01 	lds	r18, 0x0102
    23b4:	30 91 03 01 	lds	r19, 0x0103
    23b8:	30 93 25 02 	sts	0x0225, r19
    23bc:	20 93 24 02 	sts	0x0224, r18
    23c0:	20 91 00 01 	lds	r18, 0x0100
    23c4:	30 91 01 01 	lds	r19, 0x0101
    23c8:	21 15       	cp	r18, r1
    23ca:	31 05       	cpc	r19, r1
    23cc:	41 f4       	brne	.+16     	; 0x23de <malloc+0xee>
    23ce:	2d b7       	in	r18, 0x3d	; 61
    23d0:	3e b7       	in	r19, 0x3e	; 62
    23d2:	40 91 04 01 	lds	r20, 0x0104
    23d6:	50 91 05 01 	lds	r21, 0x0105
    23da:	24 1b       	sub	r18, r20
    23dc:	35 0b       	sbc	r19, r21
    23de:	e0 91 24 02 	lds	r30, 0x0224
    23e2:	f0 91 25 02 	lds	r31, 0x0225
    23e6:	e2 17       	cp	r30, r18
    23e8:	f3 07       	cpc	r31, r19
    23ea:	a0 f4       	brcc	.+40     	; 0x2414 <malloc+0x124>
    23ec:	2e 1b       	sub	r18, r30
    23ee:	3f 0b       	sbc	r19, r31
    23f0:	28 17       	cp	r18, r24
    23f2:	39 07       	cpc	r19, r25
    23f4:	78 f0       	brcs	.+30     	; 0x2414 <malloc+0x124>
    23f6:	ac 01       	movw	r20, r24
    23f8:	4e 5f       	subi	r20, 0xFE	; 254
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
    23fc:	24 17       	cp	r18, r20
    23fe:	35 07       	cpc	r19, r21
    2400:	48 f0       	brcs	.+18     	; 0x2414 <malloc+0x124>
    2402:	4e 0f       	add	r20, r30
    2404:	5f 1f       	adc	r21, r31
    2406:	50 93 25 02 	sts	0x0225, r21
    240a:	40 93 24 02 	sts	0x0224, r20
    240e:	81 93       	st	Z+, r24
    2410:	91 93       	st	Z+, r25
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <malloc+0x128>
    2414:	e0 e0       	ldi	r30, 0x00	; 0
    2416:	f0 e0       	ldi	r31, 0x00	; 0
    2418:	cf 01       	movw	r24, r30
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	08 95       	ret

00002420 <free>:
    2420:	cf 93       	push	r28
    2422:	df 93       	push	r29
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	09 f4       	brne	.+2      	; 0x242a <free+0xa>
    2428:	87 c0       	rjmp	.+270    	; 0x2538 <free+0x118>
    242a:	fc 01       	movw	r30, r24
    242c:	32 97       	sbiw	r30, 0x02	; 2
    242e:	13 82       	std	Z+3, r1	; 0x03
    2430:	12 82       	std	Z+2, r1	; 0x02
    2432:	c0 91 26 02 	lds	r28, 0x0226
    2436:	d0 91 27 02 	lds	r29, 0x0227
    243a:	20 97       	sbiw	r28, 0x00	; 0
    243c:	81 f4       	brne	.+32     	; 0x245e <free+0x3e>
    243e:	20 81       	ld	r18, Z
    2440:	31 81       	ldd	r19, Z+1	; 0x01
    2442:	28 0f       	add	r18, r24
    2444:	39 1f       	adc	r19, r25
    2446:	80 91 24 02 	lds	r24, 0x0224
    244a:	90 91 25 02 	lds	r25, 0x0225
    244e:	82 17       	cp	r24, r18
    2450:	93 07       	cpc	r25, r19
    2452:	79 f5       	brne	.+94     	; 0x24b2 <free+0x92>
    2454:	f0 93 25 02 	sts	0x0225, r31
    2458:	e0 93 24 02 	sts	0x0224, r30
    245c:	6d c0       	rjmp	.+218    	; 0x2538 <free+0x118>
    245e:	de 01       	movw	r26, r28
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	ae 17       	cp	r26, r30
    2466:	bf 07       	cpc	r27, r31
    2468:	50 f4       	brcc	.+20     	; 0x247e <free+0x5e>
    246a:	12 96       	adiw	r26, 0x02	; 2
    246c:	4d 91       	ld	r20, X+
    246e:	5c 91       	ld	r21, X
    2470:	13 97       	sbiw	r26, 0x03	; 3
    2472:	9d 01       	movw	r18, r26
    2474:	41 15       	cp	r20, r1
    2476:	51 05       	cpc	r21, r1
    2478:	09 f1       	breq	.+66     	; 0x24bc <free+0x9c>
    247a:	da 01       	movw	r26, r20
    247c:	f3 cf       	rjmp	.-26     	; 0x2464 <free+0x44>
    247e:	b3 83       	std	Z+3, r27	; 0x03
    2480:	a2 83       	std	Z+2, r26	; 0x02
    2482:	40 81       	ld	r20, Z
    2484:	51 81       	ldd	r21, Z+1	; 0x01
    2486:	84 0f       	add	r24, r20
    2488:	95 1f       	adc	r25, r21
    248a:	8a 17       	cp	r24, r26
    248c:	9b 07       	cpc	r25, r27
    248e:	71 f4       	brne	.+28     	; 0x24ac <free+0x8c>
    2490:	8d 91       	ld	r24, X+
    2492:	9c 91       	ld	r25, X
    2494:	11 97       	sbiw	r26, 0x01	; 1
    2496:	84 0f       	add	r24, r20
    2498:	95 1f       	adc	r25, r21
    249a:	02 96       	adiw	r24, 0x02	; 2
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	80 83       	st	Z, r24
    24a0:	12 96       	adiw	r26, 0x02	; 2
    24a2:	8d 91       	ld	r24, X+
    24a4:	9c 91       	ld	r25, X
    24a6:	13 97       	sbiw	r26, 0x03	; 3
    24a8:	93 83       	std	Z+3, r25	; 0x03
    24aa:	82 83       	std	Z+2, r24	; 0x02
    24ac:	21 15       	cp	r18, r1
    24ae:	31 05       	cpc	r19, r1
    24b0:	29 f4       	brne	.+10     	; 0x24bc <free+0x9c>
    24b2:	f0 93 27 02 	sts	0x0227, r31
    24b6:	e0 93 26 02 	sts	0x0226, r30
    24ba:	3e c0       	rjmp	.+124    	; 0x2538 <free+0x118>
    24bc:	d9 01       	movw	r26, r18
    24be:	13 96       	adiw	r26, 0x03	; 3
    24c0:	fc 93       	st	X, r31
    24c2:	ee 93       	st	-X, r30
    24c4:	12 97       	sbiw	r26, 0x02	; 2
    24c6:	4d 91       	ld	r20, X+
    24c8:	5d 91       	ld	r21, X+
    24ca:	a4 0f       	add	r26, r20
    24cc:	b5 1f       	adc	r27, r21
    24ce:	ea 17       	cp	r30, r26
    24d0:	fb 07       	cpc	r31, r27
    24d2:	79 f4       	brne	.+30     	; 0x24f2 <free+0xd2>
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	84 0f       	add	r24, r20
    24da:	95 1f       	adc	r25, r21
    24dc:	02 96       	adiw	r24, 0x02	; 2
    24de:	d9 01       	movw	r26, r18
    24e0:	11 96       	adiw	r26, 0x01	; 1
    24e2:	9c 93       	st	X, r25
    24e4:	8e 93       	st	-X, r24
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	13 96       	adiw	r26, 0x03	; 3
    24ec:	9c 93       	st	X, r25
    24ee:	8e 93       	st	-X, r24
    24f0:	12 97       	sbiw	r26, 0x02	; 2
    24f2:	e0 e0       	ldi	r30, 0x00	; 0
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	8a 81       	ldd	r24, Y+2	; 0x02
    24f8:	9b 81       	ldd	r25, Y+3	; 0x03
    24fa:	00 97       	sbiw	r24, 0x00	; 0
    24fc:	19 f0       	breq	.+6      	; 0x2504 <free+0xe4>
    24fe:	fe 01       	movw	r30, r28
    2500:	ec 01       	movw	r28, r24
    2502:	f9 cf       	rjmp	.-14     	; 0x24f6 <free+0xd6>
    2504:	ce 01       	movw	r24, r28
    2506:	02 96       	adiw	r24, 0x02	; 2
    2508:	28 81       	ld	r18, Y
    250a:	39 81       	ldd	r19, Y+1	; 0x01
    250c:	82 0f       	add	r24, r18
    250e:	93 1f       	adc	r25, r19
    2510:	20 91 24 02 	lds	r18, 0x0224
    2514:	30 91 25 02 	lds	r19, 0x0225
    2518:	28 17       	cp	r18, r24
    251a:	39 07       	cpc	r19, r25
    251c:	69 f4       	brne	.+26     	; 0x2538 <free+0x118>
    251e:	30 97       	sbiw	r30, 0x00	; 0
    2520:	29 f4       	brne	.+10     	; 0x252c <free+0x10c>
    2522:	10 92 27 02 	sts	0x0227, r1
    2526:	10 92 26 02 	sts	0x0226, r1
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <free+0x110>
    252c:	13 82       	std	Z+3, r1	; 0x03
    252e:	12 82       	std	Z+2, r1	; 0x02
    2530:	d0 93 25 02 	sts	0x0225, r29
    2534:	c0 93 24 02 	sts	0x0224, r28
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	08 95       	ret

0000253e <do_rand>:
    253e:	8f 92       	push	r8
    2540:	9f 92       	push	r9
    2542:	af 92       	push	r10
    2544:	bf 92       	push	r11
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	ec 01       	movw	r28, r24
    2554:	68 81       	ld	r22, Y
    2556:	79 81       	ldd	r23, Y+1	; 0x01
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	9b 81       	ldd	r25, Y+3	; 0x03
    255c:	61 15       	cp	r22, r1
    255e:	71 05       	cpc	r23, r1
    2560:	81 05       	cpc	r24, r1
    2562:	91 05       	cpc	r25, r1
    2564:	21 f4       	brne	.+8      	; 0x256e <do_rand+0x30>
    2566:	64 e2       	ldi	r22, 0x24	; 36
    2568:	79 ed       	ldi	r23, 0xD9	; 217
    256a:	8b e5       	ldi	r24, 0x5B	; 91
    256c:	97 e0       	ldi	r25, 0x07	; 7
    256e:	2d e1       	ldi	r18, 0x1D	; 29
    2570:	33 ef       	ldi	r19, 0xF3	; 243
    2572:	41 e0       	ldi	r20, 0x01	; 1
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	0e 94 23 11 	call	0x2246	; 0x2246 <__divmodsi4>
    257a:	49 01       	movw	r8, r18
    257c:	5a 01       	movw	r10, r20
    257e:	9b 01       	movw	r18, r22
    2580:	ac 01       	movw	r20, r24
    2582:	a7 ea       	ldi	r26, 0xA7	; 167
    2584:	b1 e4       	ldi	r27, 0x41	; 65
    2586:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__muluhisi3>
    258a:	6b 01       	movw	r12, r22
    258c:	7c 01       	movw	r14, r24
    258e:	ac ee       	ldi	r26, 0xEC	; 236
    2590:	b4 ef       	ldi	r27, 0xF4	; 244
    2592:	a5 01       	movw	r20, r10
    2594:	94 01       	movw	r18, r8
    2596:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <__mulohisi3>
    259a:	c6 0e       	add	r12, r22
    259c:	d7 1e       	adc	r13, r23
    259e:	e8 1e       	adc	r14, r24
    25a0:	f9 1e       	adc	r15, r25
    25a2:	f7 fe       	sbrs	r15, 7
    25a4:	06 c0       	rjmp	.+12     	; 0x25b2 <do_rand+0x74>
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	c8 1a       	sub	r12, r24
    25aa:	d1 08       	sbc	r13, r1
    25ac:	e1 08       	sbc	r14, r1
    25ae:	80 e8       	ldi	r24, 0x80	; 128
    25b0:	f8 0a       	sbc	r15, r24
    25b2:	c8 82       	st	Y, r12
    25b4:	d9 82       	std	Y+1, r13	; 0x01
    25b6:	ea 82       	std	Y+2, r14	; 0x02
    25b8:	fb 82       	std	Y+3, r15	; 0x03
    25ba:	c6 01       	movw	r24, r12
    25bc:	9f 77       	andi	r25, 0x7F	; 127
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	ff 90       	pop	r15
    25c4:	ef 90       	pop	r14
    25c6:	df 90       	pop	r13
    25c8:	cf 90       	pop	r12
    25ca:	bf 90       	pop	r11
    25cc:	af 90       	pop	r10
    25ce:	9f 90       	pop	r9
    25d0:	8f 90       	pop	r8
    25d2:	08 95       	ret

000025d4 <rand_r>:
    25d4:	0e 94 9f 12 	call	0x253e	; 0x253e <do_rand>
    25d8:	08 95       	ret

000025da <rand>:
    25da:	86 e0       	ldi	r24, 0x06	; 6
    25dc:	91 e0       	ldi	r25, 0x01	; 1
    25de:	0e 94 9f 12 	call	0x253e	; 0x253e <do_rand>
    25e2:	08 95       	ret

000025e4 <srand>:
    25e4:	a0 e0       	ldi	r26, 0x00	; 0
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	80 93 06 01 	sts	0x0106, r24
    25ec:	90 93 07 01 	sts	0x0107, r25
    25f0:	a0 93 08 01 	sts	0x0108, r26
    25f4:	b0 93 09 01 	sts	0x0109, r27
    25f8:	08 95       	ret

000025fa <fdevopen>:
    25fa:	0f 93       	push	r16
    25fc:	1f 93       	push	r17
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
    2602:	ec 01       	movw	r28, r24
    2604:	8b 01       	movw	r16, r22
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	31 f4       	brne	.+12     	; 0x2616 <fdevopen+0x1c>
    260a:	61 15       	cp	r22, r1
    260c:	71 05       	cpc	r23, r1
    260e:	19 f4       	brne	.+6      	; 0x2616 <fdevopen+0x1c>
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	38 c0       	rjmp	.+112    	; 0x2686 <fdevopen+0x8c>
    2616:	6e e0       	ldi	r22, 0x0E	; 14
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	81 e0       	ldi	r24, 0x01	; 1
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <calloc>
    2622:	fc 01       	movw	r30, r24
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	a1 f3       	breq	.-24     	; 0x2610 <fdevopen+0x16>
    2628:	80 e8       	ldi	r24, 0x80	; 128
    262a:	83 83       	std	Z+3, r24	; 0x03
    262c:	01 15       	cp	r16, r1
    262e:	11 05       	cpc	r17, r1
    2630:	71 f0       	breq	.+28     	; 0x264e <fdevopen+0x54>
    2632:	13 87       	std	Z+11, r17	; 0x0b
    2634:	02 87       	std	Z+10, r16	; 0x0a
    2636:	81 e8       	ldi	r24, 0x81	; 129
    2638:	83 83       	std	Z+3, r24	; 0x03
    263a:	80 91 28 02 	lds	r24, 0x0228
    263e:	90 91 29 02 	lds	r25, 0x0229
    2642:	89 2b       	or	r24, r25
    2644:	21 f4       	brne	.+8      	; 0x264e <fdevopen+0x54>
    2646:	f0 93 29 02 	sts	0x0229, r31
    264a:	e0 93 28 02 	sts	0x0228, r30
    264e:	20 97       	sbiw	r28, 0x00	; 0
    2650:	c9 f0       	breq	.+50     	; 0x2684 <fdevopen+0x8a>
    2652:	d1 87       	std	Z+9, r29	; 0x09
    2654:	c0 87       	std	Z+8, r28	; 0x08
    2656:	83 81       	ldd	r24, Z+3	; 0x03
    2658:	82 60       	ori	r24, 0x02	; 2
    265a:	83 83       	std	Z+3, r24	; 0x03
    265c:	80 91 2a 02 	lds	r24, 0x022A
    2660:	90 91 2b 02 	lds	r25, 0x022B
    2664:	89 2b       	or	r24, r25
    2666:	71 f4       	brne	.+28     	; 0x2684 <fdevopen+0x8a>
    2668:	f0 93 2b 02 	sts	0x022B, r31
    266c:	e0 93 2a 02 	sts	0x022A, r30
    2670:	80 91 2c 02 	lds	r24, 0x022C
    2674:	90 91 2d 02 	lds	r25, 0x022D
    2678:	89 2b       	or	r24, r25
    267a:	21 f4       	brne	.+8      	; 0x2684 <fdevopen+0x8a>
    267c:	f0 93 2d 02 	sts	0x022D, r31
    2680:	e0 93 2c 02 	sts	0x022C, r30
    2684:	cf 01       	movw	r24, r30
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	08 95       	ret

00002690 <printf>:
    2690:	a0 e0       	ldi	r26, 0x00	; 0
    2692:	b0 e0       	ldi	r27, 0x00	; 0
    2694:	ee e4       	ldi	r30, 0x4E	; 78
    2696:	f3 e1       	ldi	r31, 0x13	; 19
    2698:	0c 94 3c 16 	jmp	0x2c78	; 0x2c78 <__prologue_saves__+0x20>
    269c:	fe 01       	movw	r30, r28
    269e:	35 96       	adiw	r30, 0x05	; 5
    26a0:	61 91       	ld	r22, Z+
    26a2:	71 91       	ld	r23, Z+
    26a4:	af 01       	movw	r20, r30
    26a6:	80 91 2a 02 	lds	r24, 0x022A
    26aa:	90 91 2b 02 	lds	r25, 0x022B
    26ae:	0e 94 7e 13 	call	0x26fc	; 0x26fc <vfprintf>
    26b2:	e2 e0       	ldi	r30, 0x02	; 2
    26b4:	0c 94 58 16 	jmp	0x2cb0	; 0x2cb0 <__epilogue_restores__+0x20>

000026b8 <sprintf>:
    26b8:	ae e0       	ldi	r26, 0x0E	; 14
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	e2 e6       	ldi	r30, 0x62	; 98
    26be:	f3 e1       	ldi	r31, 0x13	; 19
    26c0:	0c 94 3a 16 	jmp	0x2c74	; 0x2c74 <__prologue_saves__+0x1c>
    26c4:	0d 89       	ldd	r16, Y+21	; 0x15
    26c6:	1e 89       	ldd	r17, Y+22	; 0x16
    26c8:	86 e0       	ldi	r24, 0x06	; 6
    26ca:	8c 83       	std	Y+4, r24	; 0x04
    26cc:	1a 83       	std	Y+2, r17	; 0x02
    26ce:	09 83       	std	Y+1, r16	; 0x01
    26d0:	8f ef       	ldi	r24, 0xFF	; 255
    26d2:	9f e7       	ldi	r25, 0x7F	; 127
    26d4:	9e 83       	std	Y+6, r25	; 0x06
    26d6:	8d 83       	std	Y+5, r24	; 0x05
    26d8:	ae 01       	movw	r20, r28
    26da:	47 5e       	subi	r20, 0xE7	; 231
    26dc:	5f 4f       	sbci	r21, 0xFF	; 255
    26de:	6f 89       	ldd	r22, Y+23	; 0x17
    26e0:	78 8d       	ldd	r23, Y+24	; 0x18
    26e2:	ce 01       	movw	r24, r28
    26e4:	01 96       	adiw	r24, 0x01	; 1
    26e6:	0e 94 7e 13 	call	0x26fc	; 0x26fc <vfprintf>
    26ea:	ef 81       	ldd	r30, Y+7	; 0x07
    26ec:	f8 85       	ldd	r31, Y+8	; 0x08
    26ee:	e0 0f       	add	r30, r16
    26f0:	f1 1f       	adc	r31, r17
    26f2:	10 82       	st	Z, r1
    26f4:	2e 96       	adiw	r28, 0x0e	; 14
    26f6:	e4 e0       	ldi	r30, 0x04	; 4
    26f8:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <__epilogue_restores__+0x1c>

000026fc <vfprintf>:
    26fc:	ac e0       	ldi	r26, 0x0C	; 12
    26fe:	b0 e0       	ldi	r27, 0x00	; 0
    2700:	e4 e8       	ldi	r30, 0x84	; 132
    2702:	f3 e1       	ldi	r31, 0x13	; 19
    2704:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <__prologue_saves__>
    2708:	7c 01       	movw	r14, r24
    270a:	6b 01       	movw	r12, r22
    270c:	8a 01       	movw	r16, r20
    270e:	fc 01       	movw	r30, r24
    2710:	17 82       	std	Z+7, r1	; 0x07
    2712:	16 82       	std	Z+6, r1	; 0x06
    2714:	83 81       	ldd	r24, Z+3	; 0x03
    2716:	81 ff       	sbrs	r24, 1
    2718:	bd c1       	rjmp	.+890    	; 0x2a94 <vfprintf+0x398>
    271a:	ce 01       	movw	r24, r28
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	4c 01       	movw	r8, r24
    2720:	f7 01       	movw	r30, r14
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	f6 01       	movw	r30, r12
    2726:	93 fd       	sbrc	r25, 3
    2728:	85 91       	lpm	r24, Z+
    272a:	93 ff       	sbrs	r25, 3
    272c:	81 91       	ld	r24, Z+
    272e:	6f 01       	movw	r12, r30
    2730:	88 23       	and	r24, r24
    2732:	09 f4       	brne	.+2      	; 0x2736 <vfprintf+0x3a>
    2734:	ab c1       	rjmp	.+854    	; 0x2a8c <vfprintf+0x390>
    2736:	85 32       	cpi	r24, 0x25	; 37
    2738:	39 f4       	brne	.+14     	; 0x2748 <vfprintf+0x4c>
    273a:	93 fd       	sbrc	r25, 3
    273c:	85 91       	lpm	r24, Z+
    273e:	93 ff       	sbrs	r25, 3
    2740:	81 91       	ld	r24, Z+
    2742:	6f 01       	movw	r12, r30
    2744:	85 32       	cpi	r24, 0x25	; 37
    2746:	29 f4       	brne	.+10     	; 0x2752 <vfprintf+0x56>
    2748:	b7 01       	movw	r22, r14
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    2750:	e7 cf       	rjmp	.-50     	; 0x2720 <vfprintf+0x24>
    2752:	51 2c       	mov	r5, r1
    2754:	31 2c       	mov	r3, r1
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	20 32       	cpi	r18, 0x20	; 32
    275a:	a0 f4       	brcc	.+40     	; 0x2784 <vfprintf+0x88>
    275c:	8b 32       	cpi	r24, 0x2B	; 43
    275e:	69 f0       	breq	.+26     	; 0x277a <vfprintf+0x7e>
    2760:	30 f4       	brcc	.+12     	; 0x276e <vfprintf+0x72>
    2762:	80 32       	cpi	r24, 0x20	; 32
    2764:	59 f0       	breq	.+22     	; 0x277c <vfprintf+0x80>
    2766:	83 32       	cpi	r24, 0x23	; 35
    2768:	69 f4       	brne	.+26     	; 0x2784 <vfprintf+0x88>
    276a:	20 61       	ori	r18, 0x10	; 16
    276c:	2c c0       	rjmp	.+88     	; 0x27c6 <vfprintf+0xca>
    276e:	8d 32       	cpi	r24, 0x2D	; 45
    2770:	39 f0       	breq	.+14     	; 0x2780 <vfprintf+0x84>
    2772:	80 33       	cpi	r24, 0x30	; 48
    2774:	39 f4       	brne	.+14     	; 0x2784 <vfprintf+0x88>
    2776:	21 60       	ori	r18, 0x01	; 1
    2778:	26 c0       	rjmp	.+76     	; 0x27c6 <vfprintf+0xca>
    277a:	22 60       	ori	r18, 0x02	; 2
    277c:	24 60       	ori	r18, 0x04	; 4
    277e:	23 c0       	rjmp	.+70     	; 0x27c6 <vfprintf+0xca>
    2780:	28 60       	ori	r18, 0x08	; 8
    2782:	21 c0       	rjmp	.+66     	; 0x27c6 <vfprintf+0xca>
    2784:	27 fd       	sbrc	r18, 7
    2786:	27 c0       	rjmp	.+78     	; 0x27d6 <vfprintf+0xda>
    2788:	30 ed       	ldi	r19, 0xD0	; 208
    278a:	38 0f       	add	r19, r24
    278c:	3a 30       	cpi	r19, 0x0A	; 10
    278e:	78 f4       	brcc	.+30     	; 0x27ae <vfprintf+0xb2>
    2790:	26 ff       	sbrs	r18, 6
    2792:	06 c0       	rjmp	.+12     	; 0x27a0 <vfprintf+0xa4>
    2794:	fa e0       	ldi	r31, 0x0A	; 10
    2796:	5f 9e       	mul	r5, r31
    2798:	30 0d       	add	r19, r0
    279a:	11 24       	eor	r1, r1
    279c:	53 2e       	mov	r5, r19
    279e:	13 c0       	rjmp	.+38     	; 0x27c6 <vfprintf+0xca>
    27a0:	8a e0       	ldi	r24, 0x0A	; 10
    27a2:	38 9e       	mul	r3, r24
    27a4:	30 0d       	add	r19, r0
    27a6:	11 24       	eor	r1, r1
    27a8:	33 2e       	mov	r3, r19
    27aa:	20 62       	ori	r18, 0x20	; 32
    27ac:	0c c0       	rjmp	.+24     	; 0x27c6 <vfprintf+0xca>
    27ae:	8e 32       	cpi	r24, 0x2E	; 46
    27b0:	21 f4       	brne	.+8      	; 0x27ba <vfprintf+0xbe>
    27b2:	26 fd       	sbrc	r18, 6
    27b4:	6b c1       	rjmp	.+726    	; 0x2a8c <vfprintf+0x390>
    27b6:	20 64       	ori	r18, 0x40	; 64
    27b8:	06 c0       	rjmp	.+12     	; 0x27c6 <vfprintf+0xca>
    27ba:	8c 36       	cpi	r24, 0x6C	; 108
    27bc:	11 f4       	brne	.+4      	; 0x27c2 <vfprintf+0xc6>
    27be:	20 68       	ori	r18, 0x80	; 128
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <vfprintf+0xca>
    27c2:	88 36       	cpi	r24, 0x68	; 104
    27c4:	41 f4       	brne	.+16     	; 0x27d6 <vfprintf+0xda>
    27c6:	f6 01       	movw	r30, r12
    27c8:	93 fd       	sbrc	r25, 3
    27ca:	85 91       	lpm	r24, Z+
    27cc:	93 ff       	sbrs	r25, 3
    27ce:	81 91       	ld	r24, Z+
    27d0:	6f 01       	movw	r12, r30
    27d2:	81 11       	cpse	r24, r1
    27d4:	c1 cf       	rjmp	.-126    	; 0x2758 <vfprintf+0x5c>
    27d6:	98 2f       	mov	r25, r24
    27d8:	9f 7d       	andi	r25, 0xDF	; 223
    27da:	95 54       	subi	r25, 0x45	; 69
    27dc:	93 30       	cpi	r25, 0x03	; 3
    27de:	28 f4       	brcc	.+10     	; 0x27ea <vfprintf+0xee>
    27e0:	0c 5f       	subi	r16, 0xFC	; 252
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	ff e3       	ldi	r31, 0x3F	; 63
    27e6:	f9 83       	std	Y+1, r31	; 0x01
    27e8:	0d c0       	rjmp	.+26     	; 0x2804 <vfprintf+0x108>
    27ea:	83 36       	cpi	r24, 0x63	; 99
    27ec:	31 f0       	breq	.+12     	; 0x27fa <vfprintf+0xfe>
    27ee:	83 37       	cpi	r24, 0x73	; 115
    27f0:	71 f0       	breq	.+28     	; 0x280e <vfprintf+0x112>
    27f2:	83 35       	cpi	r24, 0x53	; 83
    27f4:	09 f0       	breq	.+2      	; 0x27f8 <vfprintf+0xfc>
    27f6:	5b c0       	rjmp	.+182    	; 0x28ae <vfprintf+0x1b2>
    27f8:	22 c0       	rjmp	.+68     	; 0x283e <vfprintf+0x142>
    27fa:	f8 01       	movw	r30, r16
    27fc:	80 81       	ld	r24, Z
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	0e 5f       	subi	r16, 0xFE	; 254
    2802:	1f 4f       	sbci	r17, 0xFF	; 255
    2804:	44 24       	eor	r4, r4
    2806:	43 94       	inc	r4
    2808:	51 2c       	mov	r5, r1
    280a:	54 01       	movw	r10, r8
    280c:	15 c0       	rjmp	.+42     	; 0x2838 <vfprintf+0x13c>
    280e:	38 01       	movw	r6, r16
    2810:	f2 e0       	ldi	r31, 0x02	; 2
    2812:	6f 0e       	add	r6, r31
    2814:	71 1c       	adc	r7, r1
    2816:	f8 01       	movw	r30, r16
    2818:	a0 80       	ld	r10, Z
    281a:	b1 80       	ldd	r11, Z+1	; 0x01
    281c:	26 ff       	sbrs	r18, 6
    281e:	03 c0       	rjmp	.+6      	; 0x2826 <vfprintf+0x12a>
    2820:	65 2d       	mov	r22, r5
    2822:	70 e0       	ldi	r23, 0x00	; 0
    2824:	02 c0       	rjmp	.+4      	; 0x282a <vfprintf+0x12e>
    2826:	6f ef       	ldi	r22, 0xFF	; 255
    2828:	7f ef       	ldi	r23, 0xFF	; 255
    282a:	c5 01       	movw	r24, r10
    282c:	2c 87       	std	Y+12, r18	; 0x0c
    282e:	0e 94 7e 15 	call	0x2afc	; 0x2afc <strnlen>
    2832:	2c 01       	movw	r4, r24
    2834:	83 01       	movw	r16, r6
    2836:	2c 85       	ldd	r18, Y+12	; 0x0c
    2838:	2f 77       	andi	r18, 0x7F	; 127
    283a:	22 2e       	mov	r2, r18
    283c:	17 c0       	rjmp	.+46     	; 0x286c <vfprintf+0x170>
    283e:	38 01       	movw	r6, r16
    2840:	f2 e0       	ldi	r31, 0x02	; 2
    2842:	6f 0e       	add	r6, r31
    2844:	71 1c       	adc	r7, r1
    2846:	f8 01       	movw	r30, r16
    2848:	a0 80       	ld	r10, Z
    284a:	b1 80       	ldd	r11, Z+1	; 0x01
    284c:	26 ff       	sbrs	r18, 6
    284e:	03 c0       	rjmp	.+6      	; 0x2856 <vfprintf+0x15a>
    2850:	65 2d       	mov	r22, r5
    2852:	70 e0       	ldi	r23, 0x00	; 0
    2854:	02 c0       	rjmp	.+4      	; 0x285a <vfprintf+0x15e>
    2856:	6f ef       	ldi	r22, 0xFF	; 255
    2858:	7f ef       	ldi	r23, 0xFF	; 255
    285a:	c5 01       	movw	r24, r10
    285c:	2c 87       	std	Y+12, r18	; 0x0c
    285e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <strnlen_P>
    2862:	2c 01       	movw	r4, r24
    2864:	2c 85       	ldd	r18, Y+12	; 0x0c
    2866:	20 68       	ori	r18, 0x80	; 128
    2868:	22 2e       	mov	r2, r18
    286a:	83 01       	movw	r16, r6
    286c:	23 fc       	sbrc	r2, 3
    286e:	1b c0       	rjmp	.+54     	; 0x28a6 <vfprintf+0x1aa>
    2870:	83 2d       	mov	r24, r3
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	48 16       	cp	r4, r24
    2876:	59 06       	cpc	r5, r25
    2878:	b0 f4       	brcc	.+44     	; 0x28a6 <vfprintf+0x1aa>
    287a:	b7 01       	movw	r22, r14
    287c:	80 e2       	ldi	r24, 0x20	; 32
    287e:	90 e0       	ldi	r25, 0x00	; 0
    2880:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    2884:	3a 94       	dec	r3
    2886:	f4 cf       	rjmp	.-24     	; 0x2870 <vfprintf+0x174>
    2888:	f5 01       	movw	r30, r10
    288a:	27 fc       	sbrc	r2, 7
    288c:	85 91       	lpm	r24, Z+
    288e:	27 fe       	sbrs	r2, 7
    2890:	81 91       	ld	r24, Z+
    2892:	5f 01       	movw	r10, r30
    2894:	b7 01       	movw	r22, r14
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    289c:	31 10       	cpse	r3, r1
    289e:	3a 94       	dec	r3
    28a0:	f1 e0       	ldi	r31, 0x01	; 1
    28a2:	4f 1a       	sub	r4, r31
    28a4:	51 08       	sbc	r5, r1
    28a6:	41 14       	cp	r4, r1
    28a8:	51 04       	cpc	r5, r1
    28aa:	71 f7       	brne	.-36     	; 0x2888 <vfprintf+0x18c>
    28ac:	e5 c0       	rjmp	.+458    	; 0x2a78 <vfprintf+0x37c>
    28ae:	84 36       	cpi	r24, 0x64	; 100
    28b0:	11 f0       	breq	.+4      	; 0x28b6 <vfprintf+0x1ba>
    28b2:	89 36       	cpi	r24, 0x69	; 105
    28b4:	39 f5       	brne	.+78     	; 0x2904 <vfprintf+0x208>
    28b6:	f8 01       	movw	r30, r16
    28b8:	27 ff       	sbrs	r18, 7
    28ba:	07 c0       	rjmp	.+14     	; 0x28ca <vfprintf+0x1ce>
    28bc:	60 81       	ld	r22, Z
    28be:	71 81       	ldd	r23, Z+1	; 0x01
    28c0:	82 81       	ldd	r24, Z+2	; 0x02
    28c2:	93 81       	ldd	r25, Z+3	; 0x03
    28c4:	0c 5f       	subi	r16, 0xFC	; 252
    28c6:	1f 4f       	sbci	r17, 0xFF	; 255
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <vfprintf+0x1de>
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	88 27       	eor	r24, r24
    28d0:	77 fd       	sbrc	r23, 7
    28d2:	80 95       	com	r24
    28d4:	98 2f       	mov	r25, r24
    28d6:	0e 5f       	subi	r16, 0xFE	; 254
    28d8:	1f 4f       	sbci	r17, 0xFF	; 255
    28da:	2f 76       	andi	r18, 0x6F	; 111
    28dc:	b2 2e       	mov	r11, r18
    28de:	97 ff       	sbrs	r25, 7
    28e0:	09 c0       	rjmp	.+18     	; 0x28f4 <vfprintf+0x1f8>
    28e2:	90 95       	com	r25
    28e4:	80 95       	com	r24
    28e6:	70 95       	com	r23
    28e8:	61 95       	neg	r22
    28ea:	7f 4f       	sbci	r23, 0xFF	; 255
    28ec:	8f 4f       	sbci	r24, 0xFF	; 255
    28ee:	9f 4f       	sbci	r25, 0xFF	; 255
    28f0:	20 68       	ori	r18, 0x80	; 128
    28f2:	b2 2e       	mov	r11, r18
    28f4:	2a e0       	ldi	r18, 0x0A	; 10
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	a4 01       	movw	r20, r8
    28fa:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__ultoa_invert>
    28fe:	a8 2e       	mov	r10, r24
    2900:	a8 18       	sub	r10, r8
    2902:	44 c0       	rjmp	.+136    	; 0x298c <vfprintf+0x290>
    2904:	85 37       	cpi	r24, 0x75	; 117
    2906:	29 f4       	brne	.+10     	; 0x2912 <vfprintf+0x216>
    2908:	2f 7e       	andi	r18, 0xEF	; 239
    290a:	b2 2e       	mov	r11, r18
    290c:	2a e0       	ldi	r18, 0x0A	; 10
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	25 c0       	rjmp	.+74     	; 0x295c <vfprintf+0x260>
    2912:	f2 2f       	mov	r31, r18
    2914:	f9 7f       	andi	r31, 0xF9	; 249
    2916:	bf 2e       	mov	r11, r31
    2918:	8f 36       	cpi	r24, 0x6F	; 111
    291a:	c1 f0       	breq	.+48     	; 0x294c <vfprintf+0x250>
    291c:	18 f4       	brcc	.+6      	; 0x2924 <vfprintf+0x228>
    291e:	88 35       	cpi	r24, 0x58	; 88
    2920:	79 f0       	breq	.+30     	; 0x2940 <vfprintf+0x244>
    2922:	b4 c0       	rjmp	.+360    	; 0x2a8c <vfprintf+0x390>
    2924:	80 37       	cpi	r24, 0x70	; 112
    2926:	19 f0       	breq	.+6      	; 0x292e <vfprintf+0x232>
    2928:	88 37       	cpi	r24, 0x78	; 120
    292a:	21 f0       	breq	.+8      	; 0x2934 <vfprintf+0x238>
    292c:	af c0       	rjmp	.+350    	; 0x2a8c <vfprintf+0x390>
    292e:	2f 2f       	mov	r18, r31
    2930:	20 61       	ori	r18, 0x10	; 16
    2932:	b2 2e       	mov	r11, r18
    2934:	b4 fe       	sbrs	r11, 4
    2936:	0d c0       	rjmp	.+26     	; 0x2952 <vfprintf+0x256>
    2938:	8b 2d       	mov	r24, r11
    293a:	84 60       	ori	r24, 0x04	; 4
    293c:	b8 2e       	mov	r11, r24
    293e:	09 c0       	rjmp	.+18     	; 0x2952 <vfprintf+0x256>
    2940:	24 ff       	sbrs	r18, 4
    2942:	0a c0       	rjmp	.+20     	; 0x2958 <vfprintf+0x25c>
    2944:	9f 2f       	mov	r25, r31
    2946:	96 60       	ori	r25, 0x06	; 6
    2948:	b9 2e       	mov	r11, r25
    294a:	06 c0       	rjmp	.+12     	; 0x2958 <vfprintf+0x25c>
    294c:	28 e0       	ldi	r18, 0x08	; 8
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	05 c0       	rjmp	.+10     	; 0x295c <vfprintf+0x260>
    2952:	20 e1       	ldi	r18, 0x10	; 16
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	02 c0       	rjmp	.+4      	; 0x295c <vfprintf+0x260>
    2958:	20 e1       	ldi	r18, 0x10	; 16
    295a:	32 e0       	ldi	r19, 0x02	; 2
    295c:	f8 01       	movw	r30, r16
    295e:	b7 fe       	sbrs	r11, 7
    2960:	07 c0       	rjmp	.+14     	; 0x2970 <vfprintf+0x274>
    2962:	60 81       	ld	r22, Z
    2964:	71 81       	ldd	r23, Z+1	; 0x01
    2966:	82 81       	ldd	r24, Z+2	; 0x02
    2968:	93 81       	ldd	r25, Z+3	; 0x03
    296a:	0c 5f       	subi	r16, 0xFC	; 252
    296c:	1f 4f       	sbci	r17, 0xFF	; 255
    296e:	06 c0       	rjmp	.+12     	; 0x297c <vfprintf+0x280>
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 5f       	subi	r16, 0xFE	; 254
    297a:	1f 4f       	sbci	r17, 0xFF	; 255
    297c:	a4 01       	movw	r20, r8
    297e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <__ultoa_invert>
    2982:	a8 2e       	mov	r10, r24
    2984:	a8 18       	sub	r10, r8
    2986:	fb 2d       	mov	r31, r11
    2988:	ff 77       	andi	r31, 0x7F	; 127
    298a:	bf 2e       	mov	r11, r31
    298c:	b6 fe       	sbrs	r11, 6
    298e:	0b c0       	rjmp	.+22     	; 0x29a6 <vfprintf+0x2aa>
    2990:	2b 2d       	mov	r18, r11
    2992:	2e 7f       	andi	r18, 0xFE	; 254
    2994:	a5 14       	cp	r10, r5
    2996:	50 f4       	brcc	.+20     	; 0x29ac <vfprintf+0x2b0>
    2998:	b4 fe       	sbrs	r11, 4
    299a:	0a c0       	rjmp	.+20     	; 0x29b0 <vfprintf+0x2b4>
    299c:	b2 fc       	sbrc	r11, 2
    299e:	08 c0       	rjmp	.+16     	; 0x29b0 <vfprintf+0x2b4>
    29a0:	2b 2d       	mov	r18, r11
    29a2:	2e 7e       	andi	r18, 0xEE	; 238
    29a4:	05 c0       	rjmp	.+10     	; 0x29b0 <vfprintf+0x2b4>
    29a6:	7a 2c       	mov	r7, r10
    29a8:	2b 2d       	mov	r18, r11
    29aa:	03 c0       	rjmp	.+6      	; 0x29b2 <vfprintf+0x2b6>
    29ac:	7a 2c       	mov	r7, r10
    29ae:	01 c0       	rjmp	.+2      	; 0x29b2 <vfprintf+0x2b6>
    29b0:	75 2c       	mov	r7, r5
    29b2:	24 ff       	sbrs	r18, 4
    29b4:	0d c0       	rjmp	.+26     	; 0x29d0 <vfprintf+0x2d4>
    29b6:	fe 01       	movw	r30, r28
    29b8:	ea 0d       	add	r30, r10
    29ba:	f1 1d       	adc	r31, r1
    29bc:	80 81       	ld	r24, Z
    29be:	80 33       	cpi	r24, 0x30	; 48
    29c0:	11 f4       	brne	.+4      	; 0x29c6 <vfprintf+0x2ca>
    29c2:	29 7e       	andi	r18, 0xE9	; 233
    29c4:	09 c0       	rjmp	.+18     	; 0x29d8 <vfprintf+0x2dc>
    29c6:	22 ff       	sbrs	r18, 2
    29c8:	06 c0       	rjmp	.+12     	; 0x29d6 <vfprintf+0x2da>
    29ca:	73 94       	inc	r7
    29cc:	73 94       	inc	r7
    29ce:	04 c0       	rjmp	.+8      	; 0x29d8 <vfprintf+0x2dc>
    29d0:	82 2f       	mov	r24, r18
    29d2:	86 78       	andi	r24, 0x86	; 134
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <vfprintf+0x2dc>
    29d6:	73 94       	inc	r7
    29d8:	23 fd       	sbrc	r18, 3
    29da:	13 c0       	rjmp	.+38     	; 0x2a02 <vfprintf+0x306>
    29dc:	20 ff       	sbrs	r18, 0
    29de:	06 c0       	rjmp	.+12     	; 0x29ec <vfprintf+0x2f0>
    29e0:	5a 2c       	mov	r5, r10
    29e2:	73 14       	cp	r7, r3
    29e4:	18 f4       	brcc	.+6      	; 0x29ec <vfprintf+0x2f0>
    29e6:	53 0c       	add	r5, r3
    29e8:	57 18       	sub	r5, r7
    29ea:	73 2c       	mov	r7, r3
    29ec:	73 14       	cp	r7, r3
    29ee:	68 f4       	brcc	.+26     	; 0x2a0a <vfprintf+0x30e>
    29f0:	b7 01       	movw	r22, r14
    29f2:	80 e2       	ldi	r24, 0x20	; 32
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	2c 87       	std	Y+12, r18	; 0x0c
    29f8:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    29fc:	73 94       	inc	r7
    29fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a00:	f5 cf       	rjmp	.-22     	; 0x29ec <vfprintf+0x2f0>
    2a02:	73 14       	cp	r7, r3
    2a04:	10 f4       	brcc	.+4      	; 0x2a0a <vfprintf+0x30e>
    2a06:	37 18       	sub	r3, r7
    2a08:	01 c0       	rjmp	.+2      	; 0x2a0c <vfprintf+0x310>
    2a0a:	31 2c       	mov	r3, r1
    2a0c:	24 ff       	sbrs	r18, 4
    2a0e:	12 c0       	rjmp	.+36     	; 0x2a34 <vfprintf+0x338>
    2a10:	b7 01       	movw	r22, r14
    2a12:	80 e3       	ldi	r24, 0x30	; 48
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	2c 87       	std	Y+12, r18	; 0x0c
    2a18:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    2a1c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a1e:	22 ff       	sbrs	r18, 2
    2a20:	17 c0       	rjmp	.+46     	; 0x2a50 <vfprintf+0x354>
    2a22:	21 ff       	sbrs	r18, 1
    2a24:	03 c0       	rjmp	.+6      	; 0x2a2c <vfprintf+0x330>
    2a26:	88 e5       	ldi	r24, 0x58	; 88
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	02 c0       	rjmp	.+4      	; 0x2a30 <vfprintf+0x334>
    2a2c:	88 e7       	ldi	r24, 0x78	; 120
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	b7 01       	movw	r22, r14
    2a32:	0c c0       	rjmp	.+24     	; 0x2a4c <vfprintf+0x350>
    2a34:	82 2f       	mov	r24, r18
    2a36:	86 78       	andi	r24, 0x86	; 134
    2a38:	59 f0       	breq	.+22     	; 0x2a50 <vfprintf+0x354>
    2a3a:	21 fd       	sbrc	r18, 1
    2a3c:	02 c0       	rjmp	.+4      	; 0x2a42 <vfprintf+0x346>
    2a3e:	80 e2       	ldi	r24, 0x20	; 32
    2a40:	01 c0       	rjmp	.+2      	; 0x2a44 <vfprintf+0x348>
    2a42:	8b e2       	ldi	r24, 0x2B	; 43
    2a44:	27 fd       	sbrc	r18, 7
    2a46:	8d e2       	ldi	r24, 0x2D	; 45
    2a48:	b7 01       	movw	r22, r14
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    2a50:	a5 14       	cp	r10, r5
    2a52:	38 f4       	brcc	.+14     	; 0x2a62 <vfprintf+0x366>
    2a54:	b7 01       	movw	r22, r14
    2a56:	80 e3       	ldi	r24, 0x30	; 48
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    2a5e:	5a 94       	dec	r5
    2a60:	f7 cf       	rjmp	.-18     	; 0x2a50 <vfprintf+0x354>
    2a62:	aa 94       	dec	r10
    2a64:	f4 01       	movw	r30, r8
    2a66:	ea 0d       	add	r30, r10
    2a68:	f1 1d       	adc	r31, r1
    2a6a:	80 81       	ld	r24, Z
    2a6c:	b7 01       	movw	r22, r14
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    2a74:	a1 10       	cpse	r10, r1
    2a76:	f5 cf       	rjmp	.-22     	; 0x2a62 <vfprintf+0x366>
    2a78:	33 20       	and	r3, r3
    2a7a:	09 f4       	brne	.+2      	; 0x2a7e <vfprintf+0x382>
    2a7c:	51 ce       	rjmp	.-862    	; 0x2720 <vfprintf+0x24>
    2a7e:	b7 01       	movw	r22, r14
    2a80:	80 e2       	ldi	r24, 0x20	; 32
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	0e 94 89 15 	call	0x2b12	; 0x2b12 <fputc>
    2a88:	3a 94       	dec	r3
    2a8a:	f6 cf       	rjmp	.-20     	; 0x2a78 <vfprintf+0x37c>
    2a8c:	f7 01       	movw	r30, r14
    2a8e:	86 81       	ldd	r24, Z+6	; 0x06
    2a90:	97 81       	ldd	r25, Z+7	; 0x07
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <vfprintf+0x39c>
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	9f ef       	ldi	r25, 0xFF	; 255
    2a98:	2c 96       	adiw	r28, 0x0c	; 12
    2a9a:	e2 e1       	ldi	r30, 0x12	; 18
    2a9c:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <__epilogue_restores__>

00002aa0 <calloc>:
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	86 9f       	mul	r24, r22
    2aaa:	80 01       	movw	r16, r0
    2aac:	87 9f       	mul	r24, r23
    2aae:	10 0d       	add	r17, r0
    2ab0:	96 9f       	mul	r25, r22
    2ab2:	10 0d       	add	r17, r0
    2ab4:	11 24       	eor	r1, r1
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <malloc>
    2abc:	ec 01       	movw	r28, r24
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	29 f0       	breq	.+10     	; 0x2acc <calloc+0x2c>
    2ac2:	a8 01       	movw	r20, r16
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	70 e0       	ldi	r23, 0x00	; 0
    2ac8:	0e 94 77 15 	call	0x2aee	; 0x2aee <memset>
    2acc:	ce 01       	movw	r24, r28
    2ace:	df 91       	pop	r29
    2ad0:	cf 91       	pop	r28
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	08 95       	ret

00002ad8 <strnlen_P>:
    2ad8:	fc 01       	movw	r30, r24
    2ada:	05 90       	lpm	r0, Z+
    2adc:	61 50       	subi	r22, 0x01	; 1
    2ade:	70 40       	sbci	r23, 0x00	; 0
    2ae0:	01 10       	cpse	r0, r1
    2ae2:	d8 f7       	brcc	.-10     	; 0x2ada <strnlen_P+0x2>
    2ae4:	80 95       	com	r24
    2ae6:	90 95       	com	r25
    2ae8:	8e 0f       	add	r24, r30
    2aea:	9f 1f       	adc	r25, r31
    2aec:	08 95       	ret

00002aee <memset>:
    2aee:	dc 01       	movw	r26, r24
    2af0:	01 c0       	rjmp	.+2      	; 0x2af4 <memset+0x6>
    2af2:	6d 93       	st	X+, r22
    2af4:	41 50       	subi	r20, 0x01	; 1
    2af6:	50 40       	sbci	r21, 0x00	; 0
    2af8:	e0 f7       	brcc	.-8      	; 0x2af2 <memset+0x4>
    2afa:	08 95       	ret

00002afc <strnlen>:
    2afc:	fc 01       	movw	r30, r24
    2afe:	61 50       	subi	r22, 0x01	; 1
    2b00:	70 40       	sbci	r23, 0x00	; 0
    2b02:	01 90       	ld	r0, Z+
    2b04:	01 10       	cpse	r0, r1
    2b06:	d8 f7       	brcc	.-10     	; 0x2afe <strnlen+0x2>
    2b08:	80 95       	com	r24
    2b0a:	90 95       	com	r25
    2b0c:	8e 0f       	add	r24, r30
    2b0e:	9f 1f       	adc	r25, r31
    2b10:	08 95       	ret

00002b12 <fputc>:
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	18 2f       	mov	r17, r24
    2b1c:	09 2f       	mov	r16, r25
    2b1e:	eb 01       	movw	r28, r22
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	81 fd       	sbrc	r24, 1
    2b24:	03 c0       	rjmp	.+6      	; 0x2b2c <fputc+0x1a>
    2b26:	8f ef       	ldi	r24, 0xFF	; 255
    2b28:	9f ef       	ldi	r25, 0xFF	; 255
    2b2a:	20 c0       	rjmp	.+64     	; 0x2b6c <fputc+0x5a>
    2b2c:	82 ff       	sbrs	r24, 2
    2b2e:	10 c0       	rjmp	.+32     	; 0x2b50 <fputc+0x3e>
    2b30:	4e 81       	ldd	r20, Y+6	; 0x06
    2b32:	5f 81       	ldd	r21, Y+7	; 0x07
    2b34:	2c 81       	ldd	r18, Y+4	; 0x04
    2b36:	3d 81       	ldd	r19, Y+5	; 0x05
    2b38:	42 17       	cp	r20, r18
    2b3a:	53 07       	cpc	r21, r19
    2b3c:	7c f4       	brge	.+30     	; 0x2b5c <fputc+0x4a>
    2b3e:	e8 81       	ld	r30, Y
    2b40:	f9 81       	ldd	r31, Y+1	; 0x01
    2b42:	9f 01       	movw	r18, r30
    2b44:	2f 5f       	subi	r18, 0xFF	; 255
    2b46:	3f 4f       	sbci	r19, 0xFF	; 255
    2b48:	39 83       	std	Y+1, r19	; 0x01
    2b4a:	28 83       	st	Y, r18
    2b4c:	10 83       	st	Z, r17
    2b4e:	06 c0       	rjmp	.+12     	; 0x2b5c <fputc+0x4a>
    2b50:	e8 85       	ldd	r30, Y+8	; 0x08
    2b52:	f9 85       	ldd	r31, Y+9	; 0x09
    2b54:	81 2f       	mov	r24, r17
    2b56:	09 95       	icall
    2b58:	89 2b       	or	r24, r25
    2b5a:	29 f7       	brne	.-54     	; 0x2b26 <fputc+0x14>
    2b5c:	2e 81       	ldd	r18, Y+6	; 0x06
    2b5e:	3f 81       	ldd	r19, Y+7	; 0x07
    2b60:	2f 5f       	subi	r18, 0xFF	; 255
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	3f 83       	std	Y+7, r19	; 0x07
    2b66:	2e 83       	std	Y+6, r18	; 0x06
    2b68:	81 2f       	mov	r24, r17
    2b6a:	90 2f       	mov	r25, r16
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	0f 91       	pop	r16
    2b74:	08 95       	ret

00002b76 <__ultoa_invert>:
    2b76:	fa 01       	movw	r30, r20
    2b78:	aa 27       	eor	r26, r26
    2b7a:	28 30       	cpi	r18, 0x08	; 8
    2b7c:	51 f1       	breq	.+84     	; 0x2bd2 <__ultoa_invert+0x5c>
    2b7e:	20 31       	cpi	r18, 0x10	; 16
    2b80:	81 f1       	breq	.+96     	; 0x2be2 <__ultoa_invert+0x6c>
    2b82:	e8 94       	clt
    2b84:	6f 93       	push	r22
    2b86:	6e 7f       	andi	r22, 0xFE	; 254
    2b88:	6e 5f       	subi	r22, 0xFE	; 254
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2b90:	af 4f       	sbci	r26, 0xFF	; 255
    2b92:	b1 e0       	ldi	r27, 0x01	; 1
    2b94:	3e d0       	rcall	.+124    	; 0x2c12 <__ultoa_invert+0x9c>
    2b96:	b4 e0       	ldi	r27, 0x04	; 4
    2b98:	3c d0       	rcall	.+120    	; 0x2c12 <__ultoa_invert+0x9c>
    2b9a:	67 0f       	add	r22, r23
    2b9c:	78 1f       	adc	r23, r24
    2b9e:	89 1f       	adc	r24, r25
    2ba0:	9a 1f       	adc	r25, r26
    2ba2:	a1 1d       	adc	r26, r1
    2ba4:	68 0f       	add	r22, r24
    2ba6:	79 1f       	adc	r23, r25
    2ba8:	8a 1f       	adc	r24, r26
    2baa:	91 1d       	adc	r25, r1
    2bac:	a1 1d       	adc	r26, r1
    2bae:	6a 0f       	add	r22, r26
    2bb0:	71 1d       	adc	r23, r1
    2bb2:	81 1d       	adc	r24, r1
    2bb4:	91 1d       	adc	r25, r1
    2bb6:	a1 1d       	adc	r26, r1
    2bb8:	20 d0       	rcall	.+64     	; 0x2bfa <__ultoa_invert+0x84>
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <__ultoa_invert+0x48>
    2bbc:	68 94       	set
    2bbe:	3f 91       	pop	r19
    2bc0:	2a e0       	ldi	r18, 0x0A	; 10
    2bc2:	26 9f       	mul	r18, r22
    2bc4:	11 24       	eor	r1, r1
    2bc6:	30 19       	sub	r19, r0
    2bc8:	30 5d       	subi	r19, 0xD0	; 208
    2bca:	31 93       	st	Z+, r19
    2bcc:	de f6       	brtc	.-74     	; 0x2b84 <__ultoa_invert+0xe>
    2bce:	cf 01       	movw	r24, r30
    2bd0:	08 95       	ret
    2bd2:	46 2f       	mov	r20, r22
    2bd4:	47 70       	andi	r20, 0x07	; 7
    2bd6:	40 5d       	subi	r20, 0xD0	; 208
    2bd8:	41 93       	st	Z+, r20
    2bda:	b3 e0       	ldi	r27, 0x03	; 3
    2bdc:	0f d0       	rcall	.+30     	; 0x2bfc <__ultoa_invert+0x86>
    2bde:	c9 f7       	brne	.-14     	; 0x2bd2 <__ultoa_invert+0x5c>
    2be0:	f6 cf       	rjmp	.-20     	; 0x2bce <__ultoa_invert+0x58>
    2be2:	46 2f       	mov	r20, r22
    2be4:	4f 70       	andi	r20, 0x0F	; 15
    2be6:	40 5d       	subi	r20, 0xD0	; 208
    2be8:	4a 33       	cpi	r20, 0x3A	; 58
    2bea:	18 f0       	brcs	.+6      	; 0x2bf2 <__ultoa_invert+0x7c>
    2bec:	49 5d       	subi	r20, 0xD9	; 217
    2bee:	31 fd       	sbrc	r19, 1
    2bf0:	40 52       	subi	r20, 0x20	; 32
    2bf2:	41 93       	st	Z+, r20
    2bf4:	02 d0       	rcall	.+4      	; 0x2bfa <__ultoa_invert+0x84>
    2bf6:	a9 f7       	brne	.-22     	; 0x2be2 <__ultoa_invert+0x6c>
    2bf8:	ea cf       	rjmp	.-44     	; 0x2bce <__ultoa_invert+0x58>
    2bfa:	b4 e0       	ldi	r27, 0x04	; 4
    2bfc:	a6 95       	lsr	r26
    2bfe:	97 95       	ror	r25
    2c00:	87 95       	ror	r24
    2c02:	77 95       	ror	r23
    2c04:	67 95       	ror	r22
    2c06:	ba 95       	dec	r27
    2c08:	c9 f7       	brne	.-14     	; 0x2bfc <__ultoa_invert+0x86>
    2c0a:	00 97       	sbiw	r24, 0x00	; 0
    2c0c:	61 05       	cpc	r22, r1
    2c0e:	71 05       	cpc	r23, r1
    2c10:	08 95       	ret
    2c12:	9b 01       	movw	r18, r22
    2c14:	ac 01       	movw	r20, r24
    2c16:	0a 2e       	mov	r0, r26
    2c18:	06 94       	lsr	r0
    2c1a:	57 95       	ror	r21
    2c1c:	47 95       	ror	r20
    2c1e:	37 95       	ror	r19
    2c20:	27 95       	ror	r18
    2c22:	ba 95       	dec	r27
    2c24:	c9 f7       	brne	.-14     	; 0x2c18 <__ultoa_invert+0xa2>
    2c26:	62 0f       	add	r22, r18
    2c28:	73 1f       	adc	r23, r19
    2c2a:	84 1f       	adc	r24, r20
    2c2c:	95 1f       	adc	r25, r21
    2c2e:	a0 1d       	adc	r26, r0
    2c30:	08 95       	ret

00002c32 <__muluhisi3>:
    2c32:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <__umulhisi3>
    2c36:	a5 9f       	mul	r26, r21
    2c38:	90 0d       	add	r25, r0
    2c3a:	b4 9f       	mul	r27, r20
    2c3c:	90 0d       	add	r25, r0
    2c3e:	a4 9f       	mul	r26, r20
    2c40:	80 0d       	add	r24, r0
    2c42:	91 1d       	adc	r25, r1
    2c44:	11 24       	eor	r1, r1
    2c46:	08 95       	ret

00002c48 <__mulshisi3>:
    2c48:	b7 ff       	sbrs	r27, 7
    2c4a:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__muluhisi3>

00002c4e <__mulohisi3>:
    2c4e:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__muluhisi3>
    2c52:	82 1b       	sub	r24, r18
    2c54:	93 0b       	sbc	r25, r19
    2c56:	08 95       	ret

00002c58 <__prologue_saves__>:
    2c58:	2f 92       	push	r2
    2c5a:	3f 92       	push	r3
    2c5c:	4f 92       	push	r4
    2c5e:	5f 92       	push	r5
    2c60:	6f 92       	push	r6
    2c62:	7f 92       	push	r7
    2c64:	8f 92       	push	r8
    2c66:	9f 92       	push	r9
    2c68:	af 92       	push	r10
    2c6a:	bf 92       	push	r11
    2c6c:	cf 92       	push	r12
    2c6e:	df 92       	push	r13
    2c70:	ef 92       	push	r14
    2c72:	ff 92       	push	r15
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	cf 93       	push	r28
    2c7a:	df 93       	push	r29
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
    2c80:	ca 1b       	sub	r28, r26
    2c82:	db 0b       	sbc	r29, r27
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	09 94       	ijmp

00002c90 <__epilogue_restores__>:
    2c90:	2a 88       	ldd	r2, Y+18	; 0x12
    2c92:	39 88       	ldd	r3, Y+17	; 0x11
    2c94:	48 88       	ldd	r4, Y+16	; 0x10
    2c96:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c98:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c9a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c9c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c9e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ca0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ca2:	b9 84       	ldd	r11, Y+9	; 0x09
    2ca4:	c8 84       	ldd	r12, Y+8	; 0x08
    2ca6:	df 80       	ldd	r13, Y+7	; 0x07
    2ca8:	ee 80       	ldd	r14, Y+6	; 0x06
    2caa:	fd 80       	ldd	r15, Y+5	; 0x05
    2cac:	0c 81       	ldd	r16, Y+4	; 0x04
    2cae:	1b 81       	ldd	r17, Y+3	; 0x03
    2cb0:	aa 81       	ldd	r26, Y+2	; 0x02
    2cb2:	b9 81       	ldd	r27, Y+1	; 0x01
    2cb4:	ce 0f       	add	r28, r30
    2cb6:	d1 1d       	adc	r29, r1
    2cb8:	0f b6       	in	r0, 0x3f	; 63
    2cba:	f8 94       	cli
    2cbc:	de bf       	out	0x3e, r29	; 62
    2cbe:	0f be       	out	0x3f, r0	; 63
    2cc0:	cd bf       	out	0x3d, r28	; 61
    2cc2:	ed 01       	movw	r28, r26
    2cc4:	08 95       	ret

00002cc6 <__umulhisi3>:
    2cc6:	a2 9f       	mul	r26, r18
    2cc8:	b0 01       	movw	r22, r0
    2cca:	b3 9f       	mul	r27, r19
    2ccc:	c0 01       	movw	r24, r0
    2cce:	a3 9f       	mul	r26, r19
    2cd0:	70 0d       	add	r23, r0
    2cd2:	81 1d       	adc	r24, r1
    2cd4:	11 24       	eor	r1, r1
    2cd6:	91 1d       	adc	r25, r1
    2cd8:	b2 9f       	mul	r27, r18
    2cda:	70 0d       	add	r23, r0
    2cdc:	81 1d       	adc	r24, r1
    2cde:	11 24       	eor	r1, r1
    2ce0:	91 1d       	adc	r25, r1
    2ce2:	08 95       	ret

00002ce4 <_exit>:
    2ce4:	f8 94       	cli

00002ce6 <__stop_program>:
    2ce6:	ff cf       	rjmp	.-2      	; 0x2ce6 <__stop_program>
