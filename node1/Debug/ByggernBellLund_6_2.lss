
ByggernBellLund_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  000031d8  0000326c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080024a  0080024a  000033b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000033b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000468  00000000  00000000  00003412  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000501f  00000000  00000000  0000387a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001d10  00000000  00000000  00008899  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e53  00000000  00000000  0000a5a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e40  00000000  00000000  0000c3fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b93  00000000  00000000  0000d23c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000399f  00000000  00000000  0000ddcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004b8  00000000  00000000  0001176e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 3c 02 	jmp	0x478	; 0x478 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 36 09 	jmp	0x126c	; 0x126c <__vector_14>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <play_pingpong+0x78>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 ed       	ldi	r30, 0xD8	; 216
     37c:	f1 e3       	ldi	r31, 0x31	; 49
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 34       	cpi	r26, 0x4A	; 74
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e4       	ldi	r26, 0x4A	; 74
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 35       	cpi	r26, 0x56	; 86
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <main>
     39e:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <EEPROM_read>:

// The Atmega 162 contains a 512 bytes EEPROM space.

uint8_t EEPROM_read(unsigned int address){
	//Wait for compleated preveouse write
	while(EECR & (1<<EEWE));
     3a6:	e1 99       	sbic	0x1c, 1	; 28
     3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <EEPROM_read>
	
	//Set write address
	EEAR = address;
     3aa:	9f bb       	out	0x1f, r25	; 31
     3ac:	8e bb       	out	0x1e, r24	; 30
	
	//Start read
	EECR |= (1<<EERE);
     3ae:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     3b0:	8d b3       	in	r24, 0x1d	; 29
}
     3b2:	08 95       	ret

000003b4 <EEPROM_write>:

void EEPROM_write(unsigned int address, uint8_t data){
	//Disable interrupt to make sure write is performed
	cli();
     3b4:	f8 94       	cli
	
	//Wait for compleated preveouse write
	while(EECR & (1<<EEWE));
     3b6:	e1 99       	sbic	0x1c, 1	; 28
     3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <EEPROM_write+0x2>
	
	//Set write address
	EEAR = address;
     3ba:	9f bb       	out	0x1f, r25	; 31
     3bc:	8e bb       	out	0x1e, r24	; 30
	
	//Save data to EEPROM Data Register
	EEDR = data;
     3be:	6d bb       	out	0x1d, r22	; 29
	
	//Set EEMWE to 1 to enable write (set EEWE within four clock cycles to write)
	EECR |= (1<<EEMWE);
     3c0:	e2 9a       	sbi	0x1c, 2	; 28
	
	//Start EEPROM write
	EECR |= (1<<EEWE);
     3c2:	e1 9a       	sbi	0x1c, 1	; 28
	
	//Enable interrupt
	sei();
     3c4:	78 94       	sei
     3c6:	08 95       	ret

000003c8 <init_handler>:
volatile int handelingMessage = 0;


void init_handler(){
	// Set pin as input (PD3 = INT1)
	DDRD &= ~(1 << PD3);
     3c8:	8b 98       	cbi	0x11, 3	; 17
	// Set internal pull-up
	PORTD |= (1 << PD3);
     3ca:	93 9a       	sbi	0x12, 3	; 18
	
	//initialize external interrupt on falling edge
	MCUCR |= (1<<ISC11);
     3cc:	85 b7       	in	r24, 0x35	; 53
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     3d2:	85 b7       	in	r24, 0x35	; 53
     3d4:	8b 7f       	andi	r24, 0xFB	; 251
     3d6:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
     3d8:	80 e8       	ldi	r24, 0x80	; 128
     3da:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     3dc:	78 94       	sei
     3de:	08 95       	ret

000003e0 <send_controlls>:
		default:
			break;
	}
}

void send_controlls(){
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	2a 97       	sbiw	r28, 0x0a	; 10
     3ea:	0f b6       	in	r0, 0x3f	; 63
     3ec:	f8 94       	cli
     3ee:	de bf       	out	0x3e, r29	; 62
     3f0:	0f be       	out	0x3f, r0	; 63
     3f2:	cd bf       	out	0x3d, r28	; 61
	Message m;
	Joystick J;
	Slider S;
		
	//Joystick
	J = get_joystick_position();
     3f4:	0e 94 23 07 	call	0xe46	; 0xe46 <get_joystick_position>
	m.id = JOY;
     3f8:	19 82       	std	Y+1, r1	; 0x01
	m.length = 8;
     3fa:	28 e0       	ldi	r18, 0x08	; 8
     3fc:	2a 83       	std	Y+2, r18	; 0x02
	m.data[0] = J.X;
     3fe:	6b 83       	std	Y+3, r22	; 0x03
	m.data[1] = J.Y;
     400:	7c 83       	std	Y+4, r23	; 0x04
	m.data[2] = J.D;
     402:	8d 83       	std	Y+5, r24	; 0x05
	m.data[3] = J.Button;
     404:	9e 83       	std	Y+6, r25	; 0x06
		
	//Slider
	S = get_slider_position();
     406:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_slider_position>
	m.data[4] = S.left;
     40a:	6f 83       	std	Y+7, r22	; 0x07
	m.data[5] = S.right;
     40c:	78 87       	std	Y+8, r23	; 0x08
	m.data[6] = S.leftButton;
     40e:	89 87       	std	Y+9, r24	; 0x09
	m.data[7] = S.rightButton;
     410:	9a 87       	std	Y+10, r25	; 0x0a
		
	//Send can message
	CAN_transmit(&m);
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	0e 94 38 06 	call	0xc70	; 0xc70 <CAN_transmit>
}
     41a:	2a 96       	adiw	r28, 0x0a	; 10
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	08 95       	ret

0000042c <handle_message>:
ISR(INT1_vect){
	handle_message();
}


void handle_message(){
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	2a 97       	sbiw	r28, 0x0a	; 10
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	cd bf       	out	0x3d, r28	; 61
	Message m;
	CAN_receive(&m);
     440:	ce 01       	movw	r24, r28
     442:	01 96       	adiw	r24, 0x01	; 1
     444:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CAN_receive>
	
	//Decide what to do
	switch(m.id){
     448:	89 81       	ldd	r24, Y+1	; 0x01
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	19 f0       	breq	.+6      	; 0x454 <handle_message+0x28>
     44e:	82 30       	cpi	r24, 0x02	; 2
     450:	21 f0       	breq	.+8      	; 0x45a <handle_message+0x2e>
     452:	09 c0       	rjmp	.+18     	; 0x466 <handle_message+0x3a>
		case JOY:
			break;
		case JOYREQ:
			send_controlls();
     454:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <send_controlls>
			break;
     458:	06 c0       	rjmp	.+12     	; 0x466 <handle_message+0x3a>
		case GAME_STATUS:
			state_set(m.data[0]);
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	0e 94 e7 05 	call	0xbce	; 0xbce <state_set>
			score_set(m.data[1]);
     460:	8c 81       	ldd	r24, Y+4	; 0x04
     462:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <score_set>
			break;
		default:
			break;
	}
}
     466:	2a 96       	adiw	r28, 0x0a	; 10
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	f8 94       	cli
     46c:	de bf       	out	0x3e, r29	; 62
     46e:	0f be       	out	0x3f, r0	; 63
     470:	cd bf       	out	0x3d, r28	; 61
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <__vector_2>:
	
	//Enable global interrupts
	sei();
}

ISR(INT1_vect){
     478:	1f 92       	push	r1
     47a:	0f 92       	push	r0
     47c:	0f b6       	in	r0, 0x3f	; 63
     47e:	0f 92       	push	r0
     480:	11 24       	eor	r1, r1
     482:	2f 93       	push	r18
     484:	3f 93       	push	r19
     486:	4f 93       	push	r20
     488:	5f 93       	push	r21
     48a:	6f 93       	push	r22
     48c:	7f 93       	push	r23
     48e:	8f 93       	push	r24
     490:	9f 93       	push	r25
     492:	af 93       	push	r26
     494:	bf 93       	push	r27
     496:	ef 93       	push	r30
     498:	ff 93       	push	r31
	handle_message();
     49a:	0e 94 16 02 	call	0x42c	; 0x42c <handle_message>
}
     49e:	ff 91       	pop	r31
     4a0:	ef 91       	pop	r30
     4a2:	bf 91       	pop	r27
     4a4:	af 91       	pop	r26
     4a6:	9f 91       	pop	r25
     4a8:	8f 91       	pop	r24
     4aa:	7f 91       	pop	r23
     4ac:	6f 91       	pop	r22
     4ae:	5f 91       	pop	r21
     4b0:	4f 91       	pop	r20
     4b2:	3f 91       	pop	r19
     4b4:	2f 91       	pop	r18
     4b6:	0f 90       	pop	r0
     4b8:	0f be       	out	0x3f, r0	; 63
     4ba:	0f 90       	pop	r0
     4bc:	1f 90       	pop	r1
     4be:	18 95       	reti

000004c0 <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
     4c0:	80 eb       	ldi	r24, 0xB0	; 176
     4c2:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     4c4:	81 e5       	ldi	r24, 0x51	; 81
     4c6:	8d b9       	out	0x0d, r24	; 13
     4c8:	08 95       	ret

000004ca <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
     4ca:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
     4cc:	77 9b       	sbis	0x0e, 7	; 14
     4ce:	fe cf       	rjmp	.-4      	; 0x4cc <SPI_transmit+0x2>
	//Return answer
	return SPDR;
     4d0:	8f b1       	in	r24, 0x0f	; 15
}
     4d2:	08 95       	ret

000004d4 <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
     4d4:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_transmit>
     4d8:	08 95       	ret

000004da <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
     4da:	8c ec       	ldi	r24, 0xCC	; 204
     4dc:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_transmit>
}
     4e0:	08 95       	ret

000004e2 <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
     4e2:	c4 9a       	sbi	0x18, 4	; 24
     4e4:	08 95       	ret

000004e6 <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
     4e6:	c4 98       	cbi	0x18, 4	; 24
     4e8:	08 95       	ret

000004ea <highscore_save>:
#include "..\Driver_files\EEPROM_driver.h"
#include "..\Driver_files\oled_driver.h"
#include "..\Driver_files\joy_driver.h"


void highscore_save(uint8_t game, highscore *score){
     4ea:	6f 92       	push	r6
     4ec:	7f 92       	push	r7
     4ee:	8f 92       	push	r8
     4f0:	9f 92       	push	r9
     4f2:	af 92       	push	r10
     4f4:	bf 92       	push	r11
     4f6:	cf 92       	push	r12
     4f8:	df 92       	push	r13
     4fa:	ef 92       	push	r14
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	8b 01       	movw	r16, r22
	if (score->place > 0 && score->place < 17){
     508:	fb 01       	movw	r30, r22
     50a:	84 80       	ldd	r8, Z+4	; 0x04
     50c:	9f ef       	ldi	r25, 0xFF	; 255
     50e:	98 0d       	add	r25, r8
     510:	90 31       	cpi	r25, 0x10	; 16
     512:	28 f5       	brcc	.+74     	; 0x55e <__stack+0x5f>
		//Calculate index of score
		int index = (score->place-1)*4;
     514:	91 2c       	mov	r9, r1
     516:	f1 e0       	ldi	r31, 0x01	; 1
     518:	8f 1a       	sub	r8, r31
     51a:	91 08       	sbc	r9, r1
     51c:	88 0c       	add	r8, r8
     51e:	99 1c       	adc	r9, r9
     520:	88 0c       	add	r8, r8
     522:	99 1c       	adc	r9, r9
     524:	eb 01       	movw	r28, r22
		
		//Save name, score in EEPROM
		for (int i = 0; i < 3; i++){
     526:	61 2c       	mov	r6, r1
     528:	71 2c       	mov	r7, r1
			EEPROM_write(game + index + i, score->name[i]);
     52a:	e8 2e       	mov	r14, r24
     52c:	f1 2c       	mov	r15, r1
     52e:	54 01       	movw	r10, r8
     530:	ae 0c       	add	r10, r14
     532:	bf 1c       	adc	r11, r15
     534:	69 91       	ld	r22, Y+
     536:	c5 01       	movw	r24, r10
     538:	86 0d       	add	r24, r6
     53a:	97 1d       	adc	r25, r7
     53c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <EEPROM_write>
	if (score->place > 0 && score->place < 17){
		//Calculate index of score
		int index = (score->place-1)*4;
		
		//Save name, score in EEPROM
		for (int i = 0; i < 3; i++){
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	68 1a       	sub	r6, r24
     544:	78 0a       	sbc	r7, r24
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	69 16       	cp	r6, r25
     54a:	71 04       	cpc	r7, r1
     54c:	99 f7       	brne	.-26     	; 0x534 <__stack+0x35>
			EEPROM_write(game + index + i, score->name[i]);
		}
		EEPROM_write(game + index + 3, score->score);
     54e:	c4 01       	movw	r24, r8
     550:	8e 0d       	add	r24, r14
     552:	9f 1d       	adc	r25, r15
     554:	f8 01       	movw	r30, r16
     556:	63 81       	ldd	r22, Z+3	; 0x03
     558:	03 96       	adiw	r24, 0x03	; 3
     55a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <EEPROM_write>
	}
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	bf 90       	pop	r11
     570:	af 90       	pop	r10
     572:	9f 90       	pop	r9
     574:	8f 90       	pop	r8
     576:	7f 90       	pop	r7
     578:	6f 90       	pop	r6
     57a:	08 95       	ret

0000057c <highscore_get>:
		}
		return score->place;
	}
}

highscore highscore_get(uint8_t game, uint8_t position){
     57c:	5f 92       	push	r5
     57e:	6f 92       	push	r6
     580:	7f 92       	push	r7
     582:	8f 92       	push	r8
     584:	9f 92       	push	r9
     586:	af 92       	push	r10
     588:	bf 92       	push	r11
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	2a 97       	sbiw	r28, 0x0a	; 10
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	56 2e       	mov	r5, r22
	highscore hs;
	
	//Make sure legal position between 1 and 16
	position = (position > 0 && position < 17)? position : 0;
     5ac:	9f ef       	ldi	r25, 0xFF	; 255
     5ae:	96 0f       	add	r25, r22
     5b0:	90 31       	cpi	r25, 0x10	; 16
     5b2:	08 f0       	brcs	.+2      	; 0x5b6 <highscore_get+0x3a>
     5b4:	51 2c       	mov	r5, r1
	hs.place = position;
	
	//Calculate index of score
	int index = (position-1)*4;
     5b6:	65 2c       	mov	r6, r5
     5b8:	71 2c       	mov	r7, r1
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	69 1a       	sub	r6, r25
     5be:	71 08       	sbc	r7, r1
     5c0:	66 0c       	add	r6, r6
     5c2:	77 1c       	adc	r7, r7
     5c4:	66 0c       	add	r6, r6
     5c6:	77 1c       	adc	r7, r7
     5c8:	8e 01       	movw	r16, r28
     5ca:	0a 5f       	subi	r16, 0xFA	; 250
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	4e 01       	movw	r8, r28
     5d0:	e9 e0       	ldi	r30, 0x09	; 9
     5d2:	8e 0e       	add	r8, r30
     5d4:	91 1c       	adc	r9, r1
	
	//Get name, score from EEPROM
	for (int i = 0; i < 3; i++){
		hs.name[i] = EEPROM_read(game + index + i);
     5d6:	e8 2e       	mov	r14, r24
     5d8:	f1 2c       	mov	r15, r1
     5da:	57 01       	movw	r10, r14
     5dc:	a0 1a       	sub	r10, r16
     5de:	b1 0a       	sbc	r11, r17
     5e0:	a6 0c       	add	r10, r6
     5e2:	b7 1c       	adc	r11, r7
     5e4:	c5 01       	movw	r24, r10
     5e6:	80 0f       	add	r24, r16
     5e8:	91 1f       	adc	r25, r17
     5ea:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <EEPROM_read>
     5ee:	f8 01       	movw	r30, r16
     5f0:	81 93       	st	Z+, r24
     5f2:	8f 01       	movw	r16, r30
	
	//Calculate index of score
	int index = (position-1)*4;
	
	//Get name, score from EEPROM
	for (int i = 0; i < 3; i++){
     5f4:	e8 15       	cp	r30, r8
     5f6:	f9 05       	cpc	r31, r9
     5f8:	a9 f7       	brne	.-22     	; 0x5e4 <highscore_get+0x68>
		hs.name[i] = EEPROM_read(game + index + i);
	}
	hs.score = EEPROM_read(game + index + 3);
     5fa:	c3 01       	movw	r24, r6
     5fc:	8e 0d       	add	r24, r14
     5fe:	9f 1d       	adc	r25, r15
     600:	03 96       	adiw	r24, 0x03	; 3
     602:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <EEPROM_read>
	return hs;
     606:	89 87       	std	Y+9, r24	; 0x09
     608:	5a 86       	std	Y+10, r5	; 0x0a
     60a:	85 e0       	ldi	r24, 0x05	; 5
     60c:	fe 01       	movw	r30, r28
     60e:	36 96       	adiw	r30, 0x06	; 6
     610:	de 01       	movw	r26, r28
     612:	11 96       	adiw	r26, 0x01	; 1
     614:	01 90       	ld	r0, Z+
     616:	0d 92       	st	X+, r0
     618:	8a 95       	dec	r24
     61a:	e1 f7       	brne	.-8      	; 0x614 <highscore_get+0x98>
     61c:	29 81       	ldd	r18, Y+1	; 0x01
     61e:	3a 81       	ldd	r19, Y+2	; 0x02
     620:	4b 81       	ldd	r20, Y+3	; 0x03
     622:	5c 81       	ldd	r21, Y+4	; 0x04
     624:	6d 81       	ldd	r22, Y+5	; 0x05
}
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	2a 96       	adiw	r28, 0x0a	; 10
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	df 91       	pop	r29
     63a:	cf 91       	pop	r28
     63c:	1f 91       	pop	r17
     63e:	0f 91       	pop	r16
     640:	ff 90       	pop	r15
     642:	ef 90       	pop	r14
     644:	df 90       	pop	r13
     646:	cf 90       	pop	r12
     648:	bf 90       	pop	r11
     64a:	af 90       	pop	r10
     64c:	9f 90       	pop	r9
     64e:	8f 90       	pop	r8
     650:	7f 90       	pop	r7
     652:	6f 90       	pop	r6
     654:	5f 90       	pop	r5
     656:	08 95       	ret

00000658 <highscore_leaderboard>:


void highscore_leaderboard(uint8_t game, highscore leaderboard[], int length){
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	d8 2e       	mov	r13, r24
	for (int i = 0; i < length; i++){
     668:	14 16       	cp	r1, r20
     66a:	15 06       	cpc	r1, r21
     66c:	bc f4       	brge	.+46     	; 0x69c <highscore_leaderboard+0x44>
     66e:	c6 2f       	mov	r28, r22
     670:	d7 2f       	mov	r29, r23
     672:	7a 01       	movw	r14, r20
     674:	8f ef       	ldi	r24, 0xFF	; 255
     676:	e8 1a       	sub	r14, r24
     678:	f8 0a       	sbc	r15, r24
     67a:	01 e0       	ldi	r16, 0x01	; 1
     67c:	10 e0       	ldi	r17, 0x00	; 0
		leaderboard[i] = highscore_get(game, i+1);
     67e:	60 2f       	mov	r22, r16
     680:	8d 2d       	mov	r24, r13
     682:	0e 94 be 02 	call	0x57c	; 0x57c <highscore_get>
     686:	28 83       	st	Y, r18
     688:	39 83       	std	Y+1, r19	; 0x01
     68a:	4a 83       	std	Y+2, r20	; 0x02
     68c:	5b 83       	std	Y+3, r21	; 0x03
     68e:	6c 83       	std	Y+4, r22	; 0x04
     690:	0f 5f       	subi	r16, 0xFF	; 255
     692:	1f 4f       	sbci	r17, 0xFF	; 255
     694:	25 96       	adiw	r28, 0x05	; 5
	return hs;
}


void highscore_leaderboard(uint8_t game, highscore leaderboard[], int length){
	for (int i = 0; i < length; i++){
     696:	0e 15       	cp	r16, r14
     698:	1f 05       	cpc	r17, r15
     69a:	89 f7       	brne	.-30     	; 0x67e <highscore_leaderboard+0x26>
		leaderboard[i] = highscore_get(game, i+1);
	}
}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	08 95       	ret

000006ac <highscore_add>:
		}
		EEPROM_write(game + index + 3, score->score);
	}
}

uint8_t highscore_add(uint8_t game, highscore *score){
     6ac:	af 92       	push	r10
     6ae:	bf 92       	push	r11
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	0f 93       	push	r16
     6b8:	1f 93       	push	r17
     6ba:	cf 93       	push	r28
     6bc:	df 93       	push	r29
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	c0 55       	subi	r28, 0x50	; 80
     6c4:	d1 09       	sbc	r29, r1
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	d8 2e       	mov	r13, r24
     6d2:	7b 01       	movw	r14, r22
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
     6d4:	40 e1       	ldi	r20, 0x10	; 16
     6d6:	50 e0       	ldi	r21, 0x00	; 0
     6d8:	be 01       	movw	r22, r28
     6da:	6f 5f       	subi	r22, 0xFF	; 255
     6dc:	7f 4f       	sbci	r23, 0xFF	; 255
     6de:	0e 94 2c 03 	call	0x658	; 0x658 <highscore_leaderboard>
	score->place = 0;
     6e2:	f7 01       	movw	r30, r14
     6e4:	14 82       	std	Z+4, r1	; 0x04
	
	//find place
	for(int i = 0; i < 16; i++){
		if(leaderboard[i].score < score->score){
     6e6:	93 81       	ldd	r25, Z+3	; 0x03
     6e8:	fe 01       	movw	r30, r28
     6ea:	34 96       	adiw	r30, 0x04	; 4
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
	score->place = 0;
	
	//find place
	for(int i = 0; i < 16; i++){
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
		if(leaderboard[i].score < score->score){
     6f0:	80 81       	ld	r24, Z
     6f2:	89 17       	cp	r24, r25
     6f4:	80 f4       	brcc	.+32     	; 0x716 <highscore_add+0x6a>
			score->place = leaderboard[i].place;
     6f6:	f9 01       	movw	r30, r18
     6f8:	ee 0f       	add	r30, r30
     6fa:	ff 1f       	adc	r31, r31
     6fc:	ee 0f       	add	r30, r30
     6fe:	ff 1f       	adc	r31, r31
     700:	2e 0f       	add	r18, r30
     702:	3f 1f       	adc	r19, r31
     704:	fe 01       	movw	r30, r28
     706:	e2 0f       	add	r30, r18
     708:	f3 1f       	adc	r31, r19
     70a:	85 81       	ldd	r24, Z+5	; 0x05
     70c:	f7 01       	movw	r30, r14
     70e:	84 83       	std	Z+4, r24	; 0x04
			i = 16;
		}
	}
	
	//return 0 if not a highscore
	if(score->place == 0){
     710:	88 23       	and	r24, r24
     712:	a1 f1       	breq	.+104    	; 0x77c <highscore_add+0xd0>
     714:	07 c0       	rjmp	.+14     	; 0x724 <highscore_add+0x78>
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
	score->place = 0;
	
	//find place
	for(int i = 0; i < 16; i++){
     716:	2f 5f       	subi	r18, 0xFF	; 255
     718:	3f 4f       	sbci	r19, 0xFF	; 255
     71a:	35 96       	adiw	r30, 0x05	; 5
     71c:	20 31       	cpi	r18, 0x10	; 16
     71e:	31 05       	cpc	r19, r1
     720:	39 f7       	brne	.-50     	; 0x6f0 <highscore_add+0x44>
     722:	2e c0       	rjmp	.+92     	; 0x780 <highscore_add+0xd4>
		return 0;
	}
	
	// Add score and move down other scores
	else{
		highscore_save(game, score);
     724:	b7 01       	movw	r22, r14
     726:	8d 2d       	mov	r24, r13
     728:	0e 94 75 02 	call	0x4ea	; 0x4ea <highscore_save>
		for (int i = score->place -1; i < 16; i++){
     72c:	f7 01       	movw	r30, r14
     72e:	84 81       	ldd	r24, Z+4	; 0x04
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	01 97       	sbiw	r24, 0x01	; 1
     734:	80 31       	cpi	r24, 0x10	; 16
     736:	91 05       	cpc	r25, r1
     738:	f4 f4       	brge	.+60     	; 0x776 <highscore_add+0xca>
     73a:	8c 01       	movw	r16, r24
     73c:	00 0f       	add	r16, r16
     73e:	11 1f       	adc	r17, r17
     740:	00 0f       	add	r16, r16
     742:	11 1f       	adc	r17, r17
     744:	08 0f       	add	r16, r24
     746:	19 1f       	adc	r17, r25
     748:	0c 0f       	add	r16, r28
     74a:	1d 1f       	adc	r17, r29
     74c:	0b 5f       	subi	r16, 0xFB	; 251
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
     750:	5e 01       	movw	r10, r28
     752:	f5 e5       	ldi	r31, 0x55	; 85
     754:	af 0e       	add	r10, r31
     756:	b1 1c       	adc	r11, r1
			leaderboard[i].place++;
     758:	f8 01       	movw	r30, r16
     75a:	80 81       	ld	r24, Z
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	80 83       	st	Z, r24
     760:	b8 01       	movw	r22, r16
     762:	64 50       	subi	r22, 0x04	; 4
     764:	71 09       	sbc	r23, r1
			highscore_save(game, &leaderboard[i]);
     766:	8d 2d       	mov	r24, r13
     768:	0e 94 75 02 	call	0x4ea	; 0x4ea <highscore_save>
     76c:	0b 5f       	subi	r16, 0xFB	; 251
     76e:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	// Add score and move down other scores
	else{
		highscore_save(game, score);
		for (int i = score->place -1; i < 16; i++){
     770:	0a 15       	cp	r16, r10
     772:	1b 05       	cpc	r17, r11
     774:	89 f7       	brne	.-30     	; 0x758 <highscore_add+0xac>
			leaderboard[i].place++;
			highscore_save(game, &leaderboard[i]);
		}
		return score->place;
     776:	f7 01       	movw	r30, r14
     778:	84 81       	ldd	r24, Z+4	; 0x04
     77a:	03 c0       	rjmp	.+6      	; 0x782 <highscore_add+0xd6>
		}
	}
	
	//return 0 if not a highscore
	if(score->place == 0){
		return 0;
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	01 c0       	rjmp	.+2      	; 0x782 <highscore_add+0xd6>
     780:	80 e0       	ldi	r24, 0x00	; 0
			leaderboard[i].place++;
			highscore_save(game, &leaderboard[i]);
		}
		return score->place;
	}
}
     782:	c0 5b       	subi	r28, 0xB0	; 176
     784:	df 4f       	sbci	r29, 0xFF	; 255
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	ff 90       	pop	r15
     79a:	ef 90       	pop	r14
     79c:	df 90       	pop	r13
     79e:	bf 90       	pop	r11
     7a0:	af 90       	pop	r10
     7a2:	08 95       	ret

000007a4 <highscore_clear>:
	for (int i = 0; i < length; i++){
		leaderboard[i] = highscore_get(game, i+1);
	}
}

void highscore_clear(uint8_t game){
     7a4:	0f 93       	push	r16
     7a6:	1f 93       	push	r17
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <highscore_clear+0xa>
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <highscore_clear+0xc>
     7b0:	1f 92       	push	r1
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	08 2f       	mov	r16, r24
	highscore hs;
	
	hs.name[0] = 'N';
     7b8:	8e e4       	ldi	r24, 0x4E	; 78
     7ba:	89 83       	std	Y+1, r24	; 0x01
	hs.name[1] = 'A';
     7bc:	91 e4       	ldi	r25, 0x41	; 65
     7be:	9a 83       	std	Y+2, r25	; 0x02
	hs.name[2] = 'N';
     7c0:	8b 83       	std	Y+3, r24	; 0x03
	hs.score = 0;
     7c2:	1c 82       	std	Y+4, r1	; 0x04
     7c4:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 0; i < 16; i++){
		hs.place = i + 1;
     7c6:	1d 83       	std	Y+5, r17	; 0x05
		highscore_save(game, &hs);
     7c8:	be 01       	movw	r22, r28
     7ca:	6f 5f       	subi	r22, 0xFF	; 255
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	80 2f       	mov	r24, r16
     7d0:	0e 94 75 02 	call	0x4ea	; 0x4ea <highscore_save>
     7d4:	1f 5f       	subi	r17, 0xFF	; 255
	
	hs.name[0] = 'N';
	hs.name[1] = 'A';
	hs.name[2] = 'N';
	hs.score = 0;
	for (int i = 0; i < 16; i++){
     7d6:	11 31       	cpi	r17, 0x11	; 17
     7d8:	b1 f7       	brne	.-20     	; 0x7c6 <highscore_clear+0x22>
		hs.place = i + 1;
		highscore_save(game, &hs);
	} 
}
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <highscore_clear_all>:

void highscore_clear_all(){
	highscore_clear(PINGPONG);
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <highscore_clear>
	highscore_clear(PONG);
     7f4:	80 e8       	ldi	r24, 0x80	; 128
     7f6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <highscore_clear>
	highscore_clear(SNAKE);
     7fa:	80 e4       	ldi	r24, 0x40	; 64
     7fc:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <highscore_clear>
     800:	08 95       	ret

00000802 <highscore_print>:
}

void highscore_print(uint8_t game){
     802:	af 92       	push	r10
     804:	bf 92       	push	r11
     806:	cf 92       	push	r12
     808:	df 92       	push	r13
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	c0 56       	subi	r28, 0x60	; 96
     81c:	d1 09       	sbc	r29, r1
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
	//Get highscore list
	highscore hslist[16];
	highscore_leaderboard(game, hslist, 16);
     828:	40 e1       	ldi	r20, 0x10	; 16
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	be 01       	movw	r22, r28
     82e:	6f 5f       	subi	r22, 0xFF	; 255
     830:	7f 4f       	sbci	r23, 0xFF	; 255
     832:	0e 94 2c 03 	call	0x658	; 0x658 <highscore_leaderboard>
	
	//Clear SRAM and print list to SRAM
	oled_sram_clear_screen(0);
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
     83e:	8e 01       	movw	r16, r28
     840:	0b 5f       	subi	r16, 0xFB	; 251
     842:	1f 4f       	sbci	r17, 0xFF	; 255
	char score[16];
	for (int i = 0; i < 7; i++){
     844:	e1 2c       	mov	r14, r1
     846:	f1 2c       	mov	r15, r1
		sprintf(score, "%i %c%c%c %i", hslist[i].place, hslist[i].name[0], hslist[i].name[1], hslist[i].name[2], hslist[i].score );
     848:	0f 2e       	mov	r0, r31
     84a:	f2 e1       	ldi	r31, 0x12	; 18
     84c:	af 2e       	mov	r10, r31
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	bf 2e       	mov	r11, r31
     852:	f0 2d       	mov	r31, r0
     854:	6e 01       	movw	r12, r28
     856:	21 e5       	ldi	r18, 0x51	; 81
     858:	c2 0e       	add	r12, r18
     85a:	d1 1c       	adc	r13, r1
     85c:	f8 01       	movw	r30, r16
     85e:	31 97       	sbiw	r30, 0x01	; 1
     860:	80 81       	ld	r24, Z
     862:	1f 92       	push	r1
     864:	8f 93       	push	r24
     866:	31 97       	sbiw	r30, 0x01	; 1
     868:	80 81       	ld	r24, Z
     86a:	1f 92       	push	r1
     86c:	8f 93       	push	r24
     86e:	31 97       	sbiw	r30, 0x01	; 1
     870:	80 81       	ld	r24, Z
     872:	1f 92       	push	r1
     874:	8f 93       	push	r24
     876:	31 97       	sbiw	r30, 0x01	; 1
     878:	80 81       	ld	r24, Z
     87a:	1f 92       	push	r1
     87c:	8f 93       	push	r24
     87e:	f8 01       	movw	r30, r16
     880:	80 81       	ld	r24, Z
     882:	1f 92       	push	r1
     884:	8f 93       	push	r24
     886:	bf 92       	push	r11
     888:	af 92       	push	r10
     88a:	df 92       	push	r13
     88c:	cf 92       	push	r12
     88e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <sprintf>
		oled_sram_write_string(0, score, i);
     892:	a7 01       	movw	r20, r14
     894:	b6 01       	movw	r22, r12
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
	highscore_leaderboard(game, hslist, 16);
	
	//Clear SRAM and print list to SRAM
	oled_sram_clear_screen(0);
	char score[16];
	for (int i = 0; i < 7; i++){
     89e:	ff ef       	ldi	r31, 0xFF	; 255
     8a0:	ef 1a       	sub	r14, r31
     8a2:	ff 0a       	sbc	r15, r31
     8a4:	0b 5f       	subi	r16, 0xFB	; 251
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	97 e0       	ldi	r25, 0x07	; 7
     8b4:	e9 16       	cp	r14, r25
     8b6:	f1 04       	cpc	r15, r1
     8b8:	89 f6       	brne	.-94     	; 0x85c <highscore_print+0x5a>
		sprintf(score, "%i %c%c%c %i", hslist[i].place, hslist[i].name[0], hslist[i].name[1], hslist[i].name[2], hslist[i].score );
		oled_sram_write_string(0, score, i);
		//printf("%s \n\r", score);
	}
	
	oled_sram_flush(0);
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
	while(get_joystick_position().D != LEFT){
     8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <highscore_print+0xd4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c4:	ef ef       	ldi	r30, 0xFF	; 255
     8c6:	ff e7       	ldi	r31, 0x7F	; 127
     8c8:	21 e0       	ldi	r18, 0x01	; 1
     8ca:	e1 50       	subi	r30, 0x01	; 1
     8cc:	f0 40       	sbci	r31, 0x00	; 0
     8ce:	20 40       	sbci	r18, 0x00	; 0
     8d0:	e1 f7       	brne	.-8      	; 0x8ca <highscore_print+0xc8>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <highscore_print+0xd2>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <highscore_print+0xd4>
     8d6:	0e 94 23 07 	call	0xe46	; 0xe46 <get_joystick_position>
     8da:	81 11       	cpse	r24, r1
     8dc:	f3 cf       	rjmp	.-26     	; 0x8c4 <highscore_print+0xc2>
		_delay_ms(100);
	}
}
     8de:	c0 5a       	subi	r28, 0xA0	; 160
     8e0:	df 4f       	sbci	r29, 0xFF	; 255
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	bf 90       	pop	r11
     8fe:	af 90       	pop	r10
     900:	08 95       	ret

00000902 <highscore_print_pingpong>:

void highscore_print_pingpong(){
	highscore_print(PINGPONG);
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	0e 94 01 04 	call	0x802	; 0x802 <highscore_print>
     908:	08 95       	ret

0000090a <highscore_print_snake>:
}

void highscore_print_snake(){
	highscore_print(SNAKE);
     90a:	80 e4       	ldi	r24, 0x40	; 64
     90c:	0e 94 01 04 	call	0x802	; 0x802 <highscore_print>
     910:	08 95       	ret

00000912 <highscore_print_pong>:
}

void highscore_print_pong(){
	highscore_print(PONG);
     912:	80 e8       	ldi	r24, 0x80	; 128
     914:	0e 94 01 04 	call	0x802	; 0x802 <highscore_print>
     918:	08 95       	ret

0000091a <highscore_prompt>:
}

void highscore_prompt(uint8_t game, uint8_t score){
     91a:	8f 92       	push	r8
     91c:	9f 92       	push	r9
     91e:	af 92       	push	r10
     920:	bf 92       	push	r11
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	cd b7       	in	r28, 0x3d	; 61
     934:	de b7       	in	r29, 0x3e	; 62
     936:	65 97       	sbiw	r28, 0x15	; 21
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	de bf       	out	0x3e, r29	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	cd bf       	out	0x3d, r28	; 61
     942:	98 2e       	mov	r9, r24
	//Make highscore
	highscore hs;
	hs.name[0] = 'A';
     944:	81 e4       	ldi	r24, 0x41	; 65
     946:	89 83       	std	Y+1, r24	; 0x01
	hs.name[1] = 'A';
     948:	8a 83       	std	Y+2, r24	; 0x02
	hs.name[2] = 'A';
     94a:	8b 83       	std	Y+3, r24	; 0x03
	hs.score = score;
     94c:	6c 83       	std	Y+4, r22	; 0x04
	
	//Print highscore
	oled_sram_clear_screen(0);
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	char buffer[16];
	sprintf(buffer, "Score: %i", hs.score );
     956:	8c 81       	ldd	r24, Y+4	; 0x04
     958:	1f 92       	push	r1
     95a:	8f 93       	push	r24
     95c:	8f e1       	ldi	r24, 0x1F	; 31
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	9f 93       	push	r25
     962:	8f 93       	push	r24
     964:	8e 01       	movw	r16, r28
     966:	0a 5f       	subi	r16, 0xFA	; 250
     968:	1f 4f       	sbci	r17, 0xFF	; 255
     96a:	1f 93       	push	r17
     96c:	0f 93       	push	r16
     96e:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <sprintf>
	oled_sram_write_string(0, buffer, 2);
     972:	42 e0       	ldi	r20, 0x02	; 2
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	b8 01       	movw	r22, r16
     978:	80 e0       	ldi	r24, 0x00	; 0
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
	
	//Allow user to change name
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
     980:	0e 94 23 07 	call	0xe46	; 0xe46 <get_joystick_position>
     984:	88 2e       	mov	r8, r24
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
	sprintf(buffer, "Score: %i", hs.score );
	oled_sram_write_string(0, buffer, 2);
	
	//Allow user to change name
	
	int letter_pointer = 0; 
     992:	e1 2c       	mov	r14, r1
     994:	f1 2c       	mov	r15, r1
		_delay_ms(100);
		if(D != get_joystick_position().D){
			D = get_joystick_position().D;
			switch(D){
				case LEFT:
					letter_pointer = (letter_pointer + 2)%3;
     996:	0f 2e       	mov	r0, r31
     998:	f3 e0       	ldi	r31, 0x03	; 3
     99a:	af 2e       	mov	r10, r31
     99c:	b1 2c       	mov	r11, r1
     99e:	f0 2d       	mov	r31, r0
					break;
				default:
					break;
			}
		}
		sprintf(buffer, "Name: %c%c%c", hs.name[0], hs.name[1], hs.name[2]);
     9a0:	0f 2e       	mov	r0, r31
     9a2:	f9 e2       	ldi	r31, 0x29	; 41
     9a4:	cf 2e       	mov	r12, r31
     9a6:	f1 e0       	ldi	r31, 0x01	; 1
     9a8:	df 2e       	mov	r13, r31
     9aa:	f0 2d       	mov	r31, r0
     9ac:	2f ef       	ldi	r18, 0xFF	; 255
     9ae:	8f e7       	ldi	r24, 0x7F	; 127
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	21 50       	subi	r18, 0x01	; 1
     9b4:	80 40       	sbci	r24, 0x00	; 0
     9b6:	90 40       	sbci	r25, 0x00	; 0
     9b8:	e1 f7       	brne	.-8      	; 0x9b2 <highscore_prompt+0x98>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <highscore_prompt+0xa2>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <highscore_prompt+0xa4>
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
	while(letter_pointer < 3){
		_delay_ms(100);
		if(D != get_joystick_position().D){
     9be:	0e 94 23 07 	call	0xe46	; 0xe46 <get_joystick_position>
     9c2:	88 16       	cp	r8, r24
     9c4:	69 f1       	breq	.+90     	; 0xa20 <highscore_prompt+0x106>
			D = get_joystick_position().D;
     9c6:	0e 94 23 07 	call	0xe46	; 0xe46 <get_joystick_position>
     9ca:	88 2e       	mov	r8, r24
			switch(D){
     9cc:	21 e0       	ldi	r18, 0x01	; 1
     9ce:	82 17       	cp	r24, r18
     9d0:	81 f0       	breq	.+32     	; 0x9f2 <highscore_prompt+0xd8>
     9d2:	82 17       	cp	r24, r18
     9d4:	38 f0       	brcs	.+14     	; 0x9e4 <highscore_prompt+0xca>
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	88 16       	cp	r8, r24
     9da:	79 f0       	breq	.+30     	; 0x9fa <highscore_prompt+0xe0>
     9dc:	93 e0       	ldi	r25, 0x03	; 3
     9de:	89 16       	cp	r8, r25
     9e0:	b1 f0       	breq	.+44     	; 0xa0e <highscore_prompt+0xf4>
     9e2:	1e c0       	rjmp	.+60     	; 0xa20 <highscore_prompt+0x106>
				case LEFT:
					letter_pointer = (letter_pointer + 2)%3;
     9e4:	c7 01       	movw	r24, r14
     9e6:	02 96       	adiw	r24, 0x02	; 2
     9e8:	b5 01       	movw	r22, r10
     9ea:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
     9ee:	7c 01       	movw	r14, r24
					break;
     9f0:	17 c0       	rjmp	.+46     	; 0xa20 <highscore_prompt+0x106>
				case RIGHT:
					letter_pointer++;
     9f2:	2f ef       	ldi	r18, 0xFF	; 255
     9f4:	e2 1a       	sub	r14, r18
     9f6:	f2 0a       	sbc	r15, r18
					break;
     9f8:	13 c0       	rjmp	.+38     	; 0xa20 <highscore_prompt+0x106>
				case UP:
					hs.name[letter_pointer]++;
     9fa:	e1 e0       	ldi	r30, 0x01	; 1
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	ec 0f       	add	r30, r28
     a00:	fd 1f       	adc	r31, r29
     a02:	ee 0d       	add	r30, r14
     a04:	ff 1d       	adc	r31, r15
     a06:	80 81       	ld	r24, Z
     a08:	8f 5f       	subi	r24, 0xFF	; 255
     a0a:	80 83       	st	Z, r24
					break;
     a0c:	09 c0       	rjmp	.+18     	; 0xa20 <highscore_prompt+0x106>
				case DOWN:
					hs.name[letter_pointer]--;
     a0e:	e1 e0       	ldi	r30, 0x01	; 1
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	ec 0f       	add	r30, r28
     a14:	fd 1f       	adc	r31, r29
     a16:	ee 0d       	add	r30, r14
     a18:	ff 1d       	adc	r31, r15
     a1a:	80 81       	ld	r24, Z
     a1c:	81 50       	subi	r24, 0x01	; 1
     a1e:	80 83       	st	Z, r24
					break;
				default:
					break;
			}
		}
		sprintf(buffer, "Name: %c%c%c", hs.name[0], hs.name[1], hs.name[2]);
     a20:	8b 81       	ldd	r24, Y+3	; 0x03
     a22:	1f 92       	push	r1
     a24:	8f 93       	push	r24
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	1f 92       	push	r1
     a2a:	8f 93       	push	r24
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	1f 92       	push	r1
     a30:	8f 93       	push	r24
     a32:	df 92       	push	r13
     a34:	cf 92       	push	r12
     a36:	1f 93       	push	r17
     a38:	0f 93       	push	r16
     a3a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <sprintf>
		oled_sram_write_string(0, buffer, 3);
     a3e:	a5 01       	movw	r20, r10
     a40:	b8 01       	movw	r22, r16
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
		oled_sram_write_string(0, "          ", 4);
     a4a:	44 e0       	ldi	r20, 0x04	; 4
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	66 e3       	ldi	r22, 0x36	; 54
     a50:	71 e0       	ldi	r23, 0x01	; 1
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
		oled_sram_write_char(0, "^", 4, (6+letter_pointer)*8);
     a5a:	97 01       	movw	r18, r14
     a5c:	2a 5f       	subi	r18, 0xFA	; 250
     a5e:	3f 4f       	sbci	r19, 0xFF	; 255
     a60:	22 0f       	add	r18, r18
     a62:	33 1f       	adc	r19, r19
     a64:	22 0f       	add	r18, r18
     a66:	33 1f       	adc	r19, r19
     a68:	22 0f       	add	r18, r18
     a6a:	33 1f       	adc	r19, r19
     a6c:	44 e0       	ldi	r20, 0x04	; 4
     a6e:	50 e0       	ldi	r21, 0x00	; 0
     a70:	61 e4       	ldi	r22, 0x41	; 65
     a72:	71 e0       	ldi	r23, 0x01	; 1
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
		oled_sram_flush(0);
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
	
	//Allow user to change name
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
	while(letter_pointer < 3){
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	e9 16       	cp	r14, r25
     a92:	f1 04       	cpc	r15, r1
     a94:	0c f4       	brge	.+2      	; 0xa98 <highscore_prompt+0x17e>
     a96:	8a cf       	rjmp	.-236    	; 0x9ac <highscore_prompt+0x92>
		oled_sram_write_char(0, "^", 4, (6+letter_pointer)*8);
		oled_sram_flush(0);
	}
	
	
	highscore_add(game, &hs);
     a98:	be 01       	movw	r22, r28
     a9a:	6f 5f       	subi	r22, 0xFF	; 255
     a9c:	7f 4f       	sbci	r23, 0xFF	; 255
     a9e:	89 2d       	mov	r24, r9
     aa0:	0e 94 56 03 	call	0x6ac	; 0x6ac <highscore_add>
     aa4:	65 96       	adiw	r28, 0x15	; 21
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	1f 91       	pop	r17
     ab6:	0f 91       	pop	r16
     ab8:	ff 90       	pop	r15
     aba:	ef 90       	pop	r14
     abc:	df 90       	pop	r13
     abe:	cf 90       	pop	r12
     ac0:	bf 90       	pop	r11
     ac2:	af 90       	pop	r10
     ac4:	9f 90       	pop	r9
     ac6:	8f 90       	pop	r8
     ac8:	08 95       	ret

00000aca <play_pingpong>:
#include "highscore.h"

volatile State current_state;
volatile uint8_t current_score;

void play_pingpong(){
     aca:	cf 92       	push	r12
     acc:	df 92       	push	r13
     ace:	ef 92       	push	r14
     ad0:	ff 92       	push	r15
     ad2:	0f 93       	push	r16
     ad4:	1f 93       	push	r17
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	6a 97       	sbiw	r28, 0x1a	; 26
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	de bf       	out	0x3e, r29	; 62
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	cd bf       	out	0x3d, r28	; 61
}


void state_set(State state){
	
	current_state = state;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 4a 02 	sts	0x024A, r24
}

void score_set(uint8_t score){
	current_score = score;
     af0:	10 92 4b 02 	sts	0x024B, r1
	state_set(PLAY_PINGPONG);
	score_set(0);
	
	//Send message to node 2, and go into waiting mode
	Message m;
	m.id = GAME_STATUS;
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	99 83       	std	Y+1, r25	; 0x01
	m.length = 1;
     af8:	8a 83       	std	Y+2, r24	; 0x02
	m.data[0] = PLAY_PINGPONG;
     afa:	8b 83       	std	Y+3, r24	; 0x03
	CAN_transmit(&m);
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	0e 94 38 06 	call	0xc70	; 0xc70 <CAN_transmit>
	
	//Print message on screen
	oled_sram_clear_screen(0);
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	oled_sram_write_string(0, "Playing pingpong", 2);
     b0c:	42 e0       	ldi	r20, 0x02	; 2
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	63 e4       	ldi	r22, 0x43	; 67
     b12:	71 e0       	ldi	r23, 0x01	; 1
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
	char score[16];
	while(current_state == PLAY_PINGPONG){
     b1c:	80 91 4a 02 	lds	r24, 0x024A
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	09 f0       	breq	.+2      	; 0xb26 <play_pingpong+0x5c>
     b24:	40 c0       	rjmp	.+128    	; 0xba6 <play_pingpong+0xdc>
		_delay_ms(100);
		printf("State %i \n\r", current_state);
     b26:	0f 2e       	mov	r0, r31
     b28:	f4 e5       	ldi	r31, 0x54	; 84
     b2a:	cf 2e       	mov	r12, r31
     b2c:	f1 e0       	ldi	r31, 0x01	; 1
     b2e:	df 2e       	mov	r13, r31
     b30:	f0 2d       	mov	r31, r0
		send_controlls();
		sprintf(score, "Score: %d", current_score);
     b32:	0f 2e       	mov	r0, r31
     b34:	f0 e6       	ldi	r31, 0x60	; 96
     b36:	ef 2e       	mov	r14, r31
     b38:	f1 e0       	ldi	r31, 0x01	; 1
     b3a:	ff 2e       	mov	r15, r31
     b3c:	f0 2d       	mov	r31, r0
     b3e:	8e 01       	movw	r16, r28
     b40:	05 5f       	subi	r16, 0xF5	; 245
     b42:	1f 4f       	sbci	r17, 0xFF	; 255
     b44:	2f ef       	ldi	r18, 0xFF	; 255
     b46:	3f e7       	ldi	r19, 0x7F	; 127
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	21 50       	subi	r18, 0x01	; 1
     b4c:	30 40       	sbci	r19, 0x00	; 0
     b4e:	80 40       	sbci	r24, 0x00	; 0
     b50:	e1 f7       	brne	.-8      	; 0xb4a <play_pingpong+0x80>
     b52:	00 c0       	rjmp	.+0      	; 0xb54 <play_pingpong+0x8a>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <play_pingpong+0x8c>
	oled_sram_clear_screen(0);
	oled_sram_write_string(0, "Playing pingpong", 2);
	char score[16];
	while(current_state == PLAY_PINGPONG){
		_delay_ms(100);
		printf("State %i \n\r", current_state);
     b56:	80 91 4a 02 	lds	r24, 0x024A
     b5a:	1f 92       	push	r1
     b5c:	8f 93       	push	r24
     b5e:	df 92       	push	r13
     b60:	cf 92       	push	r12
     b62:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <printf>
		send_controlls();
     b66:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <send_controlls>
		sprintf(score, "Score: %d", current_score);
     b6a:	80 91 4b 02 	lds	r24, 0x024B
     b6e:	1f 92       	push	r1
     b70:	8f 93       	push	r24
     b72:	ff 92       	push	r15
     b74:	ef 92       	push	r14
     b76:	1f 93       	push	r17
     b78:	0f 93       	push	r16
     b7a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <sprintf>
		oled_sram_write_string(0, score, 4);
     b7e:	44 e0       	ldi	r20, 0x04	; 4
     b80:	50 e0       	ldi	r21, 0x00	; 0
     b82:	b8 01       	movw	r22, r16
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
		oled_sram_flush(0);
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
	
	//Print message on screen
	oled_sram_clear_screen(0);
	oled_sram_write_string(0, "Playing pingpong", 2);
	char score[16];
	while(current_state == PLAY_PINGPONG){
     b94:	80 91 4a 02 	lds	r24, 0x024A
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	81 30       	cpi	r24, 0x01	; 1
     ba4:	79 f2       	breq	.-98     	; 0xb44 <play_pingpong+0x7a>
		sprintf(score, "Score: %d", current_score);
		oled_sram_write_string(0, score, 4);
		oled_sram_flush(0);
	}
	
	highscore_prompt(PINGPONG, current_score);
     ba6:	60 91 4b 02 	lds	r22, 0x024B
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0e 94 8d 04 	call	0x91a	; 0x91a <highscore_prompt>
}
     bb0:	6a 96       	adiw	r28, 0x1a	; 26
     bb2:	0f b6       	in	r0, 0x3f	; 63
     bb4:	f8 94       	cli
     bb6:	de bf       	out	0x3e, r29	; 62
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	cd bf       	out	0x3d, r28	; 61
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	08 95       	ret

00000bce <state_set>:


void state_set(State state){
	
	current_state = state;
     bce:	80 93 4a 02 	sts	0x024A, r24
     bd2:	08 95       	ret

00000bd4 <score_set>:
}

void score_set(uint8_t score){
	current_score = score;
     bd4:	80 93 4b 02 	sts	0x024B, r24
     bd8:	08 95       	ret

00000bda <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     bda:	80 b7       	in	r24, 0x30	; 48
     bdc:	80 62       	ori	r24, 0x20	; 32
     bde:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     be0:	85 b7       	in	r24, 0x35	; 53
     be2:	80 68       	ori	r24, 0x80	; 128
     be4:	85 bf       	out	0x35, r24	; 53
     be6:	08 95       	ret

00000be8 <main>:
#include "Driver_files/message_handler.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
     be8:	80 e8       	ldi	r24, 0x80	; 128
     bea:	95 e2       	ldi	r25, 0x25	; 37
     bec:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <uartInit>
	bus_init();
     bf0:	0e 94 ed 05 	call	0xbda	; 0xbda <bus_init>
	oled_init();
     bf4:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <oled_init>
	init_handler();
     bf8:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <init_handler>
	//oled_sram_init();
	CAN_init();
     bfc:	0e 94 1f 06 	call	0xc3e	; 0xc3e <CAN_init>
	printf("Reset?");
     c00:	8a e6       	ldi	r24, 0x6A	; 106
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <printf>
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
    while(1)
    {
		menuSystem();
     c10:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <menuSystem>
     c14:	fd cf       	rjmp	.-6      	; 0xc10 <main+0x28>

00000c16 <get_adc>:
}

uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc

	adc[0] = 4 + (channel%4);
     c16:	83 70       	andi	r24, 0x03	; 3
     c18:	90 78       	andi	r25, 0x80	; 128
     c1a:	99 23       	and	r25, r25
     c1c:	24 f4       	brge	.+8      	; 0xc26 <get_adc+0x10>
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	8c 6f       	ori	r24, 0xFC	; 252
     c22:	9f 6f       	ori	r25, 0xFF	; 255
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	8c 5f       	subi	r24, 0xFC	; 252
     c28:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c2c:	85 ef       	ldi	r24, 0xF5	; 245
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	f1 f7       	brne	.-4      	; 0xc30 <get_adc+0x1a>
     c34:	00 c0       	rjmp	.+0      	; 0xc36 <get_adc+0x20>
     c36:	00 00       	nop
	_delay_us(200);
	return adc[0];
     c38:	80 91 00 14 	lds	r24, 0x1400
}
     c3c:	08 95       	ret

00000c3e <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
     c3e:	0e 94 65 08 	call	0x10ca	; 0x10ca <MCP_init>
	//Enter config mode
	MCP_reset();
     c42:	0e 94 4b 08 	call	0x1096	; 0x1096 <MCP_reset>
	//set normal mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	60 ee       	ldi	r22, 0xE0	; 224
     c4a:	8f e0       	ldi	r24, 0x0F	; 15
     c4c:	0e 94 b6 08 	call	0x116c	; 0x116c <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
     c50:	4f ef       	ldi	r20, 0xFF	; 255
     c52:	63 e0       	ldi	r22, 0x03	; 3
     c54:	8b e2       	ldi	r24, 0x2B	; 43
     c56:	0e 94 b6 08 	call	0x116c	; 0x116c <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
     c5a:	8e e0       	ldi	r24, 0x0E	; 14
     c5c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     c60:	28 2f       	mov	r18, r24
     c62:	20 7e       	andi	r18, 0xE0	; 224
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	11 f4       	brne	.+4      	; 0xc6e <CAN_init+0x30>
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     c6e:	08 95       	ret

00000c70 <CAN_transmit>:

void CAN_transmit(Message *m){
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_bit_modify(MCP_TXB0SIDL, 0xE0, m->id<<5);
     c78:	48 81       	ld	r20, Y
     c7a:	42 95       	swap	r20
     c7c:	44 0f       	add	r20, r20
     c7e:	40 7e       	andi	r20, 0xE0	; 224
     c80:	60 ee       	ldi	r22, 0xE0	; 224
     c82:	82 e3       	ldi	r24, 0x32	; 50
     c84:	0e 94 b6 08 	call	0x116c	; 0x116c <MCP_bit_modify>
	MCP_bit_modify(MCP_TXB0SIDH, 0xFF, m->id>>3);
     c88:	48 81       	ld	r20, Y
     c8a:	46 95       	lsr	r20
     c8c:	46 95       	lsr	r20
     c8e:	46 95       	lsr	r20
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	81 e3       	ldi	r24, 0x31	; 49
     c94:	0e 94 b6 08 	call	0x116c	; 0x116c <MCP_bit_modify>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     c98:	69 81       	ldd	r22, Y+1	; 0x01
     c9a:	85 e3       	ldi	r24, 0x35	; 53
     c9c:	0e 94 81 08 	call	0x1102	; 0x1102 <MCP_write>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     ca0:	69 81       	ldd	r22, Y+1	; 0x01
     ca2:	85 e3       	ldi	r24, 0x35	; 53
     ca4:	0e 94 81 08 	call	0x1102	; 0x1102 <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	88 23       	and	r24, r24
     cac:	69 f0       	breq	.+26     	; 0xcc8 <CAN_transmit+0x58>
     cae:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
     cb0:	fe 01       	movw	r30, r28
     cb2:	e1 0f       	add	r30, r17
     cb4:	f1 1d       	adc	r31, r1
     cb6:	62 81       	ldd	r22, Z+2	; 0x02
     cb8:	86 e3       	ldi	r24, 0x36	; 54
     cba:	81 0f       	add	r24, r17
     cbc:	0e 94 81 08 	call	0x1102	; 0x1102 <MCP_write>
	MCP_write(MCP_TXB0DLC, m->length);
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     cc0:	1f 5f       	subi	r17, 0xFF	; 255
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	18 17       	cp	r17, r24
     cc6:	a0 f3       	brcs	.-24     	; 0xcb0 <CAN_transmit+0x40>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	0e 94 95 08 	call	0x112a	; 0x112a <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <CAN_receive>:

int CAN_receive(Message *m){
     cd6:	1f 93       	push	r17
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
     cde:	8c e2       	ldi	r24, 0x2C	; 44
     ce0:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MCP_read>
     ce4:	80 ff       	sbrs	r24, 0
     ce6:	2c c0       	rjmp	.+88     	; 0xd40 <CAN_receive+0x6a>
		m->length = MCP_read(MCP_RBB0DLC);
     ce8:	85 e6       	ldi	r24, 0x65	; 101
     cea:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MCP_read>
     cee:	89 83       	std	Y+1, r24	; 0x01
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
     cf0:	82 e6       	ldi	r24, 0x62	; 98
     cf2:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MCP_read>
     cf6:	18 2f       	mov	r17, r24
     cf8:	12 95       	swap	r17
     cfa:	16 95       	lsr	r17
     cfc:	17 70       	andi	r17, 0x07	; 7
     cfe:	18 83       	st	Y, r17
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
     d00:	81 e6       	ldi	r24, 0x61	; 97
     d02:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MCP_read>
     d06:	88 0f       	add	r24, r24
     d08:	88 0f       	add	r24, r24
     d0a:	88 0f       	add	r24, r24
     d0c:	18 0f       	add	r17, r24
     d0e:	18 83       	st	Y, r17
		for(uint8_t i = 0; i < m->length; i++){
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	88 23       	and	r24, r24
     d14:	69 f0       	breq	.+26     	; 0xd30 <CAN_receive+0x5a>
     d16:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
     d18:	86 e6       	ldi	r24, 0x66	; 102
     d1a:	81 0f       	add	r24, r17
     d1c:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MCP_read>
     d20:	fe 01       	movw	r30, r28
     d22:	e1 0f       	add	r30, r17
     d24:	f1 1d       	adc	r31, r1
     d26:	82 83       	std	Z+2, r24	; 0x02
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
		for(uint8_t i = 0; i < m->length; i++){
     d28:	1f 5f       	subi	r17, 0xFF	; 255
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	18 17       	cp	r17, r24
     d2e:	a0 f3       	brcs	.-24     	; 0xd18 <CAN_receive+0x42>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	8c e2       	ldi	r24, 0x2C	; 44
     d36:	0e 94 b6 08 	call	0x116c	; 0x116c <MCP_bit_modify>
		return 0;
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <CAN_receive+0x6e>
	}
	return 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	df 91       	pop	r29
     d46:	cf 91       	pop	r28
     d48:	1f 91       	pop	r17
     d4a:	08 95       	ret

00000d4c <get_slider_position>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Slider get_slider_position(){
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 0b 06 	call	0xc16	; 0xc16 <get_adc>
     d58:	ec 01       	movw	r28, r24
	slide.right = ((get_adc(0))*100)/255;
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 0b 06 	call	0xc16	; 0xc16 <get_adc>
     d62:	fc 01       	movw	r30, r24
float xMean = 127;
float yMean = 127;

Slider get_slider_position(){
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     d64:	44 e6       	ldi	r20, 0x64	; 100
     d66:	4c 9f       	mul	r20, r28
     d68:	c0 01       	movw	r24, r0
     d6a:	4d 9f       	mul	r20, r29
     d6c:	90 0d       	add	r25, r0
     d6e:	11 24       	eor	r1, r1
     d70:	2f ef       	ldi	r18, 0xFF	; 255
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	b9 01       	movw	r22, r18
     d76:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
     d7a:	c6 2f       	mov	r28, r22
	slide.right = ((get_adc(0))*100)/255;
     d7c:	4e 9f       	mul	r20, r30
     d7e:	c0 01       	movw	r24, r0
     d80:	4f 9f       	mul	r20, r31
     d82:	90 0d       	add	r25, r0
     d84:	11 24       	eor	r1, r1
     d86:	b9 01       	movw	r22, r18
     d88:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
     d8c:	76 2f       	mov	r23, r22
	return slide;
}
     d8e:	6c 2f       	mov	r22, r28
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <get_joystick_direction>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = get_joystick_direction(joy.X, joy.Y);
	return joy;
}

direction get_joystick_direction(int x, int y){
     d9a:	cf 92       	push	r12
     d9c:	df 92       	push	r13
     d9e:	ef 92       	push	r14
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	8c 01       	movw	r16, r24
     dac:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
     dae:	bc 01       	movw	r22, r24
     db0:	88 27       	eor	r24, r24
     db2:	77 fd       	sbrc	r23, 7
     db4:	80 95       	com	r24
     db6:	98 2f       	mov	r25, r24
     db8:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
     dbc:	6b 01       	movw	r12, r22
     dbe:	7c 01       	movw	r14, r24
     dc0:	e8 94       	clt
     dc2:	f7 f8       	bld	r15, 7
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	48 e4       	ldi	r20, 0x48	; 72
     dca:	52 e4       	ldi	r21, 0x42	; 66
     dcc:	c7 01       	movw	r24, r14
     dce:	b6 01       	movw	r22, r12
     dd0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__cmpsf2>
     dd4:	88 23       	and	r24, r24
     dd6:	84 f4       	brge	.+32     	; 0xdf8 <get_joystick_direction+0x5e>
     dd8:	be 01       	movw	r22, r28
     dda:	88 27       	eor	r24, r24
     ddc:	77 fd       	sbrc	r23, 7
     dde:	80 95       	com	r24
     de0:	98 2f       	mov	r25, r24
     de2:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
     de6:	9f 77       	andi	r25, 0x7F	; 127
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	48 e4       	ldi	r20, 0x48	; 72
     dee:	52 e4       	ldi	r21, 0x42	; 66
     df0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__cmpsf2>
     df4:	88 23       	and	r24, r24
     df6:	dc f0       	brlt	.+54     	; 0xe2e <get_joystick_direction+0x94>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
     df8:	be 01       	movw	r22, r28
     dfa:	88 27       	eor	r24, r24
     dfc:	77 fd       	sbrc	r23, 7
     dfe:	80 95       	com	r24
     e00:	98 2f       	mov	r25, r24
     e02:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
     e06:	9b 01       	movw	r18, r22
     e08:	ac 01       	movw	r20, r24
     e0a:	5f 77       	andi	r21, 0x7F	; 127
     e0c:	c7 01       	movw	r24, r14
     e0e:	b6 01       	movw	r22, r12
     e10:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__cmpsf2>
     e14:	88 23       	and	r24, r24
     e16:	2c f4       	brge	.+10     	; 0xe22 <get_joystick_direction+0x88>
		if(y > 0){
     e18:	1c 16       	cp	r1, r28
     e1a:	1d 06       	cpc	r1, r29
     e1c:	54 f4       	brge	.+20     	; 0xe32 <get_joystick_direction+0x98>
			return UP;
     e1e:	82 e0       	ldi	r24, 0x02	; 2
     e20:	09 c0       	rjmp	.+18     	; 0xe34 <get_joystick_direction+0x9a>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	10 16       	cp	r1, r16
     e26:	11 06       	cpc	r1, r17
     e28:	2c f0       	brlt	.+10     	; 0xe34 <get_joystick_direction+0x9a>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	03 c0       	rjmp	.+6      	; 0xe34 <get_joystick_direction+0x9a>
}

direction get_joystick_direction(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
     e2e:	84 e0       	ldi	r24, 0x04	; 4
     e30:	01 c0       	rjmp	.+2      	; 0xe34 <get_joystick_direction+0x9a>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
     e32:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	08 95       	ret

00000e46 <get_joystick_position>:
	slide.left = ((get_adc(1))*100)/255;
	slide.right = ((get_adc(0))*100)/255;
	return slide;
}

Joystick get_joystick_position(){
     e46:	cf 92       	push	r12
     e48:	df 92       	push	r13
     e4a:	ef 92       	push	r14
     e4c:	ff 92       	push	r15
     e4e:	cf 93       	push	r28
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 0b 06 	call	0xc16	; 0xc16 <get_adc>
     e58:	c0 90 0a 01 	lds	r12, 0x010A
     e5c:	d0 90 0b 01 	lds	r13, 0x010B
     e60:	e0 90 0c 01 	lds	r14, 0x010C
     e64:	f0 90 0d 01 	lds	r15, 0x010D
     e68:	bc 01       	movw	r22, r24
     e6a:	88 27       	eor	r24, r24
     e6c:	77 fd       	sbrc	r23, 7
     e6e:	80 95       	com	r24
     e70:	98 2f       	mov	r25, r24
     e72:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
     e76:	a7 01       	movw	r20, r14
     e78:	96 01       	movw	r18, r12
     e7a:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__subsf3>
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	48 ec       	ldi	r20, 0xC8	; 200
     e84:	52 e4       	ldi	r21, 0x42	; 66
     e86:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     e8a:	a7 01       	movw	r20, r14
     e8c:	96 01       	movw	r18, r12
     e8e:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__divsf3>
     e92:	0e 94 3d 12 	call	0x247a	; 0x247a <__fixsfsi>
     e96:	c6 2f       	mov	r28, r22
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
     e98:	83 e0       	ldi	r24, 0x03	; 3
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 0b 06 	call	0xc16	; 0xc16 <get_adc>
     ea0:	c0 90 0e 01 	lds	r12, 0x010E
     ea4:	d0 90 0f 01 	lds	r13, 0x010F
     ea8:	e0 90 10 01 	lds	r14, 0x0110
     eac:	f0 90 11 01 	lds	r15, 0x0111
     eb0:	bc 01       	movw	r22, r24
     eb2:	88 27       	eor	r24, r24
     eb4:	77 fd       	sbrc	r23, 7
     eb6:	80 95       	com	r24
     eb8:	98 2f       	mov	r25, r24
     eba:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
     ebe:	a7 01       	movw	r20, r14
     ec0:	96 01       	movw	r18, r12
     ec2:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__subsf3>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	48 ec       	ldi	r20, 0xC8	; 200
     ecc:	52 e4       	ldi	r21, 0x42	; 66
     ece:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     ed2:	a7 01       	movw	r20, r14
     ed4:	96 01       	movw	r18, r12
     ed6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__divsf3>
     eda:	0e 94 3d 12 	call	0x247a	; 0x247a <__fixsfsi>
     ede:	f6 2e       	mov	r15, r22
	joy.D = get_joystick_direction(joy.X, joy.Y);
     ee0:	6c 2f       	mov	r22, r28
     ee2:	77 27       	eor	r23, r23
     ee4:	67 fd       	sbrc	r22, 7
     ee6:	70 95       	com	r23
     ee8:	8f 2d       	mov	r24, r15
     eea:	99 27       	eor	r25, r25
     eec:	87 fd       	sbrc	r24, 7
     eee:	90 95       	com	r25
     ef0:	0e 94 cd 06 	call	0xd9a	; 0xd9a <get_joystick_direction>
	return joy;
}
     ef4:	6f 2d       	mov	r22, r15
     ef6:	7c 2f       	mov	r23, r28
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	cf 91       	pop	r28
     efc:	ff 90       	pop	r15
     efe:	ef 90       	pop	r14
     f00:	df 90       	pop	r13
     f02:	cf 90       	pop	r12
     f04:	08 95       	ret

00000f06 <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	1f 92       	push	r1
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
     f10:	28 ee       	ldi	r18, 0xE8	; 232
     f12:	33 e0       	ldi	r19, 0x03	; 3
     f14:	a9 01       	movw	r20, r18
     f16:	48 1b       	sub	r20, r24
     f18:	59 0b       	sbc	r21, r25
     f1a:	ca 01       	movw	r24, r20
     f1c:	68 ec       	ldi	r22, 0xC8	; 200
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
     f24:	60 5d       	subi	r22, 0xD0	; 208
     f26:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	61 e7       	ldi	r22, 0x71	; 113
     f36:	71 e0       	ldi	r23, 0x01	; 1
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
     f40:	42 e0       	ldi	r20, 0x02	; 2
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	6f e7       	ldi	r22, 0x7F	; 127
     f46:	71 e0       	ldi	r23, 0x01	; 1
     f48:	80 e0       	ldi	r24, 0x00	; 0
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
     f50:	20 e6       	ldi	r18, 0x60	; 96
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	42 e0       	ldi	r20, 0x02	; 2
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	be 01       	movw	r22, r28
     f5a:	6f 5f       	subi	r22, 0xFF	; 255
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
	oled_sram_flush(0);
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	08 95       	ret

00000f76 <calibrate_joystick>:
			return LEFT;
		} 
	}
}

void calibrate_joystick(){
     f76:	bf 92       	push	r11
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     f88:	e1 2c       	mov	r14, r1
     f8a:	f1 2c       	mov	r15, r1

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
     f8c:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
     f8e:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
     f90:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrate_joystick(){
	uint8_t yMax = 127;
     f92:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
     f94:	0f 2e       	mov	r0, r31
     f96:	f8 ec       	ldi	r31, 0xC8	; 200
     f98:	cf 2e       	mov	r12, r31
     f9a:	d1 2c       	mov	r13, r1
     f9c:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
     f9e:	82 e0       	ldi	r24, 0x02	; 2
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	0e 94 0b 06 	call	0xc16	; 0xc16 <get_adc>
     fa6:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 0b 06 	call	0xc16	; 0xc16 <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
     fb0:	bc 16       	cp	r11, r28
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <calibrate_joystick+0x40>
     fb4:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
     fb6:	81 17       	cp	r24, r17
     fb8:	08 f4       	brcc	.+2      	; 0xfbc <calibrate_joystick+0x46>
     fba:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
     fbc:	08 17       	cp	r16, r24
     fbe:	08 f4       	brcc	.+2      	; 0xfc2 <calibrate_joystick+0x4c>
     fc0:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
     fc2:	db 15       	cp	r29, r11
     fc4:	08 f4       	brcc	.+2      	; 0xfc8 <calibrate_joystick+0x52>
     fc6:	db 2d       	mov	r29, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	97 e1       	ldi	r25, 0x17	; 23
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	f1 f7       	brne	.-4      	; 0xfcc <calibrate_joystick+0x56>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <calibrate_joystick+0x5c>
     fd2:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
     fd4:	c7 01       	movw	r24, r14
     fd6:	b6 01       	movw	r22, r12
     fd8:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
     fdc:	89 2b       	or	r24, r25
     fde:	19 f4       	brne	.+6      	; 0xfe6 <calibrate_joystick+0x70>
			calibration_visual_countdown(i);
     fe0:	c7 01       	movw	r24, r14
     fe2:	0e 94 83 07 	call	0xf06	; 0xf06 <calibration_visual_countdown>
void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     fe6:	9f ef       	ldi	r25, 0xFF	; 255
     fe8:	e9 1a       	sub	r14, r25
     fea:	f9 0a       	sbc	r15, r25
     fec:	88 ee       	ldi	r24, 0xE8	; 232
     fee:	e8 16       	cp	r14, r24
     ff0:	83 e0       	ldi	r24, 0x03	; 3
     ff2:	f8 06       	cpc	r15, r24
     ff4:	a1 f6       	brne	.-88     	; 0xf9e <calibrate_joystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
     ff6:	6d 2f       	mov	r22, r29
     ff8:	70 e0       	ldi	r23, 0x00	; 0
     ffa:	6c 1b       	sub	r22, r28
     ffc:	71 09       	sbc	r23, r1
     ffe:	88 27       	eor	r24, r24
    1000:	77 fd       	sbrc	r23, 7
    1002:	80 95       	com	r24
    1004:	98 2f       	mov	r25, r24
    1006:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    1016:	60 93 0a 01 	sts	0x010A, r22
    101a:	70 93 0b 01 	sts	0x010B, r23
    101e:	80 93 0c 01 	sts	0x010C, r24
    1022:	90 93 0d 01 	sts	0x010D, r25
	xMean = (xMax - xMin)/2.0;
    1026:	60 2f       	mov	r22, r16
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	61 1b       	sub	r22, r17
    102c:	71 09       	sbc	r23, r1
    102e:	88 27       	eor	r24, r24
    1030:	77 fd       	sbrc	r23, 7
    1032:	80 95       	com	r24
    1034:	98 2f       	mov	r25, r24
    1036:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	5f e3       	ldi	r21, 0x3F	; 63
    1042:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    1046:	60 93 0e 01 	sts	0x010E, r22
    104a:	70 93 0f 01 	sts	0x010F, r23
    104e:	80 93 10 01 	sts	0x0110, r24
    1052:	90 93 11 01 	sts	0x0111, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
    1056:	1f 92       	push	r1
    1058:	0f 93       	push	r16
    105a:	1f 92       	push	r1
    105c:	1f 93       	push	r17
    105e:	1f 92       	push	r1
    1060:	df 93       	push	r29
    1062:	1f 92       	push	r1
    1064:	cf 93       	push	r28
    1066:	8b e8       	ldi	r24, 0x8B	; 139
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	9f 93       	push	r25
    106c:	8f 93       	push	r24
    106e:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <printf>
    1072:	8d b7       	in	r24, 0x3d	; 61
    1074:	9e b7       	in	r25, 0x3e	; 62
    1076:	0a 96       	adiw	r24, 0x0a	; 10
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	9e bf       	out	0x3e, r25	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	8d bf       	out	0x3d, r24	; 61
}
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	df 90       	pop	r13
    1090:	cf 90       	pop	r12
    1092:	bf 90       	pop	r11
    1094:	08 95       	ret

00001096 <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    1096:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
    109a:	80 ec       	ldi	r24, 0xC0	; 192
    109c:	0e 94 65 02 	call	0x4ca	; 0x4ca <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    10a0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_ss_high>
    10a4:	08 95       	ret

000010a6 <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
    10a6:	cf 93       	push	r28
    10a8:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    10aa:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
    10ae:	83 e0       	ldi	r24, 0x03	; 3
    10b0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	SPI_send(address);
    10b4:	8c 2f       	mov	r24, r28
    10b6:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	uint8_t data = SPI_receive();
    10ba:	0e 94 6d 02 	call	0x4da	; 0x4da <SPI_receive>
    10be:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    10c0:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
    10c4:	8c 2f       	mov	r24, r28
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
    10ca:	80 e8       	ldi	r24, 0x80	; 128
    10cc:	95 e2       	ldi	r25, 0x25	; 37
    10ce:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <uartInit>
	
	//Start SPI driver
	SPI_init();
    10d2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
    10d6:	0e 94 4b 08 	call	0x1096	; 0x1096 <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
    10da:	8e e0       	ldi	r24, 0x0E	; 14
    10dc:	0e 94 53 08 	call	0x10a6	; 0x10a6 <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
    10e0:	80 7e       	andi	r24, 0xE0	; 224
    10e2:	80 38       	cpi	r24, 0x80	; 128
    10e4:	59 f0       	breq	.+22     	; 0x10fc <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
    10e6:	87 e9       	ldi	r24, 0x97	; 151
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	9f 93       	push	r25
    10ec:	8f 93       	push	r24
    10ee:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <printf>
		return 1;
    10f2:	0f 90       	pop	r0
    10f4:	0f 90       	pop	r0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	08 95       	ret
	}
	return 0;
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
}
    1100:	08 95       	ret

00001102 <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	d8 2f       	mov	r29, r24
    1108:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    110a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	SPI_send(address);
    1114:	8d 2f       	mov	r24, r29
    1116:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	SPI_send(data);
    111a:	8c 2f       	mov	r24, r28
    111c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    1120:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
    112a:	cf 93       	push	r28
    112c:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    112e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
    1132:	8c 2f       	mov	r24, r28
    1134:	83 70       	andi	r24, 0x03	; 3
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	51 f0       	breq	.+20     	; 0x114e <MCP_rts+0x24>
    113a:	28 f0       	brcs	.+10     	; 0x1146 <MCP_rts+0x1c>
    113c:	82 30       	cpi	r24, 0x02	; 2
    113e:	59 f0       	breq	.+22     	; 0x1156 <MCP_rts+0x2c>
    1140:	83 30       	cpi	r24, 0x03	; 3
    1142:	69 f0       	breq	.+26     	; 0x115e <MCP_rts+0x34>
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
    1146:	81 e8       	ldi	r24, 0x81	; 129
    1148:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
			break;
    114c:	0b c0       	rjmp	.+22     	; 0x1164 <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
    114e:	82 e8       	ldi	r24, 0x82	; 130
    1150:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
			break;
    1154:	07 c0       	rjmp	.+14     	; 0x1164 <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
    1156:	84 e8       	ldi	r24, 0x84	; 132
    1158:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
			break;
    115c:	03 c0       	rjmp	.+6      	; 0x1164 <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
    115e:	87 e8       	ldi	r24, 0x87	; 135
    1160:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    1164:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	18 2f       	mov	r17, r24
    1174:	d6 2f       	mov	r29, r22
    1176:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    1178:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
    117c:	85 e0       	ldi	r24, 0x05	; 5
    117e:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	SPI_send(address);
    1182:	81 2f       	mov	r24, r17
    1184:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	SPI_send(mask);
    1188:	8d 2f       	mov	r24, r29
    118a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	SPI_send(data);
    118e:	8c 2f       	mov	r24, r28
    1190:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    1194:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	08 95       	ret

000011a0 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    11a0:	e0 e0       	ldi	r30, 0x00	; 0
    11a2:	f0 e1       	ldi	r31, 0x10	; 16
    11a4:	8e ea       	ldi	r24, 0xAE	; 174
    11a6:	80 83       	st	Z, r24
    11a8:	81 ea       	ldi	r24, 0xA1	; 161
    11aa:	80 83       	st	Z, r24
    11ac:	8a ed       	ldi	r24, 0xDA	; 218
    11ae:	80 83       	st	Z, r24
    11b0:	82 e1       	ldi	r24, 0x12	; 18
    11b2:	80 83       	st	Z, r24
    11b4:	88 ec       	ldi	r24, 0xC8	; 200
    11b6:	80 83       	st	Z, r24
    11b8:	88 ea       	ldi	r24, 0xA8	; 168
    11ba:	80 83       	st	Z, r24
    11bc:	8f e3       	ldi	r24, 0x3F	; 63
    11be:	80 83       	st	Z, r24
    11c0:	85 ed       	ldi	r24, 0xD5	; 213
    11c2:	80 83       	st	Z, r24
    11c4:	80 e8       	ldi	r24, 0x80	; 128
    11c6:	80 83       	st	Z, r24
    11c8:	81 e8       	ldi	r24, 0x81	; 129
    11ca:	80 83       	st	Z, r24
    11cc:	80 e5       	ldi	r24, 0x50	; 80
    11ce:	80 83       	st	Z, r24
    11d0:	89 ed       	ldi	r24, 0xD9	; 217
    11d2:	80 83       	st	Z, r24
    11d4:	81 e2       	ldi	r24, 0x21	; 33
    11d6:	80 83       	st	Z, r24
    11d8:	80 e2       	ldi	r24, 0x20	; 32
    11da:	80 83       	st	Z, r24
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	80 83       	st	Z, r24
    11e0:	8b ed       	ldi	r24, 0xDB	; 219
    11e2:	80 83       	st	Z, r24
    11e4:	80 e3       	ldi	r24, 0x30	; 48
    11e6:	80 83       	st	Z, r24
    11e8:	8d ea       	ldi	r24, 0xAD	; 173
    11ea:	80 83       	st	Z, r24
    11ec:	10 82       	st	Z, r1
    11ee:	84 ea       	ldi	r24, 0xA4	; 164
    11f0:	80 83       	st	Z, r24
    11f2:	86 ea       	ldi	r24, 0xA6	; 166
    11f4:	80 83       	st	Z, r24
    11f6:	8f ea       	ldi	r24, 0xAF	; 175
    11f8:	80 83       	st	Z, r24
    11fa:	08 95       	ret

000011fc <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
    11fc:	af 92       	push	r10
    11fe:	bf 92       	push	r11
    1200:	cf 92       	push	r12
    1202:	df 92       	push	r13
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
    1212:	c0 e0       	ldi	r28, 0x00	; 0
    1214:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
    1216:	e1 2c       	mov	r14, r1
    1218:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    121a:	c1 2c       	mov	r12, r1
    121c:	68 94       	set
    121e:	dd 24       	eor	r13, r13
    1220:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    1222:	00 e0       	ldi	r16, 0x00	; 0
    1224:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
    1226:	ce 01       	movw	r24, r28
    1228:	9e 01       	movw	r18, r28
    122a:	2f 77       	andi	r18, 0x7F	; 127
    122c:	33 27       	eor	r19, r19
    122e:	23 2b       	or	r18, r19
    1230:	39 f4       	brne	.+14     	; 0x1240 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
    1232:	20 eb       	ldi	r18, 0xB0	; 176
    1234:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    1236:	f6 01       	movw	r30, r12
    1238:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
    123a:	ff ef       	ldi	r31, 0xFF	; 255
    123c:	ef 1a       	sub	r14, r31
    123e:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
    1240:	8a 0d       	add	r24, r10
    1242:	9b 1d       	adc	r25, r11
    1244:	0e 94 4e 0a 	call	0x149c	; 0x149c <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    1248:	f8 01       	movw	r30, r16
    124a:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
    124c:	21 96       	adiw	r28, 0x01	; 1
    124e:	c1 15       	cp	r28, r1
    1250:	f4 e0       	ldi	r31, 0x04	; 4
    1252:	df 07       	cpc	r29, r31
    1254:	41 f7       	brne	.-48     	; 0x1226 <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	ff 90       	pop	r15
    1260:	ef 90       	pop	r14
    1262:	df 90       	pop	r13
    1264:	cf 90       	pop	r12
    1266:	bf 90       	pop	r11
    1268:	af 90       	pop	r10
    126a:	08 95       	ret

0000126c <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
    126c:	1f 92       	push	r1
    126e:	0f 92       	push	r0
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	0f 92       	push	r0
    1274:	11 24       	eor	r1, r1
    1276:	2f 93       	push	r18
    1278:	3f 93       	push	r19
    127a:	4f 93       	push	r20
    127c:	5f 93       	push	r21
    127e:	6f 93       	push	r22
    1280:	7f 93       	push	r23
    1282:	8f 93       	push	r24
    1284:	9f 93       	push	r25
    1286:	af 93       	push	r26
    1288:	bf 93       	push	r27
    128a:	ef 93       	push	r30
    128c:	ff 93       	push	r31
	oled_sram_flush(0);
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
	TCNT1 = 0;
    1296:	1d bc       	out	0x2d, r1	; 45
    1298:	1c bc       	out	0x2c, r1	; 44
}
    129a:	ff 91       	pop	r31
    129c:	ef 91       	pop	r30
    129e:	bf 91       	pop	r27
    12a0:	af 91       	pop	r26
    12a2:	9f 91       	pop	r25
    12a4:	8f 91       	pop	r24
    12a6:	7f 91       	pop	r23
    12a8:	6f 91       	pop	r22
    12aa:	5f 91       	pop	r21
    12ac:	4f 91       	pop	r20
    12ae:	3f 91       	pop	r19
    12b0:	2f 91       	pop	r18
    12b2:	0f 90       	pop	r0
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	0f 90       	pop	r0
    12b8:	1f 90       	pop	r1
    12ba:	18 95       	reti

000012bc <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
    12bc:	af 92       	push	r10
    12be:	bf 92       	push	r11
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
    12d0:	6a 01       	movw	r12, r20
    12d2:	d6 94       	lsr	r13
    12d4:	dc 2c       	mov	r13, r12
    12d6:	cc 24       	eor	r12, r12
    12d8:	d7 94       	ror	r13
    12da:	c7 94       	ror	r12
    12dc:	c8 0e       	add	r12, r24
    12de:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
    12e0:	fb 01       	movw	r30, r22
    12e2:	e0 80       	ld	r14, Z
	while(c != '\0'){
    12e4:	ee 20       	and	r14, r14
    12e6:	69 f1       	breq	.+90     	; 0x1342 <oled_sram_write_string+0x86>
    12e8:	5b 01       	movw	r10, r22
    12ea:	ff ef       	ldi	r31, 0xFF	; 255
    12ec:	af 1a       	sub	r10, r31
    12ee:	bf 0a       	sbc	r11, r31
    12f0:	15 c0       	rjmp	.+42     	; 0x131c <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
    12f2:	ce 01       	movw	r24, r28
    12f4:	f7 01       	movw	r30, r14
    12f6:	e8 0f       	add	r30, r24
    12f8:	f9 1f       	adc	r31, r25
    12fa:	64 91       	lpm	r22, Z
    12fc:	ec 01       	movw	r28, r24
    12fe:	21 96       	adiw	r28, 0x01	; 1
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
    1306:	c0 17       	cp	r28, r16
    1308:	d1 07       	cpc	r29, r17
    130a:	99 f7       	brne	.-26     	; 0x12f2 <oled_sram_write_string+0x36>
    130c:	48 e0       	ldi	r20, 0x08	; 8
    130e:	c4 0e       	add	r12, r20
    1310:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
    1312:	f5 01       	movw	r30, r10
    1314:	e1 90       	ld	r14, Z+
    1316:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
    1318:	ee 20       	and	r14, r14
    131a:	99 f0       	breq	.+38     	; 0x1342 <oled_sram_write_string+0x86>
    131c:	86 01       	movw	r16, r12
    131e:	08 5f       	subi	r16, 0xF8	; 248
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	f1 2c       	mov	r15, r1
    1324:	ee 0c       	add	r14, r14
    1326:	ff 1c       	adc	r15, r15
    1328:	ee 0c       	add	r14, r14
    132a:	ff 1c       	adc	r15, r15
    132c:	ee 0c       	add	r14, r14
    132e:	ff 1c       	adc	r15, r15
    1330:	97 01       	movw	r18, r14
    1332:	2c 19       	sub	r18, r12
    1334:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
    1336:	c6 01       	movw	r24, r12
    1338:	a9 01       	movw	r20, r18
    133a:	40 59       	subi	r20, 0x90	; 144
    133c:	50 40       	sbci	r21, 0x00	; 0
    133e:	7a 01       	movw	r14, r20
    1340:	d9 cf       	rjmp	.-78     	; 0x12f4 <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	bf 90       	pop	r11
    1354:	af 90       	pop	r10
    1356:	08 95       	ret

00001358 <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	7b 01       	movw	r14, r22
	start = start + page*128+col;
    1366:	8a 01       	movw	r16, r20
    1368:	16 95       	lsr	r17
    136a:	10 2f       	mov	r17, r16
    136c:	00 27       	eor	r16, r16
    136e:	17 95       	ror	r17
    1370:	07 95       	ror	r16
    1372:	80 0f       	add	r24, r16
    1374:	91 1f       	adc	r25, r17
    1376:	8c 01       	movw	r16, r24
    1378:	02 0f       	add	r16, r18
    137a:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
    137c:	c0 e0       	ldi	r28, 0x00	; 0
    137e:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
    1380:	d7 01       	movw	r26, r14
    1382:	ec 91       	ld	r30, X
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	b0 97       	sbiw	r30, 0x20	; 32
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	ee 0f       	add	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	ee 0f       	add	r30, r30
    1392:	ff 1f       	adc	r31, r31
    1394:	ec 0f       	add	r30, r28
    1396:	fd 1f       	adc	r31, r29
    1398:	e0 59       	subi	r30, 0x90	; 144
    139a:	ff 4f       	sbci	r31, 0xFF	; 255
    139c:	64 91       	lpm	r22, Z
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	ce 01       	movw	r24, r28
    13a2:	80 0f       	add	r24, r16
    13a4:	91 1f       	adc	r25, r17
    13a6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
    13aa:	21 96       	adiw	r28, 0x01	; 1
    13ac:	c8 30       	cpi	r28, 0x08	; 8
    13ae:	d1 05       	cpc	r29, r1
    13b0:	39 f7       	brne	.-50     	; 0x1380 <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	0f 91       	pop	r16
    13ba:	ff 90       	pop	r15
    13bc:	ef 90       	pop	r14
    13be:	08 95       	ret

000013c0 <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
    13c8:	8b 01       	movw	r16, r22
    13ca:	16 95       	lsr	r17
    13cc:	10 2f       	mov	r17, r16
    13ce:	00 27       	eor	r16, r16
    13d0:	17 95       	ror	r17
    13d2:	07 95       	ror	r16
    13d4:	08 0f       	add	r16, r24
    13d6:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
    13d8:	c0 e0       	ldi	r28, 0x00	; 0
    13da:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	ce 01       	movw	r24, r28
    13e2:	80 0f       	add	r24, r16
    13e4:	91 1f       	adc	r25, r17
    13e6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
    13ea:	21 96       	adiw	r28, 0x01	; 1
    13ec:	c0 38       	cpi	r28, 0x80	; 128
    13ee:	d1 05       	cpc	r29, r1
    13f0:	a9 f7       	brne	.-22     	; 0x13dc <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	08 95       	ret

000013fc <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
    1406:	c0 e0       	ldi	r28, 0x00	; 0
    1408:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
    140a:	be 01       	movw	r22, r28
    140c:	c8 01       	movw	r24, r16
    140e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
    1412:	21 96       	adiw	r28, 0x01	; 1
    1414:	c8 30       	cpi	r28, 0x08	; 8
    1416:	d1 05       	cpc	r29, r1
    1418:	c1 f7       	brne	.-16     	; 0x140a <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	1f 91       	pop	r17
    1420:	0f 91       	pop	r16
    1422:	08 95       	ret

00001424 <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	ea 01       	movw	r28, r20
	int page = y/8;
    142e:	9a 01       	movw	r18, r20
    1430:	dd 23       	and	r29, r29
    1432:	14 f4       	brge	.+4      	; 0x1438 <oled_sram_write_bit+0x14>
    1434:	29 5f       	subi	r18, 0xF9	; 249
    1436:	3f 4f       	sbci	r19, 0xFF	; 255
    1438:	89 01       	movw	r16, r18
    143a:	15 95       	asr	r17
    143c:	07 95       	ror	r16
    143e:	15 95       	asr	r17
    1440:	07 95       	ror	r16
    1442:	15 95       	asr	r17
    1444:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
    1446:	16 95       	lsr	r17
    1448:	10 2f       	mov	r17, r16
    144a:	00 27       	eor	r16, r16
    144c:	17 95       	ror	r17
    144e:	07 95       	ror	r16
    1450:	08 0f       	add	r16, r24
    1452:	19 1f       	adc	r17, r25
    1454:	06 0f       	add	r16, r22
    1456:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
    1458:	c8 01       	movw	r24, r16
    145a:	0e 94 4e 0a 	call	0x149c	; 0x149c <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
    145e:	ae 01       	movw	r20, r28
    1460:	47 70       	andi	r20, 0x07	; 7
    1462:	50 78       	andi	r21, 0x80	; 128
    1464:	55 23       	and	r21, r21
    1466:	34 f4       	brge	.+12     	; 0x1474 <oled_sram_write_bit+0x50>
    1468:	41 50       	subi	r20, 0x01	; 1
    146a:	51 09       	sbc	r21, r1
    146c:	48 6f       	ori	r20, 0xF8	; 248
    146e:	5f 6f       	ori	r21, 0xFF	; 255
    1470:	4f 5f       	subi	r20, 0xFF	; 255
    1472:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
    1474:	21 e0       	ldi	r18, 0x01	; 1
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	b9 01       	movw	r22, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <oled_sram_write_bit+0x5c>
    147c:	66 0f       	add	r22, r22
    147e:	77 1f       	adc	r23, r23
    1480:	4a 95       	dec	r20
    1482:	e2 f7       	brpl	.-8      	; 0x147c <oled_sram_write_bit+0x58>
    1484:	ab 01       	movw	r20, r22
    1486:	48 2b       	or	r20, r24
	setSRAM(index, temp);
    1488:	64 2f       	mov	r22, r20
    148a:	70 e0       	ldi	r23, 0x00	; 0
    148c:	c8 01       	movw	r24, r16
    148e:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <setSRAM>
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	08 95       	ret

0000149c <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
    149c:	98 5e       	subi	r25, 0xE8	; 232
    149e:	fc 01       	movw	r30, r24
    14a0:	80 81       	ld	r24, Z
}
    14a2:	08 95       	ret

000014a4 <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
    14a4:	fc 01       	movw	r30, r24
    14a6:	f8 5e       	subi	r31, 0xE8	; 232
    14a8:	80 81       	ld	r24, Z
		ext_ram[index] = value;
    14aa:	60 83       	st	Z, r22
		return temp;
}
    14ac:	08 95       	ret

000014ae <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
    14ae:	5d 9b       	sbis	0x0b, 5	; 11
    14b0:	fe cf       	rjmp	.-4      	; 0x14ae <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
    14b2:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	08 95       	ret

000014ba <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
    14ba:	9c 01       	movw	r18, r24
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	70 eb       	ldi	r23, 0xB0	; 176
    14c4:	84 e0       	ldi	r24, 0x04	; 4
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 9b 13 	call	0x2736	; 0x2736 <__divmodsi4>
    14cc:	21 50       	subi	r18, 0x01	; 1
    14ce:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    14d0:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
    14d2:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    14d4:	8a b1       	in	r24, 0x0a	; 10
    14d6:	88 61       	ori	r24, 0x18	; 24
    14d8:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
    14da:	80 b5       	in	r24, 0x20	; 32
    14dc:	86 68       	ori	r24, 0x86	; 134
    14de:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	70 e0       	ldi	r23, 0x00	; 0
    14e4:	87 e5       	ldi	r24, 0x57	; 87
    14e6:	9a e0       	ldi	r25, 0x0A	; 10
    14e8:	0e 94 75 15 	call	0x2aea	; 0x2aea <fdevopen>
	
	return 0;
}
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	08 95       	ret

000014f2 <play_draw>:
#include "../Driver_files/oled_driver.h"
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
    14f2:	80 e0       	ldi	r24, 0x00	; 0
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
    14fa:	0f e1       	ldi	r16, 0x1F	; 31
    14fc:	10 e0       	ldi	r17, 0x00	; 0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
    14fe:	cf e3       	ldi	r28, 0x3F	; 63
    1500:	d0 e0       	ldi	r29, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = get_joystick_position();
    1502:	0e 94 23 07 	call	0xe46	; 0xe46 <get_joystick_position>
		switch(joy.D){
    1506:	81 30       	cpi	r24, 0x01	; 1
    1508:	71 f0       	breq	.+28     	; 0x1526 <play_draw+0x34>
    150a:	58 f0       	brcs	.+22     	; 0x1522 <play_draw+0x30>
    150c:	82 30       	cpi	r24, 0x02	; 2
    150e:	19 f0       	breq	.+6      	; 0x1516 <play_draw+0x24>
    1510:	83 30       	cpi	r24, 0x03	; 3
    1512:	21 f0       	breq	.+8      	; 0x151c <play_draw+0x2a>
    1514:	09 c0       	rjmp	.+18     	; 0x1528 <play_draw+0x36>
			case NEUTRAL:
				break;
			case UP:
				y--;
    1516:	01 50       	subi	r16, 0x01	; 1
    1518:	11 09       	sbc	r17, r1
				break;
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <play_draw+0x36>
			case DOWN:
				y++;
    151c:	0f 5f       	subi	r16, 0xFF	; 255
    151e:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <play_draw+0x36>
			case LEFT:
				x--;
    1522:	21 97       	sbiw	r28, 0x01	; 1
				break;
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <play_draw+0x36>
			case RIGHT:
				x++;
    1526:	21 96       	adiw	r28, 0x01	; 1
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
    1528:	a8 01       	movw	r20, r16
    152a:	be 01       	movw	r22, r28
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
		oled_sram_flush(0);
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
    153c:	2f ef       	ldi	r18, 0xFF	; 255
    153e:	8f e7       	ldi	r24, 0x7F	; 127
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	21 50       	subi	r18, 0x01	; 1
    1544:	80 40       	sbci	r24, 0x00	; 0
    1546:	90 40       	sbci	r25, 0x00	; 0
    1548:	e1 f7       	brne	.-8      	; 0x1542 <play_draw+0x50>
    154a:	00 c0       	rjmp	.+0      	; 0x154c <play_draw+0x5a>
    154c:	00 c0       	rjmp	.+0      	; 0x154e <play_draw+0x5c>
    154e:	d9 cf       	rjmp	.-78     	; 0x1502 <play_draw+0x10>

00001550 <racketHit>:

typedef struct{
	int pos; // from 0 to 45 (16 in width)
} Racket;

int racketHit(Ball *ball, int racketPos){
    1550:	cf 92       	push	r12
    1552:	df 92       	push	r13
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	cf 93       	push	r28
    155a:	df 93       	push	r29
    155c:	eb 01       	movw	r28, r22
	if (ball->posY >= racketPos && ball->posY < racketPos + RACKETSIZE )
    155e:	fc 01       	movw	r30, r24
    1560:	c2 80       	ldd	r12, Z+2	; 0x02
    1562:	d3 80       	ldd	r13, Z+3	; 0x03
    1564:	e4 80       	ldd	r14, Z+4	; 0x04
    1566:	f5 80       	ldd	r15, Z+5	; 0x05
    1568:	88 27       	eor	r24, r24
    156a:	77 fd       	sbrc	r23, 7
    156c:	80 95       	com	r24
    156e:	98 2f       	mov	r25, r24
    1570:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
    1574:	9b 01       	movw	r18, r22
    1576:	ac 01       	movw	r20, r24
    1578:	c7 01       	movw	r24, r14
    157a:	b6 01       	movw	r22, r12
    157c:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
    1580:	88 23       	and	r24, r24
    1582:	bc f0       	brlt	.+46     	; 0x15b2 <racketHit+0x62>
    1584:	be 01       	movw	r22, r28
    1586:	60 5f       	subi	r22, 0xF0	; 240
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	88 27       	eor	r24, r24
    158c:	77 fd       	sbrc	r23, 7
    158e:	80 95       	com	r24
    1590:	98 2f       	mov	r25, r24
    1592:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
    1596:	9b 01       	movw	r18, r22
    1598:	ac 01       	movw	r20, r24
    159a:	d1 e0       	ldi	r29, 0x01	; 1
    159c:	c0 e0       	ldi	r28, 0x00	; 0
    159e:	c7 01       	movw	r24, r14
    15a0:	b6 01       	movw	r22, r12
    15a2:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__cmpsf2>
    15a6:	88 23       	and	r24, r24
    15a8:	0c f0       	brlt	.+2      	; 0x15ac <racketHit+0x5c>
    15aa:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
    15ac:	8d 2f       	mov	r24, r29
    15ae:	9c 2f       	mov	r25, r28
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <racketHit+0x66>
	return 0;
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	90 e0       	ldi	r25, 0x00	; 0
}
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	08 95       	ret

000015c4 <updateBallAngle>:

void updateBallAngle(Ball *ball, int racketPos){
    15c4:	cf 92       	push	r12
    15c6:	df 92       	push	r13
    15c8:	ef 92       	push	r14
    15ca:	ff 92       	push	r15
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	ec 01       	movw	r28, r24
    15d6:	8b 01       	movw	r16, r22
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
	int newBallAngle = ball->angle + hitPos * 45;
    15d8:	6e 81       	ldd	r22, Y+6	; 0x06
    15da:	7f 81       	ldd	r23, Y+7	; 0x07
    15dc:	88 27       	eor	r24, r24
    15de:	77 fd       	sbrc	r23, 7
    15e0:	80 95       	com	r24
    15e2:	98 2f       	mov	r25, r24
    15e4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
    15e8:	6b 01       	movw	r12, r22
    15ea:	7c 01       	movw	r14, r24
		return 1;
	return 0;
}

void updateBallAngle(Ball *ball, int racketPos){
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
    15ec:	b8 01       	movw	r22, r16
    15ee:	88 27       	eor	r24, r24
    15f0:	77 fd       	sbrc	r23, 7
    15f2:	80 95       	com	r24
    15f4:	98 2f       	mov	r25, r24
    15f6:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
    15fa:	9b 01       	movw	r18, r22
    15fc:	ac 01       	movw	r20, r24
    15fe:	6a 81       	ldd	r22, Y+2	; 0x02
    1600:	7b 81       	ldd	r23, Y+3	; 0x03
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	9d 81       	ldd	r25, Y+5	; 0x05
    1606:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__subsf3>
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e0       	ldi	r20, 0x00	; 0
    1610:	51 e4       	ldi	r21, 0x41	; 65
    1612:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__subsf3>
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	5e e3       	ldi	r21, 0x3E	; 62
    161e:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
	int newBallAngle = ball->angle + hitPos * 45;
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	44 e3       	ldi	r20, 0x34	; 52
    1628:	52 e4       	ldi	r21, 0x42	; 66
    162a:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    162e:	9b 01       	movw	r18, r22
    1630:	ac 01       	movw	r20, r24
    1632:	c7 01       	movw	r24, r14
    1634:	b6 01       	movw	r22, r12
    1636:	0e 94 6d 11 	call	0x22da	; 0x22da <__addsf3>
    163a:	0e 94 3d 12 	call	0x247a	; 0x247a <__fixsfsi>
	if(newBallAngle > 45) ball->angle = 45;
    163e:	6e 32       	cpi	r22, 0x2E	; 46
    1640:	71 05       	cpc	r23, r1
    1642:	2c f0       	brlt	.+10     	; 0x164e <updateBallAngle+0x8a>
    1644:	8d e2       	ldi	r24, 0x2D	; 45
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	9f 83       	std	Y+7, r25	; 0x07
    164a:	8e 83       	std	Y+6, r24	; 0x06
    164c:	0b c0       	rjmp	.+22     	; 0x1664 <updateBallAngle+0xa0>
	else if(newBallAngle < -45) ball->angle = 45;
    164e:	63 3d       	cpi	r22, 0xD3	; 211
    1650:	4f ef       	ldi	r20, 0xFF	; 255
    1652:	74 07       	cpc	r23, r20
    1654:	2c f4       	brge	.+10     	; 0x1660 <updateBallAngle+0x9c>
    1656:	8d e2       	ldi	r24, 0x2D	; 45
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9f 83       	std	Y+7, r25	; 0x07
    165c:	8e 83       	std	Y+6, r24	; 0x06
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <updateBallAngle+0xa0>
	else ball->angle = newBallAngle;
    1660:	7f 83       	std	Y+7, r23	; 0x07
    1662:	6e 83       	std	Y+6, r22	; 0x06
}
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	08 95       	ret

00001676 <ballInit>:

void ballInit(Ball *ball){
    1676:	cf 93       	push	r28
    1678:	df 93       	push	r29
    167a:	ec 01       	movw	r28, r24
	ball->dir = rand() % 2;
    167c:	0e 94 65 15 	call	0x2aca	; 0x2aca <rand>
    1680:	81 70       	andi	r24, 0x01	; 1
    1682:	90 78       	andi	r25, 0x80	; 128
    1684:	99 23       	and	r25, r25
    1686:	24 f4       	brge	.+8      	; 0x1690 <ballInit+0x1a>
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	8e 6f       	ori	r24, 0xFE	; 254
    168c:	9f 6f       	ori	r25, 0xFF	; 255
    168e:	01 96       	adiw	r24, 0x01	; 1
    1690:	99 87       	std	Y+9, r25	; 0x09
    1692:	88 87       	std	Y+8, r24	; 0x08
	ball->angle = (rand() % 91) - 45;
    1694:	0e 94 65 15 	call	0x2aca	; 0x2aca <rand>
    1698:	6b e5       	ldi	r22, 0x5B	; 91
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
    16a0:	8d 97       	sbiw	r24, 0x2d	; 45
    16a2:	9f 83       	std	Y+7, r25	; 0x07
    16a4:	8e 83       	std	Y+6, r24	; 0x06
	ball->posX = 63;
    16a6:	8f e3       	ldi	r24, 0x3F	; 63
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	99 83       	std	Y+1, r25	; 0x01
    16ac:	88 83       	st	Y, r24
}
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	08 95       	ret

000016b4 <updateBallPosition>:

void updateBallPosition(Ball *ball){
    16b4:	cf 92       	push	r12
    16b6:	df 92       	push	r13
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	ec 01       	movw	r28, r24
	float tempPosY = ball->posY + ((float)(ball->angle)/45);
    16c6:	0e 81       	ldd	r16, Y+6	; 0x06
    16c8:	1f 81       	ldd	r17, Y+7	; 0x07
    16ca:	b8 01       	movw	r22, r16
    16cc:	88 27       	eor	r24, r24
    16ce:	77 fd       	sbrc	r23, 7
    16d0:	80 95       	com	r24
    16d2:	98 2f       	mov	r25, r24
    16d4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__floatsisf>
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	44 e3       	ldi	r20, 0x34	; 52
    16de:	52 e4       	ldi	r21, 0x42	; 66
    16e0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__divsf3>
    16e4:	2a 81       	ldd	r18, Y+2	; 0x02
    16e6:	3b 81       	ldd	r19, Y+3	; 0x03
    16e8:	4c 81       	ldd	r20, Y+4	; 0x04
    16ea:	5d 81       	ldd	r21, Y+5	; 0x05
    16ec:	0e 94 6d 11 	call	0x22da	; 0x22da <__addsf3>
    16f0:	6b 01       	movw	r12, r22
    16f2:	7c 01       	movw	r14, r24
	
	//hits the wall
	if (tempPosY > 63){ 
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4c e7       	ldi	r20, 0x7C	; 124
    16fa:	52 e4       	ldi	r21, 0x42	; 66
    16fc:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
    1700:	18 16       	cp	r1, r24
    1702:	d4 f4       	brge	.+52     	; 0x1738 <updateBallPosition+0x84>
		ball->posY = 63 - (tempPosY - 63);
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	4c e7       	ldi	r20, 0x7C	; 124
    170a:	52 e4       	ldi	r21, 0x42	; 66
    170c:	c7 01       	movw	r24, r14
    170e:	b6 01       	movw	r22, r12
    1710:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__subsf3>
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	60 e0       	ldi	r22, 0x00	; 0
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	8c e7       	ldi	r24, 0x7C	; 124
    171e:	92 e4       	ldi	r25, 0x42	; 66
    1720:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__subsf3>
    1724:	6a 83       	std	Y+2, r22	; 0x02
    1726:	7b 83       	std	Y+3, r23	; 0x03
    1728:	8c 83       	std	Y+4, r24	; 0x04
    172a:	9d 83       	std	Y+5, r25	; 0x05
		ball->angle *= -1;
    172c:	11 95       	neg	r17
    172e:	01 95       	neg	r16
    1730:	11 09       	sbc	r17, r1
    1732:	1f 83       	std	Y+7, r17	; 0x07
    1734:	0e 83       	std	Y+6, r16	; 0x06
    1736:	1b c0       	rjmp	.+54     	; 0x176e <updateBallPosition+0xba>
	}
	else if (tempPosY < 0){
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	a9 01       	movw	r20, r18
    173e:	c7 01       	movw	r24, r14
    1740:	b6 01       	movw	r22, r12
    1742:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__cmpsf2>
    1746:	88 23       	and	r24, r24
    1748:	74 f4       	brge	.+28     	; 0x1766 <updateBallPosition+0xb2>
		ball->posY = -1*tempPosY;
    174a:	f7 fa       	bst	r15, 7
    174c:	f0 94       	com	r15
    174e:	f7 f8       	bld	r15, 7
    1750:	f0 94       	com	r15
    1752:	ca 82       	std	Y+2, r12	; 0x02
    1754:	db 82       	std	Y+3, r13	; 0x03
    1756:	ec 82       	std	Y+4, r14	; 0x04
    1758:	fd 82       	std	Y+5, r15	; 0x05
		ball->angle *= -1;
    175a:	11 95       	neg	r17
    175c:	01 95       	neg	r16
    175e:	11 09       	sbc	r17, r1
    1760:	1f 83       	std	Y+7, r17	; 0x07
    1762:	0e 83       	std	Y+6, r16	; 0x06
    1764:	04 c0       	rjmp	.+8      	; 0x176e <updateBallPosition+0xba>
	}
	else ball->posY = tempPosY;
    1766:	ca 82       	std	Y+2, r12	; 0x02
    1768:	db 82       	std	Y+3, r13	; 0x03
    176a:	ec 82       	std	Y+4, r14	; 0x04
    176c:	fd 82       	std	Y+5, r15	; 0x05
	if(ball->dir == RIGHT)
    176e:	88 85       	ldd	r24, Y+8	; 0x08
    1770:	99 85       	ldd	r25, Y+9	; 0x09
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	31 f4       	brne	.+12     	; 0x1782 <updateBallPosition+0xce>
		ball->posX++;
    1776:	88 81       	ld	r24, Y
    1778:	99 81       	ldd	r25, Y+1	; 0x01
    177a:	01 96       	adiw	r24, 0x01	; 1
    177c:	99 83       	std	Y+1, r25	; 0x01
    177e:	88 83       	st	Y, r24
    1780:	05 c0       	rjmp	.+10     	; 0x178c <updateBallPosition+0xd8>
	else ball->posX--;
    1782:	88 81       	ld	r24, Y
    1784:	99 81       	ldd	r25, Y+1	; 0x01
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	99 83       	std	Y+1, r25	; 0x01
    178a:	88 83       	st	Y, r24
}
    178c:	df 91       	pop	r29
    178e:	cf 91       	pop	r28
    1790:	1f 91       	pop	r17
    1792:	0f 91       	pop	r16
    1794:	ff 90       	pop	r15
    1796:	ef 90       	pop	r14
    1798:	df 90       	pop	r13
    179a:	cf 90       	pop	r12
    179c:	08 95       	ret

0000179e <updateSliderPosition>:
void updateSliderPosition(Slider *slide){
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24
	*slide = get_slider_position();
    17a4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <get_slider_position>
    17a8:	79 83       	std	Y+1, r23	; 0x01
    17aa:	8a 83       	std	Y+2, r24	; 0x02
    17ac:	9b 83       	std	Y+3, r25	; 0x03
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
    17ae:	4f e2       	ldi	r20, 0x2F	; 47
    17b0:	46 9f       	mul	r20, r22
    17b2:	c0 01       	movw	r24, r0
    17b4:	11 24       	eor	r1, r1
    17b6:	24 e6       	ldi	r18, 0x64	; 100
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	b9 01       	movw	r22, r18
    17bc:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
    17c0:	68 83       	st	Y, r22
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	48 9f       	mul	r20, r24
    17c6:	c0 01       	movw	r24, r0
    17c8:	11 24       	eor	r1, r1
    17ca:	b9 01       	movw	r22, r18
    17cc:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
    17d0:	69 83       	std	Y+1, r22	; 0x01
} 
    17d2:	df 91       	pop	r29
    17d4:	cf 91       	pop	r28
    17d6:	08 95       	ret

000017d8 <updateScreen>:
			printEndScreen("Player Left won!");
		}
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
    17d8:	cf 92       	push	r12
    17da:	df 92       	push	r13
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	1f 93       	push	r17
    17e4:	cf 93       	push	r28
    17e6:	df 93       	push	r29
    17e8:	cd b7       	in	r28, 0x3d	; 61
    17ea:	de b7       	in	r29, 0x3e	; 62
    17ec:	2a 97       	sbiw	r28, 0x0a	; 10
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	09 83       	std	Y+1, r16	; 0x01
    17fa:	1a 83       	std	Y+2, r17	; 0x02
    17fc:	2b 83       	std	Y+3, r18	; 0x03
    17fe:	3c 83       	std	Y+4, r19	; 0x04
    1800:	4d 83       	std	Y+5, r20	; 0x05
    1802:	5e 83       	std	Y+6, r21	; 0x06
	oled_sram_clear_screen(0);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	for (int i = 0; i < RACKETSIZE; i++){
    180c:	00 e0       	ldi	r16, 0x00	; 0
    180e:	10 e0       	ldi	r17, 0x00	; 0
    1810:	a8 01       	movw	r20, r16
    1812:	4e 0d       	add	r20, r14
    1814:	5f 1d       	adc	r21, r15
		oled_sram_write_bit(0, 1, leftRacketPos + i);
    1816:	61 e0       	ldi	r22, 0x01	; 1
    1818:	70 e0       	ldi	r23, 0x00	; 0
    181a:	80 e0       	ldi	r24, 0x00	; 0
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
    1822:	a8 01       	movw	r20, r16
    1824:	4c 0d       	add	r20, r12
    1826:	5d 1d       	adc	r21, r13
		oled_sram_write_bit(0,127, rightRacketPos + i);
    1828:	6f e7       	ldi	r22, 0x7F	; 127
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
    1834:	0f 5f       	subi	r16, 0xFF	; 255
    1836:	1f 4f       	sbci	r17, 0xFF	; 255
    1838:	00 31       	cpi	r16, 0x10	; 16
    183a:	11 05       	cpc	r17, r1
    183c:	49 f7       	brne	.-46     	; 0x1810 <updateScreen+0x38>
    183e:	00 e0       	ldi	r16, 0x00	; 0
    1840:	10 e0       	ldi	r17, 0x00	; 0
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	a9 01       	movw	r20, r18
    1848:	6b 81       	ldd	r22, Y+3	; 0x03
    184a:	7c 81       	ldd	r23, Y+4	; 0x04
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	0e 94 6d 11 	call	0x22da	; 0x22da <__addsf3>
    1854:	0e 94 3d 12 	call	0x247a	; 0x247a <__fixsfsi>
    1858:	29 81       	ldd	r18, Y+1	; 0x01
    185a:	3a 81       	ldd	r19, Y+2	; 0x02
    185c:	20 0f       	add	r18, r16
    185e:	31 1f       	adc	r19, r17
    1860:	ab 01       	movw	r20, r22
    1862:	b9 01       	movw	r22, r18
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e8       	ldi	r20, 0x80	; 128
    1872:	5f e3       	ldi	r21, 0x3F	; 63
    1874:	6b 81       	ldd	r22, Y+3	; 0x03
    1876:	7c 81       	ldd	r23, Y+4	; 0x04
    1878:	8d 81       	ldd	r24, Y+5	; 0x05
    187a:	9e 81       	ldd	r25, Y+6	; 0x06
    187c:	0e 94 6d 11 	call	0x22da	; 0x22da <__addsf3>
    1880:	0e 94 3d 12 	call	0x247a	; 0x247a <__fixsfsi>
    1884:	29 81       	ldd	r18, Y+1	; 0x01
    1886:	3a 81       	ldd	r19, Y+2	; 0x02
    1888:	20 0f       	add	r18, r16
    188a:	31 1f       	adc	r19, r17
    188c:	ab 01       	movw	r20, r22
    188e:	b9 01       	movw	r22, r18
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
    1898:	0f 5f       	subi	r16, 0xFF	; 255
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	02 30       	cpi	r16, 0x02	; 2
    189e:	11 05       	cpc	r17, r1
    18a0:	81 f6       	brne	.-96     	; 0x1842 <updateScreen+0x6a>
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
}
    18aa:	2a 96       	adiw	r28, 0x0a	; 10
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	df 90       	pop	r13
    18c4:	cf 90       	pop	r12
    18c6:	08 95       	ret

000018c8 <playRound>:
	*slide = get_slider_position();
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
} 

int playRound(){
    18c8:	af 92       	push	r10
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	2e 97       	sbiw	r28, 0x0e	; 14
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
	Ball ball;
	Slider slide;
	ballInit(&ball);
    18ec:	ce 01       	movw	r24, r28
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <ballInit>
				return LEFT;
			}
		}
		else if (ball.posX == 1){
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
    18f4:	aa 24       	eor	r10, r10
    18f6:	a3 94       	inc	r10
    18f8:	b1 2c       	mov	r11, r1
	Ball ball;
	Slider slide;
	ballInit(&ball);
	int time = 25;
	while(1){
		updateSliderPosition(&slide);
    18fa:	ce 01       	movw	r24, r28
    18fc:	0b 96       	adiw	r24, 0x0b	; 11
    18fe:	0e 94 cf 0b 	call	0x179e	; 0x179e <updateSliderPosition>
		if (ball.posX >= 126){
    1902:	09 81       	ldd	r16, Y+1	; 0x01
    1904:	1a 81       	ldd	r17, Y+2	; 0x02
    1906:	0e 37       	cpi	r16, 0x7E	; 126
    1908:	11 05       	cpc	r17, r1
    190a:	94 f0       	brlt	.+36     	; 0x1930 <playRound+0x68>
			if (racketHit(&ball, slide.right) ){
    190c:	ec 84       	ldd	r14, Y+12	; 0x0c
    190e:	f1 2c       	mov	r15, r1
    1910:	b7 01       	movw	r22, r14
    1912:	ce 01       	movw	r24, r28
    1914:	01 96       	adiw	r24, 0x01	; 1
    1916:	0e 94 a8 0a 	call	0x1550	; 0x1550 <racketHit>
    191a:	8c 01       	movw	r16, r24
    191c:	00 97       	sbiw	r24, 0x00	; 0
    191e:	a9 f1       	breq	.+106    	; 0x198a <playRound+0xc2>
				ball.dir = LEFT;
    1920:	1a 86       	std	Y+10, r1	; 0x0a
    1922:	19 86       	std	Y+9, r1	; 0x09
				updateBallAngle(&ball, slide.right);
    1924:	b7 01       	movw	r22, r14
    1926:	ce 01       	movw	r24, r28
    1928:	01 96       	adiw	r24, 0x01	; 1
    192a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <updateBallAngle>
    192e:	13 c0       	rjmp	.+38     	; 0x1956 <playRound+0x8e>
			}
			else{
				return LEFT;
			}
		}
		else if (ball.posX == 1){
    1930:	01 30       	cpi	r16, 0x01	; 1
    1932:	11 05       	cpc	r17, r1
    1934:	81 f4       	brne	.+32     	; 0x1956 <playRound+0x8e>
			if (racketHit(&ball, slide.left) ){
    1936:	eb 84       	ldd	r14, Y+11	; 0x0b
    1938:	f1 2c       	mov	r15, r1
    193a:	b7 01       	movw	r22, r14
    193c:	ce 01       	movw	r24, r28
    193e:	01 96       	adiw	r24, 0x01	; 1
    1940:	0e 94 a8 0a 	call	0x1550	; 0x1550 <racketHit>
    1944:	89 2b       	or	r24, r25
    1946:	09 f1       	breq	.+66     	; 0x198a <playRound+0xc2>
				ball.dir = RIGHT;
    1948:	ba 86       	std	Y+10, r11	; 0x0a
    194a:	a9 86       	std	Y+9, r10	; 0x09
				updateBallAngle(&ball, slide.left);
    194c:	b7 01       	movw	r22, r14
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <updateBallAngle>
			}
			else {
				return RIGHT;
			}
		}
		updateBallPosition(&ball);
    1956:	ce 01       	movw	r24, r28
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <updateBallPosition>
		updateScreen(ball, slide.left, slide.right);
    195e:	cc 84       	ldd	r12, Y+12	; 0x0c
    1960:	d1 2c       	mov	r13, r1
    1962:	eb 84       	ldd	r14, Y+11	; 0x0b
    1964:	f1 2c       	mov	r15, r1
    1966:	09 81       	ldd	r16, Y+1	; 0x01
    1968:	1a 81       	ldd	r17, Y+2	; 0x02
    196a:	2b 81       	ldd	r18, Y+3	; 0x03
    196c:	3c 81       	ldd	r19, Y+4	; 0x04
    196e:	4d 81       	ldd	r20, Y+5	; 0x05
    1970:	5e 81       	ldd	r21, Y+6	; 0x06
    1972:	6f 81       	ldd	r22, Y+7	; 0x07
    1974:	78 85       	ldd	r23, Y+8	; 0x08
    1976:	89 85       	ldd	r24, Y+9	; 0x09
    1978:	9a 85       	ldd	r25, Y+10	; 0x0a
    197a:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <updateScreen>
    197e:	89 e9       	ldi	r24, 0x99	; 153
    1980:	99 e0       	ldi	r25, 0x09	; 9
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <playRound+0xba>
    1986:	00 c0       	rjmp	.+0      	; 0x1988 <playRound+0xc0>
    1988:	b8 cf       	rjmp	.-144    	; 0x18fa <playRound+0x32>
		_delay_ms(2);
	}
}
    198a:	c8 01       	movw	r24, r16
    198c:	2e 96       	adiw	r28, 0x0e	; 14
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	de bf       	out	0x3e, r29	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	cd bf       	out	0x3d, r28	; 61
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	ff 90       	pop	r15
    19a2:	ef 90       	pop	r14
    19a4:	df 90       	pop	r13
    19a6:	cf 90       	pop	r12
    19a8:	bf 90       	pop	r11
    19aa:	af 90       	pop	r10
    19ac:	08 95       	ret

000019ae <printScore>:
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
}
void printScore(int leftPoints, int rightPoints){
    19ae:	0f 93       	push	r16
    19b0:	1f 93       	push	r17
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <printScore+0xa>
    19b8:	1f 92       	push	r1
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	08 2f       	mov	r16, r24
    19c0:	16 2f       	mov	r17, r22
	oled_sram_clear_screen(0);
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	char lp = leftPoints + '0';
    19ca:	00 5d       	subi	r16, 0xD0	; 208
    19cc:	09 83       	std	Y+1, r16	; 0x01
	char mid = '-';
    19ce:	8d e2       	ldi	r24, 0x2D	; 45
    19d0:	8a 83       	std	Y+2, r24	; 0x02
	char rp = rightPoints + '0';
    19d2:	10 5d       	subi	r17, 0xD0	; 208
    19d4:	1b 83       	std	Y+3, r17	; 0x03
	oled_sram_write_char(0, &lp, 2, 56);
    19d6:	28 e3       	ldi	r18, 0x38	; 56
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	42 e0       	ldi	r20, 0x02	; 2
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	be 01       	movw	r22, r28
    19e0:	6f 5f       	subi	r22, 0xFF	; 255
    19e2:	7f 4f       	sbci	r23, 0xFF	; 255
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
	oled_sram_write_char(0, &mid, 2, 64);
    19ec:	20 e4       	ldi	r18, 0x40	; 64
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	42 e0       	ldi	r20, 0x02	; 2
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	be 01       	movw	r22, r28
    19f6:	6e 5f       	subi	r22, 0xFE	; 254
    19f8:	7f 4f       	sbci	r23, 0xFF	; 255
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
	oled_sram_write_char(0, &rp, 2, 72);
    1a02:	28 e4       	ldi	r18, 0x48	; 72
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	42 e0       	ldi	r20, 0x02	; 2
    1a08:	50 e0       	ldi	r21, 0x00	; 0
    1a0a:	be 01       	movw	r22, r28
    1a0c:	6d 5f       	subi	r22, 0xFD	; 253
    1a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
	oled_sram_flush(0);	
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	08 95       	ret

00001a30 <printEndScreen>:
void printEndScreen(char *endMessage){
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	8c 01       	movw	r16, r24
	oled_sram_clear_screen(0);
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	for(int i = 0; i < 10; i++){
    1a42:	c0 e0       	ldi	r28, 0x00	; 0
    1a44:	d0 e0       	ldi	r29, 0x00	; 0
		if( i % 2 ){
    1a46:	c0 ff       	sbrs	r28, 0
    1a48:	11 c0       	rjmp	.+34     	; 0x1a6c <printEndScreen+0x3c>
			oled_sram_write_string(0, endMessage, 2);
    1a4a:	42 e0       	ldi	r20, 0x02	; 2
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	b8 01       	movw	r22, r16
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
    1a58:	8f ef       	ldi	r24, 0xFF	; 255
    1a5a:	9f e7       	ldi	r25, 0x7F	; 127
    1a5c:	24 e0       	ldi	r18, 0x04	; 4
    1a5e:	81 50       	subi	r24, 0x01	; 1
    1a60:	90 40       	sbci	r25, 0x00	; 0
    1a62:	20 40       	sbci	r18, 0x00	; 0
    1a64:	e1 f7       	brne	.-8      	; 0x1a5e <printEndScreen+0x2e>
    1a66:	00 c0       	rjmp	.+0      	; 0x1a68 <printEndScreen+0x38>
    1a68:	00 00       	nop
    1a6a:	09 c0       	rjmp	.+18     	; 0x1a7e <printEndScreen+0x4e>
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	9f e7       	ldi	r25, 0x7F	; 127
    1a70:	24 e0       	ldi	r18, 0x04	; 4
    1a72:	81 50       	subi	r24, 0x01	; 1
    1a74:	90 40       	sbci	r25, 0x00	; 0
    1a76:	20 40       	sbci	r18, 0x00	; 0
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <printEndScreen+0x42>
    1a7a:	00 c0       	rjmp	.+0      	; 0x1a7c <printEndScreen+0x4c>
    1a7c:	00 00       	nop
	oled_sram_write_char(0, &rp, 2, 72);
	oled_sram_flush(0);	
}
void printEndScreen(char *endMessage){
	oled_sram_clear_screen(0);
	for(int i = 0; i < 10; i++){
    1a7e:	21 96       	adiw	r28, 0x01	; 1
    1a80:	ca 30       	cpi	r28, 0x0A	; 10
    1a82:	d1 05       	cpc	r29, r1
    1a84:	01 f7       	brne	.-64     	; 0x1a46 <printEndScreen+0x16>
			oled_sram_write_string(0, endMessage, 2);
			_delay_ms(300);
		}
		else _delay_ms(300);
	}
	oled_sram_flush(0);	
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	08 95       	ret

00001a98 <playPong>:

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	}
}

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(2);
	}
}

void playPong(){
	int pointLeft = 0;
    1aa4:	c0 e0       	ldi	r28, 0x00	; 0
    1aa6:	d0 e0       	ldi	r29, 0x00	; 0
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
	while(1){
		printScore(pointLeft, pointRight);
    1aa8:	b8 01       	movw	r22, r16
    1aaa:	ce 01       	movw	r24, r28
    1aac:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <printScore>
    1ab0:	2f ef       	ldi	r18, 0xFF	; 255
    1ab2:	8f ef       	ldi	r24, 0xFF	; 255
    1ab4:	9d e1       	ldi	r25, 0x1D	; 29
    1ab6:	21 50       	subi	r18, 0x01	; 1
    1ab8:	80 40       	sbci	r24, 0x00	; 0
    1aba:	90 40       	sbci	r25, 0x00	; 0
    1abc:	e1 f7       	brne	.-8      	; 0x1ab6 <playPong+0x1e>
    1abe:	00 c0       	rjmp	.+0      	; 0x1ac0 <playPong+0x28>
    1ac0:	00 00       	nop
		_delay_ms(2000);
		point = playRound();
    1ac2:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <playRound>
		if (point == LEFT) pointLeft++;
    1ac6:	89 2b       	or	r24, r25
    1ac8:	11 f4       	brne	.+4      	; 0x1ace <playPong+0x36>
    1aca:	21 96       	adiw	r28, 0x01	; 1
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <playPong+0x3a>
		else pointRight++;
    1ace:	0f 5f       	subi	r16, 0xFF	; 255
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
		if(pointLeft == 5){
    1ad2:	c5 30       	cpi	r28, 0x05	; 5
    1ad4:	d1 05       	cpc	r29, r1
    1ad6:	29 f4       	brne	.+10     	; 0x1ae2 <playPong+0x4a>
			printEndScreen("Player Right won!");
    1ad8:	8b ec       	ldi	r24, 0xCB	; 203
    1ada:	91 e0       	ldi	r25, 0x01	; 1
    1adc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <printEndScreen>
    1ae0:	e3 cf       	rjmp	.-58     	; 0x1aa8 <playPong+0x10>
		}
		else if(pointRight == 5){
    1ae2:	05 30       	cpi	r16, 0x05	; 5
    1ae4:	11 05       	cpc	r17, r1
    1ae6:	01 f7       	brne	.-64     	; 0x1aa8 <playPong+0x10>
			printEndScreen("Player Left won!");
    1ae8:	8d ed       	ldi	r24, 0xDD	; 221
    1aea:	91 e0       	ldi	r25, 0x01	; 1
    1aec:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <printEndScreen>
    1af0:	db cf       	rjmp	.-74     	; 0x1aa8 <playPong+0x10>

00001af2 <detectCollision>:
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>
#include "highscore.h"


int detectCollision(segment *s, int x, int y){
    1af2:	fc 01       	movw	r30, r24
	while(s){
    1af4:	00 97       	sbiw	r24, 0x00	; 0
    1af6:	81 f0       	breq	.+32     	; 0x1b18 <detectCollision+0x26>
		if (s->x == x && s->y == y){
    1af8:	84 81       	ldd	r24, Z+4	; 0x04
    1afa:	95 81       	ldd	r25, Z+5	; 0x05
    1afc:	86 17       	cp	r24, r22
    1afe:	97 07       	cpc	r25, r23
    1b00:	29 f4       	brne	.+10     	; 0x1b0c <detectCollision+0x1a>
    1b02:	86 81       	ldd	r24, Z+6	; 0x06
    1b04:	97 81       	ldd	r25, Z+7	; 0x07
    1b06:	84 17       	cp	r24, r20
    1b08:	95 07       	cpc	r25, r21
    1b0a:	49 f0       	breq	.+18     	; 0x1b1e <detectCollision+0x2c>
			return 1;
		}
		s = s->next;
    1b0c:	01 90       	ld	r0, Z+
    1b0e:	f0 81       	ld	r31, Z
    1b10:	e0 2d       	mov	r30, r0
#include <stdlib.h>
#include "highscore.h"


int detectCollision(segment *s, int x, int y){
	while(s){
    1b12:	30 97       	sbiw	r30, 0x00	; 0
    1b14:	89 f7       	brne	.-30     	; 0x1af8 <detectCollision+0x6>
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <detectCollision+0x32>
		if (s->x == x && s->y == y){
			return 1;
		}
		s = s->next;
	}
	return 0;
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	08 95       	ret


int detectCollision(segment *s, int x, int y){
	while(s){
		if (s->x == x && s->y == y){
			return 1;
    1b1e:	81 e0       	ldi	r24, 0x01	; 1
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	08 95       	ret
		}
		s = s->next;
	}
	return 0;
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	90 e0       	ldi	r25, 0x00	; 0
}
    1b28:	08 95       	ret

00001b2a <placeFood>:

void placeFood(int food[], segment *first){
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	ec 01       	movw	r28, r24
    1b34:	8b 01       	movw	r16, r22
	do{
		food[0] = rand() % 64;
    1b36:	0e 94 65 15 	call	0x2aca	; 0x2aca <rand>
    1b3a:	8f 73       	andi	r24, 0x3F	; 63
    1b3c:	90 78       	andi	r25, 0x80	; 128
    1b3e:	99 23       	and	r25, r25
    1b40:	24 f4       	brge	.+8      	; 0x1b4a <placeFood+0x20>
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	80 6c       	ori	r24, 0xC0	; 192
    1b46:	9f 6f       	ori	r25, 0xFF	; 255
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	99 83       	std	Y+1, r25	; 0x01
    1b4c:	88 83       	st	Y, r24
		food[1] = rand() % 32;
    1b4e:	0e 94 65 15 	call	0x2aca	; 0x2aca <rand>
    1b52:	ac 01       	movw	r20, r24
    1b54:	4f 71       	andi	r20, 0x1F	; 31
    1b56:	50 78       	andi	r21, 0x80	; 128
    1b58:	55 23       	and	r21, r21
    1b5a:	34 f4       	brge	.+12     	; 0x1b68 <placeFood+0x3e>
    1b5c:	41 50       	subi	r20, 0x01	; 1
    1b5e:	51 09       	sbc	r21, r1
    1b60:	40 6e       	ori	r20, 0xE0	; 224
    1b62:	5f 6f       	ori	r21, 0xFF	; 255
    1b64:	4f 5f       	subi	r20, 0xFF	; 255
    1b66:	5f 4f       	sbci	r21, 0xFF	; 255
    1b68:	5b 83       	std	Y+3, r21	; 0x03
    1b6a:	4a 83       	std	Y+2, r20	; 0x02
	} while(detectCollision(first, food[0], food[1]));
    1b6c:	68 81       	ld	r22, Y
    1b6e:	79 81       	ldd	r23, Y+1	; 0x01
    1b70:	c8 01       	movw	r24, r16
    1b72:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <detectCollision>
    1b76:	89 2b       	or	r24, r25
    1b78:	f1 f6       	brne	.-68     	; 0x1b36 <placeFood+0xc>
}
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	1f 91       	pop	r17
    1b80:	0f 91       	pop	r16
    1b82:	08 95       	ret

00001b84 <drawBoard>:

void drawBoard(segment *s, int food[]){
    1b84:	cf 92       	push	r12
    1b86:	df 92       	push	r13
    1b88:	ef 92       	push	r14
    1b8a:	ff 92       	push	r15
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	8c 01       	movw	r16, r24
    1b96:	7b 01       	movw	r14, r22
	oled_sram_clear_screen(0);
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	while(s){
    1ba0:	01 15       	cp	r16, r1
    1ba2:	11 05       	cpc	r17, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <drawBoard+0x24>
    1ba6:	59 c0       	rjmp	.+178    	; 0x1c5a <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1ba8:	c1 2c       	mov	r12, r1
    1baa:	d1 2c       	mov	r13, r1
    1bac:	2a c0       	rjmp	.+84     	; 0x1c02 <drawBoard+0x7e>
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
    1bae:	f8 01       	movw	r30, r16
    1bb0:	46 81       	ldd	r20, Z+6	; 0x06
    1bb2:	57 81       	ldd	r21, Z+7	; 0x07
    1bb4:	44 0f       	add	r20, r20
    1bb6:	55 1f       	adc	r21, r21
    1bb8:	64 81       	ldd	r22, Z+4	; 0x04
    1bba:	75 81       	ldd	r23, Z+5	; 0x05
    1bbc:	66 0f       	add	r22, r22
    1bbe:	77 1f       	adc	r23, r23
    1bc0:	6c 0f       	add	r22, r28
    1bc2:	7d 1f       	adc	r23, r29
    1bc4:	8c 2d       	mov	r24, r12
    1bc6:	9d 2d       	mov	r25, r13
    1bc8:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
    1bcc:	f8 01       	movw	r30, r16
    1bce:	46 81       	ldd	r20, Z+6	; 0x06
    1bd0:	57 81       	ldd	r21, Z+7	; 0x07
    1bd2:	44 0f       	add	r20, r20
    1bd4:	55 1f       	adc	r21, r21
    1bd6:	4f 5f       	subi	r20, 0xFF	; 255
    1bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bda:	64 81       	ldd	r22, Z+4	; 0x04
    1bdc:	75 81       	ldd	r23, Z+5	; 0x05
    1bde:	66 0f       	add	r22, r22
    1be0:	77 1f       	adc	r23, r23
    1be2:	6c 0f       	add	r22, r28
    1be4:	7d 1f       	adc	r23, r29
    1be6:	8c 2d       	mov	r24, r12
    1be8:	9d 2d       	mov	r25, r13
    1bea:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
    1bee:	21 96       	adiw	r28, 0x01	; 1
    1bf0:	c2 30       	cpi	r28, 0x02	; 2
    1bf2:	d1 05       	cpc	r29, r1
    1bf4:	e1 f6       	brne	.-72     	; 0x1bae <drawBoard+0x2a>
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
    1bf6:	f8 01       	movw	r30, r16
    1bf8:	00 81       	ld	r16, Z
    1bfa:	11 81       	ldd	r17, Z+1	; 0x01
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
    1bfc:	01 15       	cp	r16, r1
    1bfe:	11 05       	cpc	r17, r1
    1c00:	61 f1       	breq	.+88     	; 0x1c5a <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1c02:	cc 2d       	mov	r28, r12
    1c04:	dd 2d       	mov	r29, r13
    1c06:	d3 cf       	rjmp	.-90     	; 0x1bae <drawBoard+0x2a>
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
    1c08:	f7 01       	movw	r30, r14
    1c0a:	42 81       	ldd	r20, Z+2	; 0x02
    1c0c:	53 81       	ldd	r21, Z+3	; 0x03
    1c0e:	44 0f       	add	r20, r20
    1c10:	55 1f       	adc	r21, r21
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	66 0f       	add	r22, r22
    1c18:	77 1f       	adc	r23, r23
    1c1a:	6c 0f       	add	r22, r28
    1c1c:	7d 1f       	adc	r23, r29
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
    1c26:	f7 01       	movw	r30, r14
    1c28:	42 81       	ldd	r20, Z+2	; 0x02
    1c2a:	53 81       	ldd	r21, Z+3	; 0x03
    1c2c:	44 0f       	add	r20, r20
    1c2e:	55 1f       	adc	r21, r21
    1c30:	4f 5f       	subi	r20, 0xFF	; 255
    1c32:	5f 4f       	sbci	r21, 0xFF	; 255
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	66 0f       	add	r22, r22
    1c3a:	77 1f       	adc	r23, r23
    1c3c:	6c 0f       	add	r22, r28
    1c3e:	7d 1f       	adc	r23, r29
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	0e 94 12 0a 	call	0x1424	; 0x1424 <oled_sram_write_bit>
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
    1c48:	21 96       	adiw	r28, 0x01	; 1
    1c4a:	c2 30       	cpi	r28, 0x02	; 2
    1c4c:	d1 05       	cpc	r29, r1
    1c4e:	e1 f6       	brne	.-72     	; 0x1c08 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <drawBoard+0xdc>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1c5a:	c0 e0       	ldi	r28, 0x00	; 0
    1c5c:	d0 e0       	ldi	r29, 0x00	; 0
    1c5e:	d4 cf       	rjmp	.-88     	; 0x1c08 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
}
    1c60:	df 91       	pop	r29
    1c62:	cf 91       	pop	r28
    1c64:	1f 91       	pop	r17
    1c66:	0f 91       	pop	r16
    1c68:	ff 90       	pop	r15
    1c6a:	ef 90       	pop	r14
    1c6c:	df 90       	pop	r13
    1c6e:	cf 90       	pop	r12
    1c70:	08 95       	ret

00001c72 <playSnake>:

void playSnake(){
    1c72:	af 92       	push	r10
    1c74:	bf 92       	push	r11
    1c76:	cf 92       	push	r12
    1c78:	df 92       	push	r13
    1c7a:	ef 92       	push	r14
    1c7c:	ff 92       	push	r15
    1c7e:	0f 93       	push	r16
    1c80:	1f 93       	push	r17
    1c82:	cf 93       	push	r28
    1c84:	df 93       	push	r29
    1c86:	00 d0       	rcall	.+0      	; 0x1c88 <playSnake+0x16>
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <playSnake+0x18>
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    1c8e:	88 e0       	ldi	r24, 0x08	; 8
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <malloc>
    1c96:	6c 01       	movw	r12, r24
	first->x = 32;
    1c98:	80 e2       	ldi	r24, 0x20	; 32
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	f6 01       	movw	r30, r12
    1c9e:	95 83       	std	Z+5, r25	; 0x05
    1ca0:	84 83       	std	Z+4, r24	; 0x04
	first->y = 16;
    1ca2:	80 e1       	ldi	r24, 0x10	; 16
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	97 83       	std	Z+7, r25	; 0x07
    1ca8:	86 83       	std	Z+6, r24	; 0x06
	segment *last = first;
	first->next = 0;
    1caa:	11 82       	std	Z+1, r1	; 0x01
    1cac:	10 82       	st	Z, r1
	first->prev = 0;
    1cae:	13 82       	std	Z+3, r1	; 0x03
    1cb0:	12 82       	std	Z+2, r1	; 0x02
	oled_sram_flush(0);
}

void playSnake(){
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    1cb2:	76 01       	movw	r14, r12
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
    1cb4:	68 94       	set
    1cb6:	aa 24       	eor	r10, r10
    1cb8:	a2 f8       	bld	r10, 2
    1cba:	b1 2c       	mov	r11, r1
	for(int i = 0; i < 4; i++){
		segment *temp = (segment*)malloc(sizeof(segment));
    1cbc:	88 e0       	ldi	r24, 0x08	; 8
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <malloc>
    1cc4:	8c 01       	movw	r16, r24
		temp->x = first->x + 1;
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	84 81       	ldd	r24, Z+4	; 0x04
    1cca:	95 81       	ldd	r25, Z+5	; 0x05
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	f8 01       	movw	r30, r16
    1cd0:	95 83       	std	Z+5, r25	; 0x05
    1cd2:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    1cd4:	f7 01       	movw	r30, r14
    1cd6:	86 81       	ldd	r24, Z+6	; 0x06
    1cd8:	97 81       	ldd	r25, Z+7	; 0x07
    1cda:	f8 01       	movw	r30, r16
    1cdc:	97 83       	std	Z+7, r25	; 0x07
    1cde:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    1ce0:	f1 82       	std	Z+1, r15	; 0x01
    1ce2:	e0 82       	st	Z, r14
		temp->prev = 0;
    1ce4:	13 82       	std	Z+3, r1	; 0x03
    1ce6:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1ce8:	f7 01       	movw	r30, r14
    1cea:	13 83       	std	Z+3, r17	; 0x03
    1cec:	02 83       	std	Z+2, r16	; 0x02
    1cee:	f1 e0       	ldi	r31, 0x01	; 1
    1cf0:	af 1a       	sub	r10, r31
    1cf2:	b1 08       	sbc	r11, r1
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
	for(int i = 0; i < 4; i++){
    1cf4:	a1 14       	cp	r10, r1
    1cf6:	b1 04       	cpc	r11, r1
    1cf8:	11 f0       	breq	.+4      	; 0x1cfe <playSnake+0x8c>
		segment *temp = (segment*)malloc(sizeof(segment));
    1cfa:	78 01       	movw	r14, r16
    1cfc:	df cf       	rjmp	.-66     	; 0x1cbc <playSnake+0x4a>
	}


	//initalize food
	int food[2];
	placeFood(food, first);
    1cfe:	b8 01       	movw	r22, r16
    1d00:	ce 01       	movw	r24, r28
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <placeFood>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	//initalize food
	int food[2];
	placeFood(food, first);

	//initialize direction of snake
	direction S = RIGHT;
    1d10:	aa 24       	eor	r10, r10
    1d12:	a3 94       	inc	r10
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    1d14:	70 c0       	rjmp	.+224    	; 0x1df6 <playSnake+0x184>
		Joystick j = get_joystick_position();
    1d16:	0e 94 23 07 	call	0xe46	; 0xe46 <get_joystick_position>
    1d1a:	b8 2e       	mov	r11, r24
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    1d1c:	24 e0       	ldi	r18, 0x04	; 4
    1d1e:	82 13       	cpse	r24, r18
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <playSnake+0xb2>
    1d22:	ba 2c       	mov	r11, r10
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    1d24:	88 e0       	ldi	r24, 0x08	; 8
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <malloc>
    1d2c:	7c 01       	movw	r14, r24
		
		temp->x = first->x;
    1d2e:	f8 01       	movw	r30, r16
    1d30:	24 81       	ldd	r18, Z+4	; 0x04
    1d32:	35 81       	ldd	r19, Z+5	; 0x05
    1d34:	fc 01       	movw	r30, r24
    1d36:	35 83       	std	Z+5, r19	; 0x05
    1d38:	24 83       	std	Z+4, r18	; 0x04
		temp->y = first->y;
    1d3a:	f8 01       	movw	r30, r16
    1d3c:	26 81       	ldd	r18, Z+6	; 0x06
    1d3e:	37 81       	ldd	r19, Z+7	; 0x07
    1d40:	fc 01       	movw	r30, r24
    1d42:	37 83       	std	Z+7, r19	; 0x07
    1d44:	26 83       	std	Z+6, r18	; 0x06
		temp->next = first;
    1d46:	11 83       	std	Z+1, r17	; 0x01
    1d48:	00 83       	st	Z, r16
		temp->prev = 0;
    1d4a:	13 82       	std	Z+3, r1	; 0x03
    1d4c:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1d4e:	f8 01       	movw	r30, r16
    1d50:	93 83       	std	Z+3, r25	; 0x03
    1d52:	82 83       	std	Z+2, r24	; 0x02

		//Find direction of snake movement
		switch (S){
    1d54:	f1 e0       	ldi	r31, 0x01	; 1
    1d56:	bf 16       	cp	r11, r31
    1d58:	f1 f0       	breq	.+60     	; 0x1d96 <playSnake+0x124>
    1d5a:	bf 16       	cp	r11, r31
    1d5c:	a8 f0       	brcs	.+42     	; 0x1d88 <playSnake+0x116>
    1d5e:	22 e0       	ldi	r18, 0x02	; 2
    1d60:	b2 16       	cp	r11, r18
    1d62:	21 f0       	breq	.+8      	; 0x1d6c <playSnake+0xfa>
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	b8 16       	cp	r11, r24
    1d68:	41 f0       	breq	.+16     	; 0x1d7a <playSnake+0x108>
    1d6a:	1b c0       	rjmp	.+54     	; 0x1da2 <playSnake+0x130>
			case UP:
			temp->y--;
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	86 81       	ldd	r24, Z+6	; 0x06
    1d70:	97 81       	ldd	r25, Z+7	; 0x07
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	97 83       	std	Z+7, r25	; 0x07
    1d76:	86 83       	std	Z+6, r24	; 0x06
			break;
    1d78:	14 c0       	rjmp	.+40     	; 0x1da2 <playSnake+0x130>
			case DOWN:
			temp->y++;
    1d7a:	f7 01       	movw	r30, r14
    1d7c:	86 81       	ldd	r24, Z+6	; 0x06
    1d7e:	97 81       	ldd	r25, Z+7	; 0x07
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	97 83       	std	Z+7, r25	; 0x07
    1d84:	86 83       	std	Z+6, r24	; 0x06
			break;
    1d86:	0d c0       	rjmp	.+26     	; 0x1da2 <playSnake+0x130>
			case LEFT:
			temp->x--;
    1d88:	fc 01       	movw	r30, r24
    1d8a:	84 81       	ldd	r24, Z+4	; 0x04
    1d8c:	95 81       	ldd	r25, Z+5	; 0x05
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	95 83       	std	Z+5, r25	; 0x05
    1d92:	84 83       	std	Z+4, r24	; 0x04
			break;
    1d94:	06 c0       	rjmp	.+12     	; 0x1da2 <playSnake+0x130>
			case RIGHT:
			temp->x++;
    1d96:	fc 01       	movw	r30, r24
    1d98:	84 81       	ldd	r24, Z+4	; 0x04
    1d9a:	95 81       	ldd	r25, Z+5	; 0x05
    1d9c:	01 96       	adiw	r24, 0x01	; 1
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	84 83       	std	Z+4, r24	; 0x04
			break;
		}

		first = temp;
		
		if(detectCollision(first, food[0], food[1])){//hit food?
    1da2:	4b 81       	ldd	r20, Y+3	; 0x03
    1da4:	5c 81       	ldd	r21, Y+4	; 0x04
    1da6:	69 81       	ldd	r22, Y+1	; 0x01
    1da8:	7a 81       	ldd	r23, Y+2	; 0x02
    1daa:	c7 01       	movw	r24, r14
    1dac:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <detectCollision>
    1db0:	89 2b       	or	r24, r25
    1db2:	31 f0       	breq	.+12     	; 0x1dc0 <playSnake+0x14e>
			placeFood(food, first);
    1db4:	b7 01       	movw	r22, r14
    1db6:	ce 01       	movw	r24, r28
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <placeFood>
    1dbe:	0a c0       	rjmp	.+20     	; 0x1dd4 <playSnake+0x162>
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    1dc0:	f6 01       	movw	r30, r12
    1dc2:	02 81       	ldd	r16, Z+2	; 0x02
    1dc4:	13 81       	ldd	r17, Z+3	; 0x03
			last->next = 0;
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	11 82       	std	Z+1, r1	; 0x01
    1dca:	10 82       	st	Z, r1
			free(temp);
    1dcc:	c6 01       	movw	r24, r12
    1dce:	0e 94 88 14 	call	0x2910	; 0x2910 <free>
			placeFood(food, first);
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    1dd2:	68 01       	movw	r12, r16
			last->next = 0;
			free(temp);
		}
		drawBoard(first, food);
    1dd4:	be 01       	movw	r22, r28
    1dd6:	6f 5f       	subi	r22, 0xFF	; 255
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	c7 01       	movw	r24, r14
    1ddc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <drawBoard>
    1de0:	ff ef       	ldi	r31, 0xFF	; 255
    1de2:	2f e7       	ldi	r18, 0x7F	; 127
    1de4:	81 e0       	ldi	r24, 0x01	; 1
    1de6:	f1 50       	subi	r31, 0x01	; 1
    1de8:	20 40       	sbci	r18, 0x00	; 0
    1dea:	80 40       	sbci	r24, 0x00	; 0
    1dec:	e1 f7       	brne	.-8      	; 0x1de6 <playSnake+0x174>
    1dee:	00 c0       	rjmp	.+0      	; 0x1df0 <playSnake+0x17e>
    1df0:	00 c0       	rjmp	.+0      	; 0x1df2 <playSnake+0x180>
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
		Joystick j = get_joystick_position();
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    1df2:	ab 2c       	mov	r10, r11
			break;
			default:
			break;
		}

		first = temp;
    1df4:	87 01       	movw	r16, r14

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    1df6:	f8 01       	movw	r30, r16
    1df8:	46 81       	ldd	r20, Z+6	; 0x06
    1dfa:	57 81       	ldd	r21, Z+7	; 0x07
    1dfc:	64 81       	ldd	r22, Z+4	; 0x04
    1dfe:	75 81       	ldd	r23, Z+5	; 0x05
    1e00:	80 81       	ld	r24, Z
    1e02:	91 81       	ldd	r25, Z+1	; 0x01
    1e04:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <detectCollision>
    1e08:	89 2b       	or	r24, r25
    1e0a:	09 f4       	brne	.+2      	; 0x1e0e <playSnake+0x19c>
    1e0c:	84 cf       	rjmp	.-248    	; 0x1d16 <playSnake+0xa4>
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    1e0e:	0c 15       	cp	r16, r12
    1e10:	1d 05       	cpc	r17, r13
    1e12:	81 f0       	breq	.+32     	; 0x1e34 <playSnake+0x1c2>
    1e14:	a1 2c       	mov	r10, r1
    1e16:	b1 2c       	mov	r11, r1
		segment* temp = first;
		first = first->next;
    1e18:	f8 01       	movw	r30, r16
    1e1a:	e0 80       	ld	r14, Z
    1e1c:	f1 80       	ldd	r15, Z+1	; 0x01
		free(temp);
    1e1e:	c8 01       	movw	r24, r16
    1e20:	0e 94 88 14 	call	0x2910	; 0x2910 <free>
		score++;
    1e24:	ff ef       	ldi	r31, 0xFF	; 255
    1e26:	af 1a       	sub	r10, r31
    1e28:	bf 0a       	sbc	r11, r31
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    1e2a:	ce 14       	cp	r12, r14
    1e2c:	df 04       	cpc	r13, r15
    1e2e:	29 f0       	breq	.+10     	; 0x1e3a <playSnake+0x1c8>
		segment* temp = first;
		first = first->next;
    1e30:	87 01       	movw	r16, r14
    1e32:	f2 cf       	rjmp	.-28     	; 0x1e18 <playSnake+0x1a6>
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    1e34:	78 01       	movw	r14, r16
    1e36:	a1 2c       	mov	r10, r1
    1e38:	b1 2c       	mov	r11, r1
		segment* temp = first;
		first = first->next;
		free(temp);
		score++;
	}
	free(first);
    1e3a:	c7 01       	movw	r24, r14
    1e3c:	0e 94 88 14 	call	0x2910	; 0x2910 <free>
	
	highscore_prompt(SNAKE, score-4);
    1e40:	6c ef       	ldi	r22, 0xFC	; 252
    1e42:	6a 0d       	add	r22, r10
    1e44:	80 e4       	ldi	r24, 0x40	; 64
    1e46:	0e 94 8d 04 	call	0x91a	; 0x91a <highscore_prompt>
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	df 91       	pop	r29
    1e54:	cf 91       	pop	r28
    1e56:	1f 91       	pop	r17
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	cf 90       	pop	r12
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	08 95       	ret

00001e68 <make_screen>:
	
	
	
}

void make_screen(menu* m){
    1e68:	2f 92       	push	r2
    1e6a:	3f 92       	push	r3
    1e6c:	4f 92       	push	r4
    1e6e:	5f 92       	push	r5
    1e70:	6f 92       	push	r6
    1e72:	7f 92       	push	r7
    1e74:	8f 92       	push	r8
    1e76:	9f 92       	push	r9
    1e78:	af 92       	push	r10
    1e7a:	bf 92       	push	r11
    1e7c:	cf 92       	push	r12
    1e7e:	df 92       	push	r13
    1e80:	ef 92       	push	r14
    1e82:	ff 92       	push	r15
    1e84:	0f 93       	push	r16
    1e86:	1f 93       	push	r17
    1e88:	cf 93       	push	r28
    1e8a:	df 93       	push	r29
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <make_screen+0x26>
    1e8e:	1f 92       	push	r1
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	0e 94 fe 09 	call	0x13fc	; 0x13fc <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
    1e9e:	d7 01       	movw	r26, r14
    1ea0:	6d 91       	ld	r22, X+
    1ea2:	7c 91       	ld	r23, X
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	50 e0       	ldi	r21, 0x00	; 0
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	0e 94 5e 09 	call	0x12bc	; 0x12bc <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
    1eb0:	f7 01       	movw	r30, r14
    1eb2:	84 89       	ldd	r24, Z+20	; 0x14
    1eb4:	95 89       	ldd	r25, Z+21	; 0x15
    1eb6:	18 16       	cp	r1, r24
    1eb8:	19 06       	cpc	r1, r25
    1eba:	0c f0       	brlt	.+2      	; 0x1ebe <make_screen+0x56>
    1ebc:	6d c0       	rjmp	.+218    	; 0x1f98 <make_screen+0x130>
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	04 96       	adiw	r24, 0x04	; 4
    1ec2:	9b 83       	std	Y+3, r25	; 0x03
    1ec4:	8a 83       	std	Y+2, r24	; 0x02
    1ec6:	cc 24       	eor	r12, r12
    1ec8:	c3 94       	inc	r12
    1eca:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1ecc:	68 94       	set
    1ece:	22 24       	eor	r2, r2
    1ed0:	23 f8       	bld	r2, 3
    1ed2:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
    1ed4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ed6:	bb 81       	ldd	r27, Y+3	; 0x03
    1ed8:	6d 90       	ld	r6, X+
    1eda:	7d 90       	ld	r7, X+
    1edc:	bb 83       	std	Y+3, r27	; 0x03
    1ede:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
    1ee0:	d3 01       	movw	r26, r6
    1ee2:	ed 91       	ld	r30, X+
    1ee4:	fc 91       	ld	r31, X
    1ee6:	80 81       	ld	r24, Z
    1ee8:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
    1eea:	f7 01       	movw	r30, r14
    1eec:	40 ad       	ldd	r20, Z+56	; 0x38
    1eee:	51 ad       	ldd	r21, Z+57	; 0x39
    1ef0:	c6 01       	movw	r24, r12
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	48 17       	cp	r20, r24
    1ef6:	59 07       	cpc	r21, r25
    1ef8:	59 f4       	brne	.+22     	; 0x1f10 <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
    1efa:	4f 5f       	subi	r20, 0xFF	; 255
    1efc:	5f 4f       	sbci	r21, 0xFF	; 255
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	6e ee       	ldi	r22, 0xEE	; 238
    1f04:	71 e0       	ldi	r23, 0x01	; 1
    1f06:	80 e0       	ldi	r24, 0x00	; 0
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
    1f0e:	09 c0       	rjmp	.+18     	; 0x1f22 <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	a6 01       	movw	r20, r12
    1f16:	6f e3       	ldi	r22, 0x3F	; 63
    1f18:	71 e0       	ldi	r23, 0x01	; 1
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
		}
		while(c != '\0'){
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	88 23       	and	r24, r24
    1f26:	59 f1       	breq	.+86     	; 0x1f7e <make_screen+0x116>
    1f28:	68 94       	set
    1f2a:	aa 24       	eor	r10, r10
    1f2c:	a3 f8       	bld	r10, 3
    1f2e:	b1 2c       	mov	r11, r1
    1f30:	88 24       	eor	r8, r8
    1f32:	83 94       	inc	r8
    1f34:	91 2c       	mov	r9, r1
    1f36:	1e c0       	rjmp	.+60     	; 0x1f74 <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1f38:	24 2d       	mov	r18, r4
    1f3a:	35 2d       	mov	r19, r5
    1f3c:	a6 01       	movw	r20, r12
    1f3e:	be 01       	movw	r22, r28
    1f40:	6f 5f       	subi	r22, 0xFF	; 255
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
    1f4c:	01 50       	subi	r16, 0x01	; 1
    1f4e:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    1f50:	01 15       	cp	r16, r1
    1f52:	11 05       	cpc	r17, r1
    1f54:	89 f7       	brne	.-30     	; 0x1f38 <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
    1f56:	d3 01       	movw	r26, r6
    1f58:	ed 91       	ld	r30, X+
    1f5a:	fc 91       	ld	r31, X
    1f5c:	e8 0d       	add	r30, r8
    1f5e:	f9 1d       	adc	r31, r9
    1f60:	80 81       	ld	r24, Z
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	bf ef       	ldi	r27, 0xFF	; 255
    1f66:	8b 1a       	sub	r8, r27
    1f68:	9b 0a       	sbc	r9, r27
    1f6a:	e8 e0       	ldi	r30, 0x08	; 8
    1f6c:	ae 0e       	add	r10, r30
    1f6e:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
    1f70:	88 23       	and	r24, r24
    1f72:	29 f0       	breq	.+10     	; 0x1f7e <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1f74:	4a 2c       	mov	r4, r10
    1f76:	5b 2c       	mov	r5, r11
    1f78:	02 2d       	mov	r16, r2
    1f7a:	13 2d       	mov	r17, r3
    1f7c:	dd cf       	rjmp	.-70     	; 0x1f38 <make_screen+0xd0>
void make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
    1f7e:	c6 01       	movw	r24, r12
    1f80:	ff ef       	ldi	r31, 0xFF	; 255
    1f82:	cf 1a       	sub	r12, r31
    1f84:	df 0a       	sbc	r13, r31
    1f86:	d7 01       	movw	r26, r14
    1f88:	54 96       	adiw	r26, 0x14	; 20
    1f8a:	2d 91       	ld	r18, X+
    1f8c:	3c 91       	ld	r19, X
    1f8e:	55 97       	sbiw	r26, 0x15	; 21
    1f90:	82 17       	cp	r24, r18
    1f92:	93 07       	cpc	r25, r19
    1f94:	0c f4       	brge	.+2      	; 0x1f98 <make_screen+0x130>
    1f96:	9e cf       	rjmp	.-196    	; 0x1ed4 <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    1f98:	f7 01       	movw	r30, r14
    1f9a:	86 a9       	ldd	r24, Z+54	; 0x36
    1f9c:	97 a9       	ldd	r25, Z+55	; 0x37
    1f9e:	18 16       	cp	r1, r24
    1fa0:	19 06       	cpc	r1, r25
    1fa2:	0c f0       	brlt	.+2      	; 0x1fa6 <make_screen+0x13e>
    1fa4:	6f c0       	rjmp	.+222    	; 0x2084 <make_screen+0x21c>
    1fa6:	37 01       	movw	r6, r14
    1fa8:	f6 e1       	ldi	r31, 0x16	; 22
    1faa:	6f 0e       	add	r6, r31
    1fac:	71 1c       	adc	r7, r1
    1fae:	c1 2c       	mov	r12, r1
    1fb0:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    1fb2:	68 94       	set
    1fb4:	44 24       	eor	r4, r4
    1fb6:	43 f8       	bld	r4, 3
    1fb8:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
    1fba:	d3 01       	movw	r26, r6
    1fbc:	8d 90       	ld	r8, X+
    1fbe:	9d 90       	ld	r9, X+
    1fc0:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
    1fc2:	f4 01       	movw	r30, r8
    1fc4:	80 81       	ld	r24, Z
    1fc6:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
    1fc8:	d7 01       	movw	r26, r14
    1fca:	d8 96       	adiw	r26, 0x38	; 56
    1fcc:	8d 91       	ld	r24, X+
    1fce:	9c 91       	ld	r25, X
    1fd0:	d9 97       	sbiw	r26, 0x39	; 57
    1fd2:	54 96       	adiw	r26, 0x14	; 20
    1fd4:	4d 91       	ld	r20, X+
    1fd6:	5c 91       	ld	r21, X
    1fd8:	55 97       	sbiw	r26, 0x15	; 21
    1fda:	4c 0d       	add	r20, r12
    1fdc:	5d 1d       	adc	r21, r13
    1fde:	84 17       	cp	r24, r20
    1fe0:	95 07       	cpc	r25, r21
    1fe2:	61 f4       	brne	.+24     	; 0x1ffc <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
    1fe4:	ac 01       	movw	r20, r24
    1fe6:	4f 5f       	subi	r20, 0xFF	; 255
    1fe8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	6e ee       	ldi	r22, 0xEE	; 238
    1ff0:	71 e0       	ldi	r23, 0x01	; 1
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
    1ffa:	0a c0       	rjmp	.+20     	; 0x2010 <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
    1ffc:	4f 5f       	subi	r20, 0xFF	; 255
    1ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	6f e3       	ldi	r22, 0x3F	; 63
    2006:	71 e0       	ldi	r23, 0x01	; 1
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
		}
		while(c != '\0'){
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	88 23       	and	r24, r24
    2014:	59 f1       	breq	.+86     	; 0x206c <make_screen+0x204>
    2016:	bf ef       	ldi	r27, 0xFF	; 255
    2018:	8b 1a       	sub	r8, r27
    201a:	9b 0a       	sbc	r9, r27
    201c:	68 94       	set
    201e:	aa 24       	eor	r10, r10
    2020:	a3 f8       	bld	r10, 3
    2022:	b1 2c       	mov	r11, r1
    2024:	1e c0       	rjmp	.+60     	; 0x2062 <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    2026:	f7 01       	movw	r30, r14
    2028:	44 89       	ldd	r20, Z+20	; 0x14
    202a:	55 89       	ldd	r21, Z+21	; 0x15
    202c:	4c 0d       	add	r20, r12
    202e:	5d 1d       	adc	r21, r13
    2030:	4f 5f       	subi	r20, 0xFF	; 255
    2032:	5f 4f       	sbci	r21, 0xFF	; 255
    2034:	22 2d       	mov	r18, r2
    2036:	33 2d       	mov	r19, r3
    2038:	be 01       	movw	r22, r28
    203a:	6f 5f       	subi	r22, 0xFF	; 255
    203c:	7f 4f       	sbci	r23, 0xFF	; 255
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 ac 09 	call	0x1358	; 0x1358 <oled_sram_write_char>
    2046:	01 50       	subi	r16, 0x01	; 1
    2048:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    204a:	01 15       	cp	r16, r1
    204c:	11 05       	cpc	r17, r1
    204e:	59 f7       	brne	.-42     	; 0x2026 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
    2050:	d4 01       	movw	r26, r8
    2052:	8d 91       	ld	r24, X+
    2054:	4d 01       	movw	r8, r26
    2056:	89 83       	std	Y+1, r24	; 0x01
    2058:	b8 e0       	ldi	r27, 0x08	; 8
    205a:	ab 0e       	add	r10, r27
    205c:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
    205e:	88 23       	and	r24, r24
    2060:	29 f0       	breq	.+10     	; 0x206c <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    2062:	2a 2c       	mov	r2, r10
    2064:	3b 2c       	mov	r3, r11
    2066:	04 2d       	mov	r16, r4
    2068:	15 2d       	mov	r17, r5
    206a:	dd cf       	rjmp	.-70     	; 0x2026 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    206c:	ef ef       	ldi	r30, 0xFF	; 255
    206e:	ce 1a       	sub	r12, r30
    2070:	de 0a       	sbc	r13, r30
    2072:	d7 01       	movw	r26, r14
    2074:	d6 96       	adiw	r26, 0x36	; 54
    2076:	8d 91       	ld	r24, X+
    2078:	9c 91       	ld	r25, X
    207a:	d7 97       	sbiw	r26, 0x37	; 55
    207c:	c8 16       	cp	r12, r24
    207e:	d9 06       	cpc	r13, r25
    2080:	0c f4       	brge	.+2      	; 0x2084 <make_screen+0x21c>
    2082:	9b cf       	rjmp	.-202    	; 0x1fba <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 fe 08 	call	0x11fc	; 0x11fc <oled_sram_flush>
} 
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	ff 90       	pop	r15
    209c:	ef 90       	pop	r14
    209e:	df 90       	pop	r13
    20a0:	cf 90       	pop	r12
    20a2:	bf 90       	pop	r11
    20a4:	af 90       	pop	r10
    20a6:	9f 90       	pop	r9
    20a8:	8f 90       	pop	r8
    20aa:	7f 90       	pop	r7
    20ac:	6f 90       	pop	r6
    20ae:	5f 90       	pop	r5
    20b0:	4f 90       	pop	r4
    20b2:	3f 90       	pop	r3
    20b4:	2f 90       	pop	r2
    20b6:	08 95       	ret

000020b8 <menuSystem>:
#include "../Game_files/pong.h"
#include "../Game_files/pingpong.h"
#include "../Game_files/highscore.h"


void menuSystem(){
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	c8 5e       	subi	r28, 0xE8	; 232
    20c2:	d1 09       	sbc	r29, r1
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 3};
    20ce:	1a e3       	ldi	r17, 0x3A	; 58
    20d0:	ce 01       	movw	r24, r28
    20d2:	01 96       	adiw	r24, 0x01	; 1
    20d4:	7c 01       	movw	r14, r24
    20d6:	dc 01       	movw	r26, r24
    20d8:	e1 2f       	mov	r30, r17
    20da:	1d 92       	st	X+, r1
    20dc:	ea 95       	dec	r30
    20de:	e9 f7       	brne	.-6      	; 0x20da <menuSystem+0x22>
    20e0:	80 ef       	ldi	r24, 0xF0	; 240
    20e2:	91 e0       	ldi	r25, 0x01	; 1
    20e4:	9a 83       	std	Y+2, r25	; 0x02
    20e6:	89 83       	std	Y+1, r24	; 0x01
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9e 8b       	std	Y+22, r25	; 0x16
    20ee:	8d 8b       	std	Y+21, r24	; 0x15
		
	menu highscore = {.name = "Highscore", .parent = &mainMenu, .num_functions = 3, .num_submenues = 0};
    20f0:	de 01       	movw	r26, r28
    20f2:	db 96       	adiw	r26, 0x3b	; 59
    20f4:	fd 01       	movw	r30, r26
    20f6:	21 2f       	mov	r18, r17
    20f8:	11 92       	st	Z+, r1
    20fa:	2a 95       	dec	r18
    20fc:	e9 f7       	brne	.-6      	; 0x20f8 <menuSystem+0x40>
    20fe:	2a ef       	ldi	r18, 0xFA	; 250
    2100:	31 e0       	ldi	r19, 0x01	; 1
    2102:	3c af       	std	Y+60, r19	; 0x3c
    2104:	2b af       	std	Y+59, r18	; 0x3b
    2106:	fe ae       	std	Y+62, r15	; 0x3e
    2108:	ed ae       	std	Y+61, r14	; 0x3d
    210a:	e3 96       	adiw	r28, 0x33	; 51
    210c:	9f af       	std	Y+63, r25	; 0x3f
    210e:	8e af       	std	Y+62, r24	; 0x3e
    2110:	e3 97       	sbiw	r28, 0x33	; 51
	mainMenu.submenues[1] = &highscore;
    2112:	b8 87       	std	Y+8, r27	; 0x08
    2114:	af 83       	std	Y+7, r26	; 0x07
	highscore.functions[0] = &highscore_print_snake;
    2116:	85 e8       	ldi	r24, 0x85	; 133
    2118:	94 e0       	ldi	r25, 0x04	; 4
    211a:	a3 96       	adiw	r28, 0x23	; 35
    211c:	9f af       	std	Y+63, r25	; 0x3f
    211e:	8e af       	std	Y+62, r24	; 0x3e
    2120:	a3 97       	sbiw	r28, 0x23	; 35
	highscore.functions[1] = &highscore_print_pong;
    2122:	89 e8       	ldi	r24, 0x89	; 137
    2124:	94 e0       	ldi	r25, 0x04	; 4
    2126:	a5 96       	adiw	r28, 0x25	; 37
    2128:	9f af       	std	Y+63, r25	; 0x3f
    212a:	8e af       	std	Y+62, r24	; 0x3e
    212c:	a5 97       	sbiw	r28, 0x25	; 37
	highscore.functions[2] = &highscore_print_pingpong;
    212e:	81 e8       	ldi	r24, 0x81	; 129
    2130:	94 e0       	ldi	r25, 0x04	; 4
    2132:	a7 96       	adiw	r28, 0x27	; 39
    2134:	9f af       	std	Y+63, r25	; 0x3f
    2136:	8e af       	std	Y+62, r24	; 0x3e
    2138:	a7 97       	sbiw	r28, 0x27	; 39
	highscore.name_functions[0] = "Snake";
    213a:	44 e0       	ldi	r20, 0x04	; 4
    213c:	52 e0       	ldi	r21, 0x02	; 2
    213e:	63 96       	adiw	r28, 0x13	; 19
    2140:	5f af       	std	Y+63, r21	; 0x3f
    2142:	4e af       	std	Y+62, r20	; 0x3e
    2144:	63 97       	sbiw	r28, 0x13	; 19
	highscore.name_functions[1] = "Pong";
    2146:	2f e0       	ldi	r18, 0x0F	; 15
    2148:	32 e0       	ldi	r19, 0x02	; 2
    214a:	65 96       	adiw	r28, 0x15	; 21
    214c:	3f af       	std	Y+63, r19	; 0x3f
    214e:	2e af       	std	Y+62, r18	; 0x3e
    2150:	65 97       	sbiw	r28, 0x15	; 21
	highscore.name_functions[2] = "Ping Pong";
    2152:	8a e0       	ldi	r24, 0x0A	; 10
    2154:	92 e0       	ldi	r25, 0x02	; 2
    2156:	67 96       	adiw	r28, 0x17	; 23
    2158:	9f af       	std	Y+63, r25	; 0x3f
    215a:	8e af       	std	Y+62, r24	; 0x3e
    215c:	67 97       	sbiw	r28, 0x17	; 23
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 4};
    215e:	fe 01       	movw	r30, r28
    2160:	eb 58       	subi	r30, 0x8B	; 139
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	df 01       	movw	r26, r30
    2166:	61 2f       	mov	r22, r17
    2168:	1d 92       	st	X+, r1
    216a:	6a 95       	dec	r22
    216c:	e9 f7       	brne	.-6      	; 0x2168 <menuSystem+0xb0>
    216e:	64 e1       	ldi	r22, 0x14	; 20
    2170:	72 e0       	ldi	r23, 0x02	; 2
    2172:	71 83       	std	Z+1, r23	; 0x01
    2174:	60 83       	st	Z, r22
    2176:	f3 82       	std	Z+3, r15	; 0x03
    2178:	e2 82       	std	Z+2, r14	; 0x02
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	77 ab       	std	Z+55, r23	; 0x37
    2180:	66 ab       	std	Z+54, r22	; 0x36
	playGame.functions[0] = &play_draw;
    2182:	69 e7       	ldi	r22, 0x79	; 121
    2184:	7a e0       	ldi	r23, 0x0A	; 10
    2186:	77 a3       	std	Z+39, r23	; 0x27
    2188:	66 a3       	std	Z+38, r22	; 0x26
	playGame.functions[1] = &playSnake;
    218a:	69 e3       	ldi	r22, 0x39	; 57
    218c:	7e e0       	ldi	r23, 0x0E	; 14
    218e:	71 a7       	std	Z+41, r23	; 0x29
    2190:	60 a7       	std	Z+40, r22	; 0x28
	playGame.functions[2] = &playPong;
    2192:	6c e4       	ldi	r22, 0x4C	; 76
    2194:	7d e0       	ldi	r23, 0x0D	; 13
    2196:	73 a7       	std	Z+43, r23	; 0x2b
    2198:	62 a7       	std	Z+42, r22	; 0x2a
	playGame.functions[3] = &play_pingpong;
    219a:	65 e6       	ldi	r22, 0x65	; 101
    219c:	75 e0       	ldi	r23, 0x05	; 5
    219e:	75 a7       	std	Z+45, r23	; 0x2d
    21a0:	64 a7       	std	Z+44, r22	; 0x2c
	playGame.name_functions[0] = "Draw";
    21a2:	6e e1       	ldi	r22, 0x1E	; 30
    21a4:	72 e0       	ldi	r23, 0x02	; 2
    21a6:	77 8b       	std	Z+23, r23	; 0x17
    21a8:	66 8b       	std	Z+22, r22	; 0x16
	playGame.name_functions[1] = "Snake";
    21aa:	51 8f       	std	Z+25, r21	; 0x19
    21ac:	40 8f       	std	Z+24, r20	; 0x18
	playGame.name_functions[2] = "Pong";
    21ae:	33 8f       	std	Z+27, r19	; 0x1b
    21b0:	22 8f       	std	Z+26, r18	; 0x1a
	playGame.name_functions[3] = "Ping Pong";
    21b2:	95 8f       	std	Z+29, r25	; 0x1d
    21b4:	84 8f       	std	Z+28, r24	; 0x1c
	mainMenu.submenues[0] = &playGame;
    21b6:	fe 83       	std	Y+6, r31	; 0x06
    21b8:	ed 83       	std	Y+5, r30	; 0x05
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 2};
    21ba:	fa 96       	adiw	r30, 0x3a	; 58
    21bc:	df 01       	movw	r26, r30
    21be:	1d 92       	st	X+, r1
    21c0:	1a 95       	dec	r17
    21c2:	e9 f7       	brne	.-6      	; 0x21be <menuSystem+0x106>
    21c4:	83 e2       	ldi	r24, 0x23	; 35
    21c6:	92 e0       	ldi	r25, 0x02	; 2
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	80 83       	st	Z, r24
    21cc:	f3 82       	std	Z+3, r15	; 0x03
    21ce:	e2 82       	std	Z+2, r14	; 0x02
    21d0:	82 e0       	ldi	r24, 0x02	; 2
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	97 ab       	std	Z+55, r25	; 0x37
    21d6:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrate_joystick;
    21d8:	8b eb       	ldi	r24, 0xBB	; 187
    21da:	97 e0       	ldi	r25, 0x07	; 7
    21dc:	97 a3       	std	Z+39, r25	; 0x27
    21de:	86 a3       	std	Z+38, r24	; 0x26
	settings.functions[1] = &highscore_clear_all;
    21e0:	87 ef       	ldi	r24, 0xF7	; 247
    21e2:	93 e0       	ldi	r25, 0x03	; 3
    21e4:	91 a7       	std	Z+41, r25	; 0x29
    21e6:	80 a7       	std	Z+40, r24	; 0x28
	settings.name_functions[0] = "Calibrate Joy";
    21e8:	8c e2       	ldi	r24, 0x2C	; 44
    21ea:	92 e0       	ldi	r25, 0x02	; 2
    21ec:	97 8b       	std	Z+23, r25	; 0x17
    21ee:	86 8b       	std	Z+22, r24	; 0x16
	settings.name_functions[1] = "Clear highscore";
    21f0:	8a e3       	ldi	r24, 0x3A	; 58
    21f2:	92 e0       	ldi	r25, 0x02	; 2
    21f4:	91 8f       	std	Z+25, r25	; 0x19
    21f6:	80 8f       	std	Z+24, r24	; 0x18
	mainMenu.submenues[2] = &settings;
    21f8:	fa 87       	std	Y+10, r31	; 0x0a
    21fa:	e9 87       	std	Y+9, r30	; 0x09
	

	
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
    21fc:	87 01       	movw	r16, r14
	settings.name_functions[1] = "Clear highscore";
	mainMenu.submenues[2] = &settings;
	

	
	direction previousDirection = NEUTRAL;
    21fe:	68 94       	set
    2200:	aa 24       	eor	r10, r10
    2202:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    2204:	f8 01       	movw	r30, r16
    2206:	c6 a8       	ldd	r12, Z+54	; 0x36
    2208:	d7 a8       	ldd	r13, Z+55	; 0x37
    220a:	e4 88       	ldd	r14, Z+20	; 0x14
    220c:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = get_joystick_position();
    220e:	0e 94 23 07 	call	0xe46	; 0xe46 <get_joystick_position>
    2212:	b8 2e       	mov	r11, r24
		if (joy.D != previousDirection){
    2214:	a8 16       	cp	r10, r24
    2216:	09 f4       	brne	.+2      	; 0x221a <menuSystem+0x162>
    2218:	51 c0       	rjmp	.+162    	; 0x22bc <menuSystem+0x204>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    221a:	b6 01       	movw	r22, r12
    221c:	6e 0d       	add	r22, r14
    221e:	7f 1d       	adc	r23, r15
		joy = get_joystick_position();
		if (joy.D != previousDirection){
			switch(joy.D){
    2220:	f1 e0       	ldi	r31, 0x01	; 1
    2222:	8f 17       	cp	r24, r31
    2224:	69 f1       	breq	.+90     	; 0x2280 <menuSystem+0x1c8>
    2226:	8f 17       	cp	r24, r31
    2228:	08 f1       	brcs	.+66     	; 0x226c <menuSystem+0x1b4>
    222a:	22 e0       	ldi	r18, 0x02	; 2
    222c:	82 17       	cp	r24, r18
    222e:	21 f0       	breq	.+8      	; 0x2238 <menuSystem+0x180>
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	b8 16       	cp	r11, r24
    2234:	79 f0       	breq	.+30     	; 0x2254 <menuSystem+0x19c>
    2236:	42 c0       	rjmp	.+132    	; 0x22bc <menuSystem+0x204>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
    2238:	d8 01       	movw	r26, r16
    223a:	d8 96       	adiw	r26, 0x38	; 56
    223c:	8d 91       	ld	r24, X+
    223e:	9c 91       	ld	r25, X
    2240:	d9 97       	sbiw	r26, 0x39	; 57
    2242:	01 97       	sbiw	r24, 0x01	; 1
    2244:	86 0f       	add	r24, r22
    2246:	97 1f       	adc	r25, r23
    2248:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
    224c:	f8 01       	movw	r30, r16
    224e:	91 af       	std	Z+57, r25	; 0x39
    2250:	80 af       	std	Z+56, r24	; 0x38
					break;
    2252:	34 c0       	rjmp	.+104    	; 0x22bc <menuSystem+0x204>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
    2254:	d8 01       	movw	r26, r16
    2256:	d8 96       	adiw	r26, 0x38	; 56
    2258:	8d 91       	ld	r24, X+
    225a:	9c 91       	ld	r25, X
    225c:	d9 97       	sbiw	r26, 0x39	; 57
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	0e 94 87 13 	call	0x270e	; 0x270e <__divmodhi4>
    2264:	f8 01       	movw	r30, r16
    2266:	91 af       	std	Z+57, r25	; 0x39
    2268:	80 af       	std	Z+56, r24	; 0x38
					break;
    226a:	28 c0       	rjmp	.+80     	; 0x22bc <menuSystem+0x204>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
    226c:	d8 01       	movw	r26, r16
    226e:	12 96       	adiw	r26, 0x02	; 2
    2270:	2d 91       	ld	r18, X+
    2272:	3c 91       	ld	r19, X
    2274:	13 97       	sbiw	r26, 0x03	; 3
    2276:	21 15       	cp	r18, r1
    2278:	31 05       	cpc	r19, r1
    227a:	01 f1       	breq	.+64     	; 0x22bc <menuSystem+0x204>
    227c:	89 01       	movw	r16, r18
    227e:	1e c0       	rjmp	.+60     	; 0x22bc <menuSystem+0x204>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
    2280:	f8 01       	movw	r30, r16
    2282:	20 ad       	ldd	r18, Z+56	; 0x38
    2284:	31 ad       	ldd	r19, Z+57	; 0x39
    2286:	44 89       	ldd	r20, Z+20	; 0x14
    2288:	55 89       	ldd	r21, Z+21	; 0x15
    228a:	24 17       	cp	r18, r20
    228c:	35 07       	cpc	r19, r21
    228e:	4c f4       	brge	.+18     	; 0x22a2 <menuSystem+0x1ea>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
    2290:	2e 5f       	subi	r18, 0xFE	; 254
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	22 0f       	add	r18, r18
    2296:	33 1f       	adc	r19, r19
    2298:	e2 0f       	add	r30, r18
    229a:	f3 1f       	adc	r31, r19
    229c:	00 81       	ld	r16, Z
    229e:	11 81       	ldd	r17, Z+1	; 0x01
    22a0:	0d c0       	rjmp	.+26     	; 0x22bc <menuSystem+0x204>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
    22a2:	24 1b       	sub	r18, r20
    22a4:	35 0b       	sbc	r19, r21
    22a6:	2d 5e       	subi	r18, 0xED	; 237
    22a8:	3f 4f       	sbci	r19, 0xFF	; 255
    22aa:	f9 01       	movw	r30, r18
    22ac:	ee 0f       	add	r30, r30
    22ae:	ff 1f       	adc	r31, r31
    22b0:	e0 0f       	add	r30, r16
    22b2:	f1 1f       	adc	r31, r17
    22b4:	01 90       	ld	r0, Z+
    22b6:	f0 81       	ld	r31, Z
    22b8:	e0 2d       	mov	r30, r0
    22ba:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
    22bc:	c8 01       	movw	r24, r16
    22be:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <make_screen>
    22c2:	ff ef       	ldi	r31, 0xFF	; 255
    22c4:	2f e7       	ldi	r18, 0x7F	; 127
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	f1 50       	subi	r31, 0x01	; 1
    22ca:	20 40       	sbci	r18, 0x00	; 0
    22cc:	60 40       	sbci	r22, 0x00	; 0
    22ce:	e1 f7       	brne	.-8      	; 0x22c8 <menuSystem+0x210>
    22d0:	00 c0       	rjmp	.+0      	; 0x22d2 <menuSystem+0x21a>
    22d2:	00 c0       	rjmp	.+0      	; 0x22d4 <menuSystem+0x21c>
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
    22d4:	ab 2c       	mov	r10, r11
    22d6:	96 cf       	rjmp	.-212    	; 0x2204 <menuSystem+0x14c>

000022d8 <__subsf3>:
    22d8:	50 58       	subi	r21, 0x80	; 128

000022da <__addsf3>:
    22da:	bb 27       	eor	r27, r27
    22dc:	aa 27       	eor	r26, r26
    22de:	0e d0       	rcall	.+28     	; 0x22fc <__addsf3x>
    22e0:	75 c1       	rjmp	.+746    	; 0x25cc <__fp_round>
    22e2:	66 d1       	rcall	.+716    	; 0x25b0 <__fp_pscA>
    22e4:	30 f0       	brcs	.+12     	; 0x22f2 <__addsf3+0x18>
    22e6:	6b d1       	rcall	.+726    	; 0x25be <__fp_pscB>
    22e8:	20 f0       	brcs	.+8      	; 0x22f2 <__addsf3+0x18>
    22ea:	31 f4       	brne	.+12     	; 0x22f8 <__addsf3+0x1e>
    22ec:	9f 3f       	cpi	r25, 0xFF	; 255
    22ee:	11 f4       	brne	.+4      	; 0x22f4 <__addsf3+0x1a>
    22f0:	1e f4       	brtc	.+6      	; 0x22f8 <__addsf3+0x1e>
    22f2:	5b c1       	rjmp	.+694    	; 0x25aa <__fp_nan>
    22f4:	0e f4       	brtc	.+2      	; 0x22f8 <__addsf3+0x1e>
    22f6:	e0 95       	com	r30
    22f8:	e7 fb       	bst	r30, 7
    22fa:	51 c1       	rjmp	.+674    	; 0x259e <__fp_inf>

000022fc <__addsf3x>:
    22fc:	e9 2f       	mov	r30, r25
    22fe:	77 d1       	rcall	.+750    	; 0x25ee <__fp_split3>
    2300:	80 f3       	brcs	.-32     	; 0x22e2 <__addsf3+0x8>
    2302:	ba 17       	cp	r27, r26
    2304:	62 07       	cpc	r22, r18
    2306:	73 07       	cpc	r23, r19
    2308:	84 07       	cpc	r24, r20
    230a:	95 07       	cpc	r25, r21
    230c:	18 f0       	brcs	.+6      	; 0x2314 <__addsf3x+0x18>
    230e:	71 f4       	brne	.+28     	; 0x232c <__addsf3x+0x30>
    2310:	9e f5       	brtc	.+102    	; 0x2378 <__addsf3x+0x7c>
    2312:	8f c1       	rjmp	.+798    	; 0x2632 <__fp_zero>
    2314:	0e f4       	brtc	.+2      	; 0x2318 <__addsf3x+0x1c>
    2316:	e0 95       	com	r30
    2318:	0b 2e       	mov	r0, r27
    231a:	ba 2f       	mov	r27, r26
    231c:	a0 2d       	mov	r26, r0
    231e:	0b 01       	movw	r0, r22
    2320:	b9 01       	movw	r22, r18
    2322:	90 01       	movw	r18, r0
    2324:	0c 01       	movw	r0, r24
    2326:	ca 01       	movw	r24, r20
    2328:	a0 01       	movw	r20, r0
    232a:	11 24       	eor	r1, r1
    232c:	ff 27       	eor	r31, r31
    232e:	59 1b       	sub	r21, r25
    2330:	99 f0       	breq	.+38     	; 0x2358 <__addsf3x+0x5c>
    2332:	59 3f       	cpi	r21, 0xF9	; 249
    2334:	50 f4       	brcc	.+20     	; 0x234a <__addsf3x+0x4e>
    2336:	50 3e       	cpi	r21, 0xE0	; 224
    2338:	68 f1       	brcs	.+90     	; 0x2394 <__addsf3x+0x98>
    233a:	1a 16       	cp	r1, r26
    233c:	f0 40       	sbci	r31, 0x00	; 0
    233e:	a2 2f       	mov	r26, r18
    2340:	23 2f       	mov	r18, r19
    2342:	34 2f       	mov	r19, r20
    2344:	44 27       	eor	r20, r20
    2346:	58 5f       	subi	r21, 0xF8	; 248
    2348:	f3 cf       	rjmp	.-26     	; 0x2330 <__addsf3x+0x34>
    234a:	46 95       	lsr	r20
    234c:	37 95       	ror	r19
    234e:	27 95       	ror	r18
    2350:	a7 95       	ror	r26
    2352:	f0 40       	sbci	r31, 0x00	; 0
    2354:	53 95       	inc	r21
    2356:	c9 f7       	brne	.-14     	; 0x234a <__addsf3x+0x4e>
    2358:	7e f4       	brtc	.+30     	; 0x2378 <__addsf3x+0x7c>
    235a:	1f 16       	cp	r1, r31
    235c:	ba 0b       	sbc	r27, r26
    235e:	62 0b       	sbc	r22, r18
    2360:	73 0b       	sbc	r23, r19
    2362:	84 0b       	sbc	r24, r20
    2364:	ba f0       	brmi	.+46     	; 0x2394 <__addsf3x+0x98>
    2366:	91 50       	subi	r25, 0x01	; 1
    2368:	a1 f0       	breq	.+40     	; 0x2392 <__addsf3x+0x96>
    236a:	ff 0f       	add	r31, r31
    236c:	bb 1f       	adc	r27, r27
    236e:	66 1f       	adc	r22, r22
    2370:	77 1f       	adc	r23, r23
    2372:	88 1f       	adc	r24, r24
    2374:	c2 f7       	brpl	.-16     	; 0x2366 <__addsf3x+0x6a>
    2376:	0e c0       	rjmp	.+28     	; 0x2394 <__addsf3x+0x98>
    2378:	ba 0f       	add	r27, r26
    237a:	62 1f       	adc	r22, r18
    237c:	73 1f       	adc	r23, r19
    237e:	84 1f       	adc	r24, r20
    2380:	48 f4       	brcc	.+18     	; 0x2394 <__addsf3x+0x98>
    2382:	87 95       	ror	r24
    2384:	77 95       	ror	r23
    2386:	67 95       	ror	r22
    2388:	b7 95       	ror	r27
    238a:	f7 95       	ror	r31
    238c:	9e 3f       	cpi	r25, 0xFE	; 254
    238e:	08 f0       	brcs	.+2      	; 0x2392 <__addsf3x+0x96>
    2390:	b3 cf       	rjmp	.-154    	; 0x22f8 <__addsf3+0x1e>
    2392:	93 95       	inc	r25
    2394:	88 0f       	add	r24, r24
    2396:	08 f0       	brcs	.+2      	; 0x239a <__addsf3x+0x9e>
    2398:	99 27       	eor	r25, r25
    239a:	ee 0f       	add	r30, r30
    239c:	97 95       	ror	r25
    239e:	87 95       	ror	r24
    23a0:	08 95       	ret

000023a2 <__cmpsf2>:
    23a2:	d9 d0       	rcall	.+434    	; 0x2556 <__fp_cmp>
    23a4:	08 f4       	brcc	.+2      	; 0x23a8 <__cmpsf2+0x6>
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	08 95       	ret

000023aa <__divsf3>:
    23aa:	0c d0       	rcall	.+24     	; 0x23c4 <__divsf3x>
    23ac:	0f c1       	rjmp	.+542    	; 0x25cc <__fp_round>
    23ae:	07 d1       	rcall	.+526    	; 0x25be <__fp_pscB>
    23b0:	40 f0       	brcs	.+16     	; 0x23c2 <__divsf3+0x18>
    23b2:	fe d0       	rcall	.+508    	; 0x25b0 <__fp_pscA>
    23b4:	30 f0       	brcs	.+12     	; 0x23c2 <__divsf3+0x18>
    23b6:	21 f4       	brne	.+8      	; 0x23c0 <__divsf3+0x16>
    23b8:	5f 3f       	cpi	r21, 0xFF	; 255
    23ba:	19 f0       	breq	.+6      	; 0x23c2 <__divsf3+0x18>
    23bc:	f0 c0       	rjmp	.+480    	; 0x259e <__fp_inf>
    23be:	51 11       	cpse	r21, r1
    23c0:	39 c1       	rjmp	.+626    	; 0x2634 <__fp_szero>
    23c2:	f3 c0       	rjmp	.+486    	; 0x25aa <__fp_nan>

000023c4 <__divsf3x>:
    23c4:	14 d1       	rcall	.+552    	; 0x25ee <__fp_split3>
    23c6:	98 f3       	brcs	.-26     	; 0x23ae <__divsf3+0x4>

000023c8 <__divsf3_pse>:
    23c8:	99 23       	and	r25, r25
    23ca:	c9 f3       	breq	.-14     	; 0x23be <__divsf3+0x14>
    23cc:	55 23       	and	r21, r21
    23ce:	b1 f3       	breq	.-20     	; 0x23bc <__divsf3+0x12>
    23d0:	95 1b       	sub	r25, r21
    23d2:	55 0b       	sbc	r21, r21
    23d4:	bb 27       	eor	r27, r27
    23d6:	aa 27       	eor	r26, r26
    23d8:	62 17       	cp	r22, r18
    23da:	73 07       	cpc	r23, r19
    23dc:	84 07       	cpc	r24, r20
    23de:	38 f0       	brcs	.+14     	; 0x23ee <__divsf3_pse+0x26>
    23e0:	9f 5f       	subi	r25, 0xFF	; 255
    23e2:	5f 4f       	sbci	r21, 0xFF	; 255
    23e4:	22 0f       	add	r18, r18
    23e6:	33 1f       	adc	r19, r19
    23e8:	44 1f       	adc	r20, r20
    23ea:	aa 1f       	adc	r26, r26
    23ec:	a9 f3       	breq	.-22     	; 0x23d8 <__divsf3_pse+0x10>
    23ee:	33 d0       	rcall	.+102    	; 0x2456 <__divsf3_pse+0x8e>
    23f0:	0e 2e       	mov	r0, r30
    23f2:	3a f0       	brmi	.+14     	; 0x2402 <__divsf3_pse+0x3a>
    23f4:	e0 e8       	ldi	r30, 0x80	; 128
    23f6:	30 d0       	rcall	.+96     	; 0x2458 <__divsf3_pse+0x90>
    23f8:	91 50       	subi	r25, 0x01	; 1
    23fa:	50 40       	sbci	r21, 0x00	; 0
    23fc:	e6 95       	lsr	r30
    23fe:	00 1c       	adc	r0, r0
    2400:	ca f7       	brpl	.-14     	; 0x23f4 <__divsf3_pse+0x2c>
    2402:	29 d0       	rcall	.+82     	; 0x2456 <__divsf3_pse+0x8e>
    2404:	fe 2f       	mov	r31, r30
    2406:	27 d0       	rcall	.+78     	; 0x2456 <__divsf3_pse+0x8e>
    2408:	66 0f       	add	r22, r22
    240a:	77 1f       	adc	r23, r23
    240c:	88 1f       	adc	r24, r24
    240e:	bb 1f       	adc	r27, r27
    2410:	26 17       	cp	r18, r22
    2412:	37 07       	cpc	r19, r23
    2414:	48 07       	cpc	r20, r24
    2416:	ab 07       	cpc	r26, r27
    2418:	b0 e8       	ldi	r27, 0x80	; 128
    241a:	09 f0       	breq	.+2      	; 0x241e <__divsf3_pse+0x56>
    241c:	bb 0b       	sbc	r27, r27
    241e:	80 2d       	mov	r24, r0
    2420:	bf 01       	movw	r22, r30
    2422:	ff 27       	eor	r31, r31
    2424:	93 58       	subi	r25, 0x83	; 131
    2426:	5f 4f       	sbci	r21, 0xFF	; 255
    2428:	2a f0       	brmi	.+10     	; 0x2434 <__divsf3_pse+0x6c>
    242a:	9e 3f       	cpi	r25, 0xFE	; 254
    242c:	51 05       	cpc	r21, r1
    242e:	68 f0       	brcs	.+26     	; 0x244a <__divsf3_pse+0x82>
    2430:	b6 c0       	rjmp	.+364    	; 0x259e <__fp_inf>
    2432:	00 c1       	rjmp	.+512    	; 0x2634 <__fp_szero>
    2434:	5f 3f       	cpi	r21, 0xFF	; 255
    2436:	ec f3       	brlt	.-6      	; 0x2432 <__divsf3_pse+0x6a>
    2438:	98 3e       	cpi	r25, 0xE8	; 232
    243a:	dc f3       	brlt	.-10     	; 0x2432 <__divsf3_pse+0x6a>
    243c:	86 95       	lsr	r24
    243e:	77 95       	ror	r23
    2440:	67 95       	ror	r22
    2442:	b7 95       	ror	r27
    2444:	f7 95       	ror	r31
    2446:	9f 5f       	subi	r25, 0xFF	; 255
    2448:	c9 f7       	brne	.-14     	; 0x243c <__divsf3_pse+0x74>
    244a:	88 0f       	add	r24, r24
    244c:	91 1d       	adc	r25, r1
    244e:	96 95       	lsr	r25
    2450:	87 95       	ror	r24
    2452:	97 f9       	bld	r25, 7
    2454:	08 95       	ret
    2456:	e1 e0       	ldi	r30, 0x01	; 1
    2458:	66 0f       	add	r22, r22
    245a:	77 1f       	adc	r23, r23
    245c:	88 1f       	adc	r24, r24
    245e:	bb 1f       	adc	r27, r27
    2460:	62 17       	cp	r22, r18
    2462:	73 07       	cpc	r23, r19
    2464:	84 07       	cpc	r24, r20
    2466:	ba 07       	cpc	r27, r26
    2468:	20 f0       	brcs	.+8      	; 0x2472 <__divsf3_pse+0xaa>
    246a:	62 1b       	sub	r22, r18
    246c:	73 0b       	sbc	r23, r19
    246e:	84 0b       	sbc	r24, r20
    2470:	ba 0b       	sbc	r27, r26
    2472:	ee 1f       	adc	r30, r30
    2474:	88 f7       	brcc	.-30     	; 0x2458 <__divsf3_pse+0x90>
    2476:	e0 95       	com	r30
    2478:	08 95       	ret

0000247a <__fixsfsi>:
    247a:	04 d0       	rcall	.+8      	; 0x2484 <__fixunssfsi>
    247c:	68 94       	set
    247e:	b1 11       	cpse	r27, r1
    2480:	d9 c0       	rjmp	.+434    	; 0x2634 <__fp_szero>
    2482:	08 95       	ret

00002484 <__fixunssfsi>:
    2484:	bc d0       	rcall	.+376    	; 0x25fe <__fp_splitA>
    2486:	88 f0       	brcs	.+34     	; 0x24aa <__fixunssfsi+0x26>
    2488:	9f 57       	subi	r25, 0x7F	; 127
    248a:	90 f0       	brcs	.+36     	; 0x24b0 <__fixunssfsi+0x2c>
    248c:	b9 2f       	mov	r27, r25
    248e:	99 27       	eor	r25, r25
    2490:	b7 51       	subi	r27, 0x17	; 23
    2492:	a0 f0       	brcs	.+40     	; 0x24bc <__fixunssfsi+0x38>
    2494:	d1 f0       	breq	.+52     	; 0x24ca <__fixunssfsi+0x46>
    2496:	66 0f       	add	r22, r22
    2498:	77 1f       	adc	r23, r23
    249a:	88 1f       	adc	r24, r24
    249c:	99 1f       	adc	r25, r25
    249e:	1a f0       	brmi	.+6      	; 0x24a6 <__fixunssfsi+0x22>
    24a0:	ba 95       	dec	r27
    24a2:	c9 f7       	brne	.-14     	; 0x2496 <__fixunssfsi+0x12>
    24a4:	12 c0       	rjmp	.+36     	; 0x24ca <__fixunssfsi+0x46>
    24a6:	b1 30       	cpi	r27, 0x01	; 1
    24a8:	81 f0       	breq	.+32     	; 0x24ca <__fixunssfsi+0x46>
    24aa:	c3 d0       	rcall	.+390    	; 0x2632 <__fp_zero>
    24ac:	b1 e0       	ldi	r27, 0x01	; 1
    24ae:	08 95       	ret
    24b0:	c0 c0       	rjmp	.+384    	; 0x2632 <__fp_zero>
    24b2:	67 2f       	mov	r22, r23
    24b4:	78 2f       	mov	r23, r24
    24b6:	88 27       	eor	r24, r24
    24b8:	b8 5f       	subi	r27, 0xF8	; 248
    24ba:	39 f0       	breq	.+14     	; 0x24ca <__fixunssfsi+0x46>
    24bc:	b9 3f       	cpi	r27, 0xF9	; 249
    24be:	cc f3       	brlt	.-14     	; 0x24b2 <__fixunssfsi+0x2e>
    24c0:	86 95       	lsr	r24
    24c2:	77 95       	ror	r23
    24c4:	67 95       	ror	r22
    24c6:	b3 95       	inc	r27
    24c8:	d9 f7       	brne	.-10     	; 0x24c0 <__fixunssfsi+0x3c>
    24ca:	3e f4       	brtc	.+14     	; 0x24da <__fixunssfsi+0x56>
    24cc:	90 95       	com	r25
    24ce:	80 95       	com	r24
    24d0:	70 95       	com	r23
    24d2:	61 95       	neg	r22
    24d4:	7f 4f       	sbci	r23, 0xFF	; 255
    24d6:	8f 4f       	sbci	r24, 0xFF	; 255
    24d8:	9f 4f       	sbci	r25, 0xFF	; 255
    24da:	08 95       	ret

000024dc <__floatunsisf>:
    24dc:	e8 94       	clt
    24de:	09 c0       	rjmp	.+18     	; 0x24f2 <__floatsisf+0x12>

000024e0 <__floatsisf>:
    24e0:	97 fb       	bst	r25, 7
    24e2:	3e f4       	brtc	.+14     	; 0x24f2 <__floatsisf+0x12>
    24e4:	90 95       	com	r25
    24e6:	80 95       	com	r24
    24e8:	70 95       	com	r23
    24ea:	61 95       	neg	r22
    24ec:	7f 4f       	sbci	r23, 0xFF	; 255
    24ee:	8f 4f       	sbci	r24, 0xFF	; 255
    24f0:	9f 4f       	sbci	r25, 0xFF	; 255
    24f2:	99 23       	and	r25, r25
    24f4:	a9 f0       	breq	.+42     	; 0x2520 <__floatsisf+0x40>
    24f6:	f9 2f       	mov	r31, r25
    24f8:	96 e9       	ldi	r25, 0x96	; 150
    24fa:	bb 27       	eor	r27, r27
    24fc:	93 95       	inc	r25
    24fe:	f6 95       	lsr	r31
    2500:	87 95       	ror	r24
    2502:	77 95       	ror	r23
    2504:	67 95       	ror	r22
    2506:	b7 95       	ror	r27
    2508:	f1 11       	cpse	r31, r1
    250a:	f8 cf       	rjmp	.-16     	; 0x24fc <__floatsisf+0x1c>
    250c:	fa f4       	brpl	.+62     	; 0x254c <__floatsisf+0x6c>
    250e:	bb 0f       	add	r27, r27
    2510:	11 f4       	brne	.+4      	; 0x2516 <__floatsisf+0x36>
    2512:	60 ff       	sbrs	r22, 0
    2514:	1b c0       	rjmp	.+54     	; 0x254c <__floatsisf+0x6c>
    2516:	6f 5f       	subi	r22, 0xFF	; 255
    2518:	7f 4f       	sbci	r23, 0xFF	; 255
    251a:	8f 4f       	sbci	r24, 0xFF	; 255
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	16 c0       	rjmp	.+44     	; 0x254c <__floatsisf+0x6c>
    2520:	88 23       	and	r24, r24
    2522:	11 f0       	breq	.+4      	; 0x2528 <__floatsisf+0x48>
    2524:	96 e9       	ldi	r25, 0x96	; 150
    2526:	11 c0       	rjmp	.+34     	; 0x254a <__floatsisf+0x6a>
    2528:	77 23       	and	r23, r23
    252a:	21 f0       	breq	.+8      	; 0x2534 <__floatsisf+0x54>
    252c:	9e e8       	ldi	r25, 0x8E	; 142
    252e:	87 2f       	mov	r24, r23
    2530:	76 2f       	mov	r23, r22
    2532:	05 c0       	rjmp	.+10     	; 0x253e <__floatsisf+0x5e>
    2534:	66 23       	and	r22, r22
    2536:	71 f0       	breq	.+28     	; 0x2554 <__floatsisf+0x74>
    2538:	96 e8       	ldi	r25, 0x86	; 134
    253a:	86 2f       	mov	r24, r22
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	60 e0       	ldi	r22, 0x00	; 0
    2540:	2a f0       	brmi	.+10     	; 0x254c <__floatsisf+0x6c>
    2542:	9a 95       	dec	r25
    2544:	66 0f       	add	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	88 1f       	adc	r24, r24
    254a:	da f7       	brpl	.-10     	; 0x2542 <__floatsisf+0x62>
    254c:	88 0f       	add	r24, r24
    254e:	96 95       	lsr	r25
    2550:	87 95       	ror	r24
    2552:	97 f9       	bld	r25, 7
    2554:	08 95       	ret

00002556 <__fp_cmp>:
    2556:	99 0f       	add	r25, r25
    2558:	00 08       	sbc	r0, r0
    255a:	55 0f       	add	r21, r21
    255c:	aa 0b       	sbc	r26, r26
    255e:	e0 e8       	ldi	r30, 0x80	; 128
    2560:	fe ef       	ldi	r31, 0xFE	; 254
    2562:	16 16       	cp	r1, r22
    2564:	17 06       	cpc	r1, r23
    2566:	e8 07       	cpc	r30, r24
    2568:	f9 07       	cpc	r31, r25
    256a:	c0 f0       	brcs	.+48     	; 0x259c <__fp_cmp+0x46>
    256c:	12 16       	cp	r1, r18
    256e:	13 06       	cpc	r1, r19
    2570:	e4 07       	cpc	r30, r20
    2572:	f5 07       	cpc	r31, r21
    2574:	98 f0       	brcs	.+38     	; 0x259c <__fp_cmp+0x46>
    2576:	62 1b       	sub	r22, r18
    2578:	73 0b       	sbc	r23, r19
    257a:	84 0b       	sbc	r24, r20
    257c:	95 0b       	sbc	r25, r21
    257e:	39 f4       	brne	.+14     	; 0x258e <__fp_cmp+0x38>
    2580:	0a 26       	eor	r0, r26
    2582:	61 f0       	breq	.+24     	; 0x259c <__fp_cmp+0x46>
    2584:	23 2b       	or	r18, r19
    2586:	24 2b       	or	r18, r20
    2588:	25 2b       	or	r18, r21
    258a:	21 f4       	brne	.+8      	; 0x2594 <__fp_cmp+0x3e>
    258c:	08 95       	ret
    258e:	0a 26       	eor	r0, r26
    2590:	09 f4       	brne	.+2      	; 0x2594 <__fp_cmp+0x3e>
    2592:	a1 40       	sbci	r26, 0x01	; 1
    2594:	a6 95       	lsr	r26
    2596:	8f ef       	ldi	r24, 0xFF	; 255
    2598:	81 1d       	adc	r24, r1
    259a:	81 1d       	adc	r24, r1
    259c:	08 95       	ret

0000259e <__fp_inf>:
    259e:	97 f9       	bld	r25, 7
    25a0:	9f 67       	ori	r25, 0x7F	; 127
    25a2:	80 e8       	ldi	r24, 0x80	; 128
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	08 95       	ret

000025aa <__fp_nan>:
    25aa:	9f ef       	ldi	r25, 0xFF	; 255
    25ac:	80 ec       	ldi	r24, 0xC0	; 192
    25ae:	08 95       	ret

000025b0 <__fp_pscA>:
    25b0:	00 24       	eor	r0, r0
    25b2:	0a 94       	dec	r0
    25b4:	16 16       	cp	r1, r22
    25b6:	17 06       	cpc	r1, r23
    25b8:	18 06       	cpc	r1, r24
    25ba:	09 06       	cpc	r0, r25
    25bc:	08 95       	ret

000025be <__fp_pscB>:
    25be:	00 24       	eor	r0, r0
    25c0:	0a 94       	dec	r0
    25c2:	12 16       	cp	r1, r18
    25c4:	13 06       	cpc	r1, r19
    25c6:	14 06       	cpc	r1, r20
    25c8:	05 06       	cpc	r0, r21
    25ca:	08 95       	ret

000025cc <__fp_round>:
    25cc:	09 2e       	mov	r0, r25
    25ce:	03 94       	inc	r0
    25d0:	00 0c       	add	r0, r0
    25d2:	11 f4       	brne	.+4      	; 0x25d8 <__fp_round+0xc>
    25d4:	88 23       	and	r24, r24
    25d6:	52 f0       	brmi	.+20     	; 0x25ec <__fp_round+0x20>
    25d8:	bb 0f       	add	r27, r27
    25da:	40 f4       	brcc	.+16     	; 0x25ec <__fp_round+0x20>
    25dc:	bf 2b       	or	r27, r31
    25de:	11 f4       	brne	.+4      	; 0x25e4 <__fp_round+0x18>
    25e0:	60 ff       	sbrs	r22, 0
    25e2:	04 c0       	rjmp	.+8      	; 0x25ec <__fp_round+0x20>
    25e4:	6f 5f       	subi	r22, 0xFF	; 255
    25e6:	7f 4f       	sbci	r23, 0xFF	; 255
    25e8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ea:	9f 4f       	sbci	r25, 0xFF	; 255
    25ec:	08 95       	ret

000025ee <__fp_split3>:
    25ee:	57 fd       	sbrc	r21, 7
    25f0:	90 58       	subi	r25, 0x80	; 128
    25f2:	44 0f       	add	r20, r20
    25f4:	55 1f       	adc	r21, r21
    25f6:	59 f0       	breq	.+22     	; 0x260e <__fp_splitA+0x10>
    25f8:	5f 3f       	cpi	r21, 0xFF	; 255
    25fa:	71 f0       	breq	.+28     	; 0x2618 <__fp_splitA+0x1a>
    25fc:	47 95       	ror	r20

000025fe <__fp_splitA>:
    25fe:	88 0f       	add	r24, r24
    2600:	97 fb       	bst	r25, 7
    2602:	99 1f       	adc	r25, r25
    2604:	61 f0       	breq	.+24     	; 0x261e <__fp_splitA+0x20>
    2606:	9f 3f       	cpi	r25, 0xFF	; 255
    2608:	79 f0       	breq	.+30     	; 0x2628 <__fp_splitA+0x2a>
    260a:	87 95       	ror	r24
    260c:	08 95       	ret
    260e:	12 16       	cp	r1, r18
    2610:	13 06       	cpc	r1, r19
    2612:	14 06       	cpc	r1, r20
    2614:	55 1f       	adc	r21, r21
    2616:	f2 cf       	rjmp	.-28     	; 0x25fc <__fp_split3+0xe>
    2618:	46 95       	lsr	r20
    261a:	f1 df       	rcall	.-30     	; 0x25fe <__fp_splitA>
    261c:	08 c0       	rjmp	.+16     	; 0x262e <__fp_splitA+0x30>
    261e:	16 16       	cp	r1, r22
    2620:	17 06       	cpc	r1, r23
    2622:	18 06       	cpc	r1, r24
    2624:	99 1f       	adc	r25, r25
    2626:	f1 cf       	rjmp	.-30     	; 0x260a <__fp_splitA+0xc>
    2628:	86 95       	lsr	r24
    262a:	71 05       	cpc	r23, r1
    262c:	61 05       	cpc	r22, r1
    262e:	08 94       	sec
    2630:	08 95       	ret

00002632 <__fp_zero>:
    2632:	e8 94       	clt

00002634 <__fp_szero>:
    2634:	bb 27       	eor	r27, r27
    2636:	66 27       	eor	r22, r22
    2638:	77 27       	eor	r23, r23
    263a:	cb 01       	movw	r24, r22
    263c:	97 f9       	bld	r25, 7
    263e:	08 95       	ret

00002640 <__gesf2>:
    2640:	8a df       	rcall	.-236    	; 0x2556 <__fp_cmp>
    2642:	08 f4       	brcc	.+2      	; 0x2646 <__gesf2+0x6>
    2644:	8f ef       	ldi	r24, 0xFF	; 255
    2646:	08 95       	ret

00002648 <__mulsf3>:
    2648:	0b d0       	rcall	.+22     	; 0x2660 <__mulsf3x>
    264a:	c0 cf       	rjmp	.-128    	; 0x25cc <__fp_round>
    264c:	b1 df       	rcall	.-158    	; 0x25b0 <__fp_pscA>
    264e:	28 f0       	brcs	.+10     	; 0x265a <__mulsf3+0x12>
    2650:	b6 df       	rcall	.-148    	; 0x25be <__fp_pscB>
    2652:	18 f0       	brcs	.+6      	; 0x265a <__mulsf3+0x12>
    2654:	95 23       	and	r25, r21
    2656:	09 f0       	breq	.+2      	; 0x265a <__mulsf3+0x12>
    2658:	a2 cf       	rjmp	.-188    	; 0x259e <__fp_inf>
    265a:	a7 cf       	rjmp	.-178    	; 0x25aa <__fp_nan>
    265c:	11 24       	eor	r1, r1
    265e:	ea cf       	rjmp	.-44     	; 0x2634 <__fp_szero>

00002660 <__mulsf3x>:
    2660:	c6 df       	rcall	.-116    	; 0x25ee <__fp_split3>
    2662:	a0 f3       	brcs	.-24     	; 0x264c <__mulsf3+0x4>

00002664 <__mulsf3_pse>:
    2664:	95 9f       	mul	r25, r21
    2666:	d1 f3       	breq	.-12     	; 0x265c <__mulsf3+0x14>
    2668:	95 0f       	add	r25, r21
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	55 1f       	adc	r21, r21
    266e:	62 9f       	mul	r22, r18
    2670:	f0 01       	movw	r30, r0
    2672:	72 9f       	mul	r23, r18
    2674:	bb 27       	eor	r27, r27
    2676:	f0 0d       	add	r31, r0
    2678:	b1 1d       	adc	r27, r1
    267a:	63 9f       	mul	r22, r19
    267c:	aa 27       	eor	r26, r26
    267e:	f0 0d       	add	r31, r0
    2680:	b1 1d       	adc	r27, r1
    2682:	aa 1f       	adc	r26, r26
    2684:	64 9f       	mul	r22, r20
    2686:	66 27       	eor	r22, r22
    2688:	b0 0d       	add	r27, r0
    268a:	a1 1d       	adc	r26, r1
    268c:	66 1f       	adc	r22, r22
    268e:	82 9f       	mul	r24, r18
    2690:	22 27       	eor	r18, r18
    2692:	b0 0d       	add	r27, r0
    2694:	a1 1d       	adc	r26, r1
    2696:	62 1f       	adc	r22, r18
    2698:	73 9f       	mul	r23, r19
    269a:	b0 0d       	add	r27, r0
    269c:	a1 1d       	adc	r26, r1
    269e:	62 1f       	adc	r22, r18
    26a0:	83 9f       	mul	r24, r19
    26a2:	a0 0d       	add	r26, r0
    26a4:	61 1d       	adc	r22, r1
    26a6:	22 1f       	adc	r18, r18
    26a8:	74 9f       	mul	r23, r20
    26aa:	33 27       	eor	r19, r19
    26ac:	a0 0d       	add	r26, r0
    26ae:	61 1d       	adc	r22, r1
    26b0:	23 1f       	adc	r18, r19
    26b2:	84 9f       	mul	r24, r20
    26b4:	60 0d       	add	r22, r0
    26b6:	21 1d       	adc	r18, r1
    26b8:	82 2f       	mov	r24, r18
    26ba:	76 2f       	mov	r23, r22
    26bc:	6a 2f       	mov	r22, r26
    26be:	11 24       	eor	r1, r1
    26c0:	9f 57       	subi	r25, 0x7F	; 127
    26c2:	50 40       	sbci	r21, 0x00	; 0
    26c4:	8a f0       	brmi	.+34     	; 0x26e8 <__mulsf3_pse+0x84>
    26c6:	e1 f0       	breq	.+56     	; 0x2700 <__mulsf3_pse+0x9c>
    26c8:	88 23       	and	r24, r24
    26ca:	4a f0       	brmi	.+18     	; 0x26de <__mulsf3_pse+0x7a>
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	bb 1f       	adc	r27, r27
    26d2:	66 1f       	adc	r22, r22
    26d4:	77 1f       	adc	r23, r23
    26d6:	88 1f       	adc	r24, r24
    26d8:	91 50       	subi	r25, 0x01	; 1
    26da:	50 40       	sbci	r21, 0x00	; 0
    26dc:	a9 f7       	brne	.-22     	; 0x26c8 <__mulsf3_pse+0x64>
    26de:	9e 3f       	cpi	r25, 0xFE	; 254
    26e0:	51 05       	cpc	r21, r1
    26e2:	70 f0       	brcs	.+28     	; 0x2700 <__mulsf3_pse+0x9c>
    26e4:	5c cf       	rjmp	.-328    	; 0x259e <__fp_inf>
    26e6:	a6 cf       	rjmp	.-180    	; 0x2634 <__fp_szero>
    26e8:	5f 3f       	cpi	r21, 0xFF	; 255
    26ea:	ec f3       	brlt	.-6      	; 0x26e6 <__mulsf3_pse+0x82>
    26ec:	98 3e       	cpi	r25, 0xE8	; 232
    26ee:	dc f3       	brlt	.-10     	; 0x26e6 <__mulsf3_pse+0x82>
    26f0:	86 95       	lsr	r24
    26f2:	77 95       	ror	r23
    26f4:	67 95       	ror	r22
    26f6:	b7 95       	ror	r27
    26f8:	f7 95       	ror	r31
    26fa:	e7 95       	ror	r30
    26fc:	9f 5f       	subi	r25, 0xFF	; 255
    26fe:	c1 f7       	brne	.-16     	; 0x26f0 <__mulsf3_pse+0x8c>
    2700:	fe 2b       	or	r31, r30
    2702:	88 0f       	add	r24, r24
    2704:	91 1d       	adc	r25, r1
    2706:	96 95       	lsr	r25
    2708:	87 95       	ror	r24
    270a:	97 f9       	bld	r25, 7
    270c:	08 95       	ret

0000270e <__divmodhi4>:
    270e:	97 fb       	bst	r25, 7
    2710:	07 2e       	mov	r0, r23
    2712:	16 f4       	brtc	.+4      	; 0x2718 <__divmodhi4+0xa>
    2714:	00 94       	com	r0
    2716:	07 d0       	rcall	.+14     	; 0x2726 <__divmodhi4_neg1>
    2718:	77 fd       	sbrc	r23, 7
    271a:	09 d0       	rcall	.+18     	; 0x272e <__divmodhi4_neg2>
    271c:	0e 94 ba 13 	call	0x2774	; 0x2774 <__udivmodhi4>
    2720:	07 fc       	sbrc	r0, 7
    2722:	05 d0       	rcall	.+10     	; 0x272e <__divmodhi4_neg2>
    2724:	3e f4       	brtc	.+14     	; 0x2734 <__divmodhi4_exit>

00002726 <__divmodhi4_neg1>:
    2726:	90 95       	com	r25
    2728:	81 95       	neg	r24
    272a:	9f 4f       	sbci	r25, 0xFF	; 255
    272c:	08 95       	ret

0000272e <__divmodhi4_neg2>:
    272e:	70 95       	com	r23
    2730:	61 95       	neg	r22
    2732:	7f 4f       	sbci	r23, 0xFF	; 255

00002734 <__divmodhi4_exit>:
    2734:	08 95       	ret

00002736 <__divmodsi4>:
    2736:	05 2e       	mov	r0, r21
    2738:	97 fb       	bst	r25, 7
    273a:	1e f4       	brtc	.+6      	; 0x2742 <__divmodsi4+0xc>
    273c:	00 94       	com	r0
    273e:	0e 94 b2 13 	call	0x2764	; 0x2764 <__negsi2>
    2742:	57 fd       	sbrc	r21, 7
    2744:	07 d0       	rcall	.+14     	; 0x2754 <__divmodsi4_neg2>
    2746:	0e 94 ce 13 	call	0x279c	; 0x279c <__udivmodsi4>
    274a:	07 fc       	sbrc	r0, 7
    274c:	03 d0       	rcall	.+6      	; 0x2754 <__divmodsi4_neg2>
    274e:	4e f4       	brtc	.+18     	; 0x2762 <__divmodsi4_exit>
    2750:	0c 94 b2 13 	jmp	0x2764	; 0x2764 <__negsi2>

00002754 <__divmodsi4_neg2>:
    2754:	50 95       	com	r21
    2756:	40 95       	com	r20
    2758:	30 95       	com	r19
    275a:	21 95       	neg	r18
    275c:	3f 4f       	sbci	r19, 0xFF	; 255
    275e:	4f 4f       	sbci	r20, 0xFF	; 255
    2760:	5f 4f       	sbci	r21, 0xFF	; 255

00002762 <__divmodsi4_exit>:
    2762:	08 95       	ret

00002764 <__negsi2>:
    2764:	90 95       	com	r25
    2766:	80 95       	com	r24
    2768:	70 95       	com	r23
    276a:	61 95       	neg	r22
    276c:	7f 4f       	sbci	r23, 0xFF	; 255
    276e:	8f 4f       	sbci	r24, 0xFF	; 255
    2770:	9f 4f       	sbci	r25, 0xFF	; 255
    2772:	08 95       	ret

00002774 <__udivmodhi4>:
    2774:	aa 1b       	sub	r26, r26
    2776:	bb 1b       	sub	r27, r27
    2778:	51 e1       	ldi	r21, 0x11	; 17
    277a:	07 c0       	rjmp	.+14     	; 0x278a <__udivmodhi4_ep>

0000277c <__udivmodhi4_loop>:
    277c:	aa 1f       	adc	r26, r26
    277e:	bb 1f       	adc	r27, r27
    2780:	a6 17       	cp	r26, r22
    2782:	b7 07       	cpc	r27, r23
    2784:	10 f0       	brcs	.+4      	; 0x278a <__udivmodhi4_ep>
    2786:	a6 1b       	sub	r26, r22
    2788:	b7 0b       	sbc	r27, r23

0000278a <__udivmodhi4_ep>:
    278a:	88 1f       	adc	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	5a 95       	dec	r21
    2790:	a9 f7       	brne	.-22     	; 0x277c <__udivmodhi4_loop>
    2792:	80 95       	com	r24
    2794:	90 95       	com	r25
    2796:	bc 01       	movw	r22, r24
    2798:	cd 01       	movw	r24, r26
    279a:	08 95       	ret

0000279c <__udivmodsi4>:
    279c:	a1 e2       	ldi	r26, 0x21	; 33
    279e:	1a 2e       	mov	r1, r26
    27a0:	aa 1b       	sub	r26, r26
    27a2:	bb 1b       	sub	r27, r27
    27a4:	fd 01       	movw	r30, r26
    27a6:	0d c0       	rjmp	.+26     	; 0x27c2 <__udivmodsi4_ep>

000027a8 <__udivmodsi4_loop>:
    27a8:	aa 1f       	adc	r26, r26
    27aa:	bb 1f       	adc	r27, r27
    27ac:	ee 1f       	adc	r30, r30
    27ae:	ff 1f       	adc	r31, r31
    27b0:	a2 17       	cp	r26, r18
    27b2:	b3 07       	cpc	r27, r19
    27b4:	e4 07       	cpc	r30, r20
    27b6:	f5 07       	cpc	r31, r21
    27b8:	20 f0       	brcs	.+8      	; 0x27c2 <__udivmodsi4_ep>
    27ba:	a2 1b       	sub	r26, r18
    27bc:	b3 0b       	sbc	r27, r19
    27be:	e4 0b       	sbc	r30, r20
    27c0:	f5 0b       	sbc	r31, r21

000027c2 <__udivmodsi4_ep>:
    27c2:	66 1f       	adc	r22, r22
    27c4:	77 1f       	adc	r23, r23
    27c6:	88 1f       	adc	r24, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	1a 94       	dec	r1
    27cc:	69 f7       	brne	.-38     	; 0x27a8 <__udivmodsi4_loop>
    27ce:	60 95       	com	r22
    27d0:	70 95       	com	r23
    27d2:	80 95       	com	r24
    27d4:	90 95       	com	r25
    27d6:	9b 01       	movw	r18, r22
    27d8:	ac 01       	movw	r20, r24
    27da:	bd 01       	movw	r22, r26
    27dc:	cf 01       	movw	r24, r30
    27de:	08 95       	ret

000027e0 <malloc>:
    27e0:	cf 93       	push	r28
    27e2:	df 93       	push	r29
    27e4:	82 30       	cpi	r24, 0x02	; 2
    27e6:	91 05       	cpc	r25, r1
    27e8:	10 f4       	brcc	.+4      	; 0x27ee <malloc+0xe>
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	e0 91 4e 02 	lds	r30, 0x024E
    27f2:	f0 91 4f 02 	lds	r31, 0x024F
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	a0 e0       	ldi	r26, 0x00	; 0
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	30 97       	sbiw	r30, 0x00	; 0
    2800:	39 f1       	breq	.+78     	; 0x2850 <malloc+0x70>
    2802:	40 81       	ld	r20, Z
    2804:	51 81       	ldd	r21, Z+1	; 0x01
    2806:	48 17       	cp	r20, r24
    2808:	59 07       	cpc	r21, r25
    280a:	b8 f0       	brcs	.+46     	; 0x283a <malloc+0x5a>
    280c:	48 17       	cp	r20, r24
    280e:	59 07       	cpc	r21, r25
    2810:	71 f4       	brne	.+28     	; 0x282e <malloc+0x4e>
    2812:	82 81       	ldd	r24, Z+2	; 0x02
    2814:	93 81       	ldd	r25, Z+3	; 0x03
    2816:	10 97       	sbiw	r26, 0x00	; 0
    2818:	29 f0       	breq	.+10     	; 0x2824 <malloc+0x44>
    281a:	13 96       	adiw	r26, 0x03	; 3
    281c:	9c 93       	st	X, r25
    281e:	8e 93       	st	-X, r24
    2820:	12 97       	sbiw	r26, 0x02	; 2
    2822:	2c c0       	rjmp	.+88     	; 0x287c <malloc+0x9c>
    2824:	90 93 4f 02 	sts	0x024F, r25
    2828:	80 93 4e 02 	sts	0x024E, r24
    282c:	27 c0       	rjmp	.+78     	; 0x287c <malloc+0x9c>
    282e:	21 15       	cp	r18, r1
    2830:	31 05       	cpc	r19, r1
    2832:	31 f0       	breq	.+12     	; 0x2840 <malloc+0x60>
    2834:	42 17       	cp	r20, r18
    2836:	53 07       	cpc	r21, r19
    2838:	18 f0       	brcs	.+6      	; 0x2840 <malloc+0x60>
    283a:	a9 01       	movw	r20, r18
    283c:	db 01       	movw	r26, r22
    283e:	01 c0       	rjmp	.+2      	; 0x2842 <malloc+0x62>
    2840:	ef 01       	movw	r28, r30
    2842:	9a 01       	movw	r18, r20
    2844:	bd 01       	movw	r22, r26
    2846:	df 01       	movw	r26, r30
    2848:	02 80       	ldd	r0, Z+2	; 0x02
    284a:	f3 81       	ldd	r31, Z+3	; 0x03
    284c:	e0 2d       	mov	r30, r0
    284e:	d7 cf       	rjmp	.-82     	; 0x27fe <malloc+0x1e>
    2850:	21 15       	cp	r18, r1
    2852:	31 05       	cpc	r19, r1
    2854:	f9 f0       	breq	.+62     	; 0x2894 <malloc+0xb4>
    2856:	28 1b       	sub	r18, r24
    2858:	39 0b       	sbc	r19, r25
    285a:	24 30       	cpi	r18, 0x04	; 4
    285c:	31 05       	cpc	r19, r1
    285e:	80 f4       	brcc	.+32     	; 0x2880 <malloc+0xa0>
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	61 15       	cp	r22, r1
    2866:	71 05       	cpc	r23, r1
    2868:	21 f0       	breq	.+8      	; 0x2872 <malloc+0x92>
    286a:	fb 01       	movw	r30, r22
    286c:	93 83       	std	Z+3, r25	; 0x03
    286e:	82 83       	std	Z+2, r24	; 0x02
    2870:	04 c0       	rjmp	.+8      	; 0x287a <malloc+0x9a>
    2872:	90 93 4f 02 	sts	0x024F, r25
    2876:	80 93 4e 02 	sts	0x024E, r24
    287a:	fe 01       	movw	r30, r28
    287c:	32 96       	adiw	r30, 0x02	; 2
    287e:	44 c0       	rjmp	.+136    	; 0x2908 <malloc+0x128>
    2880:	fe 01       	movw	r30, r28
    2882:	e2 0f       	add	r30, r18
    2884:	f3 1f       	adc	r31, r19
    2886:	81 93       	st	Z+, r24
    2888:	91 93       	st	Z+, r25
    288a:	22 50       	subi	r18, 0x02	; 2
    288c:	31 09       	sbc	r19, r1
    288e:	39 83       	std	Y+1, r19	; 0x01
    2890:	28 83       	st	Y, r18
    2892:	3a c0       	rjmp	.+116    	; 0x2908 <malloc+0x128>
    2894:	20 91 4c 02 	lds	r18, 0x024C
    2898:	30 91 4d 02 	lds	r19, 0x024D
    289c:	23 2b       	or	r18, r19
    289e:	41 f4       	brne	.+16     	; 0x28b0 <malloc+0xd0>
    28a0:	20 91 02 01 	lds	r18, 0x0102
    28a4:	30 91 03 01 	lds	r19, 0x0103
    28a8:	30 93 4d 02 	sts	0x024D, r19
    28ac:	20 93 4c 02 	sts	0x024C, r18
    28b0:	20 91 00 01 	lds	r18, 0x0100
    28b4:	30 91 01 01 	lds	r19, 0x0101
    28b8:	21 15       	cp	r18, r1
    28ba:	31 05       	cpc	r19, r1
    28bc:	41 f4       	brne	.+16     	; 0x28ce <malloc+0xee>
    28be:	2d b7       	in	r18, 0x3d	; 61
    28c0:	3e b7       	in	r19, 0x3e	; 62
    28c2:	40 91 04 01 	lds	r20, 0x0104
    28c6:	50 91 05 01 	lds	r21, 0x0105
    28ca:	24 1b       	sub	r18, r20
    28cc:	35 0b       	sbc	r19, r21
    28ce:	e0 91 4c 02 	lds	r30, 0x024C
    28d2:	f0 91 4d 02 	lds	r31, 0x024D
    28d6:	e2 17       	cp	r30, r18
    28d8:	f3 07       	cpc	r31, r19
    28da:	a0 f4       	brcc	.+40     	; 0x2904 <malloc+0x124>
    28dc:	2e 1b       	sub	r18, r30
    28de:	3f 0b       	sbc	r19, r31
    28e0:	28 17       	cp	r18, r24
    28e2:	39 07       	cpc	r19, r25
    28e4:	78 f0       	brcs	.+30     	; 0x2904 <malloc+0x124>
    28e6:	ac 01       	movw	r20, r24
    28e8:	4e 5f       	subi	r20, 0xFE	; 254
    28ea:	5f 4f       	sbci	r21, 0xFF	; 255
    28ec:	24 17       	cp	r18, r20
    28ee:	35 07       	cpc	r19, r21
    28f0:	48 f0       	brcs	.+18     	; 0x2904 <malloc+0x124>
    28f2:	4e 0f       	add	r20, r30
    28f4:	5f 1f       	adc	r21, r31
    28f6:	50 93 4d 02 	sts	0x024D, r21
    28fa:	40 93 4c 02 	sts	0x024C, r20
    28fe:	81 93       	st	Z+, r24
    2900:	91 93       	st	Z+, r25
    2902:	02 c0       	rjmp	.+4      	; 0x2908 <malloc+0x128>
    2904:	e0 e0       	ldi	r30, 0x00	; 0
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	cf 01       	movw	r24, r30
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	08 95       	ret

00002910 <free>:
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	09 f4       	brne	.+2      	; 0x291a <free+0xa>
    2918:	87 c0       	rjmp	.+270    	; 0x2a28 <free+0x118>
    291a:	fc 01       	movw	r30, r24
    291c:	32 97       	sbiw	r30, 0x02	; 2
    291e:	13 82       	std	Z+3, r1	; 0x03
    2920:	12 82       	std	Z+2, r1	; 0x02
    2922:	c0 91 4e 02 	lds	r28, 0x024E
    2926:	d0 91 4f 02 	lds	r29, 0x024F
    292a:	20 97       	sbiw	r28, 0x00	; 0
    292c:	81 f4       	brne	.+32     	; 0x294e <free+0x3e>
    292e:	20 81       	ld	r18, Z
    2930:	31 81       	ldd	r19, Z+1	; 0x01
    2932:	28 0f       	add	r18, r24
    2934:	39 1f       	adc	r19, r25
    2936:	80 91 4c 02 	lds	r24, 0x024C
    293a:	90 91 4d 02 	lds	r25, 0x024D
    293e:	82 17       	cp	r24, r18
    2940:	93 07       	cpc	r25, r19
    2942:	79 f5       	brne	.+94     	; 0x29a2 <free+0x92>
    2944:	f0 93 4d 02 	sts	0x024D, r31
    2948:	e0 93 4c 02 	sts	0x024C, r30
    294c:	6d c0       	rjmp	.+218    	; 0x2a28 <free+0x118>
    294e:	de 01       	movw	r26, r28
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	ae 17       	cp	r26, r30
    2956:	bf 07       	cpc	r27, r31
    2958:	50 f4       	brcc	.+20     	; 0x296e <free+0x5e>
    295a:	12 96       	adiw	r26, 0x02	; 2
    295c:	4d 91       	ld	r20, X+
    295e:	5c 91       	ld	r21, X
    2960:	13 97       	sbiw	r26, 0x03	; 3
    2962:	9d 01       	movw	r18, r26
    2964:	41 15       	cp	r20, r1
    2966:	51 05       	cpc	r21, r1
    2968:	09 f1       	breq	.+66     	; 0x29ac <free+0x9c>
    296a:	da 01       	movw	r26, r20
    296c:	f3 cf       	rjmp	.-26     	; 0x2954 <free+0x44>
    296e:	b3 83       	std	Z+3, r27	; 0x03
    2970:	a2 83       	std	Z+2, r26	; 0x02
    2972:	40 81       	ld	r20, Z
    2974:	51 81       	ldd	r21, Z+1	; 0x01
    2976:	84 0f       	add	r24, r20
    2978:	95 1f       	adc	r25, r21
    297a:	8a 17       	cp	r24, r26
    297c:	9b 07       	cpc	r25, r27
    297e:	71 f4       	brne	.+28     	; 0x299c <free+0x8c>
    2980:	8d 91       	ld	r24, X+
    2982:	9c 91       	ld	r25, X
    2984:	11 97       	sbiw	r26, 0x01	; 1
    2986:	84 0f       	add	r24, r20
    2988:	95 1f       	adc	r25, r21
    298a:	02 96       	adiw	r24, 0x02	; 2
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	80 83       	st	Z, r24
    2990:	12 96       	adiw	r26, 0x02	; 2
    2992:	8d 91       	ld	r24, X+
    2994:	9c 91       	ld	r25, X
    2996:	13 97       	sbiw	r26, 0x03	; 3
    2998:	93 83       	std	Z+3, r25	; 0x03
    299a:	82 83       	std	Z+2, r24	; 0x02
    299c:	21 15       	cp	r18, r1
    299e:	31 05       	cpc	r19, r1
    29a0:	29 f4       	brne	.+10     	; 0x29ac <free+0x9c>
    29a2:	f0 93 4f 02 	sts	0x024F, r31
    29a6:	e0 93 4e 02 	sts	0x024E, r30
    29aa:	3e c0       	rjmp	.+124    	; 0x2a28 <free+0x118>
    29ac:	d9 01       	movw	r26, r18
    29ae:	13 96       	adiw	r26, 0x03	; 3
    29b0:	fc 93       	st	X, r31
    29b2:	ee 93       	st	-X, r30
    29b4:	12 97       	sbiw	r26, 0x02	; 2
    29b6:	4d 91       	ld	r20, X+
    29b8:	5d 91       	ld	r21, X+
    29ba:	a4 0f       	add	r26, r20
    29bc:	b5 1f       	adc	r27, r21
    29be:	ea 17       	cp	r30, r26
    29c0:	fb 07       	cpc	r31, r27
    29c2:	79 f4       	brne	.+30     	; 0x29e2 <free+0xd2>
    29c4:	80 81       	ld	r24, Z
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	84 0f       	add	r24, r20
    29ca:	95 1f       	adc	r25, r21
    29cc:	02 96       	adiw	r24, 0x02	; 2
    29ce:	d9 01       	movw	r26, r18
    29d0:	11 96       	adiw	r26, 0x01	; 1
    29d2:	9c 93       	st	X, r25
    29d4:	8e 93       	st	-X, r24
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	93 81       	ldd	r25, Z+3	; 0x03
    29da:	13 96       	adiw	r26, 0x03	; 3
    29dc:	9c 93       	st	X, r25
    29de:	8e 93       	st	-X, r24
    29e0:	12 97       	sbiw	r26, 0x02	; 2
    29e2:	e0 e0       	ldi	r30, 0x00	; 0
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	19 f0       	breq	.+6      	; 0x29f4 <free+0xe4>
    29ee:	fe 01       	movw	r30, r28
    29f0:	ec 01       	movw	r28, r24
    29f2:	f9 cf       	rjmp	.-14     	; 0x29e6 <free+0xd6>
    29f4:	ce 01       	movw	r24, r28
    29f6:	02 96       	adiw	r24, 0x02	; 2
    29f8:	28 81       	ld	r18, Y
    29fa:	39 81       	ldd	r19, Y+1	; 0x01
    29fc:	82 0f       	add	r24, r18
    29fe:	93 1f       	adc	r25, r19
    2a00:	20 91 4c 02 	lds	r18, 0x024C
    2a04:	30 91 4d 02 	lds	r19, 0x024D
    2a08:	28 17       	cp	r18, r24
    2a0a:	39 07       	cpc	r19, r25
    2a0c:	69 f4       	brne	.+26     	; 0x2a28 <free+0x118>
    2a0e:	30 97       	sbiw	r30, 0x00	; 0
    2a10:	29 f4       	brne	.+10     	; 0x2a1c <free+0x10c>
    2a12:	10 92 4f 02 	sts	0x024F, r1
    2a16:	10 92 4e 02 	sts	0x024E, r1
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <free+0x110>
    2a1c:	13 82       	std	Z+3, r1	; 0x03
    2a1e:	12 82       	std	Z+2, r1	; 0x02
    2a20:	d0 93 4d 02 	sts	0x024D, r29
    2a24:	c0 93 4c 02 	sts	0x024C, r28
    2a28:	df 91       	pop	r29
    2a2a:	cf 91       	pop	r28
    2a2c:	08 95       	ret

00002a2e <do_rand>:
    2a2e:	8f 92       	push	r8
    2a30:	9f 92       	push	r9
    2a32:	af 92       	push	r10
    2a34:	bf 92       	push	r11
    2a36:	cf 92       	push	r12
    2a38:	df 92       	push	r13
    2a3a:	ef 92       	push	r14
    2a3c:	ff 92       	push	r15
    2a3e:	cf 93       	push	r28
    2a40:	df 93       	push	r29
    2a42:	ec 01       	movw	r28, r24
    2a44:	68 81       	ld	r22, Y
    2a46:	79 81       	ldd	r23, Y+1	; 0x01
    2a48:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a4c:	61 15       	cp	r22, r1
    2a4e:	71 05       	cpc	r23, r1
    2a50:	81 05       	cpc	r24, r1
    2a52:	91 05       	cpc	r25, r1
    2a54:	21 f4       	brne	.+8      	; 0x2a5e <do_rand+0x30>
    2a56:	64 e2       	ldi	r22, 0x24	; 36
    2a58:	79 ed       	ldi	r23, 0xD9	; 217
    2a5a:	8b e5       	ldi	r24, 0x5B	; 91
    2a5c:	97 e0       	ldi	r25, 0x07	; 7
    2a5e:	2d e1       	ldi	r18, 0x1D	; 29
    2a60:	33 ef       	ldi	r19, 0xF3	; 243
    2a62:	41 e0       	ldi	r20, 0x01	; 1
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	0e 94 9b 13 	call	0x2736	; 0x2736 <__divmodsi4>
    2a6a:	49 01       	movw	r8, r18
    2a6c:	5a 01       	movw	r10, r20
    2a6e:	9b 01       	movw	r18, r22
    2a70:	ac 01       	movw	r20, r24
    2a72:	a7 ea       	ldi	r26, 0xA7	; 167
    2a74:	b1 e4       	ldi	r27, 0x41	; 65
    2a76:	0e 94 91 18 	call	0x3122	; 0x3122 <__muluhisi3>
    2a7a:	6b 01       	movw	r12, r22
    2a7c:	7c 01       	movw	r14, r24
    2a7e:	ac ee       	ldi	r26, 0xEC	; 236
    2a80:	b4 ef       	ldi	r27, 0xF4	; 244
    2a82:	a5 01       	movw	r20, r10
    2a84:	94 01       	movw	r18, r8
    2a86:	0e 94 9f 18 	call	0x313e	; 0x313e <__mulohisi3>
    2a8a:	c6 0e       	add	r12, r22
    2a8c:	d7 1e       	adc	r13, r23
    2a8e:	e8 1e       	adc	r14, r24
    2a90:	f9 1e       	adc	r15, r25
    2a92:	f7 fe       	sbrs	r15, 7
    2a94:	06 c0       	rjmp	.+12     	; 0x2aa2 <do_rand+0x74>
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	c8 1a       	sub	r12, r24
    2a9a:	d1 08       	sbc	r13, r1
    2a9c:	e1 08       	sbc	r14, r1
    2a9e:	80 e8       	ldi	r24, 0x80	; 128
    2aa0:	f8 0a       	sbc	r15, r24
    2aa2:	c8 82       	st	Y, r12
    2aa4:	d9 82       	std	Y+1, r13	; 0x01
    2aa6:	ea 82       	std	Y+2, r14	; 0x02
    2aa8:	fb 82       	std	Y+3, r15	; 0x03
    2aaa:	c6 01       	movw	r24, r12
    2aac:	9f 77       	andi	r25, 0x7F	; 127
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	df 90       	pop	r13
    2ab8:	cf 90       	pop	r12
    2aba:	bf 90       	pop	r11
    2abc:	af 90       	pop	r10
    2abe:	9f 90       	pop	r9
    2ac0:	8f 90       	pop	r8
    2ac2:	08 95       	ret

00002ac4 <rand_r>:
    2ac4:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <do_rand>
    2ac8:	08 95       	ret

00002aca <rand>:
    2aca:	86 e0       	ldi	r24, 0x06	; 6
    2acc:	91 e0       	ldi	r25, 0x01	; 1
    2ace:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <do_rand>
    2ad2:	08 95       	ret

00002ad4 <srand>:
    2ad4:	a0 e0       	ldi	r26, 0x00	; 0
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	80 93 06 01 	sts	0x0106, r24
    2adc:	90 93 07 01 	sts	0x0107, r25
    2ae0:	a0 93 08 01 	sts	0x0108, r26
    2ae4:	b0 93 09 01 	sts	0x0109, r27
    2ae8:	08 95       	ret

00002aea <fdevopen>:
    2aea:	0f 93       	push	r16
    2aec:	1f 93       	push	r17
    2aee:	cf 93       	push	r28
    2af0:	df 93       	push	r29
    2af2:	ec 01       	movw	r28, r24
    2af4:	8b 01       	movw	r16, r22
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	31 f4       	brne	.+12     	; 0x2b06 <fdevopen+0x1c>
    2afa:	61 15       	cp	r22, r1
    2afc:	71 05       	cpc	r23, r1
    2afe:	19 f4       	brne	.+6      	; 0x2b06 <fdevopen+0x1c>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	38 c0       	rjmp	.+112    	; 0x2b76 <fdevopen+0x8c>
    2b06:	6e e0       	ldi	r22, 0x0E	; 14
    2b08:	70 e0       	ldi	r23, 0x00	; 0
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <calloc>
    2b12:	fc 01       	movw	r30, r24
    2b14:	00 97       	sbiw	r24, 0x00	; 0
    2b16:	a1 f3       	breq	.-24     	; 0x2b00 <fdevopen+0x16>
    2b18:	80 e8       	ldi	r24, 0x80	; 128
    2b1a:	83 83       	std	Z+3, r24	; 0x03
    2b1c:	01 15       	cp	r16, r1
    2b1e:	11 05       	cpc	r17, r1
    2b20:	71 f0       	breq	.+28     	; 0x2b3e <fdevopen+0x54>
    2b22:	13 87       	std	Z+11, r17	; 0x0b
    2b24:	02 87       	std	Z+10, r16	; 0x0a
    2b26:	81 e8       	ldi	r24, 0x81	; 129
    2b28:	83 83       	std	Z+3, r24	; 0x03
    2b2a:	80 91 50 02 	lds	r24, 0x0250
    2b2e:	90 91 51 02 	lds	r25, 0x0251
    2b32:	89 2b       	or	r24, r25
    2b34:	21 f4       	brne	.+8      	; 0x2b3e <fdevopen+0x54>
    2b36:	f0 93 51 02 	sts	0x0251, r31
    2b3a:	e0 93 50 02 	sts	0x0250, r30
    2b3e:	20 97       	sbiw	r28, 0x00	; 0
    2b40:	c9 f0       	breq	.+50     	; 0x2b74 <fdevopen+0x8a>
    2b42:	d1 87       	std	Z+9, r29	; 0x09
    2b44:	c0 87       	std	Z+8, r28	; 0x08
    2b46:	83 81       	ldd	r24, Z+3	; 0x03
    2b48:	82 60       	ori	r24, 0x02	; 2
    2b4a:	83 83       	std	Z+3, r24	; 0x03
    2b4c:	80 91 52 02 	lds	r24, 0x0252
    2b50:	90 91 53 02 	lds	r25, 0x0253
    2b54:	89 2b       	or	r24, r25
    2b56:	71 f4       	brne	.+28     	; 0x2b74 <fdevopen+0x8a>
    2b58:	f0 93 53 02 	sts	0x0253, r31
    2b5c:	e0 93 52 02 	sts	0x0252, r30
    2b60:	80 91 54 02 	lds	r24, 0x0254
    2b64:	90 91 55 02 	lds	r25, 0x0255
    2b68:	89 2b       	or	r24, r25
    2b6a:	21 f4       	brne	.+8      	; 0x2b74 <fdevopen+0x8a>
    2b6c:	f0 93 55 02 	sts	0x0255, r31
    2b70:	e0 93 54 02 	sts	0x0254, r30
    2b74:	cf 01       	movw	r24, r30
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	08 95       	ret

00002b80 <printf>:
    2b80:	a0 e0       	ldi	r26, 0x00	; 0
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e6 ec       	ldi	r30, 0xC6	; 198
    2b86:	f5 e1       	ldi	r31, 0x15	; 21
    2b88:	0c 94 b4 18 	jmp	0x3168	; 0x3168 <__prologue_saves__+0x20>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	35 96       	adiw	r30, 0x05	; 5
    2b90:	61 91       	ld	r22, Z+
    2b92:	71 91       	ld	r23, Z+
    2b94:	af 01       	movw	r20, r30
    2b96:	80 91 52 02 	lds	r24, 0x0252
    2b9a:	90 91 53 02 	lds	r25, 0x0253
    2b9e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <vfprintf>
    2ba2:	e2 e0       	ldi	r30, 0x02	; 2
    2ba4:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__epilogue_restores__+0x20>

00002ba8 <sprintf>:
    2ba8:	ae e0       	ldi	r26, 0x0E	; 14
    2baa:	b0 e0       	ldi	r27, 0x00	; 0
    2bac:	ea ed       	ldi	r30, 0xDA	; 218
    2bae:	f5 e1       	ldi	r31, 0x15	; 21
    2bb0:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <__prologue_saves__+0x1c>
    2bb4:	0d 89       	ldd	r16, Y+21	; 0x15
    2bb6:	1e 89       	ldd	r17, Y+22	; 0x16
    2bb8:	86 e0       	ldi	r24, 0x06	; 6
    2bba:	8c 83       	std	Y+4, r24	; 0x04
    2bbc:	1a 83       	std	Y+2, r17	; 0x02
    2bbe:	09 83       	std	Y+1, r16	; 0x01
    2bc0:	8f ef       	ldi	r24, 0xFF	; 255
    2bc2:	9f e7       	ldi	r25, 0x7F	; 127
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
    2bc8:	ae 01       	movw	r20, r28
    2bca:	47 5e       	subi	r20, 0xE7	; 231
    2bcc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bce:	6f 89       	ldd	r22, Y+23	; 0x17
    2bd0:	78 8d       	ldd	r23, Y+24	; 0x18
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	01 96       	adiw	r24, 0x01	; 1
    2bd6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <vfprintf>
    2bda:	ef 81       	ldd	r30, Y+7	; 0x07
    2bdc:	f8 85       	ldd	r31, Y+8	; 0x08
    2bde:	e0 0f       	add	r30, r16
    2be0:	f1 1f       	adc	r31, r17
    2be2:	10 82       	st	Z, r1
    2be4:	2e 96       	adiw	r28, 0x0e	; 14
    2be6:	e4 e0       	ldi	r30, 0x04	; 4
    2be8:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__epilogue_restores__+0x1c>

00002bec <vfprintf>:
    2bec:	ac e0       	ldi	r26, 0x0C	; 12
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	ec ef       	ldi	r30, 0xFC	; 252
    2bf2:	f5 e1       	ldi	r31, 0x15	; 21
    2bf4:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <__prologue_saves__>
    2bf8:	7c 01       	movw	r14, r24
    2bfa:	6b 01       	movw	r12, r22
    2bfc:	8a 01       	movw	r16, r20
    2bfe:	fc 01       	movw	r30, r24
    2c00:	17 82       	std	Z+7, r1	; 0x07
    2c02:	16 82       	std	Z+6, r1	; 0x06
    2c04:	83 81       	ldd	r24, Z+3	; 0x03
    2c06:	81 ff       	sbrs	r24, 1
    2c08:	bd c1       	rjmp	.+890    	; 0x2f84 <vfprintf+0x398>
    2c0a:	ce 01       	movw	r24, r28
    2c0c:	01 96       	adiw	r24, 0x01	; 1
    2c0e:	4c 01       	movw	r8, r24
    2c10:	f7 01       	movw	r30, r14
    2c12:	93 81       	ldd	r25, Z+3	; 0x03
    2c14:	f6 01       	movw	r30, r12
    2c16:	93 fd       	sbrc	r25, 3
    2c18:	85 91       	lpm	r24, Z+
    2c1a:	93 ff       	sbrs	r25, 3
    2c1c:	81 91       	ld	r24, Z+
    2c1e:	6f 01       	movw	r12, r30
    2c20:	88 23       	and	r24, r24
    2c22:	09 f4       	brne	.+2      	; 0x2c26 <vfprintf+0x3a>
    2c24:	ab c1       	rjmp	.+854    	; 0x2f7c <vfprintf+0x390>
    2c26:	85 32       	cpi	r24, 0x25	; 37
    2c28:	39 f4       	brne	.+14     	; 0x2c38 <vfprintf+0x4c>
    2c2a:	93 fd       	sbrc	r25, 3
    2c2c:	85 91       	lpm	r24, Z+
    2c2e:	93 ff       	sbrs	r25, 3
    2c30:	81 91       	ld	r24, Z+
    2c32:	6f 01       	movw	r12, r30
    2c34:	85 32       	cpi	r24, 0x25	; 37
    2c36:	29 f4       	brne	.+10     	; 0x2c42 <vfprintf+0x56>
    2c38:	b7 01       	movw	r22, r14
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2c40:	e7 cf       	rjmp	.-50     	; 0x2c10 <vfprintf+0x24>
    2c42:	51 2c       	mov	r5, r1
    2c44:	31 2c       	mov	r3, r1
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	20 32       	cpi	r18, 0x20	; 32
    2c4a:	a0 f4       	brcc	.+40     	; 0x2c74 <vfprintf+0x88>
    2c4c:	8b 32       	cpi	r24, 0x2B	; 43
    2c4e:	69 f0       	breq	.+26     	; 0x2c6a <vfprintf+0x7e>
    2c50:	30 f4       	brcc	.+12     	; 0x2c5e <vfprintf+0x72>
    2c52:	80 32       	cpi	r24, 0x20	; 32
    2c54:	59 f0       	breq	.+22     	; 0x2c6c <vfprintf+0x80>
    2c56:	83 32       	cpi	r24, 0x23	; 35
    2c58:	69 f4       	brne	.+26     	; 0x2c74 <vfprintf+0x88>
    2c5a:	20 61       	ori	r18, 0x10	; 16
    2c5c:	2c c0       	rjmp	.+88     	; 0x2cb6 <vfprintf+0xca>
    2c5e:	8d 32       	cpi	r24, 0x2D	; 45
    2c60:	39 f0       	breq	.+14     	; 0x2c70 <vfprintf+0x84>
    2c62:	80 33       	cpi	r24, 0x30	; 48
    2c64:	39 f4       	brne	.+14     	; 0x2c74 <vfprintf+0x88>
    2c66:	21 60       	ori	r18, 0x01	; 1
    2c68:	26 c0       	rjmp	.+76     	; 0x2cb6 <vfprintf+0xca>
    2c6a:	22 60       	ori	r18, 0x02	; 2
    2c6c:	24 60       	ori	r18, 0x04	; 4
    2c6e:	23 c0       	rjmp	.+70     	; 0x2cb6 <vfprintf+0xca>
    2c70:	28 60       	ori	r18, 0x08	; 8
    2c72:	21 c0       	rjmp	.+66     	; 0x2cb6 <vfprintf+0xca>
    2c74:	27 fd       	sbrc	r18, 7
    2c76:	27 c0       	rjmp	.+78     	; 0x2cc6 <vfprintf+0xda>
    2c78:	30 ed       	ldi	r19, 0xD0	; 208
    2c7a:	38 0f       	add	r19, r24
    2c7c:	3a 30       	cpi	r19, 0x0A	; 10
    2c7e:	78 f4       	brcc	.+30     	; 0x2c9e <vfprintf+0xb2>
    2c80:	26 ff       	sbrs	r18, 6
    2c82:	06 c0       	rjmp	.+12     	; 0x2c90 <vfprintf+0xa4>
    2c84:	fa e0       	ldi	r31, 0x0A	; 10
    2c86:	5f 9e       	mul	r5, r31
    2c88:	30 0d       	add	r19, r0
    2c8a:	11 24       	eor	r1, r1
    2c8c:	53 2e       	mov	r5, r19
    2c8e:	13 c0       	rjmp	.+38     	; 0x2cb6 <vfprintf+0xca>
    2c90:	8a e0       	ldi	r24, 0x0A	; 10
    2c92:	38 9e       	mul	r3, r24
    2c94:	30 0d       	add	r19, r0
    2c96:	11 24       	eor	r1, r1
    2c98:	33 2e       	mov	r3, r19
    2c9a:	20 62       	ori	r18, 0x20	; 32
    2c9c:	0c c0       	rjmp	.+24     	; 0x2cb6 <vfprintf+0xca>
    2c9e:	8e 32       	cpi	r24, 0x2E	; 46
    2ca0:	21 f4       	brne	.+8      	; 0x2caa <vfprintf+0xbe>
    2ca2:	26 fd       	sbrc	r18, 6
    2ca4:	6b c1       	rjmp	.+726    	; 0x2f7c <vfprintf+0x390>
    2ca6:	20 64       	ori	r18, 0x40	; 64
    2ca8:	06 c0       	rjmp	.+12     	; 0x2cb6 <vfprintf+0xca>
    2caa:	8c 36       	cpi	r24, 0x6C	; 108
    2cac:	11 f4       	brne	.+4      	; 0x2cb2 <vfprintf+0xc6>
    2cae:	20 68       	ori	r18, 0x80	; 128
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <vfprintf+0xca>
    2cb2:	88 36       	cpi	r24, 0x68	; 104
    2cb4:	41 f4       	brne	.+16     	; 0x2cc6 <vfprintf+0xda>
    2cb6:	f6 01       	movw	r30, r12
    2cb8:	93 fd       	sbrc	r25, 3
    2cba:	85 91       	lpm	r24, Z+
    2cbc:	93 ff       	sbrs	r25, 3
    2cbe:	81 91       	ld	r24, Z+
    2cc0:	6f 01       	movw	r12, r30
    2cc2:	81 11       	cpse	r24, r1
    2cc4:	c1 cf       	rjmp	.-126    	; 0x2c48 <vfprintf+0x5c>
    2cc6:	98 2f       	mov	r25, r24
    2cc8:	9f 7d       	andi	r25, 0xDF	; 223
    2cca:	95 54       	subi	r25, 0x45	; 69
    2ccc:	93 30       	cpi	r25, 0x03	; 3
    2cce:	28 f4       	brcc	.+10     	; 0x2cda <vfprintf+0xee>
    2cd0:	0c 5f       	subi	r16, 0xFC	; 252
    2cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd4:	ff e3       	ldi	r31, 0x3F	; 63
    2cd6:	f9 83       	std	Y+1, r31	; 0x01
    2cd8:	0d c0       	rjmp	.+26     	; 0x2cf4 <vfprintf+0x108>
    2cda:	83 36       	cpi	r24, 0x63	; 99
    2cdc:	31 f0       	breq	.+12     	; 0x2cea <vfprintf+0xfe>
    2cde:	83 37       	cpi	r24, 0x73	; 115
    2ce0:	71 f0       	breq	.+28     	; 0x2cfe <vfprintf+0x112>
    2ce2:	83 35       	cpi	r24, 0x53	; 83
    2ce4:	09 f0       	breq	.+2      	; 0x2ce8 <vfprintf+0xfc>
    2ce6:	5b c0       	rjmp	.+182    	; 0x2d9e <vfprintf+0x1b2>
    2ce8:	22 c0       	rjmp	.+68     	; 0x2d2e <vfprintf+0x142>
    2cea:	f8 01       	movw	r30, r16
    2cec:	80 81       	ld	r24, Z
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	0e 5f       	subi	r16, 0xFE	; 254
    2cf2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf4:	44 24       	eor	r4, r4
    2cf6:	43 94       	inc	r4
    2cf8:	51 2c       	mov	r5, r1
    2cfa:	54 01       	movw	r10, r8
    2cfc:	15 c0       	rjmp	.+42     	; 0x2d28 <vfprintf+0x13c>
    2cfe:	38 01       	movw	r6, r16
    2d00:	f2 e0       	ldi	r31, 0x02	; 2
    2d02:	6f 0e       	add	r6, r31
    2d04:	71 1c       	adc	r7, r1
    2d06:	f8 01       	movw	r30, r16
    2d08:	a0 80       	ld	r10, Z
    2d0a:	b1 80       	ldd	r11, Z+1	; 0x01
    2d0c:	26 ff       	sbrs	r18, 6
    2d0e:	03 c0       	rjmp	.+6      	; 0x2d16 <vfprintf+0x12a>
    2d10:	65 2d       	mov	r22, r5
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <vfprintf+0x12e>
    2d16:	6f ef       	ldi	r22, 0xFF	; 255
    2d18:	7f ef       	ldi	r23, 0xFF	; 255
    2d1a:	c5 01       	movw	r24, r10
    2d1c:	2c 87       	std	Y+12, r18	; 0x0c
    2d1e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <strnlen>
    2d22:	2c 01       	movw	r4, r24
    2d24:	83 01       	movw	r16, r6
    2d26:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d28:	2f 77       	andi	r18, 0x7F	; 127
    2d2a:	22 2e       	mov	r2, r18
    2d2c:	17 c0       	rjmp	.+46     	; 0x2d5c <vfprintf+0x170>
    2d2e:	38 01       	movw	r6, r16
    2d30:	f2 e0       	ldi	r31, 0x02	; 2
    2d32:	6f 0e       	add	r6, r31
    2d34:	71 1c       	adc	r7, r1
    2d36:	f8 01       	movw	r30, r16
    2d38:	a0 80       	ld	r10, Z
    2d3a:	b1 80       	ldd	r11, Z+1	; 0x01
    2d3c:	26 ff       	sbrs	r18, 6
    2d3e:	03 c0       	rjmp	.+6      	; 0x2d46 <vfprintf+0x15a>
    2d40:	65 2d       	mov	r22, r5
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <vfprintf+0x15e>
    2d46:	6f ef       	ldi	r22, 0xFF	; 255
    2d48:	7f ef       	ldi	r23, 0xFF	; 255
    2d4a:	c5 01       	movw	r24, r10
    2d4c:	2c 87       	std	Y+12, r18	; 0x0c
    2d4e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <strnlen_P>
    2d52:	2c 01       	movw	r4, r24
    2d54:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d56:	20 68       	ori	r18, 0x80	; 128
    2d58:	22 2e       	mov	r2, r18
    2d5a:	83 01       	movw	r16, r6
    2d5c:	23 fc       	sbrc	r2, 3
    2d5e:	1b c0       	rjmp	.+54     	; 0x2d96 <vfprintf+0x1aa>
    2d60:	83 2d       	mov	r24, r3
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	48 16       	cp	r4, r24
    2d66:	59 06       	cpc	r5, r25
    2d68:	b0 f4       	brcc	.+44     	; 0x2d96 <vfprintf+0x1aa>
    2d6a:	b7 01       	movw	r22, r14
    2d6c:	80 e2       	ldi	r24, 0x20	; 32
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2d74:	3a 94       	dec	r3
    2d76:	f4 cf       	rjmp	.-24     	; 0x2d60 <vfprintf+0x174>
    2d78:	f5 01       	movw	r30, r10
    2d7a:	27 fc       	sbrc	r2, 7
    2d7c:	85 91       	lpm	r24, Z+
    2d7e:	27 fe       	sbrs	r2, 7
    2d80:	81 91       	ld	r24, Z+
    2d82:	5f 01       	movw	r10, r30
    2d84:	b7 01       	movw	r22, r14
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2d8c:	31 10       	cpse	r3, r1
    2d8e:	3a 94       	dec	r3
    2d90:	f1 e0       	ldi	r31, 0x01	; 1
    2d92:	4f 1a       	sub	r4, r31
    2d94:	51 08       	sbc	r5, r1
    2d96:	41 14       	cp	r4, r1
    2d98:	51 04       	cpc	r5, r1
    2d9a:	71 f7       	brne	.-36     	; 0x2d78 <vfprintf+0x18c>
    2d9c:	e5 c0       	rjmp	.+458    	; 0x2f68 <vfprintf+0x37c>
    2d9e:	84 36       	cpi	r24, 0x64	; 100
    2da0:	11 f0       	breq	.+4      	; 0x2da6 <vfprintf+0x1ba>
    2da2:	89 36       	cpi	r24, 0x69	; 105
    2da4:	39 f5       	brne	.+78     	; 0x2df4 <vfprintf+0x208>
    2da6:	f8 01       	movw	r30, r16
    2da8:	27 ff       	sbrs	r18, 7
    2daa:	07 c0       	rjmp	.+14     	; 0x2dba <vfprintf+0x1ce>
    2dac:	60 81       	ld	r22, Z
    2dae:	71 81       	ldd	r23, Z+1	; 0x01
    2db0:	82 81       	ldd	r24, Z+2	; 0x02
    2db2:	93 81       	ldd	r25, Z+3	; 0x03
    2db4:	0c 5f       	subi	r16, 0xFC	; 252
    2db6:	1f 4f       	sbci	r17, 0xFF	; 255
    2db8:	08 c0       	rjmp	.+16     	; 0x2dca <vfprintf+0x1de>
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	88 27       	eor	r24, r24
    2dc0:	77 fd       	sbrc	r23, 7
    2dc2:	80 95       	com	r24
    2dc4:	98 2f       	mov	r25, r24
    2dc6:	0e 5f       	subi	r16, 0xFE	; 254
    2dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dca:	2f 76       	andi	r18, 0x6F	; 111
    2dcc:	b2 2e       	mov	r11, r18
    2dce:	97 ff       	sbrs	r25, 7
    2dd0:	09 c0       	rjmp	.+18     	; 0x2de4 <vfprintf+0x1f8>
    2dd2:	90 95       	com	r25
    2dd4:	80 95       	com	r24
    2dd6:	70 95       	com	r23
    2dd8:	61 95       	neg	r22
    2dda:	7f 4f       	sbci	r23, 0xFF	; 255
    2ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dde:	9f 4f       	sbci	r25, 0xFF	; 255
    2de0:	20 68       	ori	r18, 0x80	; 128
    2de2:	b2 2e       	mov	r11, r18
    2de4:	2a e0       	ldi	r18, 0x0A	; 10
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	a4 01       	movw	r20, r8
    2dea:	0e 94 33 18 	call	0x3066	; 0x3066 <__ultoa_invert>
    2dee:	a8 2e       	mov	r10, r24
    2df0:	a8 18       	sub	r10, r8
    2df2:	44 c0       	rjmp	.+136    	; 0x2e7c <vfprintf+0x290>
    2df4:	85 37       	cpi	r24, 0x75	; 117
    2df6:	29 f4       	brne	.+10     	; 0x2e02 <vfprintf+0x216>
    2df8:	2f 7e       	andi	r18, 0xEF	; 239
    2dfa:	b2 2e       	mov	r11, r18
    2dfc:	2a e0       	ldi	r18, 0x0A	; 10
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	25 c0       	rjmp	.+74     	; 0x2e4c <vfprintf+0x260>
    2e02:	f2 2f       	mov	r31, r18
    2e04:	f9 7f       	andi	r31, 0xF9	; 249
    2e06:	bf 2e       	mov	r11, r31
    2e08:	8f 36       	cpi	r24, 0x6F	; 111
    2e0a:	c1 f0       	breq	.+48     	; 0x2e3c <vfprintf+0x250>
    2e0c:	18 f4       	brcc	.+6      	; 0x2e14 <vfprintf+0x228>
    2e0e:	88 35       	cpi	r24, 0x58	; 88
    2e10:	79 f0       	breq	.+30     	; 0x2e30 <vfprintf+0x244>
    2e12:	b4 c0       	rjmp	.+360    	; 0x2f7c <vfprintf+0x390>
    2e14:	80 37       	cpi	r24, 0x70	; 112
    2e16:	19 f0       	breq	.+6      	; 0x2e1e <vfprintf+0x232>
    2e18:	88 37       	cpi	r24, 0x78	; 120
    2e1a:	21 f0       	breq	.+8      	; 0x2e24 <vfprintf+0x238>
    2e1c:	af c0       	rjmp	.+350    	; 0x2f7c <vfprintf+0x390>
    2e1e:	2f 2f       	mov	r18, r31
    2e20:	20 61       	ori	r18, 0x10	; 16
    2e22:	b2 2e       	mov	r11, r18
    2e24:	b4 fe       	sbrs	r11, 4
    2e26:	0d c0       	rjmp	.+26     	; 0x2e42 <vfprintf+0x256>
    2e28:	8b 2d       	mov	r24, r11
    2e2a:	84 60       	ori	r24, 0x04	; 4
    2e2c:	b8 2e       	mov	r11, r24
    2e2e:	09 c0       	rjmp	.+18     	; 0x2e42 <vfprintf+0x256>
    2e30:	24 ff       	sbrs	r18, 4
    2e32:	0a c0       	rjmp	.+20     	; 0x2e48 <vfprintf+0x25c>
    2e34:	9f 2f       	mov	r25, r31
    2e36:	96 60       	ori	r25, 0x06	; 6
    2e38:	b9 2e       	mov	r11, r25
    2e3a:	06 c0       	rjmp	.+12     	; 0x2e48 <vfprintf+0x25c>
    2e3c:	28 e0       	ldi	r18, 0x08	; 8
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	05 c0       	rjmp	.+10     	; 0x2e4c <vfprintf+0x260>
    2e42:	20 e1       	ldi	r18, 0x10	; 16
    2e44:	30 e0       	ldi	r19, 0x00	; 0
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <vfprintf+0x260>
    2e48:	20 e1       	ldi	r18, 0x10	; 16
    2e4a:	32 e0       	ldi	r19, 0x02	; 2
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	b7 fe       	sbrs	r11, 7
    2e50:	07 c0       	rjmp	.+14     	; 0x2e60 <vfprintf+0x274>
    2e52:	60 81       	ld	r22, Z
    2e54:	71 81       	ldd	r23, Z+1	; 0x01
    2e56:	82 81       	ldd	r24, Z+2	; 0x02
    2e58:	93 81       	ldd	r25, Z+3	; 0x03
    2e5a:	0c 5f       	subi	r16, 0xFC	; 252
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	06 c0       	rjmp	.+12     	; 0x2e6c <vfprintf+0x280>
    2e60:	60 81       	ld	r22, Z
    2e62:	71 81       	ldd	r23, Z+1	; 0x01
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 5f       	subi	r16, 0xFE	; 254
    2e6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e6c:	a4 01       	movw	r20, r8
    2e6e:	0e 94 33 18 	call	0x3066	; 0x3066 <__ultoa_invert>
    2e72:	a8 2e       	mov	r10, r24
    2e74:	a8 18       	sub	r10, r8
    2e76:	fb 2d       	mov	r31, r11
    2e78:	ff 77       	andi	r31, 0x7F	; 127
    2e7a:	bf 2e       	mov	r11, r31
    2e7c:	b6 fe       	sbrs	r11, 6
    2e7e:	0b c0       	rjmp	.+22     	; 0x2e96 <vfprintf+0x2aa>
    2e80:	2b 2d       	mov	r18, r11
    2e82:	2e 7f       	andi	r18, 0xFE	; 254
    2e84:	a5 14       	cp	r10, r5
    2e86:	50 f4       	brcc	.+20     	; 0x2e9c <vfprintf+0x2b0>
    2e88:	b4 fe       	sbrs	r11, 4
    2e8a:	0a c0       	rjmp	.+20     	; 0x2ea0 <vfprintf+0x2b4>
    2e8c:	b2 fc       	sbrc	r11, 2
    2e8e:	08 c0       	rjmp	.+16     	; 0x2ea0 <vfprintf+0x2b4>
    2e90:	2b 2d       	mov	r18, r11
    2e92:	2e 7e       	andi	r18, 0xEE	; 238
    2e94:	05 c0       	rjmp	.+10     	; 0x2ea0 <vfprintf+0x2b4>
    2e96:	7a 2c       	mov	r7, r10
    2e98:	2b 2d       	mov	r18, r11
    2e9a:	03 c0       	rjmp	.+6      	; 0x2ea2 <vfprintf+0x2b6>
    2e9c:	7a 2c       	mov	r7, r10
    2e9e:	01 c0       	rjmp	.+2      	; 0x2ea2 <vfprintf+0x2b6>
    2ea0:	75 2c       	mov	r7, r5
    2ea2:	24 ff       	sbrs	r18, 4
    2ea4:	0d c0       	rjmp	.+26     	; 0x2ec0 <vfprintf+0x2d4>
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	ea 0d       	add	r30, r10
    2eaa:	f1 1d       	adc	r31, r1
    2eac:	80 81       	ld	r24, Z
    2eae:	80 33       	cpi	r24, 0x30	; 48
    2eb0:	11 f4       	brne	.+4      	; 0x2eb6 <vfprintf+0x2ca>
    2eb2:	29 7e       	andi	r18, 0xE9	; 233
    2eb4:	09 c0       	rjmp	.+18     	; 0x2ec8 <vfprintf+0x2dc>
    2eb6:	22 ff       	sbrs	r18, 2
    2eb8:	06 c0       	rjmp	.+12     	; 0x2ec6 <vfprintf+0x2da>
    2eba:	73 94       	inc	r7
    2ebc:	73 94       	inc	r7
    2ebe:	04 c0       	rjmp	.+8      	; 0x2ec8 <vfprintf+0x2dc>
    2ec0:	82 2f       	mov	r24, r18
    2ec2:	86 78       	andi	r24, 0x86	; 134
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <vfprintf+0x2dc>
    2ec6:	73 94       	inc	r7
    2ec8:	23 fd       	sbrc	r18, 3
    2eca:	13 c0       	rjmp	.+38     	; 0x2ef2 <vfprintf+0x306>
    2ecc:	20 ff       	sbrs	r18, 0
    2ece:	06 c0       	rjmp	.+12     	; 0x2edc <vfprintf+0x2f0>
    2ed0:	5a 2c       	mov	r5, r10
    2ed2:	73 14       	cp	r7, r3
    2ed4:	18 f4       	brcc	.+6      	; 0x2edc <vfprintf+0x2f0>
    2ed6:	53 0c       	add	r5, r3
    2ed8:	57 18       	sub	r5, r7
    2eda:	73 2c       	mov	r7, r3
    2edc:	73 14       	cp	r7, r3
    2ede:	68 f4       	brcc	.+26     	; 0x2efa <vfprintf+0x30e>
    2ee0:	b7 01       	movw	r22, r14
    2ee2:	80 e2       	ldi	r24, 0x20	; 32
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	2c 87       	std	Y+12, r18	; 0x0c
    2ee8:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2eec:	73 94       	inc	r7
    2eee:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ef0:	f5 cf       	rjmp	.-22     	; 0x2edc <vfprintf+0x2f0>
    2ef2:	73 14       	cp	r7, r3
    2ef4:	10 f4       	brcc	.+4      	; 0x2efa <vfprintf+0x30e>
    2ef6:	37 18       	sub	r3, r7
    2ef8:	01 c0       	rjmp	.+2      	; 0x2efc <vfprintf+0x310>
    2efa:	31 2c       	mov	r3, r1
    2efc:	24 ff       	sbrs	r18, 4
    2efe:	12 c0       	rjmp	.+36     	; 0x2f24 <vfprintf+0x338>
    2f00:	b7 01       	movw	r22, r14
    2f02:	80 e3       	ldi	r24, 0x30	; 48
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	2c 87       	std	Y+12, r18	; 0x0c
    2f08:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2f0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f0e:	22 ff       	sbrs	r18, 2
    2f10:	17 c0       	rjmp	.+46     	; 0x2f40 <vfprintf+0x354>
    2f12:	21 ff       	sbrs	r18, 1
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <vfprintf+0x330>
    2f16:	88 e5       	ldi	r24, 0x58	; 88
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <vfprintf+0x334>
    2f1c:	88 e7       	ldi	r24, 0x78	; 120
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	b7 01       	movw	r22, r14
    2f22:	0c c0       	rjmp	.+24     	; 0x2f3c <vfprintf+0x350>
    2f24:	82 2f       	mov	r24, r18
    2f26:	86 78       	andi	r24, 0x86	; 134
    2f28:	59 f0       	breq	.+22     	; 0x2f40 <vfprintf+0x354>
    2f2a:	21 fd       	sbrc	r18, 1
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <vfprintf+0x346>
    2f2e:	80 e2       	ldi	r24, 0x20	; 32
    2f30:	01 c0       	rjmp	.+2      	; 0x2f34 <vfprintf+0x348>
    2f32:	8b e2       	ldi	r24, 0x2B	; 43
    2f34:	27 fd       	sbrc	r18, 7
    2f36:	8d e2       	ldi	r24, 0x2D	; 45
    2f38:	b7 01       	movw	r22, r14
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2f40:	a5 14       	cp	r10, r5
    2f42:	38 f4       	brcc	.+14     	; 0x2f52 <vfprintf+0x366>
    2f44:	b7 01       	movw	r22, r14
    2f46:	80 e3       	ldi	r24, 0x30	; 48
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2f4e:	5a 94       	dec	r5
    2f50:	f7 cf       	rjmp	.-18     	; 0x2f40 <vfprintf+0x354>
    2f52:	aa 94       	dec	r10
    2f54:	f4 01       	movw	r30, r8
    2f56:	ea 0d       	add	r30, r10
    2f58:	f1 1d       	adc	r31, r1
    2f5a:	80 81       	ld	r24, Z
    2f5c:	b7 01       	movw	r22, r14
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2f64:	a1 10       	cpse	r10, r1
    2f66:	f5 cf       	rjmp	.-22     	; 0x2f52 <vfprintf+0x366>
    2f68:	33 20       	and	r3, r3
    2f6a:	09 f4       	brne	.+2      	; 0x2f6e <vfprintf+0x382>
    2f6c:	51 ce       	rjmp	.-862    	; 0x2c10 <vfprintf+0x24>
    2f6e:	b7 01       	movw	r22, r14
    2f70:	80 e2       	ldi	r24, 0x20	; 32
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	0e 94 01 18 	call	0x3002	; 0x3002 <fputc>
    2f78:	3a 94       	dec	r3
    2f7a:	f6 cf       	rjmp	.-20     	; 0x2f68 <vfprintf+0x37c>
    2f7c:	f7 01       	movw	r30, r14
    2f7e:	86 81       	ldd	r24, Z+6	; 0x06
    2f80:	97 81       	ldd	r25, Z+7	; 0x07
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <vfprintf+0x39c>
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	2c 96       	adiw	r28, 0x0c	; 12
    2f8a:	e2 e1       	ldi	r30, 0x12	; 18
    2f8c:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__epilogue_restores__>

00002f90 <calloc>:
    2f90:	0f 93       	push	r16
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	86 9f       	mul	r24, r22
    2f9a:	80 01       	movw	r16, r0
    2f9c:	87 9f       	mul	r24, r23
    2f9e:	10 0d       	add	r17, r0
    2fa0:	96 9f       	mul	r25, r22
    2fa2:	10 0d       	add	r17, r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	c8 01       	movw	r24, r16
    2fa8:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <malloc>
    2fac:	ec 01       	movw	r28, r24
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	29 f0       	breq	.+10     	; 0x2fbc <calloc+0x2c>
    2fb2:	a8 01       	movw	r20, r16
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	0e 94 ef 17 	call	0x2fde	; 0x2fde <memset>
    2fbc:	ce 01       	movw	r24, r28
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	08 95       	ret

00002fc8 <strnlen_P>:
    2fc8:	fc 01       	movw	r30, r24
    2fca:	05 90       	lpm	r0, Z+
    2fcc:	61 50       	subi	r22, 0x01	; 1
    2fce:	70 40       	sbci	r23, 0x00	; 0
    2fd0:	01 10       	cpse	r0, r1
    2fd2:	d8 f7       	brcc	.-10     	; 0x2fca <strnlen_P+0x2>
    2fd4:	80 95       	com	r24
    2fd6:	90 95       	com	r25
    2fd8:	8e 0f       	add	r24, r30
    2fda:	9f 1f       	adc	r25, r31
    2fdc:	08 95       	ret

00002fde <memset>:
    2fde:	dc 01       	movw	r26, r24
    2fe0:	01 c0       	rjmp	.+2      	; 0x2fe4 <memset+0x6>
    2fe2:	6d 93       	st	X+, r22
    2fe4:	41 50       	subi	r20, 0x01	; 1
    2fe6:	50 40       	sbci	r21, 0x00	; 0
    2fe8:	e0 f7       	brcc	.-8      	; 0x2fe2 <memset+0x4>
    2fea:	08 95       	ret

00002fec <strnlen>:
    2fec:	fc 01       	movw	r30, r24
    2fee:	61 50       	subi	r22, 0x01	; 1
    2ff0:	70 40       	sbci	r23, 0x00	; 0
    2ff2:	01 90       	ld	r0, Z+
    2ff4:	01 10       	cpse	r0, r1
    2ff6:	d8 f7       	brcc	.-10     	; 0x2fee <strnlen+0x2>
    2ff8:	80 95       	com	r24
    2ffa:	90 95       	com	r25
    2ffc:	8e 0f       	add	r24, r30
    2ffe:	9f 1f       	adc	r25, r31
    3000:	08 95       	ret

00003002 <fputc>:
    3002:	0f 93       	push	r16
    3004:	1f 93       	push	r17
    3006:	cf 93       	push	r28
    3008:	df 93       	push	r29
    300a:	18 2f       	mov	r17, r24
    300c:	09 2f       	mov	r16, r25
    300e:	eb 01       	movw	r28, r22
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	81 fd       	sbrc	r24, 1
    3014:	03 c0       	rjmp	.+6      	; 0x301c <fputc+0x1a>
    3016:	8f ef       	ldi	r24, 0xFF	; 255
    3018:	9f ef       	ldi	r25, 0xFF	; 255
    301a:	20 c0       	rjmp	.+64     	; 0x305c <fputc+0x5a>
    301c:	82 ff       	sbrs	r24, 2
    301e:	10 c0       	rjmp	.+32     	; 0x3040 <fputc+0x3e>
    3020:	4e 81       	ldd	r20, Y+6	; 0x06
    3022:	5f 81       	ldd	r21, Y+7	; 0x07
    3024:	2c 81       	ldd	r18, Y+4	; 0x04
    3026:	3d 81       	ldd	r19, Y+5	; 0x05
    3028:	42 17       	cp	r20, r18
    302a:	53 07       	cpc	r21, r19
    302c:	7c f4       	brge	.+30     	; 0x304c <fputc+0x4a>
    302e:	e8 81       	ld	r30, Y
    3030:	f9 81       	ldd	r31, Y+1	; 0x01
    3032:	9f 01       	movw	r18, r30
    3034:	2f 5f       	subi	r18, 0xFF	; 255
    3036:	3f 4f       	sbci	r19, 0xFF	; 255
    3038:	39 83       	std	Y+1, r19	; 0x01
    303a:	28 83       	st	Y, r18
    303c:	10 83       	st	Z, r17
    303e:	06 c0       	rjmp	.+12     	; 0x304c <fputc+0x4a>
    3040:	e8 85       	ldd	r30, Y+8	; 0x08
    3042:	f9 85       	ldd	r31, Y+9	; 0x09
    3044:	81 2f       	mov	r24, r17
    3046:	09 95       	icall
    3048:	89 2b       	or	r24, r25
    304a:	29 f7       	brne	.-54     	; 0x3016 <fputc+0x14>
    304c:	2e 81       	ldd	r18, Y+6	; 0x06
    304e:	3f 81       	ldd	r19, Y+7	; 0x07
    3050:	2f 5f       	subi	r18, 0xFF	; 255
    3052:	3f 4f       	sbci	r19, 0xFF	; 255
    3054:	3f 83       	std	Y+7, r19	; 0x07
    3056:	2e 83       	std	Y+6, r18	; 0x06
    3058:	81 2f       	mov	r24, r17
    305a:	90 2f       	mov	r25, r16
    305c:	df 91       	pop	r29
    305e:	cf 91       	pop	r28
    3060:	1f 91       	pop	r17
    3062:	0f 91       	pop	r16
    3064:	08 95       	ret

00003066 <__ultoa_invert>:
    3066:	fa 01       	movw	r30, r20
    3068:	aa 27       	eor	r26, r26
    306a:	28 30       	cpi	r18, 0x08	; 8
    306c:	51 f1       	breq	.+84     	; 0x30c2 <__ultoa_invert+0x5c>
    306e:	20 31       	cpi	r18, 0x10	; 16
    3070:	81 f1       	breq	.+96     	; 0x30d2 <__ultoa_invert+0x6c>
    3072:	e8 94       	clt
    3074:	6f 93       	push	r22
    3076:	6e 7f       	andi	r22, 0xFE	; 254
    3078:	6e 5f       	subi	r22, 0xFE	; 254
    307a:	7f 4f       	sbci	r23, 0xFF	; 255
    307c:	8f 4f       	sbci	r24, 0xFF	; 255
    307e:	9f 4f       	sbci	r25, 0xFF	; 255
    3080:	af 4f       	sbci	r26, 0xFF	; 255
    3082:	b1 e0       	ldi	r27, 0x01	; 1
    3084:	3e d0       	rcall	.+124    	; 0x3102 <__ultoa_invert+0x9c>
    3086:	b4 e0       	ldi	r27, 0x04	; 4
    3088:	3c d0       	rcall	.+120    	; 0x3102 <__ultoa_invert+0x9c>
    308a:	67 0f       	add	r22, r23
    308c:	78 1f       	adc	r23, r24
    308e:	89 1f       	adc	r24, r25
    3090:	9a 1f       	adc	r25, r26
    3092:	a1 1d       	adc	r26, r1
    3094:	68 0f       	add	r22, r24
    3096:	79 1f       	adc	r23, r25
    3098:	8a 1f       	adc	r24, r26
    309a:	91 1d       	adc	r25, r1
    309c:	a1 1d       	adc	r26, r1
    309e:	6a 0f       	add	r22, r26
    30a0:	71 1d       	adc	r23, r1
    30a2:	81 1d       	adc	r24, r1
    30a4:	91 1d       	adc	r25, r1
    30a6:	a1 1d       	adc	r26, r1
    30a8:	20 d0       	rcall	.+64     	; 0x30ea <__ultoa_invert+0x84>
    30aa:	09 f4       	brne	.+2      	; 0x30ae <__ultoa_invert+0x48>
    30ac:	68 94       	set
    30ae:	3f 91       	pop	r19
    30b0:	2a e0       	ldi	r18, 0x0A	; 10
    30b2:	26 9f       	mul	r18, r22
    30b4:	11 24       	eor	r1, r1
    30b6:	30 19       	sub	r19, r0
    30b8:	30 5d       	subi	r19, 0xD0	; 208
    30ba:	31 93       	st	Z+, r19
    30bc:	de f6       	brtc	.-74     	; 0x3074 <__ultoa_invert+0xe>
    30be:	cf 01       	movw	r24, r30
    30c0:	08 95       	ret
    30c2:	46 2f       	mov	r20, r22
    30c4:	47 70       	andi	r20, 0x07	; 7
    30c6:	40 5d       	subi	r20, 0xD0	; 208
    30c8:	41 93       	st	Z+, r20
    30ca:	b3 e0       	ldi	r27, 0x03	; 3
    30cc:	0f d0       	rcall	.+30     	; 0x30ec <__ultoa_invert+0x86>
    30ce:	c9 f7       	brne	.-14     	; 0x30c2 <__ultoa_invert+0x5c>
    30d0:	f6 cf       	rjmp	.-20     	; 0x30be <__ultoa_invert+0x58>
    30d2:	46 2f       	mov	r20, r22
    30d4:	4f 70       	andi	r20, 0x0F	; 15
    30d6:	40 5d       	subi	r20, 0xD0	; 208
    30d8:	4a 33       	cpi	r20, 0x3A	; 58
    30da:	18 f0       	brcs	.+6      	; 0x30e2 <__ultoa_invert+0x7c>
    30dc:	49 5d       	subi	r20, 0xD9	; 217
    30de:	31 fd       	sbrc	r19, 1
    30e0:	40 52       	subi	r20, 0x20	; 32
    30e2:	41 93       	st	Z+, r20
    30e4:	02 d0       	rcall	.+4      	; 0x30ea <__ultoa_invert+0x84>
    30e6:	a9 f7       	brne	.-22     	; 0x30d2 <__ultoa_invert+0x6c>
    30e8:	ea cf       	rjmp	.-44     	; 0x30be <__ultoa_invert+0x58>
    30ea:	b4 e0       	ldi	r27, 0x04	; 4
    30ec:	a6 95       	lsr	r26
    30ee:	97 95       	ror	r25
    30f0:	87 95       	ror	r24
    30f2:	77 95       	ror	r23
    30f4:	67 95       	ror	r22
    30f6:	ba 95       	dec	r27
    30f8:	c9 f7       	brne	.-14     	; 0x30ec <__ultoa_invert+0x86>
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	61 05       	cpc	r22, r1
    30fe:	71 05       	cpc	r23, r1
    3100:	08 95       	ret
    3102:	9b 01       	movw	r18, r22
    3104:	ac 01       	movw	r20, r24
    3106:	0a 2e       	mov	r0, r26
    3108:	06 94       	lsr	r0
    310a:	57 95       	ror	r21
    310c:	47 95       	ror	r20
    310e:	37 95       	ror	r19
    3110:	27 95       	ror	r18
    3112:	ba 95       	dec	r27
    3114:	c9 f7       	brne	.-14     	; 0x3108 <__ultoa_invert+0xa2>
    3116:	62 0f       	add	r22, r18
    3118:	73 1f       	adc	r23, r19
    311a:	84 1f       	adc	r24, r20
    311c:	95 1f       	adc	r25, r21
    311e:	a0 1d       	adc	r26, r0
    3120:	08 95       	ret

00003122 <__muluhisi3>:
    3122:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__umulhisi3>
    3126:	a5 9f       	mul	r26, r21
    3128:	90 0d       	add	r25, r0
    312a:	b4 9f       	mul	r27, r20
    312c:	90 0d       	add	r25, r0
    312e:	a4 9f       	mul	r26, r20
    3130:	80 0d       	add	r24, r0
    3132:	91 1d       	adc	r25, r1
    3134:	11 24       	eor	r1, r1
    3136:	08 95       	ret

00003138 <__mulshisi3>:
    3138:	b7 ff       	sbrs	r27, 7
    313a:	0c 94 91 18 	jmp	0x3122	; 0x3122 <__muluhisi3>

0000313e <__mulohisi3>:
    313e:	0e 94 91 18 	call	0x3122	; 0x3122 <__muluhisi3>
    3142:	82 1b       	sub	r24, r18
    3144:	93 0b       	sbc	r25, r19
    3146:	08 95       	ret

00003148 <__prologue_saves__>:
    3148:	2f 92       	push	r2
    314a:	3f 92       	push	r3
    314c:	4f 92       	push	r4
    314e:	5f 92       	push	r5
    3150:	6f 92       	push	r6
    3152:	7f 92       	push	r7
    3154:	8f 92       	push	r8
    3156:	9f 92       	push	r9
    3158:	af 92       	push	r10
    315a:	bf 92       	push	r11
    315c:	cf 92       	push	r12
    315e:	df 92       	push	r13
    3160:	ef 92       	push	r14
    3162:	ff 92       	push	r15
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	cf 93       	push	r28
    316a:	df 93       	push	r29
    316c:	cd b7       	in	r28, 0x3d	; 61
    316e:	de b7       	in	r29, 0x3e	; 62
    3170:	ca 1b       	sub	r28, r26
    3172:	db 0b       	sbc	r29, r27
    3174:	0f b6       	in	r0, 0x3f	; 63
    3176:	f8 94       	cli
    3178:	de bf       	out	0x3e, r29	; 62
    317a:	0f be       	out	0x3f, r0	; 63
    317c:	cd bf       	out	0x3d, r28	; 61
    317e:	09 94       	ijmp

00003180 <__epilogue_restores__>:
    3180:	2a 88       	ldd	r2, Y+18	; 0x12
    3182:	39 88       	ldd	r3, Y+17	; 0x11
    3184:	48 88       	ldd	r4, Y+16	; 0x10
    3186:	5f 84       	ldd	r5, Y+15	; 0x0f
    3188:	6e 84       	ldd	r6, Y+14	; 0x0e
    318a:	7d 84       	ldd	r7, Y+13	; 0x0d
    318c:	8c 84       	ldd	r8, Y+12	; 0x0c
    318e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3190:	aa 84       	ldd	r10, Y+10	; 0x0a
    3192:	b9 84       	ldd	r11, Y+9	; 0x09
    3194:	c8 84       	ldd	r12, Y+8	; 0x08
    3196:	df 80       	ldd	r13, Y+7	; 0x07
    3198:	ee 80       	ldd	r14, Y+6	; 0x06
    319a:	fd 80       	ldd	r15, Y+5	; 0x05
    319c:	0c 81       	ldd	r16, Y+4	; 0x04
    319e:	1b 81       	ldd	r17, Y+3	; 0x03
    31a0:	aa 81       	ldd	r26, Y+2	; 0x02
    31a2:	b9 81       	ldd	r27, Y+1	; 0x01
    31a4:	ce 0f       	add	r28, r30
    31a6:	d1 1d       	adc	r29, r1
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	ed 01       	movw	r28, r26
    31b4:	08 95       	ret

000031b6 <__umulhisi3>:
    31b6:	a2 9f       	mul	r26, r18
    31b8:	b0 01       	movw	r22, r0
    31ba:	b3 9f       	mul	r27, r19
    31bc:	c0 01       	movw	r24, r0
    31be:	a3 9f       	mul	r26, r19
    31c0:	70 0d       	add	r23, r0
    31c2:	81 1d       	adc	r24, r1
    31c4:	11 24       	eor	r1, r1
    31c6:	91 1d       	adc	r25, r1
    31c8:	b2 9f       	mul	r27, r18
    31ca:	70 0d       	add	r23, r0
    31cc:	81 1d       	adc	r24, r1
    31ce:	11 24       	eor	r1, r1
    31d0:	91 1d       	adc	r25, r1
    31d2:	08 95       	ret

000031d4 <_exit>:
    31d4:	f8 94       	cli

000031d6 <__stop_program>:
    31d6:	ff cf       	rjmp	.-2      	; 0x31d6 <__stop_program>
