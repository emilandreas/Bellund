
ByggernBellLund_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00800100  000029b6  00002a4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001e8  008001e8  00002b32  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b32  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000398  00000000  00000000  00002b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000040e1  00000000  00000000  00002f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001813  00000000  00000000  00007007  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001825  00000000  00000000  0000881a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b28  00000000  00000000  0000a040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009d7  00000000  00000000  0000ab68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002eee  00000000  00000000  0000b53f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e8  00000000  00000000  0000e42d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_2>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 9a 05 	jmp	0xb34	; 0xb34 <__vector_14>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <__vector_14+0xe>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 eb       	ldi	r30, 0xB6	; 182
     37c:	f9 e2       	ldi	r31, 0x29	; 41
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3e       	cpi	r26, 0xE8	; 232
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	a8 ee       	ldi	r26, 0xE8	; 232
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 3f       	cpi	r26, 0xF2	; 242
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 58 02 	call	0x4b0	; 0x4b0 <main>
     39e:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <init_handler>:

volatile int handelingMessage = 0;

void init_handler(){
	// Set pin as input (PD3 = INT1)
	DDRD &= ~(1 << PD3);
     3a6:	8b 98       	cbi	0x11, 3	; 17
	// Set internal pull-up
	PORTD |= (1 << PD3);
     3a8:	93 9a       	sbi	0x12, 3	; 18
	
	//initialize external interrupt on falling edge
	MCUCR |= (1<<ISC11);
     3aa:	85 b7       	in	r24, 0x35	; 53
     3ac:	88 60       	ori	r24, 0x08	; 8
     3ae:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     3b0:	85 b7       	in	r24, 0x35	; 53
     3b2:	8b 7f       	andi	r24, 0xFB	; 251
     3b4:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
     3b6:	80 e8       	ldi	r24, 0x80	; 128
     3b8:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     3ba:	78 94       	sei
     3bc:	08 95       	ret

000003be <handle_message>:
ISR(INT1_vect){
	handle_message();
}


void handle_message(){
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2a 97       	sbiw	r28, 0x0a	; 10
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
	Message m;
	CAN_receive(&m);
     3d2:	ce 01       	movw	r24, r28
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	0e 94 cf 02 	call	0x59e	; 0x59e <CAN_receive>
	
	Joystick J;
	Slider S;
	
	//Decide what to do
	switch(m.id){
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	f9 f4       	brne	.+62     	; 0x41e <handle_message+0x60>
		case JOY:
			break;
		case JOYREQ:
			//Joystick
			J = getJoystickPosition();
     3e0:	0e 94 87 03 	call	0x70e	; 0x70e <getJoystickPosition>
			m.id = JOY;
     3e4:	19 82       	std	Y+1, r1	; 0x01
			m.length = 8;
     3e6:	28 e0       	ldi	r18, 0x08	; 8
     3e8:	2a 83       	std	Y+2, r18	; 0x02
			m.data[0] = J.X;
     3ea:	6b 83       	std	Y+3, r22	; 0x03
			m.data[1] = J.Y;
     3ec:	7c 83       	std	Y+4, r23	; 0x04
			m.data[2] = J.D;
     3ee:	8d 83       	std	Y+5, r24	; 0x05
			m.data[3] = J.Button;
     3f0:	9e 83       	std	Y+6, r25	; 0x06
			
			//Slider
			S = getSliderPosition();
     3f2:	0e 94 0a 03 	call	0x614	; 0x614 <getSliderPosition>
			m.data[4] = S.left;
     3f6:	6f 83       	std	Y+7, r22	; 0x07
			m.data[5] = S.right;
     3f8:	78 87       	std	Y+8, r23	; 0x08
			m.data[6] = S.leftButton;
     3fa:	89 87       	std	Y+9, r24	; 0x09
			m.data[7] = S.rightButton;
     3fc:	9a 87       	std	Y+10, r25	; 0x0a
			printf("slider: %i", S.left);
     3fe:	1f 92       	push	r1
     400:	6f 93       	push	r22
     402:	82 e1       	ldi	r24, 0x12	; 18
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	9f 93       	push	r25
     408:	8f 93       	push	r24
     40a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <printf>
			
			//Send can message
			CAN_transmit(&m);
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	0e 94 9c 02 	call	0x538	; 0x538 <CAN_transmit>
			break;
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
		default:
			break;
	}
}
     41e:	2a 96       	adiw	r28, 0x0a	; 10
     420:	0f b6       	in	r0, 0x3f	; 63
     422:	f8 94       	cli
     424:	de bf       	out	0x3e, r29	; 62
     426:	0f be       	out	0x3f, r0	; 63
     428:	cd bf       	out	0x3d, r28	; 61
     42a:	df 91       	pop	r29
     42c:	cf 91       	pop	r28
     42e:	08 95       	ret

00000430 <__vector_2>:
	
	//Enable global interrupts
	sei();
}

ISR(INT1_vect){
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	4f 93       	push	r20
     440:	5f 93       	push	r21
     442:	6f 93       	push	r22
     444:	7f 93       	push	r23
     446:	8f 93       	push	r24
     448:	9f 93       	push	r25
     44a:	af 93       	push	r26
     44c:	bf 93       	push	r27
     44e:	ef 93       	push	r30
     450:	ff 93       	push	r31
	handle_message();
     452:	0e 94 df 01 	call	0x3be	; 0x3be <handle_message>
}
     456:	ff 91       	pop	r31
     458:	ef 91       	pop	r30
     45a:	bf 91       	pop	r27
     45c:	af 91       	pop	r26
     45e:	9f 91       	pop	r25
     460:	8f 91       	pop	r24
     462:	7f 91       	pop	r23
     464:	6f 91       	pop	r22
     466:	5f 91       	pop	r21
     468:	4f 91       	pop	r20
     46a:	3f 91       	pop	r19
     46c:	2f 91       	pop	r18
     46e:	0f 90       	pop	r0
     470:	0f be       	out	0x3f, r0	; 63
     472:	0f 90       	pop	r0
     474:	1f 90       	pop	r1
     476:	18 95       	reti

00000478 <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
     478:	80 eb       	ldi	r24, 0xB0	; 176
     47a:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     47c:	81 e5       	ldi	r24, 0x51	; 81
     47e:	8d b9       	out	0x0d, r24	; 13
     480:	08 95       	ret

00000482 <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
     482:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
     484:	77 9b       	sbis	0x0e, 7	; 14
     486:	fe cf       	rjmp	.-4      	; 0x484 <SPI_transmit+0x2>
	//Return answer
	return SPDR;
     488:	8f b1       	in	r24, 0x0f	; 15
}
     48a:	08 95       	ret

0000048c <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
     48c:	0e 94 41 02 	call	0x482	; 0x482 <SPI_transmit>
     490:	08 95       	ret

00000492 <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
     492:	8c ec       	ldi	r24, 0xCC	; 204
     494:	0e 94 41 02 	call	0x482	; 0x482 <SPI_transmit>
}
     498:	08 95       	ret

0000049a <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
     49a:	c4 9a       	sbi	0x18, 4	; 24
     49c:	08 95       	ret

0000049e <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
     49e:	c4 98       	cbi	0x18, 4	; 24
     4a0:	08 95       	ret

000004a2 <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     4a2:	80 b7       	in	r24, 0x30	; 48
     4a4:	80 62       	ori	r24, 0x20	; 32
     4a6:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     4a8:	85 b7       	in	r24, 0x35	; 53
     4aa:	80 68       	ori	r24, 0x80	; 128
     4ac:	85 bf       	out	0x35, r24	; 53
     4ae:	08 95       	ret

000004b0 <main>:
#include "Driver_files/message_handler.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
     4b0:	80 e8       	ldi	r24, 0x80	; 128
     4b2:	95 e2       	ldi	r25, 0x25	; 37
     4b4:	0e 94 c1 06 	call	0xd82	; 0xd82 <uartInit>
	bus_init();
     4b8:	0e 94 51 02 	call	0x4a2	; 0x4a2 <bus_init>
	oled_init();
     4bc:	0e 94 34 05 	call	0xa68	; 0xa68 <oled_init>
	init_handler();
     4c0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <init_handler>
	//oled_sram_init();
	CAN_init();
     4c4:	0e 94 83 02 	call	0x506	; 0x506 <CAN_init>
	printf("Reset?");
     4c8:	8d e1       	ldi	r24, 0x1D	; 29
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	9f 93       	push	r25
     4ce:	8f 93       	push	r24
     4d0:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <printf>
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
    while(1)
    {
		menuSystem();
     4d8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <menuSystem>
     4dc:	fd cf       	rjmp	.-6      	; 0x4d8 <main+0x28>

000004de <get_adc>:
uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc
	uint16_t adc_size = 0x400;
	
	
	adc[0] = 4 + (channel%4);
     4de:	83 70       	andi	r24, 0x03	; 3
     4e0:	90 78       	andi	r25, 0x80	; 128
     4e2:	99 23       	and	r25, r25
     4e4:	24 f4       	brge	.+8      	; 0x4ee <get_adc+0x10>
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	8c 6f       	ori	r24, 0xFC	; 252
     4ea:	9f 6f       	ori	r25, 0xFF	; 255
     4ec:	01 96       	adiw	r24, 0x01	; 1
     4ee:	8c 5f       	subi	r24, 0xFC	; 252
     4f0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f4:	85 ef       	ldi	r24, 0xF5	; 245
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <get_adc+0x1a>
     4fc:	00 c0       	rjmp	.+0      	; 0x4fe <get_adc+0x20>
     4fe:	00 00       	nop
	_delay_us(200);
	return adc[0];
     500:	80 91 00 14 	lds	r24, 0x1400
     504:	08 95       	ret

00000506 <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
     506:	0e 94 c9 04 	call	0x992	; 0x992 <MCP_init>
	//Enter config mode
	MCP_reset();
     50a:	0e 94 af 04 	call	0x95e	; 0x95e <MCP_reset>
	//set normal mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	60 ee       	ldi	r22, 0xE0	; 224
     512:	8f e0       	ldi	r24, 0x0F	; 15
     514:	0e 94 1a 05 	call	0xa34	; 0xa34 <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
     518:	4f ef       	ldi	r20, 0xFF	; 255
     51a:	63 e0       	ldi	r22, 0x03	; 3
     51c:	8b e2       	ldi	r24, 0x2B	; 43
     51e:	0e 94 1a 05 	call	0xa34	; 0xa34 <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
     522:	8e e0       	ldi	r24, 0x0E	; 14
     524:	0e 94 b7 04 	call	0x96e	; 0x96e <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
     528:	28 2f       	mov	r18, r24
     52a:	20 7e       	andi	r18, 0xE0	; 224
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	11 f4       	brne	.+4      	; 0x536 <CAN_init+0x30>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
     536:	08 95       	ret

00000538 <CAN_transmit>:

void CAN_transmit(Message *m){
     538:	1f 93       	push	r17
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_bit_modify(MCP_TXB0SIDL, 0xE0, m->id<<5);
     540:	48 81       	ld	r20, Y
     542:	42 95       	swap	r20
     544:	44 0f       	add	r20, r20
     546:	40 7e       	andi	r20, 0xE0	; 224
     548:	60 ee       	ldi	r22, 0xE0	; 224
     54a:	82 e3       	ldi	r24, 0x32	; 50
     54c:	0e 94 1a 05 	call	0xa34	; 0xa34 <MCP_bit_modify>
	MCP_bit_modify(MCP_TXB0SIDH, 0xFF, m->id>>3);
     550:	48 81       	ld	r20, Y
     552:	46 95       	lsr	r20
     554:	46 95       	lsr	r20
     556:	46 95       	lsr	r20
     558:	6f ef       	ldi	r22, 0xFF	; 255
     55a:	81 e3       	ldi	r24, 0x31	; 49
     55c:	0e 94 1a 05 	call	0xa34	; 0xa34 <MCP_bit_modify>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     560:	69 81       	ldd	r22, Y+1	; 0x01
     562:	85 e3       	ldi	r24, 0x35	; 53
     564:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MCP_write>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
     568:	69 81       	ldd	r22, Y+1	; 0x01
     56a:	85 e3       	ldi	r24, 0x35	; 53
     56c:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     570:	89 81       	ldd	r24, Y+1	; 0x01
     572:	88 23       	and	r24, r24
     574:	69 f0       	breq	.+26     	; 0x590 <CAN_transmit+0x58>
     576:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
     578:	fe 01       	movw	r30, r28
     57a:	e1 0f       	add	r30, r17
     57c:	f1 1d       	adc	r31, r1
     57e:	62 81       	ldd	r22, Z+2	; 0x02
     580:	86 e3       	ldi	r24, 0x36	; 54
     582:	81 0f       	add	r24, r17
     584:	0e 94 e5 04 	call	0x9ca	; 0x9ca <MCP_write>
	MCP_write(MCP_TXB0DLC, m->length);
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
     588:	1f 5f       	subi	r17, 0xFF	; 255
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	18 17       	cp	r17, r24
     58e:	a0 f3       	brcs	.-24     	; 0x578 <CAN_transmit+0x40>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	08 95       	ret

0000059e <CAN_receive>:

int CAN_receive(Message *m){
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
     5a6:	8c e2       	ldi	r24, 0x2C	; 44
     5a8:	0e 94 b7 04 	call	0x96e	; 0x96e <MCP_read>
     5ac:	80 ff       	sbrs	r24, 0
     5ae:	2c c0       	rjmp	.+88     	; 0x608 <CAN_receive+0x6a>
		m->length = MCP_read(MCP_RBB0DLC);
     5b0:	85 e6       	ldi	r24, 0x65	; 101
     5b2:	0e 94 b7 04 	call	0x96e	; 0x96e <MCP_read>
     5b6:	89 83       	std	Y+1, r24	; 0x01
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
     5b8:	82 e6       	ldi	r24, 0x62	; 98
     5ba:	0e 94 b7 04 	call	0x96e	; 0x96e <MCP_read>
     5be:	18 2f       	mov	r17, r24
     5c0:	12 95       	swap	r17
     5c2:	16 95       	lsr	r17
     5c4:	17 70       	andi	r17, 0x07	; 7
     5c6:	18 83       	st	Y, r17
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
     5c8:	81 e6       	ldi	r24, 0x61	; 97
     5ca:	0e 94 b7 04 	call	0x96e	; 0x96e <MCP_read>
     5ce:	88 0f       	add	r24, r24
     5d0:	88 0f       	add	r24, r24
     5d2:	88 0f       	add	r24, r24
     5d4:	18 0f       	add	r17, r24
     5d6:	18 83       	st	Y, r17
		for(uint8_t i = 0; i < m->length; i++){
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	88 23       	and	r24, r24
     5dc:	69 f0       	breq	.+26     	; 0x5f8 <CAN_receive+0x5a>
     5de:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
     5e0:	86 e6       	ldi	r24, 0x66	; 102
     5e2:	81 0f       	add	r24, r17
     5e4:	0e 94 b7 04 	call	0x96e	; 0x96e <MCP_read>
     5e8:	fe 01       	movw	r30, r28
     5ea:	e1 0f       	add	r30, r17
     5ec:	f1 1d       	adc	r31, r1
     5ee:	82 83       	std	Z+2, r24	; 0x02
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
		for(uint8_t i = 0; i < m->length; i++){
     5f0:	1f 5f       	subi	r17, 0xFF	; 255
     5f2:	89 81       	ldd	r24, Y+1	; 0x01
     5f4:	18 17       	cp	r17, r24
     5f6:	a0 f3       	brcs	.-24     	; 0x5e0 <CAN_receive+0x42>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
     5f8:	40 e0       	ldi	r20, 0x00	; 0
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	8c e2       	ldi	r24, 0x2C	; 44
     5fe:	0e 94 1a 05 	call	0xa34	; 0xa34 <MCP_bit_modify>
		return 0;
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	02 c0       	rjmp	.+4      	; 0x60c <CAN_receive+0x6e>
	}
	return 1;
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	08 95       	ret

00000614 <getSliderPosition>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Slider getSliderPosition(){
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 6f 02 	call	0x4de	; 0x4de <get_adc>
     620:	ec 01       	movw	r28, r24
	slide.right = ((get_adc(0))*100)/255;
     622:	80 e0       	ldi	r24, 0x00	; 0
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 6f 02 	call	0x4de	; 0x4de <get_adc>
     62a:	fc 01       	movw	r30, r24
float xMean = 127;
float yMean = 127;

Slider getSliderPosition(){
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
     62c:	44 e6       	ldi	r20, 0x64	; 100
     62e:	4c 9f       	mul	r20, r28
     630:	c0 01       	movw	r24, r0
     632:	4d 9f       	mul	r20, r29
     634:	90 0d       	add	r25, r0
     636:	11 24       	eor	r1, r1
     638:	2f ef       	ldi	r18, 0xFF	; 255
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	b9 01       	movw	r22, r18
     63e:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     642:	c6 2f       	mov	r28, r22
	slide.right = ((get_adc(0))*100)/255;
     644:	4e 9f       	mul	r20, r30
     646:	c0 01       	movw	r24, r0
     648:	4f 9f       	mul	r20, r31
     64a:	90 0d       	add	r25, r0
     64c:	11 24       	eor	r1, r1
     64e:	b9 01       	movw	r22, r18
     650:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     654:	76 2f       	mov	r23, r22
	return slide;
}
     656:	6c 2f       	mov	r22, r28
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <getJoystickDirection>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = getJoystickDirection(joy.X, joy.Y);
	return joy;
}

direction getJoystickDirection(int x, int y){
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	0f 93       	push	r16
     66c:	1f 93       	push	r17
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	8c 01       	movw	r16, r24
     674:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
     676:	bc 01       	movw	r22, r24
     678:	88 27       	eor	r24, r24
     67a:	77 fd       	sbrc	r23, 7
     67c:	80 95       	com	r24
     67e:	98 2f       	mov	r25, r24
     680:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     684:	6b 01       	movw	r12, r22
     686:	7c 01       	movw	r14, r24
     688:	e8 94       	clt
     68a:	f7 f8       	bld	r15, 7
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	48 e4       	ldi	r20, 0x48	; 72
     692:	52 e4       	ldi	r21, 0x42	; 66
     694:	c7 01       	movw	r24, r14
     696:	b6 01       	movw	r22, r12
     698:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__cmpsf2>
     69c:	88 23       	and	r24, r24
     69e:	84 f4       	brge	.+32     	; 0x6c0 <getJoystickDirection+0x5e>
     6a0:	be 01       	movw	r22, r28
     6a2:	88 27       	eor	r24, r24
     6a4:	77 fd       	sbrc	r23, 7
     6a6:	80 95       	com	r24
     6a8:	98 2f       	mov	r25, r24
     6aa:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     6ae:	9f 77       	andi	r25, 0x7F	; 127
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	48 e4       	ldi	r20, 0x48	; 72
     6b6:	52 e4       	ldi	r21, 0x42	; 66
     6b8:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__cmpsf2>
     6bc:	88 23       	and	r24, r24
     6be:	dc f0       	brlt	.+54     	; 0x6f6 <getJoystickDirection+0x94>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
     6c0:	be 01       	movw	r22, r28
     6c2:	88 27       	eor	r24, r24
     6c4:	77 fd       	sbrc	r23, 7
     6c6:	80 95       	com	r24
     6c8:	98 2f       	mov	r25, r24
     6ca:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	5f 77       	andi	r21, 0x7F	; 127
     6d4:	c7 01       	movw	r24, r14
     6d6:	b6 01       	movw	r22, r12
     6d8:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__cmpsf2>
     6dc:	88 23       	and	r24, r24
     6de:	2c f4       	brge	.+10     	; 0x6ea <getJoystickDirection+0x88>
		if(y > 0){
     6e0:	1c 16       	cp	r1, r28
     6e2:	1d 06       	cpc	r1, r29
     6e4:	54 f4       	brge	.+20     	; 0x6fa <getJoystickDirection+0x98>
			return UP;
     6e6:	82 e0       	ldi	r24, 0x02	; 2
     6e8:	09 c0       	rjmp	.+18     	; 0x6fc <getJoystickDirection+0x9a>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	10 16       	cp	r1, r16
     6ee:	11 06       	cpc	r1, r17
     6f0:	2c f0       	brlt	.+10     	; 0x6fc <getJoystickDirection+0x9a>
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	03 c0       	rjmp	.+6      	; 0x6fc <getJoystickDirection+0x9a>
}

direction getJoystickDirection(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	01 c0       	rjmp	.+2      	; 0x6fc <getJoystickDirection+0x9a>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
     6fa:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	0f 91       	pop	r16
     704:	ff 90       	pop	r15
     706:	ef 90       	pop	r14
     708:	df 90       	pop	r13
     70a:	cf 90       	pop	r12
     70c:	08 95       	ret

0000070e <getJoystickPosition>:
	slide.left = ((get_adc(1))*100)/255;
	slide.right = ((get_adc(0))*100)/255;
	return slide;
}

Joystick getJoystickPosition(){
     70e:	cf 92       	push	r12
     710:	df 92       	push	r13
     712:	ef 92       	push	r14
     714:	ff 92       	push	r15
     716:	cf 93       	push	r28
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 6f 02 	call	0x4de	; 0x4de <get_adc>
     720:	c0 90 0a 01 	lds	r12, 0x010A
     724:	d0 90 0b 01 	lds	r13, 0x010B
     728:	e0 90 0c 01 	lds	r14, 0x010C
     72c:	f0 90 0d 01 	lds	r15, 0x010D
     730:	bc 01       	movw	r22, r24
     732:	88 27       	eor	r24, r24
     734:	77 fd       	sbrc	r23, 7
     736:	80 95       	com	r24
     738:	98 2f       	mov	r25, r24
     73a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     73e:	a7 01       	movw	r20, r14
     740:	96 01       	movw	r18, r12
     742:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__subsf3>
     746:	20 e0       	ldi	r18, 0x00	; 0
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	48 ec       	ldi	r20, 0xC8	; 200
     74c:	52 e4       	ldi	r21, 0x42	; 66
     74e:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__mulsf3>
     752:	a7 01       	movw	r20, r14
     754:	96 01       	movw	r18, r12
     756:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__divsf3>
     75a:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fixsfsi>
     75e:	c6 2f       	mov	r28, r22
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
     760:	83 e0       	ldi	r24, 0x03	; 3
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 6f 02 	call	0x4de	; 0x4de <get_adc>
     768:	c0 90 0e 01 	lds	r12, 0x010E
     76c:	d0 90 0f 01 	lds	r13, 0x010F
     770:	e0 90 10 01 	lds	r14, 0x0110
     774:	f0 90 11 01 	lds	r15, 0x0111
     778:	bc 01       	movw	r22, r24
     77a:	88 27       	eor	r24, r24
     77c:	77 fd       	sbrc	r23, 7
     77e:	80 95       	com	r24
     780:	98 2f       	mov	r25, r24
     782:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     786:	a7 01       	movw	r20, r14
     788:	96 01       	movw	r18, r12
     78a:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__subsf3>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	48 ec       	ldi	r20, 0xC8	; 200
     794:	52 e4       	ldi	r21, 0x42	; 66
     796:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__mulsf3>
     79a:	a7 01       	movw	r20, r14
     79c:	96 01       	movw	r18, r12
     79e:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__divsf3>
     7a2:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fixsfsi>
     7a6:	f6 2e       	mov	r15, r22
	joy.D = getJoystickDirection(joy.X, joy.Y);
     7a8:	6c 2f       	mov	r22, r28
     7aa:	77 27       	eor	r23, r23
     7ac:	67 fd       	sbrc	r22, 7
     7ae:	70 95       	com	r23
     7b0:	8f 2d       	mov	r24, r15
     7b2:	99 27       	eor	r25, r25
     7b4:	87 fd       	sbrc	r24, 7
     7b6:	90 95       	com	r25
     7b8:	0e 94 31 03 	call	0x662	; 0x662 <getJoystickDirection>
	return joy;
}
     7bc:	6f 2d       	mov	r22, r15
     7be:	7c 2f       	mov	r23, r28
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	cf 91       	pop	r28
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	08 95       	ret

000007ce <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	1f 92       	push	r1
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
     7d8:	28 ee       	ldi	r18, 0xE8	; 232
     7da:	33 e0       	ldi	r19, 0x03	; 3
     7dc:	a9 01       	movw	r20, r18
     7de:	48 1b       	sub	r20, r24
     7e0:	59 0b       	sbc	r21, r25
     7e2:	ca 01       	movw	r24, r20
     7e4:	68 ec       	ldi	r22, 0xC8	; 200
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     7ec:	60 5d       	subi	r22, 0xD0	; 208
     7ee:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	64 e2       	ldi	r22, 0x24	; 36
     7fe:	71 e0       	ldi	r23, 0x01	; 1
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
     808:	42 e0       	ldi	r20, 0x02	; 2
     80a:	50 e0       	ldi	r21, 0x00	; 0
     80c:	62 e3       	ldi	r22, 0x32	; 50
     80e:	71 e0       	ldi	r23, 0x01	; 1
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
     818:	20 e6       	ldi	r18, 0x60	; 96
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	42 e0       	ldi	r20, 0x02	; 2
     81e:	50 e0       	ldi	r21, 0x00	; 0
     820:	be 01       	movw	r22, r28
     822:	6f 5f       	subi	r22, 0xFF	; 255
     824:	7f 4f       	sbci	r23, 0xFF	; 255
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
	oled_sram_flush(0);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_sram_flush>
     836:	0f 90       	pop	r0
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	08 95       	ret

0000083e <calibrateJoystick>:
			return LEFT;
		} 
	}
}

void calibrateJoystick(){
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	cf 93       	push	r28
     84e:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     850:	e1 2c       	mov	r14, r1
     852:	f1 2c       	mov	r15, r1

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
     854:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
     856:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
     858:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrateJoystick(){
	uint8_t yMax = 127;
     85a:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
     85c:	0f 2e       	mov	r0, r31
     85e:	f8 ec       	ldi	r31, 0xC8	; 200
     860:	cf 2e       	mov	r12, r31
     862:	d1 2c       	mov	r13, r1
     864:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
     866:	82 e0       	ldi	r24, 0x02	; 2
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 6f 02 	call	0x4de	; 0x4de <get_adc>
     86e:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 6f 02 	call	0x4de	; 0x4de <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
     878:	bc 16       	cp	r11, r28
     87a:	08 f4       	brcc	.+2      	; 0x87e <calibrateJoystick+0x40>
     87c:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
     87e:	81 17       	cp	r24, r17
     880:	08 f4       	brcc	.+2      	; 0x884 <calibrateJoystick+0x46>
     882:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
     884:	08 17       	cp	r16, r24
     886:	08 f4       	brcc	.+2      	; 0x88a <calibrateJoystick+0x4c>
     888:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
     88a:	db 15       	cp	r29, r11
     88c:	08 f4       	brcc	.+2      	; 0x890 <calibrateJoystick+0x52>
     88e:	db 2d       	mov	r29, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     890:	8f ef       	ldi	r24, 0xFF	; 255
     892:	97 e1       	ldi	r25, 0x17	; 23
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <calibrateJoystick+0x56>
     898:	00 c0       	rjmp	.+0      	; 0x89a <calibrateJoystick+0x5c>
     89a:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
     89c:	c7 01       	movw	r24, r14
     89e:	b6 01       	movw	r22, r12
     8a0:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     8a4:	89 2b       	or	r24, r25
     8a6:	19 f4       	brne	.+6      	; 0x8ae <calibrateJoystick+0x70>
			calibration_visual_countdown(i);
     8a8:	c7 01       	movw	r24, r14
     8aa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <calibration_visual_countdown>
void calibrateJoystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
     8ae:	9f ef       	ldi	r25, 0xFF	; 255
     8b0:	e9 1a       	sub	r14, r25
     8b2:	f9 0a       	sbc	r15, r25
     8b4:	88 ee       	ldi	r24, 0xE8	; 232
     8b6:	e8 16       	cp	r14, r24
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	f8 06       	cpc	r15, r24
     8bc:	a1 f6       	brne	.-88     	; 0x866 <calibrateJoystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
     8be:	6d 2f       	mov	r22, r29
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	6c 1b       	sub	r22, r28
     8c4:	71 09       	sbc	r23, r1
     8c6:	88 27       	eor	r24, r24
     8c8:	77 fd       	sbrc	r23, 7
     8ca:	80 95       	com	r24
     8cc:	98 2f       	mov	r25, r24
     8ce:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	5f e3       	ldi	r21, 0x3F	; 63
     8da:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__mulsf3>
     8de:	60 93 0a 01 	sts	0x010A, r22
     8e2:	70 93 0b 01 	sts	0x010B, r23
     8e6:	80 93 0c 01 	sts	0x010C, r24
     8ea:	90 93 0d 01 	sts	0x010D, r25
	xMean = (xMax - xMin)/2.0;
     8ee:	60 2f       	mov	r22, r16
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	61 1b       	sub	r22, r17
     8f4:	71 09       	sbc	r23, r1
     8f6:	88 27       	eor	r24, r24
     8f8:	77 fd       	sbrc	r23, 7
     8fa:	80 95       	com	r24
     8fc:	98 2f       	mov	r25, r24
     8fe:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     902:	20 e0       	ldi	r18, 0x00	; 0
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	5f e3       	ldi	r21, 0x3F	; 63
     90a:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__mulsf3>
     90e:	60 93 0e 01 	sts	0x010E, r22
     912:	70 93 0f 01 	sts	0x010F, r23
     916:	80 93 10 01 	sts	0x0110, r24
     91a:	90 93 11 01 	sts	0x0111, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
     91e:	1f 92       	push	r1
     920:	0f 93       	push	r16
     922:	1f 92       	push	r1
     924:	1f 93       	push	r17
     926:	1f 92       	push	r1
     928:	df 93       	push	r29
     92a:	1f 92       	push	r1
     92c:	cf 93       	push	r28
     92e:	8e e3       	ldi	r24, 0x3E	; 62
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <printf>
     93a:	8d b7       	in	r24, 0x3d	; 61
     93c:	9e b7       	in	r25, 0x3e	; 62
     93e:	0a 96       	adiw	r24, 0x0a	; 10
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	9e bf       	out	0x3e, r25	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	8d bf       	out	0x3d, r24	; 61
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	08 95       	ret

0000095e <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     95e:	0e 94 4f 02 	call	0x49e	; 0x49e <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
     962:	80 ec       	ldi	r24, 0xC0	; 192
     964:	0e 94 41 02 	call	0x482	; 0x482 <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     968:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_ss_high>
     96c:	08 95       	ret

0000096e <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
     96e:	cf 93       	push	r28
     970:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     972:	0e 94 4f 02 	call	0x49e	; 0x49e <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	SPI_send(address);
     97c:	8c 2f       	mov	r24, r28
     97e:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	uint8_t data = SPI_receive();
     982:	0e 94 49 02 	call	0x492	; 0x492 <SPI_receive>
     986:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     988:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
     98c:	8c 2f       	mov	r24, r28
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
     992:	80 e8       	ldi	r24, 0x80	; 128
     994:	95 e2       	ldi	r25, 0x25	; 37
     996:	0e 94 c1 06 	call	0xd82	; 0xd82 <uartInit>
	
	//Start SPI driver
	SPI_init();
     99a:	0e 94 3c 02 	call	0x478	; 0x478 <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
     99e:	0e 94 af 04 	call	0x95e	; 0x95e <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
     9a2:	8e e0       	ldi	r24, 0x0E	; 14
     9a4:	0e 94 b7 04 	call	0x96e	; 0x96e <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
     9a8:	80 7e       	andi	r24, 0xE0	; 224
     9aa:	80 38       	cpi	r24, 0x80	; 128
     9ac:	59 f0       	breq	.+22     	; 0x9c4 <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
     9ae:	8a e4       	ldi	r24, 0x4A	; 74
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <printf>
		return 1;
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	08 95       	ret
	}
	return 0;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
}
     9c8:	08 95       	ret

000009ca <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
     9ca:	cf 93       	push	r28
     9cc:	df 93       	push	r29
     9ce:	d8 2f       	mov	r29, r24
     9d0:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     9d2:	0e 94 4f 02 	call	0x49e	; 0x49e <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	SPI_send(address);
     9dc:	8d 2f       	mov	r24, r29
     9de:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	SPI_send(data);
     9e2:	8c 2f       	mov	r24, r28
     9e4:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     9e8:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	08 95       	ret

000009f2 <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
     9f2:	cf 93       	push	r28
     9f4:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     9f6:	0e 94 4f 02 	call	0x49e	; 0x49e <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
     9fa:	8c 2f       	mov	r24, r28
     9fc:	83 70       	andi	r24, 0x03	; 3
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	51 f0       	breq	.+20     	; 0xa16 <MCP_rts+0x24>
     a02:	28 f0       	brcs	.+10     	; 0xa0e <MCP_rts+0x1c>
     a04:	82 30       	cpi	r24, 0x02	; 2
     a06:	59 f0       	breq	.+22     	; 0xa1e <MCP_rts+0x2c>
     a08:	83 30       	cpi	r24, 0x03	; 3
     a0a:	69 f0       	breq	.+26     	; 0xa26 <MCP_rts+0x34>
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
     a0e:	81 e8       	ldi	r24, 0x81	; 129
     a10:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
			break;
     a14:	0b c0       	rjmp	.+22     	; 0xa2c <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
     a16:	82 e8       	ldi	r24, 0x82	; 130
     a18:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
			break;
     a1c:	07 c0       	rjmp	.+14     	; 0xa2c <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
     a1e:	84 e8       	ldi	r24, 0x84	; 132
     a20:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
			break;
     a24:	03 c0       	rjmp	.+6      	; 0xa2c <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
     a26:	87 e8       	ldi	r24, 0x87	; 135
     a28:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     a2c:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
     a30:	cf 91       	pop	r28
     a32:	08 95       	ret

00000a34 <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
     a34:	1f 93       	push	r17
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	18 2f       	mov	r17, r24
     a3c:	d6 2f       	mov	r29, r22
     a3e:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
     a40:	0e 94 4f 02 	call	0x49e	; 0x49e <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
     a44:	85 e0       	ldi	r24, 0x05	; 5
     a46:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	SPI_send(address);
     a4a:	81 2f       	mov	r24, r17
     a4c:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	SPI_send(mask);
     a50:	8d 2f       	mov	r24, r29
     a52:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	SPI_send(data);
     a56:	8c 2f       	mov	r24, r28
     a58:	0e 94 46 02 	call	0x48c	; 0x48c <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
     a5c:	0e 94 4d 02 	call	0x49a	; 0x49a <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	08 95       	ret

00000a68 <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     a68:	e0 e0       	ldi	r30, 0x00	; 0
     a6a:	f0 e1       	ldi	r31, 0x10	; 16
     a6c:	8e ea       	ldi	r24, 0xAE	; 174
     a6e:	80 83       	st	Z, r24
     a70:	81 ea       	ldi	r24, 0xA1	; 161
     a72:	80 83       	st	Z, r24
     a74:	8a ed       	ldi	r24, 0xDA	; 218
     a76:	80 83       	st	Z, r24
     a78:	82 e1       	ldi	r24, 0x12	; 18
     a7a:	80 83       	st	Z, r24
     a7c:	88 ec       	ldi	r24, 0xC8	; 200
     a7e:	80 83       	st	Z, r24
     a80:	88 ea       	ldi	r24, 0xA8	; 168
     a82:	80 83       	st	Z, r24
     a84:	8f e3       	ldi	r24, 0x3F	; 63
     a86:	80 83       	st	Z, r24
     a88:	85 ed       	ldi	r24, 0xD5	; 213
     a8a:	80 83       	st	Z, r24
     a8c:	80 e8       	ldi	r24, 0x80	; 128
     a8e:	80 83       	st	Z, r24
     a90:	81 e8       	ldi	r24, 0x81	; 129
     a92:	80 83       	st	Z, r24
     a94:	80 e5       	ldi	r24, 0x50	; 80
     a96:	80 83       	st	Z, r24
     a98:	89 ed       	ldi	r24, 0xD9	; 217
     a9a:	80 83       	st	Z, r24
     a9c:	81 e2       	ldi	r24, 0x21	; 33
     a9e:	80 83       	st	Z, r24
     aa0:	80 e2       	ldi	r24, 0x20	; 32
     aa2:	80 83       	st	Z, r24
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	80 83       	st	Z, r24
     aa8:	8b ed       	ldi	r24, 0xDB	; 219
     aaa:	80 83       	st	Z, r24
     aac:	80 e3       	ldi	r24, 0x30	; 48
     aae:	80 83       	st	Z, r24
     ab0:	8d ea       	ldi	r24, 0xAD	; 173
     ab2:	80 83       	st	Z, r24
     ab4:	10 82       	st	Z, r1
     ab6:	84 ea       	ldi	r24, 0xA4	; 164
     ab8:	80 83       	st	Z, r24
     aba:	86 ea       	ldi	r24, 0xA6	; 166
     abc:	80 83       	st	Z, r24
     abe:	8f ea       	ldi	r24, 0xAF	; 175
     ac0:	80 83       	st	Z, r24
     ac2:	08 95       	ret

00000ac4 <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
     ac4:	af 92       	push	r10
     ac6:	bf 92       	push	r11
     ac8:	cf 92       	push	r12
     aca:	df 92       	push	r13
     acc:	ef 92       	push	r14
     ace:	ff 92       	push	r15
     ad0:	0f 93       	push	r16
     ad2:	1f 93       	push	r17
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     ada:	c0 e0       	ldi	r28, 0x00	; 0
     adc:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
     ade:	e1 2c       	mov	r14, r1
     ae0:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     ae2:	c1 2c       	mov	r12, r1
     ae4:	68 94       	set
     ae6:	dd 24       	eor	r13, r13
     ae8:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     aea:	00 e0       	ldi	r16, 0x00	; 0
     aec:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
     aee:	ce 01       	movw	r24, r28
     af0:	9e 01       	movw	r18, r28
     af2:	2f 77       	andi	r18, 0x7F	; 127
     af4:	33 27       	eor	r19, r19
     af6:	23 2b       	or	r18, r19
     af8:	39 f4       	brne	.+14     	; 0xb08 <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
     afa:	20 eb       	ldi	r18, 0xB0	; 176
     afc:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
     afe:	f6 01       	movw	r30, r12
     b00:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
     b02:	ff ef       	ldi	r31, 0xFF	; 255
     b04:	ef 1a       	sub	r14, r31
     b06:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
     b08:	8a 0d       	add	r24, r10
     b0a:	9b 1d       	adc	r25, r11
     b0c:	0e 94 b2 06 	call	0xd64	; 0xd64 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
     b10:	f8 01       	movw	r30, r16
     b12:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
     b14:	21 96       	adiw	r28, 0x01	; 1
     b16:	c1 15       	cp	r28, r1
     b18:	f4 e0       	ldi	r31, 0x04	; 4
     b1a:	df 07       	cpc	r29, r31
     b1c:	41 f7       	brne	.-48     	; 0xaee <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
     b1e:	df 91       	pop	r29
     b20:	cf 91       	pop	r28
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	ff 90       	pop	r15
     b28:	ef 90       	pop	r14
     b2a:	df 90       	pop	r13
     b2c:	cf 90       	pop	r12
     b2e:	bf 90       	pop	r11
     b30:	af 90       	pop	r10
     b32:	08 95       	ret

00000b34 <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
	oled_sram_flush(0);
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_sram_flush>
	TCNT1 = 0;
     b5e:	1d bc       	out	0x2d, r1	; 45
     b60:	1c bc       	out	0x2c, r1	; 44
}
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	bf 91       	pop	r27
     b68:	af 91       	pop	r26
     b6a:	9f 91       	pop	r25
     b6c:	8f 91       	pop	r24
     b6e:	7f 91       	pop	r23
     b70:	6f 91       	pop	r22
     b72:	5f 91       	pop	r21
     b74:	4f 91       	pop	r20
     b76:	3f 91       	pop	r19
     b78:	2f 91       	pop	r18
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
     b98:	6a 01       	movw	r12, r20
     b9a:	d6 94       	lsr	r13
     b9c:	dc 2c       	mov	r13, r12
     b9e:	cc 24       	eor	r12, r12
     ba0:	d7 94       	ror	r13
     ba2:	c7 94       	ror	r12
     ba4:	c8 0e       	add	r12, r24
     ba6:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
     ba8:	fb 01       	movw	r30, r22
     baa:	e0 80       	ld	r14, Z
	while(c != '\0'){
     bac:	ee 20       	and	r14, r14
     bae:	69 f1       	breq	.+90     	; 0xc0a <oled_sram_write_string+0x86>
     bb0:	5b 01       	movw	r10, r22
     bb2:	ff ef       	ldi	r31, 0xFF	; 255
     bb4:	af 1a       	sub	r10, r31
     bb6:	bf 0a       	sbc	r11, r31
     bb8:	15 c0       	rjmp	.+42     	; 0xbe4 <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     bba:	ce 01       	movw	r24, r28
     bbc:	f7 01       	movw	r30, r14
     bbe:	e8 0f       	add	r30, r24
     bc0:	f9 1f       	adc	r31, r25
     bc2:	64 91       	lpm	r22, Z
     bc4:	ec 01       	movw	r28, r24
     bc6:	21 96       	adiw	r28, 0x01	; 1
     bc8:	70 e0       	ldi	r23, 0x00	; 0
     bca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
     bce:	c0 17       	cp	r28, r16
     bd0:	d1 07       	cpc	r29, r17
     bd2:	99 f7       	brne	.-26     	; 0xbba <oled_sram_write_string+0x36>
     bd4:	48 e0       	ldi	r20, 0x08	; 8
     bd6:	c4 0e       	add	r12, r20
     bd8:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
     bda:	f5 01       	movw	r30, r10
     bdc:	e1 90       	ld	r14, Z+
     bde:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
     be0:	ee 20       	and	r14, r14
     be2:	99 f0       	breq	.+38     	; 0xc0a <oled_sram_write_string+0x86>
     be4:	86 01       	movw	r16, r12
     be6:	08 5f       	subi	r16, 0xF8	; 248
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	f1 2c       	mov	r15, r1
     bec:	ee 0c       	add	r14, r14
     bee:	ff 1c       	adc	r15, r15
     bf0:	ee 0c       	add	r14, r14
     bf2:	ff 1c       	adc	r15, r15
     bf4:	ee 0c       	add	r14, r14
     bf6:	ff 1c       	adc	r15, r15
     bf8:	97 01       	movw	r18, r14
     bfa:	2c 19       	sub	r18, r12
     bfc:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
     bfe:	c6 01       	movw	r24, r12
     c00:	a9 01       	movw	r20, r18
     c02:	40 59       	subi	r20, 0x90	; 144
     c04:	50 40       	sbci	r21, 0x00	; 0
     c06:	7a 01       	movw	r14, r20
     c08:	d9 cf       	rjmp	.-78     	; 0xbbc <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	ff 90       	pop	r15
     c14:	ef 90       	pop	r14
     c16:	df 90       	pop	r13
     c18:	cf 90       	pop	r12
     c1a:	bf 90       	pop	r11
     c1c:	af 90       	pop	r10
     c1e:	08 95       	ret

00000c20 <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
     c20:	ef 92       	push	r14
     c22:	ff 92       	push	r15
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	7b 01       	movw	r14, r22
	start = start + page*128+col;
     c2e:	8a 01       	movw	r16, r20
     c30:	16 95       	lsr	r17
     c32:	10 2f       	mov	r17, r16
     c34:	00 27       	eor	r16, r16
     c36:	17 95       	ror	r17
     c38:	07 95       	ror	r16
     c3a:	80 0f       	add	r24, r16
     c3c:	91 1f       	adc	r25, r17
     c3e:	8c 01       	movw	r16, r24
     c40:	02 0f       	add	r16, r18
     c42:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
     c44:	c0 e0       	ldi	r28, 0x00	; 0
     c46:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
     c48:	d7 01       	movw	r26, r14
     c4a:	ec 91       	ld	r30, X
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	b0 97       	sbiw	r30, 0x20	; 32
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ec 0f       	add	r30, r28
     c5e:	fd 1f       	adc	r31, r29
     c60:	e0 59       	subi	r30, 0x90	; 144
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	64 91       	lpm	r22, Z
     c66:	70 e0       	ldi	r23, 0x00	; 0
     c68:	ce 01       	movw	r24, r28
     c6a:	80 0f       	add	r24, r16
     c6c:	91 1f       	adc	r25, r17
     c6e:	0e 94 b6 06 	call	0xd6c	; 0xd6c <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
     c72:	21 96       	adiw	r28, 0x01	; 1
     c74:	c8 30       	cpi	r28, 0x08	; 8
     c76:	d1 05       	cpc	r29, r1
     c78:	39 f7       	brne	.-50     	; 0xc48 <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	08 95       	ret

00000c88 <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
     c90:	8b 01       	movw	r16, r22
     c92:	16 95       	lsr	r17
     c94:	10 2f       	mov	r17, r16
     c96:	00 27       	eor	r16, r16
     c98:	17 95       	ror	r17
     c9a:	07 95       	ror	r16
     c9c:	08 0f       	add	r16, r24
     c9e:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
     ca0:	c0 e0       	ldi	r28, 0x00	; 0
     ca2:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	ce 01       	movw	r24, r28
     caa:	80 0f       	add	r24, r16
     cac:	91 1f       	adc	r25, r17
     cae:	0e 94 b6 06 	call	0xd6c	; 0xd6c <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
     cb2:	21 96       	adiw	r28, 0x01	; 1
     cb4:	c0 38       	cpi	r28, 0x80	; 128
     cb6:	d1 05       	cpc	r29, r1
     cb8:	a9 f7       	brne	.-22     	; 0xca4 <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	08 95       	ret

00000cc4 <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
     cc4:	0f 93       	push	r16
     cc6:	1f 93       	push	r17
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
     cce:	c0 e0       	ldi	r28, 0x00	; 0
     cd0:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
     cd2:	be 01       	movw	r22, r28
     cd4:	c8 01       	movw	r24, r16
     cd6:	0e 94 44 06 	call	0xc88	; 0xc88 <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
     cda:	21 96       	adiw	r28, 0x01	; 1
     cdc:	c8 30       	cpi	r28, 0x08	; 8
     cde:	d1 05       	cpc	r29, r1
     ce0:	c1 f7       	brne	.-16     	; 0xcd2 <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	08 95       	ret

00000cec <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ea 01       	movw	r28, r20
	int page = y/8;
     cf6:	9a 01       	movw	r18, r20
     cf8:	dd 23       	and	r29, r29
     cfa:	14 f4       	brge	.+4      	; 0xd00 <oled_sram_write_bit+0x14>
     cfc:	29 5f       	subi	r18, 0xF9	; 249
     cfe:	3f 4f       	sbci	r19, 0xFF	; 255
     d00:	89 01       	movw	r16, r18
     d02:	15 95       	asr	r17
     d04:	07 95       	ror	r16
     d06:	15 95       	asr	r17
     d08:	07 95       	ror	r16
     d0a:	15 95       	asr	r17
     d0c:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
     d0e:	16 95       	lsr	r17
     d10:	10 2f       	mov	r17, r16
     d12:	00 27       	eor	r16, r16
     d14:	17 95       	ror	r17
     d16:	07 95       	ror	r16
     d18:	08 0f       	add	r16, r24
     d1a:	19 1f       	adc	r17, r25
     d1c:	06 0f       	add	r16, r22
     d1e:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
     d20:	c8 01       	movw	r24, r16
     d22:	0e 94 b2 06 	call	0xd64	; 0xd64 <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
     d26:	ae 01       	movw	r20, r28
     d28:	47 70       	andi	r20, 0x07	; 7
     d2a:	50 78       	andi	r21, 0x80	; 128
     d2c:	55 23       	and	r21, r21
     d2e:	34 f4       	brge	.+12     	; 0xd3c <oled_sram_write_bit+0x50>
     d30:	41 50       	subi	r20, 0x01	; 1
     d32:	51 09       	sbc	r21, r1
     d34:	48 6f       	ori	r20, 0xF8	; 248
     d36:	5f 6f       	ori	r21, 0xFF	; 255
     d38:	4f 5f       	subi	r20, 0xFF	; 255
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	b9 01       	movw	r22, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <oled_sram_write_bit+0x5c>
     d44:	66 0f       	add	r22, r22
     d46:	77 1f       	adc	r23, r23
     d48:	4a 95       	dec	r20
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <oled_sram_write_bit+0x58>
     d4c:	ab 01       	movw	r20, r22
     d4e:	48 2b       	or	r20, r24
	setSRAM(index, temp);
     d50:	64 2f       	mov	r22, r20
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	c8 01       	movw	r24, r16
     d56:	0e 94 b6 06 	call	0xd6c	; 0xd6c <setSRAM>
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret

00000d64 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
     d64:	98 5e       	subi	r25, 0xE8	; 232
     d66:	fc 01       	movw	r30, r24
     d68:	80 81       	ld	r24, Z
}
     d6a:	08 95       	ret

00000d6c <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
     d6c:	fc 01       	movw	r30, r24
     d6e:	f8 5e       	subi	r31, 0xE8	; 232
     d70:	80 81       	ld	r24, Z
		ext_ram[index] = value;
     d72:	60 83       	st	Z, r22
		return temp;
}
     d74:	08 95       	ret

00000d76 <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
     d76:	5d 9b       	sbis	0x0b, 5	; 11
     d78:	fe cf       	rjmp	.-4      	; 0xd76 <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
     d7a:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	08 95       	ret

00000d82 <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
     d82:	9c 01       	movw	r18, r24
     d84:	40 e0       	ldi	r20, 0x00	; 0
     d86:	50 e0       	ldi	r21, 0x00	; 0
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 eb       	ldi	r23, 0xB0	; 176
     d8c:	84 e0       	ldi	r24, 0x04	; 4
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__divmodsi4>
     d94:	21 50       	subi	r18, 0x01	; 1
     d96:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     d98:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
     d9a:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     d9c:	8a b1       	in	r24, 0x0a	; 10
     d9e:	88 61       	ori	r24, 0x18	; 24
     da0:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     da2:	80 b5       	in	r24, 0x20	; 32
     da4:	86 68       	ori	r24, 0x86	; 134
     da6:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	8b eb       	ldi	r24, 0xBB	; 187
     dae:	96 e0       	ldi	r25, 0x06	; 6
     db0:	0e 94 86 11 	call	0x230c	; 0x230c <fdevopen>
	
	return 0;
}
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	08 95       	ret

00000dba <play_draw>:
#include "../Driver_files/oled_driver.h"
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
     dc2:	0f e1       	ldi	r16, 0x1F	; 31
     dc4:	10 e0       	ldi	r17, 0x00	; 0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
     dc6:	cf e3       	ldi	r28, 0x3F	; 63
     dc8:	d0 e0       	ldi	r29, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = getJoystickPosition();
     dca:	0e 94 87 03 	call	0x70e	; 0x70e <getJoystickPosition>
		switch(joy.D){
     dce:	81 30       	cpi	r24, 0x01	; 1
     dd0:	71 f0       	breq	.+28     	; 0xdee <play_draw+0x34>
     dd2:	58 f0       	brcs	.+22     	; 0xdea <play_draw+0x30>
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	19 f0       	breq	.+6      	; 0xdde <play_draw+0x24>
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	21 f0       	breq	.+8      	; 0xde4 <play_draw+0x2a>
     ddc:	09 c0       	rjmp	.+18     	; 0xdf0 <play_draw+0x36>
			case NEUTRAL:
				break;
			case UP:
				y--;
     dde:	01 50       	subi	r16, 0x01	; 1
     de0:	11 09       	sbc	r17, r1
				break;
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <play_draw+0x36>
			case DOWN:
				y++;
     de4:	0f 5f       	subi	r16, 0xFF	; 255
     de6:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <play_draw+0x36>
			case LEFT:
				x--;
     dea:	21 97       	sbiw	r28, 0x01	; 1
				break;
     dec:	01 c0       	rjmp	.+2      	; 0xdf0 <play_draw+0x36>
			case RIGHT:
				x++;
     dee:	21 96       	adiw	r28, 0x01	; 1
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
     df0:	a8 01       	movw	r20, r16
     df2:	be 01       	movw	r22, r28
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
		oled_sram_flush(0);
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_sram_flush>
     e04:	2f ef       	ldi	r18, 0xFF	; 255
     e06:	8f e7       	ldi	r24, 0x7F	; 127
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	21 50       	subi	r18, 0x01	; 1
     e0c:	80 40       	sbci	r24, 0x00	; 0
     e0e:	90 40       	sbci	r25, 0x00	; 0
     e10:	e1 f7       	brne	.-8      	; 0xe0a <play_draw+0x50>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <play_draw+0x5a>
     e14:	00 c0       	rjmp	.+0      	; 0xe16 <play_draw+0x5c>
     e16:	d9 cf       	rjmp	.-78     	; 0xdca <play_draw+0x10>

00000e18 <racketHit>:

typedef struct{
	int pos; // from 0 to 45 (16 in width)
} Racket;

int racketHit(Ball *ball, int racketPos){
     e18:	cf 92       	push	r12
     e1a:	df 92       	push	r13
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	eb 01       	movw	r28, r22
	if (ball->posY >= racketPos && ball->posY < racketPos + RACKETSIZE )
     e26:	fc 01       	movw	r30, r24
     e28:	c2 80       	ldd	r12, Z+2	; 0x02
     e2a:	d3 80       	ldd	r13, Z+3	; 0x03
     e2c:	e4 80       	ldd	r14, Z+4	; 0x04
     e2e:	f5 80       	ldd	r15, Z+5	; 0x05
     e30:	88 27       	eor	r24, r24
     e32:	77 fd       	sbrc	r23, 7
     e34:	80 95       	com	r24
     e36:	98 2f       	mov	r25, r24
     e38:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     e3c:	9b 01       	movw	r18, r22
     e3e:	ac 01       	movw	r20, r24
     e40:	c7 01       	movw	r24, r14
     e42:	b6 01       	movw	r22, r12
     e44:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__gesf2>
     e48:	88 23       	and	r24, r24
     e4a:	bc f0       	brlt	.+46     	; 0xe7a <racketHit+0x62>
     e4c:	be 01       	movw	r22, r28
     e4e:	60 5f       	subi	r22, 0xF0	; 240
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	88 27       	eor	r24, r24
     e54:	77 fd       	sbrc	r23, 7
     e56:	80 95       	com	r24
     e58:	98 2f       	mov	r25, r24
     e5a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     e5e:	9b 01       	movw	r18, r22
     e60:	ac 01       	movw	r20, r24
     e62:	d1 e0       	ldi	r29, 0x01	; 1
     e64:	c0 e0       	ldi	r28, 0x00	; 0
     e66:	c7 01       	movw	r24, r14
     e68:	b6 01       	movw	r22, r12
     e6a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__cmpsf2>
     e6e:	88 23       	and	r24, r24
     e70:	0c f0       	brlt	.+2      	; 0xe74 <racketHit+0x5c>
     e72:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
     e74:	8d 2f       	mov	r24, r29
     e76:	9c 2f       	mov	r25, r28
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <racketHit+0x66>
	return 0;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
}
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	08 95       	ret

00000e8c <updateBallAngle>:

void updateBallAngle(Ball *ball, int racketPos){
     e8c:	cf 92       	push	r12
     e8e:	df 92       	push	r13
     e90:	ef 92       	push	r14
     e92:	ff 92       	push	r15
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29
     e9c:	ec 01       	movw	r28, r24
     e9e:	8b 01       	movw	r16, r22
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
	int newBallAngle = ball->angle + hitPos * 45;
     ea0:	6e 81       	ldd	r22, Y+6	; 0x06
     ea2:	7f 81       	ldd	r23, Y+7	; 0x07
     ea4:	88 27       	eor	r24, r24
     ea6:	77 fd       	sbrc	r23, 7
     ea8:	80 95       	com	r24
     eaa:	98 2f       	mov	r25, r24
     eac:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     eb0:	6b 01       	movw	r12, r22
     eb2:	7c 01       	movw	r14, r24
		return 1;
	return 0;
}

void updateBallAngle(Ball *ball, int racketPos){
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
     eb4:	b8 01       	movw	r22, r16
     eb6:	88 27       	eor	r24, r24
     eb8:	77 fd       	sbrc	r23, 7
     eba:	80 95       	com	r24
     ebc:	98 2f       	mov	r25, r24
     ebe:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	6a 81       	ldd	r22, Y+2	; 0x02
     ec8:	7b 81       	ldd	r23, Y+3	; 0x03
     eca:	8c 81       	ldd	r24, Y+4	; 0x04
     ecc:	9d 81       	ldd	r25, Y+5	; 0x05
     ece:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__subsf3>
     ed2:	20 e0       	ldi	r18, 0x00	; 0
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	51 e4       	ldi	r21, 0x41	; 65
     eda:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__subsf3>
     ede:	20 e0       	ldi	r18, 0x00	; 0
     ee0:	30 e0       	ldi	r19, 0x00	; 0
     ee2:	40 e0       	ldi	r20, 0x00	; 0
     ee4:	5e e3       	ldi	r21, 0x3E	; 62
     ee6:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__mulsf3>
	int newBallAngle = ball->angle + hitPos * 45;
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	44 e3       	ldi	r20, 0x34	; 52
     ef0:	52 e4       	ldi	r21, 0x42	; 66
     ef2:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__mulsf3>
     ef6:	9b 01       	movw	r18, r22
     ef8:	ac 01       	movw	r20, r24
     efa:	c7 01       	movw	r24, r14
     efc:	b6 01       	movw	r22, r12
     efe:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__addsf3>
     f02:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fixsfsi>
	if(newBallAngle > 45) ball->angle = 45;
     f06:	6e 32       	cpi	r22, 0x2E	; 46
     f08:	71 05       	cpc	r23, r1
     f0a:	2c f0       	brlt	.+10     	; 0xf16 <updateBallAngle+0x8a>
     f0c:	8d e2       	ldi	r24, 0x2D	; 45
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9f 83       	std	Y+7, r25	; 0x07
     f12:	8e 83       	std	Y+6, r24	; 0x06
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <updateBallAngle+0xa0>
	else if(newBallAngle < -45) ball->angle = 45;
     f16:	63 3d       	cpi	r22, 0xD3	; 211
     f18:	4f ef       	ldi	r20, 0xFF	; 255
     f1a:	74 07       	cpc	r23, r20
     f1c:	2c f4       	brge	.+10     	; 0xf28 <updateBallAngle+0x9c>
     f1e:	8d e2       	ldi	r24, 0x2D	; 45
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9f 83       	std	Y+7, r25	; 0x07
     f24:	8e 83       	std	Y+6, r24	; 0x06
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <updateBallAngle+0xa0>
	else ball->angle = newBallAngle;
     f28:	7f 83       	std	Y+7, r23	; 0x07
     f2a:	6e 83       	std	Y+6, r22	; 0x06
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	08 95       	ret

00000f3e <ballInit>:

void ballInit(Ball *ball){
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	ec 01       	movw	r28, r24
	ball->dir = rand() % 2;
     f44:	0e 94 76 11 	call	0x22ec	; 0x22ec <rand>
     f48:	81 70       	andi	r24, 0x01	; 1
     f4a:	90 78       	andi	r25, 0x80	; 128
     f4c:	99 23       	and	r25, r25
     f4e:	24 f4       	brge	.+8      	; 0xf58 <ballInit+0x1a>
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	8e 6f       	ori	r24, 0xFE	; 254
     f54:	9f 6f       	ori	r25, 0xFF	; 255
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	99 87       	std	Y+9, r25	; 0x09
     f5a:	88 87       	std	Y+8, r24	; 0x08
	ball->angle = (rand() % 91) - 45;
     f5c:	0e 94 76 11 	call	0x22ec	; 0x22ec <rand>
     f60:	6b e5       	ldi	r22, 0x5B	; 91
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
     f68:	8d 97       	sbiw	r24, 0x2d	; 45
     f6a:	9f 83       	std	Y+7, r25	; 0x07
     f6c:	8e 83       	std	Y+6, r24	; 0x06
	ball->posX = 63;
     f6e:	8f e3       	ldi	r24, 0x3F	; 63
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	99 83       	std	Y+1, r25	; 0x01
     f74:	88 83       	st	Y, r24
}
     f76:	df 91       	pop	r29
     f78:	cf 91       	pop	r28
     f7a:	08 95       	ret

00000f7c <updateBallPosition>:

void updateBallPosition(Ball *ball){
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	ec 01       	movw	r28, r24
	float tempPosY = ball->posY + ((float)(ball->angle)/45);
     f8e:	0e 81       	ldd	r16, Y+6	; 0x06
     f90:	1f 81       	ldd	r17, Y+7	; 0x07
     f92:	b8 01       	movw	r22, r16
     f94:	88 27       	eor	r24, r24
     f96:	77 fd       	sbrc	r23, 7
     f98:	80 95       	com	r24
     f9a:	98 2f       	mov	r25, r24
     f9c:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <__floatsisf>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	44 e3       	ldi	r20, 0x34	; 52
     fa6:	52 e4       	ldi	r21, 0x42	; 66
     fa8:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <__divsf3>
     fac:	2a 81       	ldd	r18, Y+2	; 0x02
     fae:	3b 81       	ldd	r19, Y+3	; 0x03
     fb0:	4c 81       	ldd	r20, Y+4	; 0x04
     fb2:	5d 81       	ldd	r21, Y+5	; 0x05
     fb4:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__addsf3>
     fb8:	6b 01       	movw	r12, r22
     fba:	7c 01       	movw	r14, r24
	
	//hits the wall
	if (tempPosY > 63){ 
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	4c e7       	ldi	r20, 0x7C	; 124
     fc2:	52 e4       	ldi	r21, 0x42	; 66
     fc4:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__gesf2>
     fc8:	18 16       	cp	r1, r24
     fca:	d4 f4       	brge	.+52     	; 0x1000 <updateBallPosition+0x84>
		ball->posY = 63 - (tempPosY - 63);
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	4c e7       	ldi	r20, 0x7C	; 124
     fd2:	52 e4       	ldi	r21, 0x42	; 66
     fd4:	c7 01       	movw	r24, r14
     fd6:	b6 01       	movw	r22, r12
     fd8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__subsf3>
     fdc:	9b 01       	movw	r18, r22
     fde:	ac 01       	movw	r20, r24
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	70 e0       	ldi	r23, 0x00	; 0
     fe4:	8c e7       	ldi	r24, 0x7C	; 124
     fe6:	92 e4       	ldi	r25, 0x42	; 66
     fe8:	0e 94 7d 0d 	call	0x1afa	; 0x1afa <__subsf3>
     fec:	6a 83       	std	Y+2, r22	; 0x02
     fee:	7b 83       	std	Y+3, r23	; 0x03
     ff0:	8c 83       	std	Y+4, r24	; 0x04
     ff2:	9d 83       	std	Y+5, r25	; 0x05
		ball->angle *= -1;
     ff4:	11 95       	neg	r17
     ff6:	01 95       	neg	r16
     ff8:	11 09       	sbc	r17, r1
     ffa:	1f 83       	std	Y+7, r17	; 0x07
     ffc:	0e 83       	std	Y+6, r16	; 0x06
     ffe:	1b c0       	rjmp	.+54     	; 0x1036 <updateBallPosition+0xba>
	}
	else if (tempPosY < 0){
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	a9 01       	movw	r20, r18
    1006:	c7 01       	movw	r24, r14
    1008:	b6 01       	movw	r22, r12
    100a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__cmpsf2>
    100e:	88 23       	and	r24, r24
    1010:	74 f4       	brge	.+28     	; 0x102e <updateBallPosition+0xb2>
		ball->posY = -1*tempPosY;
    1012:	f7 fa       	bst	r15, 7
    1014:	f0 94       	com	r15
    1016:	f7 f8       	bld	r15, 7
    1018:	f0 94       	com	r15
    101a:	ca 82       	std	Y+2, r12	; 0x02
    101c:	db 82       	std	Y+3, r13	; 0x03
    101e:	ec 82       	std	Y+4, r14	; 0x04
    1020:	fd 82       	std	Y+5, r15	; 0x05
		ball->angle *= -1;
    1022:	11 95       	neg	r17
    1024:	01 95       	neg	r16
    1026:	11 09       	sbc	r17, r1
    1028:	1f 83       	std	Y+7, r17	; 0x07
    102a:	0e 83       	std	Y+6, r16	; 0x06
    102c:	04 c0       	rjmp	.+8      	; 0x1036 <updateBallPosition+0xba>
	}
	else ball->posY = tempPosY;
    102e:	ca 82       	std	Y+2, r12	; 0x02
    1030:	db 82       	std	Y+3, r13	; 0x03
    1032:	ec 82       	std	Y+4, r14	; 0x04
    1034:	fd 82       	std	Y+5, r15	; 0x05
	if(ball->dir == RIGHT)
    1036:	88 85       	ldd	r24, Y+8	; 0x08
    1038:	99 85       	ldd	r25, Y+9	; 0x09
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	31 f4       	brne	.+12     	; 0x104a <updateBallPosition+0xce>
		ball->posX++;
    103e:	88 81       	ld	r24, Y
    1040:	99 81       	ldd	r25, Y+1	; 0x01
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	99 83       	std	Y+1, r25	; 0x01
    1046:	88 83       	st	Y, r24
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <updateBallPosition+0xd8>
	else ball->posX--;
    104a:	88 81       	ld	r24, Y
    104c:	99 81       	ldd	r25, Y+1	; 0x01
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	99 83       	std	Y+1, r25	; 0x01
    1052:	88 83       	st	Y, r24
}
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	cf 90       	pop	r12
    1064:	08 95       	ret

00001066 <updateSliderPosition>:
void updateSliderPosition(Slider *slide){
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	ec 01       	movw	r28, r24
	*slide = getSliderPosition();
    106c:	0e 94 0a 03 	call	0x614	; 0x614 <getSliderPosition>
    1070:	79 83       	std	Y+1, r23	; 0x01
    1072:	8a 83       	std	Y+2, r24	; 0x02
    1074:	9b 83       	std	Y+3, r25	; 0x03
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
    1076:	4f e2       	ldi	r20, 0x2F	; 47
    1078:	46 9f       	mul	r20, r22
    107a:	c0 01       	movw	r24, r0
    107c:	11 24       	eor	r1, r1
    107e:	24 e6       	ldi	r18, 0x64	; 100
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	b9 01       	movw	r22, r18
    1084:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
    1088:	68 83       	st	Y, r22
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	48 9f       	mul	r20, r24
    108e:	c0 01       	movw	r24, r0
    1090:	11 24       	eor	r1, r1
    1092:	b9 01       	movw	r22, r18
    1094:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
    1098:	69 83       	std	Y+1, r22	; 0x01
} 
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <updateScreen>:
			printEndScreen("Player Left won!");
		}
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
    10a0:	cf 92       	push	r12
    10a2:	df 92       	push	r13
    10a4:	ef 92       	push	r14
    10a6:	ff 92       	push	r15
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	2a 97       	sbiw	r28, 0x0a	; 10
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	09 83       	std	Y+1, r16	; 0x01
    10c2:	1a 83       	std	Y+2, r17	; 0x02
    10c4:	2b 83       	std	Y+3, r18	; 0x03
    10c6:	3c 83       	std	Y+4, r19	; 0x04
    10c8:	4d 83       	std	Y+5, r20	; 0x05
    10ca:	5e 83       	std	Y+6, r21	; 0x06
	oled_sram_clear_screen(0);
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	for (int i = 0; i < RACKETSIZE; i++){
    10d4:	00 e0       	ldi	r16, 0x00	; 0
    10d6:	10 e0       	ldi	r17, 0x00	; 0
    10d8:	a8 01       	movw	r20, r16
    10da:	4e 0d       	add	r20, r14
    10dc:	5f 1d       	adc	r21, r15
		oled_sram_write_bit(0, 1, leftRacketPos + i);
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
    10ea:	a8 01       	movw	r20, r16
    10ec:	4c 0d       	add	r20, r12
    10ee:	5d 1d       	adc	r21, r13
		oled_sram_write_bit(0,127, rightRacketPos + i);
    10f0:	6f e7       	ldi	r22, 0x7F	; 127
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
    10fc:	0f 5f       	subi	r16, 0xFF	; 255
    10fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1100:	00 31       	cpi	r16, 0x10	; 16
    1102:	11 05       	cpc	r17, r1
    1104:	49 f7       	brne	.-46     	; 0x10d8 <updateScreen+0x38>
    1106:	00 e0       	ldi	r16, 0x00	; 0
    1108:	10 e0       	ldi	r17, 0x00	; 0
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	6b 81       	ldd	r22, Y+3	; 0x03
    1112:	7c 81       	ldd	r23, Y+4	; 0x04
    1114:	8d 81       	ldd	r24, Y+5	; 0x05
    1116:	9e 81       	ldd	r25, Y+6	; 0x06
    1118:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__addsf3>
    111c:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fixsfsi>
    1120:	29 81       	ldd	r18, Y+1	; 0x01
    1122:	3a 81       	ldd	r19, Y+2	; 0x02
    1124:	20 0f       	add	r18, r16
    1126:	31 1f       	adc	r19, r17
    1128:	ab 01       	movw	r20, r22
    112a:	b9 01       	movw	r22, r18
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	6b 81       	ldd	r22, Y+3	; 0x03
    113e:	7c 81       	ldd	r23, Y+4	; 0x04
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <__addsf3>
    1148:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <__fixsfsi>
    114c:	29 81       	ldd	r18, Y+1	; 0x01
    114e:	3a 81       	ldd	r19, Y+2	; 0x02
    1150:	20 0f       	add	r18, r16
    1152:	31 1f       	adc	r19, r17
    1154:	ab 01       	movw	r20, r22
    1156:	b9 01       	movw	r22, r18
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
    1160:	0f 5f       	subi	r16, 0xFF	; 255
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	02 30       	cpi	r16, 0x02	; 2
    1166:	11 05       	cpc	r17, r1
    1168:	81 f6       	brne	.-96     	; 0x110a <updateScreen+0x6a>
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_sram_flush>
}
    1172:	2a 96       	adiw	r28, 0x0a	; 10
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	0f 91       	pop	r16
    1186:	ff 90       	pop	r15
    1188:	ef 90       	pop	r14
    118a:	df 90       	pop	r13
    118c:	cf 90       	pop	r12
    118e:	08 95       	ret

00001190 <playRound>:
	*slide = getSliderPosition();
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
} 

int playRound(){
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
    11a8:	2e 97       	sbiw	r28, 0x0e	; 14
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	f8 94       	cli
    11ae:	de bf       	out	0x3e, r29	; 62
    11b0:	0f be       	out	0x3f, r0	; 63
    11b2:	cd bf       	out	0x3d, r28	; 61
	Ball ball;
	Slider slide;
	ballInit(&ball);
    11b4:	ce 01       	movw	r24, r28
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	0e 94 9f 07 	call	0xf3e	; 0xf3e <ballInit>
				return LEFT;
			}
		}
		else if (ball.posX == 1){
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
    11bc:	aa 24       	eor	r10, r10
    11be:	a3 94       	inc	r10
    11c0:	b1 2c       	mov	r11, r1
	Ball ball;
	Slider slide;
	ballInit(&ball);
	int time = 25;
	while(1){
		updateSliderPosition(&slide);
    11c2:	ce 01       	movw	r24, r28
    11c4:	0b 96       	adiw	r24, 0x0b	; 11
    11c6:	0e 94 33 08 	call	0x1066	; 0x1066 <updateSliderPosition>
		if (ball.posX >= 126){
    11ca:	09 81       	ldd	r16, Y+1	; 0x01
    11cc:	1a 81       	ldd	r17, Y+2	; 0x02
    11ce:	0e 37       	cpi	r16, 0x7E	; 126
    11d0:	11 05       	cpc	r17, r1
    11d2:	94 f0       	brlt	.+36     	; 0x11f8 <playRound+0x68>
			if (racketHit(&ball, slide.right) ){
    11d4:	ec 84       	ldd	r14, Y+12	; 0x0c
    11d6:	f1 2c       	mov	r15, r1
    11d8:	b7 01       	movw	r22, r14
    11da:	ce 01       	movw	r24, r28
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	0e 94 0c 07 	call	0xe18	; 0xe18 <racketHit>
    11e2:	8c 01       	movw	r16, r24
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	a9 f1       	breq	.+106    	; 0x1252 <playRound+0xc2>
				ball.dir = LEFT;
    11e8:	1a 86       	std	Y+10, r1	; 0x0a
    11ea:	19 86       	std	Y+9, r1	; 0x09
				updateBallAngle(&ball, slide.right);
    11ec:	b7 01       	movw	r22, r14
    11ee:	ce 01       	movw	r24, r28
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	0e 94 46 07 	call	0xe8c	; 0xe8c <updateBallAngle>
    11f6:	13 c0       	rjmp	.+38     	; 0x121e <playRound+0x8e>
			}
			else{
				return LEFT;
			}
		}
		else if (ball.posX == 1){
    11f8:	01 30       	cpi	r16, 0x01	; 1
    11fa:	11 05       	cpc	r17, r1
    11fc:	81 f4       	brne	.+32     	; 0x121e <playRound+0x8e>
			if (racketHit(&ball, slide.left) ){
    11fe:	eb 84       	ldd	r14, Y+11	; 0x0b
    1200:	f1 2c       	mov	r15, r1
    1202:	b7 01       	movw	r22, r14
    1204:	ce 01       	movw	r24, r28
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	0e 94 0c 07 	call	0xe18	; 0xe18 <racketHit>
    120c:	89 2b       	or	r24, r25
    120e:	09 f1       	breq	.+66     	; 0x1252 <playRound+0xc2>
				ball.dir = RIGHT;
    1210:	ba 86       	std	Y+10, r11	; 0x0a
    1212:	a9 86       	std	Y+9, r10	; 0x09
				updateBallAngle(&ball, slide.left);
    1214:	b7 01       	movw	r22, r14
    1216:	ce 01       	movw	r24, r28
    1218:	01 96       	adiw	r24, 0x01	; 1
    121a:	0e 94 46 07 	call	0xe8c	; 0xe8c <updateBallAngle>
			}
			else {
				return RIGHT;
			}
		}
		updateBallPosition(&ball);
    121e:	ce 01       	movw	r24, r28
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	0e 94 be 07 	call	0xf7c	; 0xf7c <updateBallPosition>
		updateScreen(ball, slide.left, slide.right);
    1226:	cc 84       	ldd	r12, Y+12	; 0x0c
    1228:	d1 2c       	mov	r13, r1
    122a:	eb 84       	ldd	r14, Y+11	; 0x0b
    122c:	f1 2c       	mov	r15, r1
    122e:	09 81       	ldd	r16, Y+1	; 0x01
    1230:	1a 81       	ldd	r17, Y+2	; 0x02
    1232:	2b 81       	ldd	r18, Y+3	; 0x03
    1234:	3c 81       	ldd	r19, Y+4	; 0x04
    1236:	4d 81       	ldd	r20, Y+5	; 0x05
    1238:	5e 81       	ldd	r21, Y+6	; 0x06
    123a:	6f 81       	ldd	r22, Y+7	; 0x07
    123c:	78 85       	ldd	r23, Y+8	; 0x08
    123e:	89 85       	ldd	r24, Y+9	; 0x09
    1240:	9a 85       	ldd	r25, Y+10	; 0x0a
    1242:	0e 94 50 08 	call	0x10a0	; 0x10a0 <updateScreen>
    1246:	89 e9       	ldi	r24, 0x99	; 153
    1248:	99 e0       	ldi	r25, 0x09	; 9
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	f1 f7       	brne	.-4      	; 0x124a <playRound+0xba>
    124e:	00 c0       	rjmp	.+0      	; 0x1250 <playRound+0xc0>
    1250:	b8 cf       	rjmp	.-144    	; 0x11c2 <playRound+0x32>
		_delay_ms(2);
	}
}
    1252:	c8 01       	movw	r24, r16
    1254:	2e 96       	adiw	r28, 0x0e	; 14
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	bf 90       	pop	r11
    1272:	af 90       	pop	r10
    1274:	08 95       	ret

00001276 <printScore>:
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
}
void printScore(int leftPoints, int rightPoints){
    1276:	0f 93       	push	r16
    1278:	1f 93       	push	r17
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	00 d0       	rcall	.+0      	; 0x1280 <printScore+0xa>
    1280:	1f 92       	push	r1
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
    1286:	08 2f       	mov	r16, r24
    1288:	16 2f       	mov	r17, r22
	oled_sram_clear_screen(0);
    128a:	80 e0       	ldi	r24, 0x00	; 0
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	char lp = leftPoints + '0';
    1292:	00 5d       	subi	r16, 0xD0	; 208
    1294:	09 83       	std	Y+1, r16	; 0x01
	char mid = '-';
    1296:	8d e2       	ldi	r24, 0x2D	; 45
    1298:	8a 83       	std	Y+2, r24	; 0x02
	char rp = rightPoints + '0';
    129a:	10 5d       	subi	r17, 0xD0	; 208
    129c:	1b 83       	std	Y+3, r17	; 0x03
	oled_sram_write_char(0, &lp, 2, 56);
    129e:	28 e3       	ldi	r18, 0x38	; 56
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	42 e0       	ldi	r20, 0x02	; 2
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	be 01       	movw	r22, r28
    12a8:	6f 5f       	subi	r22, 0xFF	; 255
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
	oled_sram_write_char(0, &mid, 2, 64);
    12b4:	20 e4       	ldi	r18, 0x40	; 64
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	42 e0       	ldi	r20, 0x02	; 2
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	be 01       	movw	r22, r28
    12be:	6e 5f       	subi	r22, 0xFE	; 254
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
	oled_sram_write_char(0, &rp, 2, 72);
    12ca:	28 e4       	ldi	r18, 0x48	; 72
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	42 e0       	ldi	r20, 0x02	; 2
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	be 01       	movw	r22, r28
    12d4:	6d 5f       	subi	r22, 0xFD	; 253
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
	oled_sram_flush(0);	
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_sram_flush>
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	08 95       	ret

000012f8 <printEndScreen>:
void printEndScreen(char *endMessage){
    12f8:	0f 93       	push	r16
    12fa:	1f 93       	push	r17
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	8c 01       	movw	r16, r24
	oled_sram_clear_screen(0);
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	for(int i = 0; i < 10; i++){
    130a:	c0 e0       	ldi	r28, 0x00	; 0
    130c:	d0 e0       	ldi	r29, 0x00	; 0
		if( i % 2 ){
    130e:	c0 ff       	sbrs	r28, 0
    1310:	11 c0       	rjmp	.+34     	; 0x1334 <printEndScreen+0x3c>
			oled_sram_write_string(0, endMessage, 2);
    1312:	42 e0       	ldi	r20, 0x02	; 2
    1314:	50 e0       	ldi	r21, 0x00	; 0
    1316:	b8 01       	movw	r22, r16
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_sram_write_string>
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	9f e7       	ldi	r25, 0x7F	; 127
    1324:	24 e0       	ldi	r18, 0x04	; 4
    1326:	81 50       	subi	r24, 0x01	; 1
    1328:	90 40       	sbci	r25, 0x00	; 0
    132a:	20 40       	sbci	r18, 0x00	; 0
    132c:	e1 f7       	brne	.-8      	; 0x1326 <printEndScreen+0x2e>
    132e:	00 c0       	rjmp	.+0      	; 0x1330 <printEndScreen+0x38>
    1330:	00 00       	nop
    1332:	09 c0       	rjmp	.+18     	; 0x1346 <printEndScreen+0x4e>
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	9f e7       	ldi	r25, 0x7F	; 127
    1338:	24 e0       	ldi	r18, 0x04	; 4
    133a:	81 50       	subi	r24, 0x01	; 1
    133c:	90 40       	sbci	r25, 0x00	; 0
    133e:	20 40       	sbci	r18, 0x00	; 0
    1340:	e1 f7       	brne	.-8      	; 0x133a <printEndScreen+0x42>
    1342:	00 c0       	rjmp	.+0      	; 0x1344 <printEndScreen+0x4c>
    1344:	00 00       	nop
	oled_sram_write_char(0, &rp, 2, 72);
	oled_sram_flush(0);	
}
void printEndScreen(char *endMessage){
	oled_sram_clear_screen(0);
	for(int i = 0; i < 10; i++){
    1346:	21 96       	adiw	r28, 0x01	; 1
    1348:	ca 30       	cpi	r28, 0x0A	; 10
    134a:	d1 05       	cpc	r29, r1
    134c:	01 f7       	brne	.-64     	; 0x130e <printEndScreen+0x16>
			oled_sram_write_string(0, endMessage, 2);
			_delay_ms(300);
		}
		else _delay_ms(300);
	}
	oled_sram_flush(0);	
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_sram_flush>
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <playPong>:

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	}
}

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
    1368:	00 e0       	ldi	r16, 0x00	; 0
    136a:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(2);
	}
}

void playPong(){
	int pointLeft = 0;
    136c:	c0 e0       	ldi	r28, 0x00	; 0
    136e:	d0 e0       	ldi	r29, 0x00	; 0
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
	while(1){
		printScore(pointLeft, pointRight);
    1370:	b8 01       	movw	r22, r16
    1372:	ce 01       	movw	r24, r28
    1374:	0e 94 3b 09 	call	0x1276	; 0x1276 <printScore>
    1378:	2f ef       	ldi	r18, 0xFF	; 255
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	9d e1       	ldi	r25, 0x1D	; 29
    137e:	21 50       	subi	r18, 0x01	; 1
    1380:	80 40       	sbci	r24, 0x00	; 0
    1382:	90 40       	sbci	r25, 0x00	; 0
    1384:	e1 f7       	brne	.-8      	; 0x137e <playPong+0x1e>
    1386:	00 c0       	rjmp	.+0      	; 0x1388 <playPong+0x28>
    1388:	00 00       	nop
		_delay_ms(2000);
		point = playRound();
    138a:	0e 94 c8 08 	call	0x1190	; 0x1190 <playRound>
		if (point == LEFT) pointLeft++;
    138e:	89 2b       	or	r24, r25
    1390:	11 f4       	brne	.+4      	; 0x1396 <playPong+0x36>
    1392:	21 96       	adiw	r28, 0x01	; 1
    1394:	02 c0       	rjmp	.+4      	; 0x139a <playPong+0x3a>
		else pointRight++;
    1396:	0f 5f       	subi	r16, 0xFF	; 255
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
		if(pointLeft == 5){
    139a:	c5 30       	cpi	r28, 0x05	; 5
    139c:	d1 05       	cpc	r29, r1
    139e:	29 f4       	brne	.+10     	; 0x13aa <playPong+0x4a>
			printEndScreen("Player Right won!");
    13a0:	8e e7       	ldi	r24, 0x7E	; 126
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <printEndScreen>
    13a8:	e3 cf       	rjmp	.-58     	; 0x1370 <playPong+0x10>
		}
		else if(pointRight == 5){
    13aa:	05 30       	cpi	r16, 0x05	; 5
    13ac:	11 05       	cpc	r17, r1
    13ae:	01 f7       	brne	.-64     	; 0x1370 <playPong+0x10>
			printEndScreen("Player Left won!");
    13b0:	80 e9       	ldi	r24, 0x90	; 144
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <printEndScreen>
    13b8:	db cf       	rjmp	.-74     	; 0x1370 <playPong+0x10>

000013ba <detectCollision>:
#include <util/delay.h>
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
    13ba:	fc 01       	movw	r30, r24
	while(s){
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	81 f0       	breq	.+32     	; 0x13e0 <detectCollision+0x26>
		if (s->x == x && s->y == y){
    13c0:	84 81       	ldd	r24, Z+4	; 0x04
    13c2:	95 81       	ldd	r25, Z+5	; 0x05
    13c4:	86 17       	cp	r24, r22
    13c6:	97 07       	cpc	r25, r23
    13c8:	29 f4       	brne	.+10     	; 0x13d4 <detectCollision+0x1a>
    13ca:	86 81       	ldd	r24, Z+6	; 0x06
    13cc:	97 81       	ldd	r25, Z+7	; 0x07
    13ce:	84 17       	cp	r24, r20
    13d0:	95 07       	cpc	r25, r21
    13d2:	49 f0       	breq	.+18     	; 0x13e6 <detectCollision+0x2c>
			return 1;
		}
		s = s->next;
    13d4:	01 90       	ld	r0, Z+
    13d6:	f0 81       	ld	r31, Z
    13d8:	e0 2d       	mov	r30, r0
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>


int detectCollision(segment *s, int x, int y){
	while(s){
    13da:	30 97       	sbiw	r30, 0x00	; 0
    13dc:	89 f7       	brne	.-30     	; 0x13c0 <detectCollision+0x6>
    13de:	06 c0       	rjmp	.+12     	; 0x13ec <detectCollision+0x32>
		if (s->x == x && s->y == y){
			return 1;
		}
		s = s->next;
	}
	return 0;
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	08 95       	ret


int detectCollision(segment *s, int x, int y){
	while(s){
		if (s->x == x && s->y == y){
			return 1;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	08 95       	ret
		}
		s = s->next;
	}
	return 0;
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	90 e0       	ldi	r25, 0x00	; 0
}
    13f0:	08 95       	ret

000013f2 <placeFood>:

void placeFood(int food[], segment *first){
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	ec 01       	movw	r28, r24
    13fc:	8b 01       	movw	r16, r22
	do{
		food[0] = rand() % 64;
    13fe:	0e 94 76 11 	call	0x22ec	; 0x22ec <rand>
    1402:	8f 73       	andi	r24, 0x3F	; 63
    1404:	90 78       	andi	r25, 0x80	; 128
    1406:	99 23       	and	r25, r25
    1408:	24 f4       	brge	.+8      	; 0x1412 <placeFood+0x20>
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	80 6c       	ori	r24, 0xC0	; 192
    140e:	9f 6f       	ori	r25, 0xFF	; 255
    1410:	01 96       	adiw	r24, 0x01	; 1
    1412:	99 83       	std	Y+1, r25	; 0x01
    1414:	88 83       	st	Y, r24
		food[1] = rand() % 32;
    1416:	0e 94 76 11 	call	0x22ec	; 0x22ec <rand>
    141a:	ac 01       	movw	r20, r24
    141c:	4f 71       	andi	r20, 0x1F	; 31
    141e:	50 78       	andi	r21, 0x80	; 128
    1420:	55 23       	and	r21, r21
    1422:	34 f4       	brge	.+12     	; 0x1430 <placeFood+0x3e>
    1424:	41 50       	subi	r20, 0x01	; 1
    1426:	51 09       	sbc	r21, r1
    1428:	40 6e       	ori	r20, 0xE0	; 224
    142a:	5f 6f       	ori	r21, 0xFF	; 255
    142c:	4f 5f       	subi	r20, 0xFF	; 255
    142e:	5f 4f       	sbci	r21, 0xFF	; 255
    1430:	5b 83       	std	Y+3, r21	; 0x03
    1432:	4a 83       	std	Y+2, r20	; 0x02
	} while(detectCollision(first, food[0], food[1]));
    1434:	68 81       	ld	r22, Y
    1436:	79 81       	ldd	r23, Y+1	; 0x01
    1438:	c8 01       	movw	r24, r16
    143a:	0e 94 dd 09 	call	0x13ba	; 0x13ba <detectCollision>
    143e:	89 2b       	or	r24, r25
    1440:	f1 f6       	brne	.-68     	; 0x13fe <placeFood+0xc>
}
    1442:	df 91       	pop	r29
    1444:	cf 91       	pop	r28
    1446:	1f 91       	pop	r17
    1448:	0f 91       	pop	r16
    144a:	08 95       	ret

0000144c <drawBoard>:

void drawBoard(segment *s, int food[]){
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	8c 01       	movw	r16, r24
    145e:	7b 01       	movw	r14, r22
	oled_sram_clear_screen(0);
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	while(s){
    1468:	01 15       	cp	r16, r1
    146a:	11 05       	cpc	r17, r1
    146c:	09 f4       	brne	.+2      	; 0x1470 <drawBoard+0x24>
    146e:	59 c0       	rjmp	.+178    	; 0x1522 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1470:	c1 2c       	mov	r12, r1
    1472:	d1 2c       	mov	r13, r1
    1474:	2a c0       	rjmp	.+84     	; 0x14ca <drawBoard+0x7e>
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
    1476:	f8 01       	movw	r30, r16
    1478:	46 81       	ldd	r20, Z+6	; 0x06
    147a:	57 81       	ldd	r21, Z+7	; 0x07
    147c:	44 0f       	add	r20, r20
    147e:	55 1f       	adc	r21, r21
    1480:	64 81       	ldd	r22, Z+4	; 0x04
    1482:	75 81       	ldd	r23, Z+5	; 0x05
    1484:	66 0f       	add	r22, r22
    1486:	77 1f       	adc	r23, r23
    1488:	6c 0f       	add	r22, r28
    148a:	7d 1f       	adc	r23, r29
    148c:	8c 2d       	mov	r24, r12
    148e:	9d 2d       	mov	r25, r13
    1490:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
    1494:	f8 01       	movw	r30, r16
    1496:	46 81       	ldd	r20, Z+6	; 0x06
    1498:	57 81       	ldd	r21, Z+7	; 0x07
    149a:	44 0f       	add	r20, r20
    149c:	55 1f       	adc	r21, r21
    149e:	4f 5f       	subi	r20, 0xFF	; 255
    14a0:	5f 4f       	sbci	r21, 0xFF	; 255
    14a2:	64 81       	ldd	r22, Z+4	; 0x04
    14a4:	75 81       	ldd	r23, Z+5	; 0x05
    14a6:	66 0f       	add	r22, r22
    14a8:	77 1f       	adc	r23, r23
    14aa:	6c 0f       	add	r22, r28
    14ac:	7d 1f       	adc	r23, r29
    14ae:	8c 2d       	mov	r24, r12
    14b0:	9d 2d       	mov	r25, r13
    14b2:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
    14b6:	21 96       	adiw	r28, 0x01	; 1
    14b8:	c2 30       	cpi	r28, 0x02	; 2
    14ba:	d1 05       	cpc	r29, r1
    14bc:	e1 f6       	brne	.-72     	; 0x1476 <drawBoard+0x2a>
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
    14be:	f8 01       	movw	r30, r16
    14c0:	00 81       	ld	r16, Z
    14c2:	11 81       	ldd	r17, Z+1	; 0x01
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
    14c4:	01 15       	cp	r16, r1
    14c6:	11 05       	cpc	r17, r1
    14c8:	61 f1       	breq	.+88     	; 0x1522 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    14ca:	cc 2d       	mov	r28, r12
    14cc:	dd 2d       	mov	r29, r13
    14ce:	d3 cf       	rjmp	.-90     	; 0x1476 <drawBoard+0x2a>
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
    14d0:	f7 01       	movw	r30, r14
    14d2:	42 81       	ldd	r20, Z+2	; 0x02
    14d4:	53 81       	ldd	r21, Z+3	; 0x03
    14d6:	44 0f       	add	r20, r20
    14d8:	55 1f       	adc	r21, r21
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	66 0f       	add	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	6c 0f       	add	r22, r28
    14e4:	7d 1f       	adc	r23, r29
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
    14ee:	f7 01       	movw	r30, r14
    14f0:	42 81       	ldd	r20, Z+2	; 0x02
    14f2:	53 81       	ldd	r21, Z+3	; 0x03
    14f4:	44 0f       	add	r20, r20
    14f6:	55 1f       	adc	r21, r21
    14f8:	4f 5f       	subi	r20, 0xFF	; 255
    14fa:	5f 4f       	sbci	r21, 0xFF	; 255
    14fc:	60 81       	ld	r22, Z
    14fe:	71 81       	ldd	r23, Z+1	; 0x01
    1500:	66 0f       	add	r22, r22
    1502:	77 1f       	adc	r23, r23
    1504:	6c 0f       	add	r22, r28
    1506:	7d 1f       	adc	r23, r29
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 76 06 	call	0xcec	; 0xcec <oled_sram_write_bit>
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
    1510:	21 96       	adiw	r28, 0x01	; 1
    1512:	c2 30       	cpi	r28, 0x02	; 2
    1514:	d1 05       	cpc	r29, r1
    1516:	e1 f6       	brne	.-72     	; 0x14d0 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_sram_flush>
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <drawBoard+0xdc>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1522:	c0 e0       	ldi	r28, 0x00	; 0
    1524:	d0 e0       	ldi	r29, 0x00	; 0
    1526:	d4 cf       	rjmp	.-88     	; 0x14d0 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
}
    1528:	df 91       	pop	r29
    152a:	cf 91       	pop	r28
    152c:	1f 91       	pop	r17
    152e:	0f 91       	pop	r16
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	08 95       	ret

0000153a <playSnake>:

void playSnake(){
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	cf 93       	push	r28
    154c:	df 93       	push	r29
    154e:	00 d0       	rcall	.+0      	; 0x1550 <playSnake+0x16>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <playSnake+0x18>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    1556:	88 e0       	ldi	r24, 0x08	; 8
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	0e 94 01 10 	call	0x2002	; 0x2002 <malloc>
    155e:	6c 01       	movw	r12, r24
	first->x = 32;
    1560:	80 e2       	ldi	r24, 0x20	; 32
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	f6 01       	movw	r30, r12
    1566:	95 83       	std	Z+5, r25	; 0x05
    1568:	84 83       	std	Z+4, r24	; 0x04
	first->y = 16;
    156a:	80 e1       	ldi	r24, 0x10	; 16
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	97 83       	std	Z+7, r25	; 0x07
    1570:	86 83       	std	Z+6, r24	; 0x06
	segment *last = first;
	first->next = 0;
    1572:	11 82       	std	Z+1, r1	; 0x01
    1574:	10 82       	st	Z, r1
	first->prev = 0;
    1576:	13 82       	std	Z+3, r1	; 0x03
    1578:	12 82       	std	Z+2, r1	; 0x02
	oled_sram_flush(0);
}

void playSnake(){
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    157a:	86 01       	movw	r16, r12
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
    157c:	68 94       	set
    157e:	aa 24       	eor	r10, r10
    1580:	a2 f8       	bld	r10, 2
    1582:	b1 2c       	mov	r11, r1
	for(int i = 0; i < 4; i++){
		segment *temp = (segment*)malloc(sizeof(segment));
    1584:	88 e0       	ldi	r24, 0x08	; 8
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 01 10 	call	0x2002	; 0x2002 <malloc>
    158c:	7c 01       	movw	r14, r24
		temp->x = first->x + 1;
    158e:	f8 01       	movw	r30, r16
    1590:	84 81       	ldd	r24, Z+4	; 0x04
    1592:	95 81       	ldd	r25, Z+5	; 0x05
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	f7 01       	movw	r30, r14
    1598:	95 83       	std	Z+5, r25	; 0x05
    159a:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    159c:	f8 01       	movw	r30, r16
    159e:	86 81       	ldd	r24, Z+6	; 0x06
    15a0:	97 81       	ldd	r25, Z+7	; 0x07
    15a2:	f7 01       	movw	r30, r14
    15a4:	97 83       	std	Z+7, r25	; 0x07
    15a6:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    15a8:	11 83       	std	Z+1, r17	; 0x01
    15aa:	00 83       	st	Z, r16
		temp->prev = 0;
    15ac:	13 82       	std	Z+3, r1	; 0x03
    15ae:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    15b0:	f8 01       	movw	r30, r16
    15b2:	f3 82       	std	Z+3, r15	; 0x03
    15b4:	e2 82       	std	Z+2, r14	; 0x02
    15b6:	f1 e0       	ldi	r31, 0x01	; 1
    15b8:	af 1a       	sub	r10, r31
    15ba:	b1 08       	sbc	r11, r1
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
	for(int i = 0; i < 4; i++){
    15bc:	a1 14       	cp	r10, r1
    15be:	b1 04       	cpc	r11, r1
    15c0:	11 f0       	breq	.+4      	; 0x15c6 <playSnake+0x8c>
		segment *temp = (segment*)malloc(sizeof(segment));
    15c2:	87 01       	movw	r16, r14
    15c4:	df cf       	rjmp	.-66     	; 0x1584 <playSnake+0x4a>
	}


	//initalize food
	int food[2];
	placeFood(food, first);
    15c6:	b7 01       	movw	r22, r14
    15c8:	ce 01       	movw	r24, r28
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <placeFood>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	//initalize food
	int food[2];
	placeFood(food, first);

	//initialize direction of snake
	direction S = RIGHT;
    15d8:	aa 24       	eor	r10, r10
    15da:	a3 94       	inc	r10
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    15dc:	70 c0       	rjmp	.+224    	; 0x16be <playSnake+0x184>
		Joystick j = getJoystickPosition();
    15de:	0e 94 87 03 	call	0x70e	; 0x70e <getJoystickPosition>
    15e2:	b8 2e       	mov	r11, r24
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    15e4:	24 e0       	ldi	r18, 0x04	; 4
    15e6:	82 13       	cpse	r24, r18
    15e8:	01 c0       	rjmp	.+2      	; 0x15ec <playSnake+0xb2>
    15ea:	ba 2c       	mov	r11, r10
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    15ec:	88 e0       	ldi	r24, 0x08	; 8
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 01 10 	call	0x2002	; 0x2002 <malloc>
    15f4:	8c 01       	movw	r16, r24
		
		temp->x = first->x;
    15f6:	f7 01       	movw	r30, r14
    15f8:	24 81       	ldd	r18, Z+4	; 0x04
    15fa:	35 81       	ldd	r19, Z+5	; 0x05
    15fc:	fc 01       	movw	r30, r24
    15fe:	35 83       	std	Z+5, r19	; 0x05
    1600:	24 83       	std	Z+4, r18	; 0x04
		temp->y = first->y;
    1602:	f7 01       	movw	r30, r14
    1604:	26 81       	ldd	r18, Z+6	; 0x06
    1606:	37 81       	ldd	r19, Z+7	; 0x07
    1608:	fc 01       	movw	r30, r24
    160a:	37 83       	std	Z+7, r19	; 0x07
    160c:	26 83       	std	Z+6, r18	; 0x06
		temp->next = first;
    160e:	f1 82       	std	Z+1, r15	; 0x01
    1610:	e0 82       	st	Z, r14
		temp->prev = 0;
    1612:	13 82       	std	Z+3, r1	; 0x03
    1614:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    1616:	f7 01       	movw	r30, r14
    1618:	93 83       	std	Z+3, r25	; 0x03
    161a:	82 83       	std	Z+2, r24	; 0x02

		//Find direction of snake movement
		switch (S){
    161c:	f1 e0       	ldi	r31, 0x01	; 1
    161e:	bf 16       	cp	r11, r31
    1620:	f1 f0       	breq	.+60     	; 0x165e <playSnake+0x124>
    1622:	bf 16       	cp	r11, r31
    1624:	a8 f0       	brcs	.+42     	; 0x1650 <playSnake+0x116>
    1626:	22 e0       	ldi	r18, 0x02	; 2
    1628:	b2 16       	cp	r11, r18
    162a:	21 f0       	breq	.+8      	; 0x1634 <playSnake+0xfa>
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	b8 16       	cp	r11, r24
    1630:	41 f0       	breq	.+16     	; 0x1642 <playSnake+0x108>
    1632:	1b c0       	rjmp	.+54     	; 0x166a <playSnake+0x130>
			case UP:
			temp->y--;
    1634:	fc 01       	movw	r30, r24
    1636:	86 81       	ldd	r24, Z+6	; 0x06
    1638:	97 81       	ldd	r25, Z+7	; 0x07
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	97 83       	std	Z+7, r25	; 0x07
    163e:	86 83       	std	Z+6, r24	; 0x06
			break;
    1640:	14 c0       	rjmp	.+40     	; 0x166a <playSnake+0x130>
			case DOWN:
			temp->y++;
    1642:	f8 01       	movw	r30, r16
    1644:	86 81       	ldd	r24, Z+6	; 0x06
    1646:	97 81       	ldd	r25, Z+7	; 0x07
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	97 83       	std	Z+7, r25	; 0x07
    164c:	86 83       	std	Z+6, r24	; 0x06
			break;
    164e:	0d c0       	rjmp	.+26     	; 0x166a <playSnake+0x130>
			case LEFT:
			temp->x--;
    1650:	fc 01       	movw	r30, r24
    1652:	84 81       	ldd	r24, Z+4	; 0x04
    1654:	95 81       	ldd	r25, Z+5	; 0x05
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	95 83       	std	Z+5, r25	; 0x05
    165a:	84 83       	std	Z+4, r24	; 0x04
			break;
    165c:	06 c0       	rjmp	.+12     	; 0x166a <playSnake+0x130>
			case RIGHT:
			temp->x++;
    165e:	fc 01       	movw	r30, r24
    1660:	84 81       	ldd	r24, Z+4	; 0x04
    1662:	95 81       	ldd	r25, Z+5	; 0x05
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	95 83       	std	Z+5, r25	; 0x05
    1668:	84 83       	std	Z+4, r24	; 0x04
			break;
		}

		first = temp;
		
		if(detectCollision(first, food[0], food[1])){//hit food?
    166a:	4b 81       	ldd	r20, Y+3	; 0x03
    166c:	5c 81       	ldd	r21, Y+4	; 0x04
    166e:	69 81       	ldd	r22, Y+1	; 0x01
    1670:	7a 81       	ldd	r23, Y+2	; 0x02
    1672:	c8 01       	movw	r24, r16
    1674:	0e 94 dd 09 	call	0x13ba	; 0x13ba <detectCollision>
    1678:	89 2b       	or	r24, r25
    167a:	31 f0       	breq	.+12     	; 0x1688 <playSnake+0x14e>
			placeFood(food, first);
    167c:	b8 01       	movw	r22, r16
    167e:	ce 01       	movw	r24, r28
    1680:	01 96       	adiw	r24, 0x01	; 1
    1682:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <placeFood>
    1686:	0a c0       	rjmp	.+20     	; 0x169c <playSnake+0x162>
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    1688:	f6 01       	movw	r30, r12
    168a:	e2 80       	ldd	r14, Z+2	; 0x02
    168c:	f3 80       	ldd	r15, Z+3	; 0x03
			last->next = 0;
    168e:	f7 01       	movw	r30, r14
    1690:	11 82       	std	Z+1, r1	; 0x01
    1692:	10 82       	st	Z, r1
			free(temp);
    1694:	c6 01       	movw	r24, r12
    1696:	0e 94 99 10 	call	0x2132	; 0x2132 <free>
			placeFood(food, first);
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    169a:	67 01       	movw	r12, r14
			last->next = 0;
			free(temp);
		}
		drawBoard(first, food);
    169c:	be 01       	movw	r22, r28
    169e:	6f 5f       	subi	r22, 0xFF	; 255
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	c8 01       	movw	r24, r16
    16a4:	0e 94 26 0a 	call	0x144c	; 0x144c <drawBoard>
    16a8:	ff ef       	ldi	r31, 0xFF	; 255
    16aa:	2f e7       	ldi	r18, 0x7F	; 127
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	f1 50       	subi	r31, 0x01	; 1
    16b0:	20 40       	sbci	r18, 0x00	; 0
    16b2:	80 40       	sbci	r24, 0x00	; 0
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <playSnake+0x174>
    16b6:	00 c0       	rjmp	.+0      	; 0x16b8 <playSnake+0x17e>
    16b8:	00 c0       	rjmp	.+0      	; 0x16ba <playSnake+0x180>
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
		Joystick j = getJoystickPosition();
		direction D = j.D;
		S = (D == NEUTRAL) ? S : D;
    16ba:	ab 2c       	mov	r10, r11
			break;
			default:
			break;
		}

		first = temp;
    16bc:	78 01       	movw	r14, r16

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    16be:	f7 01       	movw	r30, r14
    16c0:	46 81       	ldd	r20, Z+6	; 0x06
    16c2:	57 81       	ldd	r21, Z+7	; 0x07
    16c4:	64 81       	ldd	r22, Z+4	; 0x04
    16c6:	75 81       	ldd	r23, Z+5	; 0x05
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	0e 94 dd 09 	call	0x13ba	; 0x13ba <detectCollision>
    16d0:	89 2b       	or	r24, r25
    16d2:	09 f4       	brne	.+2      	; 0x16d6 <playSnake+0x19c>
    16d4:	84 cf       	rjmp	.-248    	; 0x15de <playSnake+0xa4>
		}
		drawBoard(first, food);
		_delay_ms(100);
	}

    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	ff 90       	pop	r15
    16e8:	ef 90       	pop	r14
    16ea:	df 90       	pop	r13
    16ec:	cf 90       	pop	r12
    16ee:	bf 90       	pop	r11
    16f0:	af 90       	pop	r10
    16f2:	08 95       	ret

000016f4 <make_screen>:
	}
	
	
}

make_screen(menu* m){
    16f4:	2f 92       	push	r2
    16f6:	3f 92       	push	r3
    16f8:	4f 92       	push	r4
    16fa:	5f 92       	push	r5
    16fc:	6f 92       	push	r6
    16fe:	7f 92       	push	r7
    1700:	8f 92       	push	r8
    1702:	9f 92       	push	r9
    1704:	af 92       	push	r10
    1706:	bf 92       	push	r11
    1708:	cf 92       	push	r12
    170a:	df 92       	push	r13
    170c:	ef 92       	push	r14
    170e:	ff 92       	push	r15
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	00 d0       	rcall	.+0      	; 0x171a <make_screen+0x26>
    171a:	1f 92       	push	r1
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 62 06 	call	0xcc4	; 0xcc4 <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
    172a:	d7 01       	movw	r26, r14
    172c:	6d 91       	ld	r22, X+
    172e:	7c 91       	ld	r23, X
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	50 e0       	ldi	r21, 0x00	; 0
    1734:	80 e0       	ldi	r24, 0x00	; 0
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 c2 05 	call	0xb84	; 0xb84 <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
    173c:	f7 01       	movw	r30, r14
    173e:	84 89       	ldd	r24, Z+20	; 0x14
    1740:	95 89       	ldd	r25, Z+21	; 0x15
    1742:	18 16       	cp	r1, r24
    1744:	19 06       	cpc	r1, r25
    1746:	0c f0       	brlt	.+2      	; 0x174a <make_screen+0x56>
    1748:	6d c0       	rjmp	.+218    	; 0x1824 <make_screen+0x130>
    174a:	c7 01       	movw	r24, r14
    174c:	04 96       	adiw	r24, 0x04	; 4
    174e:	9b 83       	std	Y+3, r25	; 0x03
    1750:	8a 83       	std	Y+2, r24	; 0x02
    1752:	cc 24       	eor	r12, r12
    1754:	c3 94       	inc	r12
    1756:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1758:	68 94       	set
    175a:	22 24       	eor	r2, r2
    175c:	23 f8       	bld	r2, 3
    175e:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
    1760:	aa 81       	ldd	r26, Y+2	; 0x02
    1762:	bb 81       	ldd	r27, Y+3	; 0x03
    1764:	6d 90       	ld	r6, X+
    1766:	7d 90       	ld	r7, X+
    1768:	bb 83       	std	Y+3, r27	; 0x03
    176a:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
    176c:	d3 01       	movw	r26, r6
    176e:	ed 91       	ld	r30, X+
    1770:	fc 91       	ld	r31, X
    1772:	80 81       	ld	r24, Z
    1774:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
    1776:	f7 01       	movw	r30, r14
    1778:	40 ad       	ldd	r20, Z+56	; 0x38
    177a:	51 ad       	ldd	r21, Z+57	; 0x39
    177c:	c6 01       	movw	r24, r12
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	48 17       	cp	r20, r24
    1782:	59 07       	cpc	r21, r25
    1784:	59 f4       	brne	.+22     	; 0x179c <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
    1786:	4f 5f       	subi	r20, 0xFF	; 255
    1788:	5f 4f       	sbci	r21, 0xFF	; 255
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	61 ea       	ldi	r22, 0xA1	; 161
    1790:	71 e0       	ldi	r23, 0x01	; 1
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
    179a:	09 c0       	rjmp	.+18     	; 0x17ae <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	a6 01       	movw	r20, r12
    17a2:	6c e3       	ldi	r22, 0x3C	; 60
    17a4:	71 e0       	ldi	r23, 0x01	; 1
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
		}
		while(c != '\0'){
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	88 23       	and	r24, r24
    17b2:	59 f1       	breq	.+86     	; 0x180a <make_screen+0x116>
    17b4:	68 94       	set
    17b6:	aa 24       	eor	r10, r10
    17b8:	a3 f8       	bld	r10, 3
    17ba:	b1 2c       	mov	r11, r1
    17bc:	88 24       	eor	r8, r8
    17be:	83 94       	inc	r8
    17c0:	91 2c       	mov	r9, r1
    17c2:	1e c0       	rjmp	.+60     	; 0x1800 <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    17c4:	24 2d       	mov	r18, r4
    17c6:	35 2d       	mov	r19, r5
    17c8:	a6 01       	movw	r20, r12
    17ca:	be 01       	movw	r22, r28
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
    17d8:	01 50       	subi	r16, 0x01	; 1
    17da:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    17dc:	01 15       	cp	r16, r1
    17de:	11 05       	cpc	r17, r1
    17e0:	89 f7       	brne	.-30     	; 0x17c4 <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
    17e2:	d3 01       	movw	r26, r6
    17e4:	ed 91       	ld	r30, X+
    17e6:	fc 91       	ld	r31, X
    17e8:	e8 0d       	add	r30, r8
    17ea:	f9 1d       	adc	r31, r9
    17ec:	80 81       	ld	r24, Z
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	bf ef       	ldi	r27, 0xFF	; 255
    17f2:	8b 1a       	sub	r8, r27
    17f4:	9b 0a       	sbc	r9, r27
    17f6:	e8 e0       	ldi	r30, 0x08	; 8
    17f8:	ae 0e       	add	r10, r30
    17fa:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
    17fc:	88 23       	and	r24, r24
    17fe:	29 f0       	breq	.+10     	; 0x180a <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    1800:	4a 2c       	mov	r4, r10
    1802:	5b 2c       	mov	r5, r11
    1804:	02 2d       	mov	r16, r2
    1806:	13 2d       	mov	r17, r3
    1808:	dd cf       	rjmp	.-70     	; 0x17c4 <make_screen+0xd0>
make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
    180a:	c6 01       	movw	r24, r12
    180c:	ff ef       	ldi	r31, 0xFF	; 255
    180e:	cf 1a       	sub	r12, r31
    1810:	df 0a       	sbc	r13, r31
    1812:	d7 01       	movw	r26, r14
    1814:	54 96       	adiw	r26, 0x14	; 20
    1816:	2d 91       	ld	r18, X+
    1818:	3c 91       	ld	r19, X
    181a:	55 97       	sbiw	r26, 0x15	; 21
    181c:	82 17       	cp	r24, r18
    181e:	93 07       	cpc	r25, r19
    1820:	0c f4       	brge	.+2      	; 0x1824 <make_screen+0x130>
    1822:	9e cf       	rjmp	.-196    	; 0x1760 <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    1824:	f7 01       	movw	r30, r14
    1826:	86 a9       	ldd	r24, Z+54	; 0x36
    1828:	97 a9       	ldd	r25, Z+55	; 0x37
    182a:	18 16       	cp	r1, r24
    182c:	19 06       	cpc	r1, r25
    182e:	0c f0       	brlt	.+2      	; 0x1832 <make_screen+0x13e>
    1830:	6f c0       	rjmp	.+222    	; 0x1910 <make_screen+0x21c>
    1832:	37 01       	movw	r6, r14
    1834:	f6 e1       	ldi	r31, 0x16	; 22
    1836:	6f 0e       	add	r6, r31
    1838:	71 1c       	adc	r7, r1
    183a:	c1 2c       	mov	r12, r1
    183c:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    183e:	68 94       	set
    1840:	44 24       	eor	r4, r4
    1842:	43 f8       	bld	r4, 3
    1844:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
    1846:	d3 01       	movw	r26, r6
    1848:	8d 90       	ld	r8, X+
    184a:	9d 90       	ld	r9, X+
    184c:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
    184e:	f4 01       	movw	r30, r8
    1850:	80 81       	ld	r24, Z
    1852:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
    1854:	d7 01       	movw	r26, r14
    1856:	d8 96       	adiw	r26, 0x38	; 56
    1858:	8d 91       	ld	r24, X+
    185a:	9c 91       	ld	r25, X
    185c:	d9 97       	sbiw	r26, 0x39	; 57
    185e:	54 96       	adiw	r26, 0x14	; 20
    1860:	4d 91       	ld	r20, X+
    1862:	5c 91       	ld	r21, X
    1864:	55 97       	sbiw	r26, 0x15	; 21
    1866:	4c 0d       	add	r20, r12
    1868:	5d 1d       	adc	r21, r13
    186a:	84 17       	cp	r24, r20
    186c:	95 07       	cpc	r25, r21
    186e:	61 f4       	brne	.+24     	; 0x1888 <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
    1870:	ac 01       	movw	r20, r24
    1872:	4f 5f       	subi	r20, 0xFF	; 255
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	61 ea       	ldi	r22, 0xA1	; 161
    187c:	71 e0       	ldi	r23, 0x01	; 1
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
    1886:	0a c0       	rjmp	.+20     	; 0x189c <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
    1888:	4f 5f       	subi	r20, 0xFF	; 255
    188a:	5f 4f       	sbci	r21, 0xFF	; 255
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	6c e3       	ldi	r22, 0x3C	; 60
    1892:	71 e0       	ldi	r23, 0x01	; 1
    1894:	80 e0       	ldi	r24, 0x00	; 0
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
		}
		while(c != '\0'){
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	88 23       	and	r24, r24
    18a0:	59 f1       	breq	.+86     	; 0x18f8 <make_screen+0x204>
    18a2:	bf ef       	ldi	r27, 0xFF	; 255
    18a4:	8b 1a       	sub	r8, r27
    18a6:	9b 0a       	sbc	r9, r27
    18a8:	68 94       	set
    18aa:	aa 24       	eor	r10, r10
    18ac:	a3 f8       	bld	r10, 3
    18ae:	b1 2c       	mov	r11, r1
    18b0:	1e c0       	rjmp	.+60     	; 0x18ee <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    18b2:	f7 01       	movw	r30, r14
    18b4:	44 89       	ldd	r20, Z+20	; 0x14
    18b6:	55 89       	ldd	r21, Z+21	; 0x15
    18b8:	4c 0d       	add	r20, r12
    18ba:	5d 1d       	adc	r21, r13
    18bc:	4f 5f       	subi	r20, 0xFF	; 255
    18be:	5f 4f       	sbci	r21, 0xFF	; 255
    18c0:	22 2d       	mov	r18, r2
    18c2:	33 2d       	mov	r19, r3
    18c4:	be 01       	movw	r22, r28
    18c6:	6f 5f       	subi	r22, 0xFF	; 255
    18c8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	0e 94 10 06 	call	0xc20	; 0xc20 <oled_sram_write_char>
    18d2:	01 50       	subi	r16, 0x01	; 1
    18d4:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    18d6:	01 15       	cp	r16, r1
    18d8:	11 05       	cpc	r17, r1
    18da:	59 f7       	brne	.-42     	; 0x18b2 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
    18dc:	d4 01       	movw	r26, r8
    18de:	8d 91       	ld	r24, X+
    18e0:	4d 01       	movw	r8, r26
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	b8 e0       	ldi	r27, 0x08	; 8
    18e6:	ab 0e       	add	r10, r27
    18e8:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
    18ea:	88 23       	and	r24, r24
    18ec:	29 f0       	breq	.+10     	; 0x18f8 <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    18ee:	2a 2c       	mov	r2, r10
    18f0:	3b 2c       	mov	r3, r11
    18f2:	04 2d       	mov	r16, r4
    18f4:	15 2d       	mov	r17, r5
    18f6:	dd cf       	rjmp	.-70     	; 0x18b2 <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    18f8:	ef ef       	ldi	r30, 0xFF	; 255
    18fa:	ce 1a       	sub	r12, r30
    18fc:	de 0a       	sbc	r13, r30
    18fe:	d7 01       	movw	r26, r14
    1900:	d6 96       	adiw	r26, 0x36	; 54
    1902:	8d 91       	ld	r24, X+
    1904:	9c 91       	ld	r25, X
    1906:	d7 97       	sbiw	r26, 0x37	; 55
    1908:	c8 16       	cp	r12, r24
    190a:	d9 06       	cpc	r13, r25
    190c:	0c f4       	brge	.+2      	; 0x1910 <make_screen+0x21c>
    190e:	9b cf       	rjmp	.-202    	; 0x1846 <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 62 05 	call	0xac4	; 0xac4 <oled_sram_flush>
} 
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	bf 90       	pop	r11
    1930:	af 90       	pop	r10
    1932:	9f 90       	pop	r9
    1934:	8f 90       	pop	r8
    1936:	7f 90       	pop	r7
    1938:	6f 90       	pop	r6
    193a:	5f 90       	pop	r5
    193c:	4f 90       	pop	r4
    193e:	3f 90       	pop	r3
    1940:	2f 90       	pop	r2
    1942:	08 95       	ret

00001944 <menuSystem>:
#include "../Game_files/draw.h"
#include "../Game_files/snake.h"
#include "../Game_files/pong.h"


void menuSystem(){
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	c8 5e       	subi	r28, 0xE8	; 232
    194e:	d1 09       	sbc	r29, r1
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 3};
    195a:	4a e3       	ldi	r20, 0x3A	; 58
    195c:	8e 01       	movw	r16, r28
    195e:	0f 5f       	subi	r16, 0xFF	; 255
    1960:	1f 4f       	sbci	r17, 0xFF	; 255
    1962:	d8 01       	movw	r26, r16
    1964:	e4 2f       	mov	r30, r20
    1966:	1d 92       	st	X+, r1
    1968:	ea 95       	dec	r30
    196a:	e9 f7       	brne	.-6      	; 0x1966 <menuSystem+0x22>
    196c:	83 ea       	ldi	r24, 0xA3	; 163
    196e:	91 e0       	ldi	r25, 0x01	; 1
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	83 e0       	ldi	r24, 0x03	; 3
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9e 8b       	std	Y+22, r25	; 0x16
    197a:	8d 8b       	std	Y+21, r24	; 0x15
		
	menu highscore = {.name = "Highscore", .parent = &mainMenu};
    197c:	de 01       	movw	r26, r28
    197e:	db 96       	adiw	r26, 0x3b	; 59
    1980:	fd 01       	movw	r30, r26
    1982:	24 2f       	mov	r18, r20
    1984:	11 92       	st	Z+, r1
    1986:	2a 95       	dec	r18
    1988:	e9 f7       	brne	.-6      	; 0x1984 <menuSystem+0x40>
    198a:	2d ea       	ldi	r18, 0xAD	; 173
    198c:	31 e0       	ldi	r19, 0x01	; 1
    198e:	3c af       	std	Y+60, r19	; 0x3c
    1990:	2b af       	std	Y+59, r18	; 0x3b
    1992:	1e af       	std	Y+62, r17	; 0x3e
    1994:	0d af       	std	Y+61, r16	; 0x3d
	mainMenu.submenues[1] = &highscore;
    1996:	b8 87       	std	Y+8, r27	; 0x08
    1998:	af 83       	std	Y+7, r26	; 0x07
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 3};
    199a:	fe 01       	movw	r30, r28
    199c:	eb 58       	subi	r30, 0x8B	; 139
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	df 01       	movw	r26, r30
    19a2:	24 2f       	mov	r18, r20
    19a4:	1d 92       	st	X+, r1
    19a6:	2a 95       	dec	r18
    19a8:	e9 f7       	brne	.-6      	; 0x19a4 <menuSystem+0x60>
    19aa:	27 eb       	ldi	r18, 0xB7	; 183
    19ac:	31 e0       	ldi	r19, 0x01	; 1
    19ae:	31 83       	std	Z+1, r19	; 0x01
    19b0:	20 83       	st	Z, r18
    19b2:	13 83       	std	Z+3, r17	; 0x03
    19b4:	02 83       	std	Z+2, r16	; 0x02
    19b6:	97 ab       	std	Z+55, r25	; 0x37
    19b8:	86 ab       	std	Z+54, r24	; 0x36
	playGame.functions[0] = &play_draw;
    19ba:	8d ed       	ldi	r24, 0xDD	; 221
    19bc:	96 e0       	ldi	r25, 0x06	; 6
    19be:	97 a3       	std	Z+39, r25	; 0x27
    19c0:	86 a3       	std	Z+38, r24	; 0x26
	playGame.functions[1] = &playSnake;
    19c2:	8d e9       	ldi	r24, 0x9D	; 157
    19c4:	9a e0       	ldi	r25, 0x0A	; 10
    19c6:	91 a7       	std	Z+41, r25	; 0x29
    19c8:	80 a7       	std	Z+40, r24	; 0x28
	playGame.functions[2] = &playPong;
    19ca:	80 eb       	ldi	r24, 0xB0	; 176
    19cc:	99 e0       	ldi	r25, 0x09	; 9
    19ce:	93 a7       	std	Z+43, r25	; 0x2b
    19d0:	82 a7       	std	Z+42, r24	; 0x2a
	playGame.name_functions[0] = "Draw";
    19d2:	81 ec       	ldi	r24, 0xC1	; 193
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	97 8b       	std	Z+23, r25	; 0x17
    19d8:	86 8b       	std	Z+22, r24	; 0x16
	playGame.name_functions[1] = "Snake";
    19da:	86 ec       	ldi	r24, 0xC6	; 198
    19dc:	91 e0       	ldi	r25, 0x01	; 1
    19de:	91 8f       	std	Z+25, r25	; 0x19
    19e0:	80 8f       	std	Z+24, r24	; 0x18
	playGame.name_functions[2] = "Pong";
    19e2:	8c ec       	ldi	r24, 0xCC	; 204
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	93 8f       	std	Z+27, r25	; 0x1b
    19e8:	82 8f       	std	Z+26, r24	; 0x1a
	mainMenu.submenues[0] = &playGame;
    19ea:	fe 83       	std	Y+6, r31	; 0x06
    19ec:	ed 83       	std	Y+5, r30	; 0x05
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 1};
    19ee:	fa 96       	adiw	r30, 0x3a	; 58
    19f0:	df 01       	movw	r26, r30
    19f2:	1d 92       	st	X+, r1
    19f4:	4a 95       	dec	r20
    19f6:	e9 f7       	brne	.-6      	; 0x19f2 <menuSystem+0xae>
    19f8:	81 ed       	ldi	r24, 0xD1	; 209
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	13 83       	std	Z+3, r17	; 0x03
    1a02:	02 83       	std	Z+2, r16	; 0x02
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	97 ab       	std	Z+55, r25	; 0x37
    1a0a:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrateJoystick;
    1a0c:	8f e1       	ldi	r24, 0x1F	; 31
    1a0e:	94 e0       	ldi	r25, 0x04	; 4
    1a10:	97 a3       	std	Z+39, r25	; 0x27
    1a12:	86 a3       	std	Z+38, r24	; 0x26
	settings.name_functions[0] = "Calibrate Joy";
    1a14:	8a ed       	ldi	r24, 0xDA	; 218
    1a16:	91 e0       	ldi	r25, 0x01	; 1
    1a18:	97 8b       	std	Z+23, r25	; 0x17
    1a1a:	86 8b       	std	Z+22, r24	; 0x16
	mainMenu.submenues[2] = &settings;
    1a1c:	fa 87       	std	Y+10, r31	; 0x0a
    1a1e:	e9 87       	std	Y+9, r30	; 0x09
	
	
	
	direction previousDirection = NEUTRAL;
    1a20:	68 94       	set
    1a22:	aa 24       	eor	r10, r10
    1a24:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1a26:	f8 01       	movw	r30, r16
    1a28:	c6 a8       	ldd	r12, Z+54	; 0x36
    1a2a:	d7 a8       	ldd	r13, Z+55	; 0x37
    1a2c:	e4 88       	ldd	r14, Z+20	; 0x14
    1a2e:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = getJoystickPosition();
    1a30:	0e 94 87 03 	call	0x70e	; 0x70e <getJoystickPosition>
    1a34:	b8 2e       	mov	r11, r24
		if (joy.D != previousDirection){
    1a36:	a8 16       	cp	r10, r24
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <menuSystem+0xf8>
    1a3a:	51 c0       	rjmp	.+162    	; 0x1ade <menuSystem+0x19a>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    1a3c:	b6 01       	movw	r22, r12
    1a3e:	6e 0d       	add	r22, r14
    1a40:	7f 1d       	adc	r23, r15
		joy = getJoystickPosition();
		if (joy.D != previousDirection){
			switch(joy.D){
    1a42:	f1 e0       	ldi	r31, 0x01	; 1
    1a44:	8f 17       	cp	r24, r31
    1a46:	69 f1       	breq	.+90     	; 0x1aa2 <menuSystem+0x15e>
    1a48:	8f 17       	cp	r24, r31
    1a4a:	08 f1       	brcs	.+66     	; 0x1a8e <menuSystem+0x14a>
    1a4c:	22 e0       	ldi	r18, 0x02	; 2
    1a4e:	82 17       	cp	r24, r18
    1a50:	21 f0       	breq	.+8      	; 0x1a5a <menuSystem+0x116>
    1a52:	83 e0       	ldi	r24, 0x03	; 3
    1a54:	b8 16       	cp	r11, r24
    1a56:	79 f0       	breq	.+30     	; 0x1a76 <menuSystem+0x132>
    1a58:	42 c0       	rjmp	.+132    	; 0x1ade <menuSystem+0x19a>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
    1a5a:	d8 01       	movw	r26, r16
    1a5c:	d8 96       	adiw	r26, 0x38	; 56
    1a5e:	8d 91       	ld	r24, X+
    1a60:	9c 91       	ld	r25, X
    1a62:	d9 97       	sbiw	r26, 0x39	; 57
    1a64:	01 97       	sbiw	r24, 0x01	; 1
    1a66:	86 0f       	add	r24, r22
    1a68:	97 1f       	adc	r25, r23
    1a6a:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
    1a6e:	f8 01       	movw	r30, r16
    1a70:	91 af       	std	Z+57, r25	; 0x39
    1a72:	80 af       	std	Z+56, r24	; 0x38
					break;
    1a74:	34 c0       	rjmp	.+104    	; 0x1ade <menuSystem+0x19a>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
    1a76:	d8 01       	movw	r26, r16
    1a78:	d8 96       	adiw	r26, 0x38	; 56
    1a7a:	8d 91       	ld	r24, X+
    1a7c:	9c 91       	ld	r25, X
    1a7e:	d9 97       	sbiw	r26, 0x39	; 57
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <__divmodhi4>
    1a86:	f8 01       	movw	r30, r16
    1a88:	91 af       	std	Z+57, r25	; 0x39
    1a8a:	80 af       	std	Z+56, r24	; 0x38
					break;
    1a8c:	28 c0       	rjmp	.+80     	; 0x1ade <menuSystem+0x19a>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
    1a8e:	d8 01       	movw	r26, r16
    1a90:	12 96       	adiw	r26, 0x02	; 2
    1a92:	2d 91       	ld	r18, X+
    1a94:	3c 91       	ld	r19, X
    1a96:	13 97       	sbiw	r26, 0x03	; 3
    1a98:	21 15       	cp	r18, r1
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	01 f1       	breq	.+64     	; 0x1ade <menuSystem+0x19a>
    1a9e:	89 01       	movw	r16, r18
    1aa0:	1e c0       	rjmp	.+60     	; 0x1ade <menuSystem+0x19a>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
    1aa2:	f8 01       	movw	r30, r16
    1aa4:	20 ad       	ldd	r18, Z+56	; 0x38
    1aa6:	31 ad       	ldd	r19, Z+57	; 0x39
    1aa8:	44 89       	ldd	r20, Z+20	; 0x14
    1aaa:	55 89       	ldd	r21, Z+21	; 0x15
    1aac:	24 17       	cp	r18, r20
    1aae:	35 07       	cpc	r19, r21
    1ab0:	4c f4       	brge	.+18     	; 0x1ac4 <menuSystem+0x180>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
    1ab2:	2e 5f       	subi	r18, 0xFE	; 254
    1ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab6:	22 0f       	add	r18, r18
    1ab8:	33 1f       	adc	r19, r19
    1aba:	e2 0f       	add	r30, r18
    1abc:	f3 1f       	adc	r31, r19
    1abe:	00 81       	ld	r16, Z
    1ac0:	11 81       	ldd	r17, Z+1	; 0x01
    1ac2:	0d c0       	rjmp	.+26     	; 0x1ade <menuSystem+0x19a>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
    1ac4:	24 1b       	sub	r18, r20
    1ac6:	35 0b       	sbc	r19, r21
    1ac8:	2d 5e       	subi	r18, 0xED	; 237
    1aca:	3f 4f       	sbci	r19, 0xFF	; 255
    1acc:	f9 01       	movw	r30, r18
    1ace:	ee 0f       	add	r30, r30
    1ad0:	ff 1f       	adc	r31, r31
    1ad2:	e0 0f       	add	r30, r16
    1ad4:	f1 1f       	adc	r31, r17
    1ad6:	01 90       	ld	r0, Z+
    1ad8:	f0 81       	ld	r31, Z
    1ada:	e0 2d       	mov	r30, r0
    1adc:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
    1ade:	c8 01       	movw	r24, r16
    1ae0:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <make_screen>
    1ae4:	ff ef       	ldi	r31, 0xFF	; 255
    1ae6:	2f e7       	ldi	r18, 0x7F	; 127
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	f1 50       	subi	r31, 0x01	; 1
    1aec:	20 40       	sbci	r18, 0x00	; 0
    1aee:	80 40       	sbci	r24, 0x00	; 0
    1af0:	e1 f7       	brne	.-8      	; 0x1aea <menuSystem+0x1a6>
    1af2:	00 c0       	rjmp	.+0      	; 0x1af4 <menuSystem+0x1b0>
    1af4:	00 c0       	rjmp	.+0      	; 0x1af6 <menuSystem+0x1b2>
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
    1af6:	ab 2c       	mov	r10, r11
    1af8:	96 cf       	rjmp	.-212    	; 0x1a26 <menuSystem+0xe2>

00001afa <__subsf3>:
    1afa:	50 58       	subi	r21, 0x80	; 128

00001afc <__addsf3>:
    1afc:	bb 27       	eor	r27, r27
    1afe:	aa 27       	eor	r26, r26
    1b00:	0e d0       	rcall	.+28     	; 0x1b1e <__addsf3x>
    1b02:	75 c1       	rjmp	.+746    	; 0x1dee <__fp_round>
    1b04:	66 d1       	rcall	.+716    	; 0x1dd2 <__fp_pscA>
    1b06:	30 f0       	brcs	.+12     	; 0x1b14 <__addsf3+0x18>
    1b08:	6b d1       	rcall	.+726    	; 0x1de0 <__fp_pscB>
    1b0a:	20 f0       	brcs	.+8      	; 0x1b14 <__addsf3+0x18>
    1b0c:	31 f4       	brne	.+12     	; 0x1b1a <__addsf3+0x1e>
    1b0e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b10:	11 f4       	brne	.+4      	; 0x1b16 <__addsf3+0x1a>
    1b12:	1e f4       	brtc	.+6      	; 0x1b1a <__addsf3+0x1e>
    1b14:	5b c1       	rjmp	.+694    	; 0x1dcc <__fp_nan>
    1b16:	0e f4       	brtc	.+2      	; 0x1b1a <__addsf3+0x1e>
    1b18:	e0 95       	com	r30
    1b1a:	e7 fb       	bst	r30, 7
    1b1c:	51 c1       	rjmp	.+674    	; 0x1dc0 <__fp_inf>

00001b1e <__addsf3x>:
    1b1e:	e9 2f       	mov	r30, r25
    1b20:	77 d1       	rcall	.+750    	; 0x1e10 <__fp_split3>
    1b22:	80 f3       	brcs	.-32     	; 0x1b04 <__addsf3+0x8>
    1b24:	ba 17       	cp	r27, r26
    1b26:	62 07       	cpc	r22, r18
    1b28:	73 07       	cpc	r23, r19
    1b2a:	84 07       	cpc	r24, r20
    1b2c:	95 07       	cpc	r25, r21
    1b2e:	18 f0       	brcs	.+6      	; 0x1b36 <__addsf3x+0x18>
    1b30:	71 f4       	brne	.+28     	; 0x1b4e <__addsf3x+0x30>
    1b32:	9e f5       	brtc	.+102    	; 0x1b9a <__addsf3x+0x7c>
    1b34:	8f c1       	rjmp	.+798    	; 0x1e54 <__fp_zero>
    1b36:	0e f4       	brtc	.+2      	; 0x1b3a <__addsf3x+0x1c>
    1b38:	e0 95       	com	r30
    1b3a:	0b 2e       	mov	r0, r27
    1b3c:	ba 2f       	mov	r27, r26
    1b3e:	a0 2d       	mov	r26, r0
    1b40:	0b 01       	movw	r0, r22
    1b42:	b9 01       	movw	r22, r18
    1b44:	90 01       	movw	r18, r0
    1b46:	0c 01       	movw	r0, r24
    1b48:	ca 01       	movw	r24, r20
    1b4a:	a0 01       	movw	r20, r0
    1b4c:	11 24       	eor	r1, r1
    1b4e:	ff 27       	eor	r31, r31
    1b50:	59 1b       	sub	r21, r25
    1b52:	99 f0       	breq	.+38     	; 0x1b7a <__addsf3x+0x5c>
    1b54:	59 3f       	cpi	r21, 0xF9	; 249
    1b56:	50 f4       	brcc	.+20     	; 0x1b6c <__addsf3x+0x4e>
    1b58:	50 3e       	cpi	r21, 0xE0	; 224
    1b5a:	68 f1       	brcs	.+90     	; 0x1bb6 <__addsf3x+0x98>
    1b5c:	1a 16       	cp	r1, r26
    1b5e:	f0 40       	sbci	r31, 0x00	; 0
    1b60:	a2 2f       	mov	r26, r18
    1b62:	23 2f       	mov	r18, r19
    1b64:	34 2f       	mov	r19, r20
    1b66:	44 27       	eor	r20, r20
    1b68:	58 5f       	subi	r21, 0xF8	; 248
    1b6a:	f3 cf       	rjmp	.-26     	; 0x1b52 <__addsf3x+0x34>
    1b6c:	46 95       	lsr	r20
    1b6e:	37 95       	ror	r19
    1b70:	27 95       	ror	r18
    1b72:	a7 95       	ror	r26
    1b74:	f0 40       	sbci	r31, 0x00	; 0
    1b76:	53 95       	inc	r21
    1b78:	c9 f7       	brne	.-14     	; 0x1b6c <__addsf3x+0x4e>
    1b7a:	7e f4       	brtc	.+30     	; 0x1b9a <__addsf3x+0x7c>
    1b7c:	1f 16       	cp	r1, r31
    1b7e:	ba 0b       	sbc	r27, r26
    1b80:	62 0b       	sbc	r22, r18
    1b82:	73 0b       	sbc	r23, r19
    1b84:	84 0b       	sbc	r24, r20
    1b86:	ba f0       	brmi	.+46     	; 0x1bb6 <__addsf3x+0x98>
    1b88:	91 50       	subi	r25, 0x01	; 1
    1b8a:	a1 f0       	breq	.+40     	; 0x1bb4 <__addsf3x+0x96>
    1b8c:	ff 0f       	add	r31, r31
    1b8e:	bb 1f       	adc	r27, r27
    1b90:	66 1f       	adc	r22, r22
    1b92:	77 1f       	adc	r23, r23
    1b94:	88 1f       	adc	r24, r24
    1b96:	c2 f7       	brpl	.-16     	; 0x1b88 <__addsf3x+0x6a>
    1b98:	0e c0       	rjmp	.+28     	; 0x1bb6 <__addsf3x+0x98>
    1b9a:	ba 0f       	add	r27, r26
    1b9c:	62 1f       	adc	r22, r18
    1b9e:	73 1f       	adc	r23, r19
    1ba0:	84 1f       	adc	r24, r20
    1ba2:	48 f4       	brcc	.+18     	; 0x1bb6 <__addsf3x+0x98>
    1ba4:	87 95       	ror	r24
    1ba6:	77 95       	ror	r23
    1ba8:	67 95       	ror	r22
    1baa:	b7 95       	ror	r27
    1bac:	f7 95       	ror	r31
    1bae:	9e 3f       	cpi	r25, 0xFE	; 254
    1bb0:	08 f0       	brcs	.+2      	; 0x1bb4 <__addsf3x+0x96>
    1bb2:	b3 cf       	rjmp	.-154    	; 0x1b1a <__addsf3+0x1e>
    1bb4:	93 95       	inc	r25
    1bb6:	88 0f       	add	r24, r24
    1bb8:	08 f0       	brcs	.+2      	; 0x1bbc <__addsf3x+0x9e>
    1bba:	99 27       	eor	r25, r25
    1bbc:	ee 0f       	add	r30, r30
    1bbe:	97 95       	ror	r25
    1bc0:	87 95       	ror	r24
    1bc2:	08 95       	ret

00001bc4 <__cmpsf2>:
    1bc4:	d9 d0       	rcall	.+434    	; 0x1d78 <__fp_cmp>
    1bc6:	08 f4       	brcc	.+2      	; 0x1bca <__cmpsf2+0x6>
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	08 95       	ret

00001bcc <__divsf3>:
    1bcc:	0c d0       	rcall	.+24     	; 0x1be6 <__divsf3x>
    1bce:	0f c1       	rjmp	.+542    	; 0x1dee <__fp_round>
    1bd0:	07 d1       	rcall	.+526    	; 0x1de0 <__fp_pscB>
    1bd2:	40 f0       	brcs	.+16     	; 0x1be4 <__divsf3+0x18>
    1bd4:	fe d0       	rcall	.+508    	; 0x1dd2 <__fp_pscA>
    1bd6:	30 f0       	brcs	.+12     	; 0x1be4 <__divsf3+0x18>
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <__divsf3+0x16>
    1bda:	5f 3f       	cpi	r21, 0xFF	; 255
    1bdc:	19 f0       	breq	.+6      	; 0x1be4 <__divsf3+0x18>
    1bde:	f0 c0       	rjmp	.+480    	; 0x1dc0 <__fp_inf>
    1be0:	51 11       	cpse	r21, r1
    1be2:	39 c1       	rjmp	.+626    	; 0x1e56 <__fp_szero>
    1be4:	f3 c0       	rjmp	.+486    	; 0x1dcc <__fp_nan>

00001be6 <__divsf3x>:
    1be6:	14 d1       	rcall	.+552    	; 0x1e10 <__fp_split3>
    1be8:	98 f3       	brcs	.-26     	; 0x1bd0 <__divsf3+0x4>

00001bea <__divsf3_pse>:
    1bea:	99 23       	and	r25, r25
    1bec:	c9 f3       	breq	.-14     	; 0x1be0 <__divsf3+0x14>
    1bee:	55 23       	and	r21, r21
    1bf0:	b1 f3       	breq	.-20     	; 0x1bde <__divsf3+0x12>
    1bf2:	95 1b       	sub	r25, r21
    1bf4:	55 0b       	sbc	r21, r21
    1bf6:	bb 27       	eor	r27, r27
    1bf8:	aa 27       	eor	r26, r26
    1bfa:	62 17       	cp	r22, r18
    1bfc:	73 07       	cpc	r23, r19
    1bfe:	84 07       	cpc	r24, r20
    1c00:	38 f0       	brcs	.+14     	; 0x1c10 <__divsf3_pse+0x26>
    1c02:	9f 5f       	subi	r25, 0xFF	; 255
    1c04:	5f 4f       	sbci	r21, 0xFF	; 255
    1c06:	22 0f       	add	r18, r18
    1c08:	33 1f       	adc	r19, r19
    1c0a:	44 1f       	adc	r20, r20
    1c0c:	aa 1f       	adc	r26, r26
    1c0e:	a9 f3       	breq	.-22     	; 0x1bfa <__divsf3_pse+0x10>
    1c10:	33 d0       	rcall	.+102    	; 0x1c78 <__divsf3_pse+0x8e>
    1c12:	0e 2e       	mov	r0, r30
    1c14:	3a f0       	brmi	.+14     	; 0x1c24 <__divsf3_pse+0x3a>
    1c16:	e0 e8       	ldi	r30, 0x80	; 128
    1c18:	30 d0       	rcall	.+96     	; 0x1c7a <__divsf3_pse+0x90>
    1c1a:	91 50       	subi	r25, 0x01	; 1
    1c1c:	50 40       	sbci	r21, 0x00	; 0
    1c1e:	e6 95       	lsr	r30
    1c20:	00 1c       	adc	r0, r0
    1c22:	ca f7       	brpl	.-14     	; 0x1c16 <__divsf3_pse+0x2c>
    1c24:	29 d0       	rcall	.+82     	; 0x1c78 <__divsf3_pse+0x8e>
    1c26:	fe 2f       	mov	r31, r30
    1c28:	27 d0       	rcall	.+78     	; 0x1c78 <__divsf3_pse+0x8e>
    1c2a:	66 0f       	add	r22, r22
    1c2c:	77 1f       	adc	r23, r23
    1c2e:	88 1f       	adc	r24, r24
    1c30:	bb 1f       	adc	r27, r27
    1c32:	26 17       	cp	r18, r22
    1c34:	37 07       	cpc	r19, r23
    1c36:	48 07       	cpc	r20, r24
    1c38:	ab 07       	cpc	r26, r27
    1c3a:	b0 e8       	ldi	r27, 0x80	; 128
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <__divsf3_pse+0x56>
    1c3e:	bb 0b       	sbc	r27, r27
    1c40:	80 2d       	mov	r24, r0
    1c42:	bf 01       	movw	r22, r30
    1c44:	ff 27       	eor	r31, r31
    1c46:	93 58       	subi	r25, 0x83	; 131
    1c48:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4a:	2a f0       	brmi	.+10     	; 0x1c56 <__divsf3_pse+0x6c>
    1c4c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c4e:	51 05       	cpc	r21, r1
    1c50:	68 f0       	brcs	.+26     	; 0x1c6c <__divsf3_pse+0x82>
    1c52:	b6 c0       	rjmp	.+364    	; 0x1dc0 <__fp_inf>
    1c54:	00 c1       	rjmp	.+512    	; 0x1e56 <__fp_szero>
    1c56:	5f 3f       	cpi	r21, 0xFF	; 255
    1c58:	ec f3       	brlt	.-6      	; 0x1c54 <__divsf3_pse+0x6a>
    1c5a:	98 3e       	cpi	r25, 0xE8	; 232
    1c5c:	dc f3       	brlt	.-10     	; 0x1c54 <__divsf3_pse+0x6a>
    1c5e:	86 95       	lsr	r24
    1c60:	77 95       	ror	r23
    1c62:	67 95       	ror	r22
    1c64:	b7 95       	ror	r27
    1c66:	f7 95       	ror	r31
    1c68:	9f 5f       	subi	r25, 0xFF	; 255
    1c6a:	c9 f7       	brne	.-14     	; 0x1c5e <__divsf3_pse+0x74>
    1c6c:	88 0f       	add	r24, r24
    1c6e:	91 1d       	adc	r25, r1
    1c70:	96 95       	lsr	r25
    1c72:	87 95       	ror	r24
    1c74:	97 f9       	bld	r25, 7
    1c76:	08 95       	ret
    1c78:	e1 e0       	ldi	r30, 0x01	; 1
    1c7a:	66 0f       	add	r22, r22
    1c7c:	77 1f       	adc	r23, r23
    1c7e:	88 1f       	adc	r24, r24
    1c80:	bb 1f       	adc	r27, r27
    1c82:	62 17       	cp	r22, r18
    1c84:	73 07       	cpc	r23, r19
    1c86:	84 07       	cpc	r24, r20
    1c88:	ba 07       	cpc	r27, r26
    1c8a:	20 f0       	brcs	.+8      	; 0x1c94 <__divsf3_pse+0xaa>
    1c8c:	62 1b       	sub	r22, r18
    1c8e:	73 0b       	sbc	r23, r19
    1c90:	84 0b       	sbc	r24, r20
    1c92:	ba 0b       	sbc	r27, r26
    1c94:	ee 1f       	adc	r30, r30
    1c96:	88 f7       	brcc	.-30     	; 0x1c7a <__divsf3_pse+0x90>
    1c98:	e0 95       	com	r30
    1c9a:	08 95       	ret

00001c9c <__fixsfsi>:
    1c9c:	04 d0       	rcall	.+8      	; 0x1ca6 <__fixunssfsi>
    1c9e:	68 94       	set
    1ca0:	b1 11       	cpse	r27, r1
    1ca2:	d9 c0       	rjmp	.+434    	; 0x1e56 <__fp_szero>
    1ca4:	08 95       	ret

00001ca6 <__fixunssfsi>:
    1ca6:	bc d0       	rcall	.+376    	; 0x1e20 <__fp_splitA>
    1ca8:	88 f0       	brcs	.+34     	; 0x1ccc <__fixunssfsi+0x26>
    1caa:	9f 57       	subi	r25, 0x7F	; 127
    1cac:	90 f0       	brcs	.+36     	; 0x1cd2 <__fixunssfsi+0x2c>
    1cae:	b9 2f       	mov	r27, r25
    1cb0:	99 27       	eor	r25, r25
    1cb2:	b7 51       	subi	r27, 0x17	; 23
    1cb4:	a0 f0       	brcs	.+40     	; 0x1cde <__fixunssfsi+0x38>
    1cb6:	d1 f0       	breq	.+52     	; 0x1cec <__fixunssfsi+0x46>
    1cb8:	66 0f       	add	r22, r22
    1cba:	77 1f       	adc	r23, r23
    1cbc:	88 1f       	adc	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	1a f0       	brmi	.+6      	; 0x1cc8 <__fixunssfsi+0x22>
    1cc2:	ba 95       	dec	r27
    1cc4:	c9 f7       	brne	.-14     	; 0x1cb8 <__fixunssfsi+0x12>
    1cc6:	12 c0       	rjmp	.+36     	; 0x1cec <__fixunssfsi+0x46>
    1cc8:	b1 30       	cpi	r27, 0x01	; 1
    1cca:	81 f0       	breq	.+32     	; 0x1cec <__fixunssfsi+0x46>
    1ccc:	c3 d0       	rcall	.+390    	; 0x1e54 <__fp_zero>
    1cce:	b1 e0       	ldi	r27, 0x01	; 1
    1cd0:	08 95       	ret
    1cd2:	c0 c0       	rjmp	.+384    	; 0x1e54 <__fp_zero>
    1cd4:	67 2f       	mov	r22, r23
    1cd6:	78 2f       	mov	r23, r24
    1cd8:	88 27       	eor	r24, r24
    1cda:	b8 5f       	subi	r27, 0xF8	; 248
    1cdc:	39 f0       	breq	.+14     	; 0x1cec <__fixunssfsi+0x46>
    1cde:	b9 3f       	cpi	r27, 0xF9	; 249
    1ce0:	cc f3       	brlt	.-14     	; 0x1cd4 <__fixunssfsi+0x2e>
    1ce2:	86 95       	lsr	r24
    1ce4:	77 95       	ror	r23
    1ce6:	67 95       	ror	r22
    1ce8:	b3 95       	inc	r27
    1cea:	d9 f7       	brne	.-10     	; 0x1ce2 <__fixunssfsi+0x3c>
    1cec:	3e f4       	brtc	.+14     	; 0x1cfc <__fixunssfsi+0x56>
    1cee:	90 95       	com	r25
    1cf0:	80 95       	com	r24
    1cf2:	70 95       	com	r23
    1cf4:	61 95       	neg	r22
    1cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1cfc:	08 95       	ret

00001cfe <__floatunsisf>:
    1cfe:	e8 94       	clt
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <__floatsisf+0x12>

00001d02 <__floatsisf>:
    1d02:	97 fb       	bst	r25, 7
    1d04:	3e f4       	brtc	.+14     	; 0x1d14 <__floatsisf+0x12>
    1d06:	90 95       	com	r25
    1d08:	80 95       	com	r24
    1d0a:	70 95       	com	r23
    1d0c:	61 95       	neg	r22
    1d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d10:	8f 4f       	sbci	r24, 0xFF	; 255
    1d12:	9f 4f       	sbci	r25, 0xFF	; 255
    1d14:	99 23       	and	r25, r25
    1d16:	a9 f0       	breq	.+42     	; 0x1d42 <__floatsisf+0x40>
    1d18:	f9 2f       	mov	r31, r25
    1d1a:	96 e9       	ldi	r25, 0x96	; 150
    1d1c:	bb 27       	eor	r27, r27
    1d1e:	93 95       	inc	r25
    1d20:	f6 95       	lsr	r31
    1d22:	87 95       	ror	r24
    1d24:	77 95       	ror	r23
    1d26:	67 95       	ror	r22
    1d28:	b7 95       	ror	r27
    1d2a:	f1 11       	cpse	r31, r1
    1d2c:	f8 cf       	rjmp	.-16     	; 0x1d1e <__floatsisf+0x1c>
    1d2e:	fa f4       	brpl	.+62     	; 0x1d6e <__floatsisf+0x6c>
    1d30:	bb 0f       	add	r27, r27
    1d32:	11 f4       	brne	.+4      	; 0x1d38 <__floatsisf+0x36>
    1d34:	60 ff       	sbrs	r22, 0
    1d36:	1b c0       	rjmp	.+54     	; 0x1d6e <__floatsisf+0x6c>
    1d38:	6f 5f       	subi	r22, 0xFF	; 255
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	16 c0       	rjmp	.+44     	; 0x1d6e <__floatsisf+0x6c>
    1d42:	88 23       	and	r24, r24
    1d44:	11 f0       	breq	.+4      	; 0x1d4a <__floatsisf+0x48>
    1d46:	96 e9       	ldi	r25, 0x96	; 150
    1d48:	11 c0       	rjmp	.+34     	; 0x1d6c <__floatsisf+0x6a>
    1d4a:	77 23       	and	r23, r23
    1d4c:	21 f0       	breq	.+8      	; 0x1d56 <__floatsisf+0x54>
    1d4e:	9e e8       	ldi	r25, 0x8E	; 142
    1d50:	87 2f       	mov	r24, r23
    1d52:	76 2f       	mov	r23, r22
    1d54:	05 c0       	rjmp	.+10     	; 0x1d60 <__floatsisf+0x5e>
    1d56:	66 23       	and	r22, r22
    1d58:	71 f0       	breq	.+28     	; 0x1d76 <__floatsisf+0x74>
    1d5a:	96 e8       	ldi	r25, 0x86	; 134
    1d5c:	86 2f       	mov	r24, r22
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	2a f0       	brmi	.+10     	; 0x1d6e <__floatsisf+0x6c>
    1d64:	9a 95       	dec	r25
    1d66:	66 0f       	add	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	88 1f       	adc	r24, r24
    1d6c:	da f7       	brpl	.-10     	; 0x1d64 <__floatsisf+0x62>
    1d6e:	88 0f       	add	r24, r24
    1d70:	96 95       	lsr	r25
    1d72:	87 95       	ror	r24
    1d74:	97 f9       	bld	r25, 7
    1d76:	08 95       	ret

00001d78 <__fp_cmp>:
    1d78:	99 0f       	add	r25, r25
    1d7a:	00 08       	sbc	r0, r0
    1d7c:	55 0f       	add	r21, r21
    1d7e:	aa 0b       	sbc	r26, r26
    1d80:	e0 e8       	ldi	r30, 0x80	; 128
    1d82:	fe ef       	ldi	r31, 0xFE	; 254
    1d84:	16 16       	cp	r1, r22
    1d86:	17 06       	cpc	r1, r23
    1d88:	e8 07       	cpc	r30, r24
    1d8a:	f9 07       	cpc	r31, r25
    1d8c:	c0 f0       	brcs	.+48     	; 0x1dbe <__fp_cmp+0x46>
    1d8e:	12 16       	cp	r1, r18
    1d90:	13 06       	cpc	r1, r19
    1d92:	e4 07       	cpc	r30, r20
    1d94:	f5 07       	cpc	r31, r21
    1d96:	98 f0       	brcs	.+38     	; 0x1dbe <__fp_cmp+0x46>
    1d98:	62 1b       	sub	r22, r18
    1d9a:	73 0b       	sbc	r23, r19
    1d9c:	84 0b       	sbc	r24, r20
    1d9e:	95 0b       	sbc	r25, r21
    1da0:	39 f4       	brne	.+14     	; 0x1db0 <__fp_cmp+0x38>
    1da2:	0a 26       	eor	r0, r26
    1da4:	61 f0       	breq	.+24     	; 0x1dbe <__fp_cmp+0x46>
    1da6:	23 2b       	or	r18, r19
    1da8:	24 2b       	or	r18, r20
    1daa:	25 2b       	or	r18, r21
    1dac:	21 f4       	brne	.+8      	; 0x1db6 <__fp_cmp+0x3e>
    1dae:	08 95       	ret
    1db0:	0a 26       	eor	r0, r26
    1db2:	09 f4       	brne	.+2      	; 0x1db6 <__fp_cmp+0x3e>
    1db4:	a1 40       	sbci	r26, 0x01	; 1
    1db6:	a6 95       	lsr	r26
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	81 1d       	adc	r24, r1
    1dbc:	81 1d       	adc	r24, r1
    1dbe:	08 95       	ret

00001dc0 <__fp_inf>:
    1dc0:	97 f9       	bld	r25, 7
    1dc2:	9f 67       	ori	r25, 0x7F	; 127
    1dc4:	80 e8       	ldi	r24, 0x80	; 128
    1dc6:	70 e0       	ldi	r23, 0x00	; 0
    1dc8:	60 e0       	ldi	r22, 0x00	; 0
    1dca:	08 95       	ret

00001dcc <__fp_nan>:
    1dcc:	9f ef       	ldi	r25, 0xFF	; 255
    1dce:	80 ec       	ldi	r24, 0xC0	; 192
    1dd0:	08 95       	ret

00001dd2 <__fp_pscA>:
    1dd2:	00 24       	eor	r0, r0
    1dd4:	0a 94       	dec	r0
    1dd6:	16 16       	cp	r1, r22
    1dd8:	17 06       	cpc	r1, r23
    1dda:	18 06       	cpc	r1, r24
    1ddc:	09 06       	cpc	r0, r25
    1dde:	08 95       	ret

00001de0 <__fp_pscB>:
    1de0:	00 24       	eor	r0, r0
    1de2:	0a 94       	dec	r0
    1de4:	12 16       	cp	r1, r18
    1de6:	13 06       	cpc	r1, r19
    1de8:	14 06       	cpc	r1, r20
    1dea:	05 06       	cpc	r0, r21
    1dec:	08 95       	ret

00001dee <__fp_round>:
    1dee:	09 2e       	mov	r0, r25
    1df0:	03 94       	inc	r0
    1df2:	00 0c       	add	r0, r0
    1df4:	11 f4       	brne	.+4      	; 0x1dfa <__fp_round+0xc>
    1df6:	88 23       	and	r24, r24
    1df8:	52 f0       	brmi	.+20     	; 0x1e0e <__fp_round+0x20>
    1dfa:	bb 0f       	add	r27, r27
    1dfc:	40 f4       	brcc	.+16     	; 0x1e0e <__fp_round+0x20>
    1dfe:	bf 2b       	or	r27, r31
    1e00:	11 f4       	brne	.+4      	; 0x1e06 <__fp_round+0x18>
    1e02:	60 ff       	sbrs	r22, 0
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <__fp_round+0x20>
    1e06:	6f 5f       	subi	r22, 0xFF	; 255
    1e08:	7f 4f       	sbci	r23, 0xFF	; 255
    1e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e0c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e0e:	08 95       	ret

00001e10 <__fp_split3>:
    1e10:	57 fd       	sbrc	r21, 7
    1e12:	90 58       	subi	r25, 0x80	; 128
    1e14:	44 0f       	add	r20, r20
    1e16:	55 1f       	adc	r21, r21
    1e18:	59 f0       	breq	.+22     	; 0x1e30 <__fp_splitA+0x10>
    1e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e1c:	71 f0       	breq	.+28     	; 0x1e3a <__fp_splitA+0x1a>
    1e1e:	47 95       	ror	r20

00001e20 <__fp_splitA>:
    1e20:	88 0f       	add	r24, r24
    1e22:	97 fb       	bst	r25, 7
    1e24:	99 1f       	adc	r25, r25
    1e26:	61 f0       	breq	.+24     	; 0x1e40 <__fp_splitA+0x20>
    1e28:	9f 3f       	cpi	r25, 0xFF	; 255
    1e2a:	79 f0       	breq	.+30     	; 0x1e4a <__fp_splitA+0x2a>
    1e2c:	87 95       	ror	r24
    1e2e:	08 95       	ret
    1e30:	12 16       	cp	r1, r18
    1e32:	13 06       	cpc	r1, r19
    1e34:	14 06       	cpc	r1, r20
    1e36:	55 1f       	adc	r21, r21
    1e38:	f2 cf       	rjmp	.-28     	; 0x1e1e <__fp_split3+0xe>
    1e3a:	46 95       	lsr	r20
    1e3c:	f1 df       	rcall	.-30     	; 0x1e20 <__fp_splitA>
    1e3e:	08 c0       	rjmp	.+16     	; 0x1e50 <__fp_splitA+0x30>
    1e40:	16 16       	cp	r1, r22
    1e42:	17 06       	cpc	r1, r23
    1e44:	18 06       	cpc	r1, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	f1 cf       	rjmp	.-30     	; 0x1e2c <__fp_splitA+0xc>
    1e4a:	86 95       	lsr	r24
    1e4c:	71 05       	cpc	r23, r1
    1e4e:	61 05       	cpc	r22, r1
    1e50:	08 94       	sec
    1e52:	08 95       	ret

00001e54 <__fp_zero>:
    1e54:	e8 94       	clt

00001e56 <__fp_szero>:
    1e56:	bb 27       	eor	r27, r27
    1e58:	66 27       	eor	r22, r22
    1e5a:	77 27       	eor	r23, r23
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	97 f9       	bld	r25, 7
    1e60:	08 95       	ret

00001e62 <__gesf2>:
    1e62:	8a df       	rcall	.-236    	; 0x1d78 <__fp_cmp>
    1e64:	08 f4       	brcc	.+2      	; 0x1e68 <__gesf2+0x6>
    1e66:	8f ef       	ldi	r24, 0xFF	; 255
    1e68:	08 95       	ret

00001e6a <__mulsf3>:
    1e6a:	0b d0       	rcall	.+22     	; 0x1e82 <__mulsf3x>
    1e6c:	c0 cf       	rjmp	.-128    	; 0x1dee <__fp_round>
    1e6e:	b1 df       	rcall	.-158    	; 0x1dd2 <__fp_pscA>
    1e70:	28 f0       	brcs	.+10     	; 0x1e7c <__mulsf3+0x12>
    1e72:	b6 df       	rcall	.-148    	; 0x1de0 <__fp_pscB>
    1e74:	18 f0       	brcs	.+6      	; 0x1e7c <__mulsf3+0x12>
    1e76:	95 23       	and	r25, r21
    1e78:	09 f0       	breq	.+2      	; 0x1e7c <__mulsf3+0x12>
    1e7a:	a2 cf       	rjmp	.-188    	; 0x1dc0 <__fp_inf>
    1e7c:	a7 cf       	rjmp	.-178    	; 0x1dcc <__fp_nan>
    1e7e:	11 24       	eor	r1, r1
    1e80:	ea cf       	rjmp	.-44     	; 0x1e56 <__fp_szero>

00001e82 <__mulsf3x>:
    1e82:	c6 df       	rcall	.-116    	; 0x1e10 <__fp_split3>
    1e84:	a0 f3       	brcs	.-24     	; 0x1e6e <__mulsf3+0x4>

00001e86 <__mulsf3_pse>:
    1e86:	95 9f       	mul	r25, r21
    1e88:	d1 f3       	breq	.-12     	; 0x1e7e <__mulsf3+0x14>
    1e8a:	95 0f       	add	r25, r21
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	55 1f       	adc	r21, r21
    1e90:	62 9f       	mul	r22, r18
    1e92:	f0 01       	movw	r30, r0
    1e94:	72 9f       	mul	r23, r18
    1e96:	bb 27       	eor	r27, r27
    1e98:	f0 0d       	add	r31, r0
    1e9a:	b1 1d       	adc	r27, r1
    1e9c:	63 9f       	mul	r22, r19
    1e9e:	aa 27       	eor	r26, r26
    1ea0:	f0 0d       	add	r31, r0
    1ea2:	b1 1d       	adc	r27, r1
    1ea4:	aa 1f       	adc	r26, r26
    1ea6:	64 9f       	mul	r22, r20
    1ea8:	66 27       	eor	r22, r22
    1eaa:	b0 0d       	add	r27, r0
    1eac:	a1 1d       	adc	r26, r1
    1eae:	66 1f       	adc	r22, r22
    1eb0:	82 9f       	mul	r24, r18
    1eb2:	22 27       	eor	r18, r18
    1eb4:	b0 0d       	add	r27, r0
    1eb6:	a1 1d       	adc	r26, r1
    1eb8:	62 1f       	adc	r22, r18
    1eba:	73 9f       	mul	r23, r19
    1ebc:	b0 0d       	add	r27, r0
    1ebe:	a1 1d       	adc	r26, r1
    1ec0:	62 1f       	adc	r22, r18
    1ec2:	83 9f       	mul	r24, r19
    1ec4:	a0 0d       	add	r26, r0
    1ec6:	61 1d       	adc	r22, r1
    1ec8:	22 1f       	adc	r18, r18
    1eca:	74 9f       	mul	r23, r20
    1ecc:	33 27       	eor	r19, r19
    1ece:	a0 0d       	add	r26, r0
    1ed0:	61 1d       	adc	r22, r1
    1ed2:	23 1f       	adc	r18, r19
    1ed4:	84 9f       	mul	r24, r20
    1ed6:	60 0d       	add	r22, r0
    1ed8:	21 1d       	adc	r18, r1
    1eda:	82 2f       	mov	r24, r18
    1edc:	76 2f       	mov	r23, r22
    1ede:	6a 2f       	mov	r22, r26
    1ee0:	11 24       	eor	r1, r1
    1ee2:	9f 57       	subi	r25, 0x7F	; 127
    1ee4:	50 40       	sbci	r21, 0x00	; 0
    1ee6:	8a f0       	brmi	.+34     	; 0x1f0a <__mulsf3_pse+0x84>
    1ee8:	e1 f0       	breq	.+56     	; 0x1f22 <__mulsf3_pse+0x9c>
    1eea:	88 23       	and	r24, r24
    1eec:	4a f0       	brmi	.+18     	; 0x1f00 <__mulsf3_pse+0x7a>
    1eee:	ee 0f       	add	r30, r30
    1ef0:	ff 1f       	adc	r31, r31
    1ef2:	bb 1f       	adc	r27, r27
    1ef4:	66 1f       	adc	r22, r22
    1ef6:	77 1f       	adc	r23, r23
    1ef8:	88 1f       	adc	r24, r24
    1efa:	91 50       	subi	r25, 0x01	; 1
    1efc:	50 40       	sbci	r21, 0x00	; 0
    1efe:	a9 f7       	brne	.-22     	; 0x1eea <__mulsf3_pse+0x64>
    1f00:	9e 3f       	cpi	r25, 0xFE	; 254
    1f02:	51 05       	cpc	r21, r1
    1f04:	70 f0       	brcs	.+28     	; 0x1f22 <__mulsf3_pse+0x9c>
    1f06:	5c cf       	rjmp	.-328    	; 0x1dc0 <__fp_inf>
    1f08:	a6 cf       	rjmp	.-180    	; 0x1e56 <__fp_szero>
    1f0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f0c:	ec f3       	brlt	.-6      	; 0x1f08 <__mulsf3_pse+0x82>
    1f0e:	98 3e       	cpi	r25, 0xE8	; 232
    1f10:	dc f3       	brlt	.-10     	; 0x1f08 <__mulsf3_pse+0x82>
    1f12:	86 95       	lsr	r24
    1f14:	77 95       	ror	r23
    1f16:	67 95       	ror	r22
    1f18:	b7 95       	ror	r27
    1f1a:	f7 95       	ror	r31
    1f1c:	e7 95       	ror	r30
    1f1e:	9f 5f       	subi	r25, 0xFF	; 255
    1f20:	c1 f7       	brne	.-16     	; 0x1f12 <__mulsf3_pse+0x8c>
    1f22:	fe 2b       	or	r31, r30
    1f24:	88 0f       	add	r24, r24
    1f26:	91 1d       	adc	r25, r1
    1f28:	96 95       	lsr	r25
    1f2a:	87 95       	ror	r24
    1f2c:	97 f9       	bld	r25, 7
    1f2e:	08 95       	ret

00001f30 <__divmodhi4>:
    1f30:	97 fb       	bst	r25, 7
    1f32:	07 2e       	mov	r0, r23
    1f34:	16 f4       	brtc	.+4      	; 0x1f3a <__divmodhi4+0xa>
    1f36:	00 94       	com	r0
    1f38:	07 d0       	rcall	.+14     	; 0x1f48 <__divmodhi4_neg1>
    1f3a:	77 fd       	sbrc	r23, 7
    1f3c:	09 d0       	rcall	.+18     	; 0x1f50 <__divmodhi4_neg2>
    1f3e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__udivmodhi4>
    1f42:	07 fc       	sbrc	r0, 7
    1f44:	05 d0       	rcall	.+10     	; 0x1f50 <__divmodhi4_neg2>
    1f46:	3e f4       	brtc	.+14     	; 0x1f56 <__divmodhi4_exit>

00001f48 <__divmodhi4_neg1>:
    1f48:	90 95       	com	r25
    1f4a:	81 95       	neg	r24
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	08 95       	ret

00001f50 <__divmodhi4_neg2>:
    1f50:	70 95       	com	r23
    1f52:	61 95       	neg	r22
    1f54:	7f 4f       	sbci	r23, 0xFF	; 255

00001f56 <__divmodhi4_exit>:
    1f56:	08 95       	ret

00001f58 <__divmodsi4>:
    1f58:	05 2e       	mov	r0, r21
    1f5a:	97 fb       	bst	r25, 7
    1f5c:	1e f4       	brtc	.+6      	; 0x1f64 <__divmodsi4+0xc>
    1f5e:	00 94       	com	r0
    1f60:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <__negsi2>
    1f64:	57 fd       	sbrc	r21, 7
    1f66:	07 d0       	rcall	.+14     	; 0x1f76 <__divmodsi4_neg2>
    1f68:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__udivmodsi4>
    1f6c:	07 fc       	sbrc	r0, 7
    1f6e:	03 d0       	rcall	.+6      	; 0x1f76 <__divmodsi4_neg2>
    1f70:	4e f4       	brtc	.+18     	; 0x1f84 <__divmodsi4_exit>
    1f72:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__negsi2>

00001f76 <__divmodsi4_neg2>:
    1f76:	50 95       	com	r21
    1f78:	40 95       	com	r20
    1f7a:	30 95       	com	r19
    1f7c:	21 95       	neg	r18
    1f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f80:	4f 4f       	sbci	r20, 0xFF	; 255
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255

00001f84 <__divmodsi4_exit>:
    1f84:	08 95       	ret

00001f86 <__negsi2>:
    1f86:	90 95       	com	r25
    1f88:	80 95       	com	r24
    1f8a:	70 95       	com	r23
    1f8c:	61 95       	neg	r22
    1f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f90:	8f 4f       	sbci	r24, 0xFF	; 255
    1f92:	9f 4f       	sbci	r25, 0xFF	; 255
    1f94:	08 95       	ret

00001f96 <__udivmodhi4>:
    1f96:	aa 1b       	sub	r26, r26
    1f98:	bb 1b       	sub	r27, r27
    1f9a:	51 e1       	ldi	r21, 0x11	; 17
    1f9c:	07 c0       	rjmp	.+14     	; 0x1fac <__udivmodhi4_ep>

00001f9e <__udivmodhi4_loop>:
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	a6 17       	cp	r26, r22
    1fa4:	b7 07       	cpc	r27, r23
    1fa6:	10 f0       	brcs	.+4      	; 0x1fac <__udivmodhi4_ep>
    1fa8:	a6 1b       	sub	r26, r22
    1faa:	b7 0b       	sbc	r27, r23

00001fac <__udivmodhi4_ep>:
    1fac:	88 1f       	adc	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	5a 95       	dec	r21
    1fb2:	a9 f7       	brne	.-22     	; 0x1f9e <__udivmodhi4_loop>
    1fb4:	80 95       	com	r24
    1fb6:	90 95       	com	r25
    1fb8:	bc 01       	movw	r22, r24
    1fba:	cd 01       	movw	r24, r26
    1fbc:	08 95       	ret

00001fbe <__udivmodsi4>:
    1fbe:	a1 e2       	ldi	r26, 0x21	; 33
    1fc0:	1a 2e       	mov	r1, r26
    1fc2:	aa 1b       	sub	r26, r26
    1fc4:	bb 1b       	sub	r27, r27
    1fc6:	fd 01       	movw	r30, r26
    1fc8:	0d c0       	rjmp	.+26     	; 0x1fe4 <__udivmodsi4_ep>

00001fca <__udivmodsi4_loop>:
    1fca:	aa 1f       	adc	r26, r26
    1fcc:	bb 1f       	adc	r27, r27
    1fce:	ee 1f       	adc	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	a2 17       	cp	r26, r18
    1fd4:	b3 07       	cpc	r27, r19
    1fd6:	e4 07       	cpc	r30, r20
    1fd8:	f5 07       	cpc	r31, r21
    1fda:	20 f0       	brcs	.+8      	; 0x1fe4 <__udivmodsi4_ep>
    1fdc:	a2 1b       	sub	r26, r18
    1fde:	b3 0b       	sbc	r27, r19
    1fe0:	e4 0b       	sbc	r30, r20
    1fe2:	f5 0b       	sbc	r31, r21

00001fe4 <__udivmodsi4_ep>:
    1fe4:	66 1f       	adc	r22, r22
    1fe6:	77 1f       	adc	r23, r23
    1fe8:	88 1f       	adc	r24, r24
    1fea:	99 1f       	adc	r25, r25
    1fec:	1a 94       	dec	r1
    1fee:	69 f7       	brne	.-38     	; 0x1fca <__udivmodsi4_loop>
    1ff0:	60 95       	com	r22
    1ff2:	70 95       	com	r23
    1ff4:	80 95       	com	r24
    1ff6:	90 95       	com	r25
    1ff8:	9b 01       	movw	r18, r22
    1ffa:	ac 01       	movw	r20, r24
    1ffc:	bd 01       	movw	r22, r26
    1ffe:	cf 01       	movw	r24, r30
    2000:	08 95       	ret

00002002 <malloc>:
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	82 30       	cpi	r24, 0x02	; 2
    2008:	91 05       	cpc	r25, r1
    200a:	10 f4       	brcc	.+4      	; 0x2010 <malloc+0xe>
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	e0 91 ea 01 	lds	r30, 0x01EA
    2014:	f0 91 eb 01 	lds	r31, 0x01EB
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	a0 e0       	ldi	r26, 0x00	; 0
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	30 97       	sbiw	r30, 0x00	; 0
    2022:	39 f1       	breq	.+78     	; 0x2072 <malloc+0x70>
    2024:	40 81       	ld	r20, Z
    2026:	51 81       	ldd	r21, Z+1	; 0x01
    2028:	48 17       	cp	r20, r24
    202a:	59 07       	cpc	r21, r25
    202c:	b8 f0       	brcs	.+46     	; 0x205c <malloc+0x5a>
    202e:	48 17       	cp	r20, r24
    2030:	59 07       	cpc	r21, r25
    2032:	71 f4       	brne	.+28     	; 0x2050 <malloc+0x4e>
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	10 97       	sbiw	r26, 0x00	; 0
    203a:	29 f0       	breq	.+10     	; 0x2046 <malloc+0x44>
    203c:	13 96       	adiw	r26, 0x03	; 3
    203e:	9c 93       	st	X, r25
    2040:	8e 93       	st	-X, r24
    2042:	12 97       	sbiw	r26, 0x02	; 2
    2044:	2c c0       	rjmp	.+88     	; 0x209e <malloc+0x9c>
    2046:	90 93 eb 01 	sts	0x01EB, r25
    204a:	80 93 ea 01 	sts	0x01EA, r24
    204e:	27 c0       	rjmp	.+78     	; 0x209e <malloc+0x9c>
    2050:	21 15       	cp	r18, r1
    2052:	31 05       	cpc	r19, r1
    2054:	31 f0       	breq	.+12     	; 0x2062 <malloc+0x60>
    2056:	42 17       	cp	r20, r18
    2058:	53 07       	cpc	r21, r19
    205a:	18 f0       	brcs	.+6      	; 0x2062 <malloc+0x60>
    205c:	a9 01       	movw	r20, r18
    205e:	db 01       	movw	r26, r22
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <malloc+0x62>
    2062:	ef 01       	movw	r28, r30
    2064:	9a 01       	movw	r18, r20
    2066:	bd 01       	movw	r22, r26
    2068:	df 01       	movw	r26, r30
    206a:	02 80       	ldd	r0, Z+2	; 0x02
    206c:	f3 81       	ldd	r31, Z+3	; 0x03
    206e:	e0 2d       	mov	r30, r0
    2070:	d7 cf       	rjmp	.-82     	; 0x2020 <malloc+0x1e>
    2072:	21 15       	cp	r18, r1
    2074:	31 05       	cpc	r19, r1
    2076:	f9 f0       	breq	.+62     	; 0x20b6 <malloc+0xb4>
    2078:	28 1b       	sub	r18, r24
    207a:	39 0b       	sbc	r19, r25
    207c:	24 30       	cpi	r18, 0x04	; 4
    207e:	31 05       	cpc	r19, r1
    2080:	80 f4       	brcc	.+32     	; 0x20a2 <malloc+0xa0>
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	61 15       	cp	r22, r1
    2088:	71 05       	cpc	r23, r1
    208a:	21 f0       	breq	.+8      	; 0x2094 <malloc+0x92>
    208c:	fb 01       	movw	r30, r22
    208e:	93 83       	std	Z+3, r25	; 0x03
    2090:	82 83       	std	Z+2, r24	; 0x02
    2092:	04 c0       	rjmp	.+8      	; 0x209c <malloc+0x9a>
    2094:	90 93 eb 01 	sts	0x01EB, r25
    2098:	80 93 ea 01 	sts	0x01EA, r24
    209c:	fe 01       	movw	r30, r28
    209e:	32 96       	adiw	r30, 0x02	; 2
    20a0:	44 c0       	rjmp	.+136    	; 0x212a <malloc+0x128>
    20a2:	fe 01       	movw	r30, r28
    20a4:	e2 0f       	add	r30, r18
    20a6:	f3 1f       	adc	r31, r19
    20a8:	81 93       	st	Z+, r24
    20aa:	91 93       	st	Z+, r25
    20ac:	22 50       	subi	r18, 0x02	; 2
    20ae:	31 09       	sbc	r19, r1
    20b0:	39 83       	std	Y+1, r19	; 0x01
    20b2:	28 83       	st	Y, r18
    20b4:	3a c0       	rjmp	.+116    	; 0x212a <malloc+0x128>
    20b6:	20 91 e8 01 	lds	r18, 0x01E8
    20ba:	30 91 e9 01 	lds	r19, 0x01E9
    20be:	23 2b       	or	r18, r19
    20c0:	41 f4       	brne	.+16     	; 0x20d2 <malloc+0xd0>
    20c2:	20 91 02 01 	lds	r18, 0x0102
    20c6:	30 91 03 01 	lds	r19, 0x0103
    20ca:	30 93 e9 01 	sts	0x01E9, r19
    20ce:	20 93 e8 01 	sts	0x01E8, r18
    20d2:	20 91 00 01 	lds	r18, 0x0100
    20d6:	30 91 01 01 	lds	r19, 0x0101
    20da:	21 15       	cp	r18, r1
    20dc:	31 05       	cpc	r19, r1
    20de:	41 f4       	brne	.+16     	; 0x20f0 <malloc+0xee>
    20e0:	2d b7       	in	r18, 0x3d	; 61
    20e2:	3e b7       	in	r19, 0x3e	; 62
    20e4:	40 91 04 01 	lds	r20, 0x0104
    20e8:	50 91 05 01 	lds	r21, 0x0105
    20ec:	24 1b       	sub	r18, r20
    20ee:	35 0b       	sbc	r19, r21
    20f0:	e0 91 e8 01 	lds	r30, 0x01E8
    20f4:	f0 91 e9 01 	lds	r31, 0x01E9
    20f8:	e2 17       	cp	r30, r18
    20fa:	f3 07       	cpc	r31, r19
    20fc:	a0 f4       	brcc	.+40     	; 0x2126 <malloc+0x124>
    20fe:	2e 1b       	sub	r18, r30
    2100:	3f 0b       	sbc	r19, r31
    2102:	28 17       	cp	r18, r24
    2104:	39 07       	cpc	r19, r25
    2106:	78 f0       	brcs	.+30     	; 0x2126 <malloc+0x124>
    2108:	ac 01       	movw	r20, r24
    210a:	4e 5f       	subi	r20, 0xFE	; 254
    210c:	5f 4f       	sbci	r21, 0xFF	; 255
    210e:	24 17       	cp	r18, r20
    2110:	35 07       	cpc	r19, r21
    2112:	48 f0       	brcs	.+18     	; 0x2126 <malloc+0x124>
    2114:	4e 0f       	add	r20, r30
    2116:	5f 1f       	adc	r21, r31
    2118:	50 93 e9 01 	sts	0x01E9, r21
    211c:	40 93 e8 01 	sts	0x01E8, r20
    2120:	81 93       	st	Z+, r24
    2122:	91 93       	st	Z+, r25
    2124:	02 c0       	rjmp	.+4      	; 0x212a <malloc+0x128>
    2126:	e0 e0       	ldi	r30, 0x00	; 0
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	cf 01       	movw	r24, r30
    212c:	df 91       	pop	r29
    212e:	cf 91       	pop	r28
    2130:	08 95       	ret

00002132 <free>:
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	09 f4       	brne	.+2      	; 0x213c <free+0xa>
    213a:	87 c0       	rjmp	.+270    	; 0x224a <free+0x118>
    213c:	fc 01       	movw	r30, r24
    213e:	32 97       	sbiw	r30, 0x02	; 2
    2140:	13 82       	std	Z+3, r1	; 0x03
    2142:	12 82       	std	Z+2, r1	; 0x02
    2144:	c0 91 ea 01 	lds	r28, 0x01EA
    2148:	d0 91 eb 01 	lds	r29, 0x01EB
    214c:	20 97       	sbiw	r28, 0x00	; 0
    214e:	81 f4       	brne	.+32     	; 0x2170 <free+0x3e>
    2150:	20 81       	ld	r18, Z
    2152:	31 81       	ldd	r19, Z+1	; 0x01
    2154:	28 0f       	add	r18, r24
    2156:	39 1f       	adc	r19, r25
    2158:	80 91 e8 01 	lds	r24, 0x01E8
    215c:	90 91 e9 01 	lds	r25, 0x01E9
    2160:	82 17       	cp	r24, r18
    2162:	93 07       	cpc	r25, r19
    2164:	79 f5       	brne	.+94     	; 0x21c4 <free+0x92>
    2166:	f0 93 e9 01 	sts	0x01E9, r31
    216a:	e0 93 e8 01 	sts	0x01E8, r30
    216e:	6d c0       	rjmp	.+218    	; 0x224a <free+0x118>
    2170:	de 01       	movw	r26, r28
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	ae 17       	cp	r26, r30
    2178:	bf 07       	cpc	r27, r31
    217a:	50 f4       	brcc	.+20     	; 0x2190 <free+0x5e>
    217c:	12 96       	adiw	r26, 0x02	; 2
    217e:	4d 91       	ld	r20, X+
    2180:	5c 91       	ld	r21, X
    2182:	13 97       	sbiw	r26, 0x03	; 3
    2184:	9d 01       	movw	r18, r26
    2186:	41 15       	cp	r20, r1
    2188:	51 05       	cpc	r21, r1
    218a:	09 f1       	breq	.+66     	; 0x21ce <free+0x9c>
    218c:	da 01       	movw	r26, r20
    218e:	f3 cf       	rjmp	.-26     	; 0x2176 <free+0x44>
    2190:	b3 83       	std	Z+3, r27	; 0x03
    2192:	a2 83       	std	Z+2, r26	; 0x02
    2194:	40 81       	ld	r20, Z
    2196:	51 81       	ldd	r21, Z+1	; 0x01
    2198:	84 0f       	add	r24, r20
    219a:	95 1f       	adc	r25, r21
    219c:	8a 17       	cp	r24, r26
    219e:	9b 07       	cpc	r25, r27
    21a0:	71 f4       	brne	.+28     	; 0x21be <free+0x8c>
    21a2:	8d 91       	ld	r24, X+
    21a4:	9c 91       	ld	r25, X
    21a6:	11 97       	sbiw	r26, 0x01	; 1
    21a8:	84 0f       	add	r24, r20
    21aa:	95 1f       	adc	r25, r21
    21ac:	02 96       	adiw	r24, 0x02	; 2
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	80 83       	st	Z, r24
    21b2:	12 96       	adiw	r26, 0x02	; 2
    21b4:	8d 91       	ld	r24, X+
    21b6:	9c 91       	ld	r25, X
    21b8:	13 97       	sbiw	r26, 0x03	; 3
    21ba:	93 83       	std	Z+3, r25	; 0x03
    21bc:	82 83       	std	Z+2, r24	; 0x02
    21be:	21 15       	cp	r18, r1
    21c0:	31 05       	cpc	r19, r1
    21c2:	29 f4       	brne	.+10     	; 0x21ce <free+0x9c>
    21c4:	f0 93 eb 01 	sts	0x01EB, r31
    21c8:	e0 93 ea 01 	sts	0x01EA, r30
    21cc:	3e c0       	rjmp	.+124    	; 0x224a <free+0x118>
    21ce:	d9 01       	movw	r26, r18
    21d0:	13 96       	adiw	r26, 0x03	; 3
    21d2:	fc 93       	st	X, r31
    21d4:	ee 93       	st	-X, r30
    21d6:	12 97       	sbiw	r26, 0x02	; 2
    21d8:	4d 91       	ld	r20, X+
    21da:	5d 91       	ld	r21, X+
    21dc:	a4 0f       	add	r26, r20
    21de:	b5 1f       	adc	r27, r21
    21e0:	ea 17       	cp	r30, r26
    21e2:	fb 07       	cpc	r31, r27
    21e4:	79 f4       	brne	.+30     	; 0x2204 <free+0xd2>
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	84 0f       	add	r24, r20
    21ec:	95 1f       	adc	r25, r21
    21ee:	02 96       	adiw	r24, 0x02	; 2
    21f0:	d9 01       	movw	r26, r18
    21f2:	11 96       	adiw	r26, 0x01	; 1
    21f4:	9c 93       	st	X, r25
    21f6:	8e 93       	st	-X, r24
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	13 96       	adiw	r26, 0x03	; 3
    21fe:	9c 93       	st	X, r25
    2200:	8e 93       	st	-X, r24
    2202:	12 97       	sbiw	r26, 0x02	; 2
    2204:	e0 e0       	ldi	r30, 0x00	; 0
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	9b 81       	ldd	r25, Y+3	; 0x03
    220c:	00 97       	sbiw	r24, 0x00	; 0
    220e:	19 f0       	breq	.+6      	; 0x2216 <free+0xe4>
    2210:	fe 01       	movw	r30, r28
    2212:	ec 01       	movw	r28, r24
    2214:	f9 cf       	rjmp	.-14     	; 0x2208 <free+0xd6>
    2216:	ce 01       	movw	r24, r28
    2218:	02 96       	adiw	r24, 0x02	; 2
    221a:	28 81       	ld	r18, Y
    221c:	39 81       	ldd	r19, Y+1	; 0x01
    221e:	82 0f       	add	r24, r18
    2220:	93 1f       	adc	r25, r19
    2222:	20 91 e8 01 	lds	r18, 0x01E8
    2226:	30 91 e9 01 	lds	r19, 0x01E9
    222a:	28 17       	cp	r18, r24
    222c:	39 07       	cpc	r19, r25
    222e:	69 f4       	brne	.+26     	; 0x224a <free+0x118>
    2230:	30 97       	sbiw	r30, 0x00	; 0
    2232:	29 f4       	brne	.+10     	; 0x223e <free+0x10c>
    2234:	10 92 eb 01 	sts	0x01EB, r1
    2238:	10 92 ea 01 	sts	0x01EA, r1
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <free+0x110>
    223e:	13 82       	std	Z+3, r1	; 0x03
    2240:	12 82       	std	Z+2, r1	; 0x02
    2242:	d0 93 e9 01 	sts	0x01E9, r29
    2246:	c0 93 e8 01 	sts	0x01E8, r28
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	08 95       	ret

00002250 <do_rand>:
    2250:	8f 92       	push	r8
    2252:	9f 92       	push	r9
    2254:	af 92       	push	r10
    2256:	bf 92       	push	r11
    2258:	cf 92       	push	r12
    225a:	df 92       	push	r13
    225c:	ef 92       	push	r14
    225e:	ff 92       	push	r15
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	ec 01       	movw	r28, r24
    2266:	68 81       	ld	r22, Y
    2268:	79 81       	ldd	r23, Y+1	; 0x01
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	9b 81       	ldd	r25, Y+3	; 0x03
    226e:	61 15       	cp	r22, r1
    2270:	71 05       	cpc	r23, r1
    2272:	81 05       	cpc	r24, r1
    2274:	91 05       	cpc	r25, r1
    2276:	21 f4       	brne	.+8      	; 0x2280 <do_rand+0x30>
    2278:	64 e2       	ldi	r22, 0x24	; 36
    227a:	79 ed       	ldi	r23, 0xD9	; 217
    227c:	8b e5       	ldi	r24, 0x5B	; 91
    227e:	97 e0       	ldi	r25, 0x07	; 7
    2280:	2d e1       	ldi	r18, 0x1D	; 29
    2282:	33 ef       	ldi	r19, 0xF3	; 243
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <__divmodsi4>
    228c:	49 01       	movw	r8, r18
    228e:	5a 01       	movw	r10, r20
    2290:	9b 01       	movw	r18, r22
    2292:	ac 01       	movw	r20, r24
    2294:	a7 ea       	ldi	r26, 0xA7	; 167
    2296:	b1 e4       	ldi	r27, 0x41	; 65
    2298:	0e 94 80 14 	call	0x2900	; 0x2900 <__muluhisi3>
    229c:	6b 01       	movw	r12, r22
    229e:	7c 01       	movw	r14, r24
    22a0:	ac ee       	ldi	r26, 0xEC	; 236
    22a2:	b4 ef       	ldi	r27, 0xF4	; 244
    22a4:	a5 01       	movw	r20, r10
    22a6:	94 01       	movw	r18, r8
    22a8:	0e 94 8e 14 	call	0x291c	; 0x291c <__mulohisi3>
    22ac:	c6 0e       	add	r12, r22
    22ae:	d7 1e       	adc	r13, r23
    22b0:	e8 1e       	adc	r14, r24
    22b2:	f9 1e       	adc	r15, r25
    22b4:	f7 fe       	sbrs	r15, 7
    22b6:	06 c0       	rjmp	.+12     	; 0x22c4 <do_rand+0x74>
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	c8 1a       	sub	r12, r24
    22bc:	d1 08       	sbc	r13, r1
    22be:	e1 08       	sbc	r14, r1
    22c0:	80 e8       	ldi	r24, 0x80	; 128
    22c2:	f8 0a       	sbc	r15, r24
    22c4:	c8 82       	st	Y, r12
    22c6:	d9 82       	std	Y+1, r13	; 0x01
    22c8:	ea 82       	std	Y+2, r14	; 0x02
    22ca:	fb 82       	std	Y+3, r15	; 0x03
    22cc:	c6 01       	movw	r24, r12
    22ce:	9f 77       	andi	r25, 0x7F	; 127
    22d0:	df 91       	pop	r29
    22d2:	cf 91       	pop	r28
    22d4:	ff 90       	pop	r15
    22d6:	ef 90       	pop	r14
    22d8:	df 90       	pop	r13
    22da:	cf 90       	pop	r12
    22dc:	bf 90       	pop	r11
    22de:	af 90       	pop	r10
    22e0:	9f 90       	pop	r9
    22e2:	8f 90       	pop	r8
    22e4:	08 95       	ret

000022e6 <rand_r>:
    22e6:	0e 94 28 11 	call	0x2250	; 0x2250 <do_rand>
    22ea:	08 95       	ret

000022ec <rand>:
    22ec:	86 e0       	ldi	r24, 0x06	; 6
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	0e 94 28 11 	call	0x2250	; 0x2250 <do_rand>
    22f4:	08 95       	ret

000022f6 <srand>:
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	80 93 06 01 	sts	0x0106, r24
    22fe:	90 93 07 01 	sts	0x0107, r25
    2302:	a0 93 08 01 	sts	0x0108, r26
    2306:	b0 93 09 01 	sts	0x0109, r27
    230a:	08 95       	ret

0000230c <fdevopen>:
    230c:	0f 93       	push	r16
    230e:	1f 93       	push	r17
    2310:	cf 93       	push	r28
    2312:	df 93       	push	r29
    2314:	ec 01       	movw	r28, r24
    2316:	8b 01       	movw	r16, r22
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	31 f4       	brne	.+12     	; 0x2328 <fdevopen+0x1c>
    231c:	61 15       	cp	r22, r1
    231e:	71 05       	cpc	r23, r1
    2320:	19 f4       	brne	.+6      	; 0x2328 <fdevopen+0x1c>
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	38 c0       	rjmp	.+112    	; 0x2398 <fdevopen+0x8c>
    2328:	6e e0       	ldi	r22, 0x0E	; 14
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 b7 13 	call	0x276e	; 0x276e <calloc>
    2334:	fc 01       	movw	r30, r24
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	a1 f3       	breq	.-24     	; 0x2322 <fdevopen+0x16>
    233a:	80 e8       	ldi	r24, 0x80	; 128
    233c:	83 83       	std	Z+3, r24	; 0x03
    233e:	01 15       	cp	r16, r1
    2340:	11 05       	cpc	r17, r1
    2342:	71 f0       	breq	.+28     	; 0x2360 <fdevopen+0x54>
    2344:	13 87       	std	Z+11, r17	; 0x0b
    2346:	02 87       	std	Z+10, r16	; 0x0a
    2348:	81 e8       	ldi	r24, 0x81	; 129
    234a:	83 83       	std	Z+3, r24	; 0x03
    234c:	80 91 ec 01 	lds	r24, 0x01EC
    2350:	90 91 ed 01 	lds	r25, 0x01ED
    2354:	89 2b       	or	r24, r25
    2356:	21 f4       	brne	.+8      	; 0x2360 <fdevopen+0x54>
    2358:	f0 93 ed 01 	sts	0x01ED, r31
    235c:	e0 93 ec 01 	sts	0x01EC, r30
    2360:	20 97       	sbiw	r28, 0x00	; 0
    2362:	c9 f0       	breq	.+50     	; 0x2396 <fdevopen+0x8a>
    2364:	d1 87       	std	Z+9, r29	; 0x09
    2366:	c0 87       	std	Z+8, r28	; 0x08
    2368:	83 81       	ldd	r24, Z+3	; 0x03
    236a:	82 60       	ori	r24, 0x02	; 2
    236c:	83 83       	std	Z+3, r24	; 0x03
    236e:	80 91 ee 01 	lds	r24, 0x01EE
    2372:	90 91 ef 01 	lds	r25, 0x01EF
    2376:	89 2b       	or	r24, r25
    2378:	71 f4       	brne	.+28     	; 0x2396 <fdevopen+0x8a>
    237a:	f0 93 ef 01 	sts	0x01EF, r31
    237e:	e0 93 ee 01 	sts	0x01EE, r30
    2382:	80 91 f0 01 	lds	r24, 0x01F0
    2386:	90 91 f1 01 	lds	r25, 0x01F1
    238a:	89 2b       	or	r24, r25
    238c:	21 f4       	brne	.+8      	; 0x2396 <fdevopen+0x8a>
    238e:	f0 93 f1 01 	sts	0x01F1, r31
    2392:	e0 93 f0 01 	sts	0x01F0, r30
    2396:	cf 01       	movw	r24, r30
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	08 95       	ret

000023a2 <printf>:
    23a2:	a0 e0       	ldi	r26, 0x00	; 0
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e7 ed       	ldi	r30, 0xD7	; 215
    23a8:	f1 e1       	ldi	r31, 0x11	; 17
    23aa:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <__prologue_saves__+0x20>
    23ae:	fe 01       	movw	r30, r28
    23b0:	35 96       	adiw	r30, 0x05	; 5
    23b2:	61 91       	ld	r22, Z+
    23b4:	71 91       	ld	r23, Z+
    23b6:	af 01       	movw	r20, r30
    23b8:	80 91 ee 01 	lds	r24, 0x01EE
    23bc:	90 91 ef 01 	lds	r25, 0x01EF
    23c0:	0e 94 e5 11 	call	0x23ca	; 0x23ca <vfprintf>
    23c4:	e2 e0       	ldi	r30, 0x02	; 2
    23c6:	0c 94 bf 14 	jmp	0x297e	; 0x297e <__epilogue_restores__+0x20>

000023ca <vfprintf>:
    23ca:	ac e0       	ldi	r26, 0x0C	; 12
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	eb ee       	ldi	r30, 0xEB	; 235
    23d0:	f1 e1       	ldi	r31, 0x11	; 17
    23d2:	0c 94 93 14 	jmp	0x2926	; 0x2926 <__prologue_saves__>
    23d6:	7c 01       	movw	r14, r24
    23d8:	6b 01       	movw	r12, r22
    23da:	8a 01       	movw	r16, r20
    23dc:	fc 01       	movw	r30, r24
    23de:	17 82       	std	Z+7, r1	; 0x07
    23e0:	16 82       	std	Z+6, r1	; 0x06
    23e2:	83 81       	ldd	r24, Z+3	; 0x03
    23e4:	81 ff       	sbrs	r24, 1
    23e6:	bd c1       	rjmp	.+890    	; 0x2762 <vfprintf+0x398>
    23e8:	ce 01       	movw	r24, r28
    23ea:	01 96       	adiw	r24, 0x01	; 1
    23ec:	4c 01       	movw	r8, r24
    23ee:	f7 01       	movw	r30, r14
    23f0:	93 81       	ldd	r25, Z+3	; 0x03
    23f2:	f6 01       	movw	r30, r12
    23f4:	93 fd       	sbrc	r25, 3
    23f6:	85 91       	lpm	r24, Z+
    23f8:	93 ff       	sbrs	r25, 3
    23fa:	81 91       	ld	r24, Z+
    23fc:	6f 01       	movw	r12, r30
    23fe:	88 23       	and	r24, r24
    2400:	09 f4       	brne	.+2      	; 0x2404 <vfprintf+0x3a>
    2402:	ab c1       	rjmp	.+854    	; 0x275a <vfprintf+0x390>
    2404:	85 32       	cpi	r24, 0x25	; 37
    2406:	39 f4       	brne	.+14     	; 0x2416 <vfprintf+0x4c>
    2408:	93 fd       	sbrc	r25, 3
    240a:	85 91       	lpm	r24, Z+
    240c:	93 ff       	sbrs	r25, 3
    240e:	81 91       	ld	r24, Z+
    2410:	6f 01       	movw	r12, r30
    2412:	85 32       	cpi	r24, 0x25	; 37
    2414:	29 f4       	brne	.+10     	; 0x2420 <vfprintf+0x56>
    2416:	b7 01       	movw	r22, r14
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    241e:	e7 cf       	rjmp	.-50     	; 0x23ee <vfprintf+0x24>
    2420:	51 2c       	mov	r5, r1
    2422:	31 2c       	mov	r3, r1
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	20 32       	cpi	r18, 0x20	; 32
    2428:	a0 f4       	brcc	.+40     	; 0x2452 <vfprintf+0x88>
    242a:	8b 32       	cpi	r24, 0x2B	; 43
    242c:	69 f0       	breq	.+26     	; 0x2448 <vfprintf+0x7e>
    242e:	30 f4       	brcc	.+12     	; 0x243c <vfprintf+0x72>
    2430:	80 32       	cpi	r24, 0x20	; 32
    2432:	59 f0       	breq	.+22     	; 0x244a <vfprintf+0x80>
    2434:	83 32       	cpi	r24, 0x23	; 35
    2436:	69 f4       	brne	.+26     	; 0x2452 <vfprintf+0x88>
    2438:	20 61       	ori	r18, 0x10	; 16
    243a:	2c c0       	rjmp	.+88     	; 0x2494 <vfprintf+0xca>
    243c:	8d 32       	cpi	r24, 0x2D	; 45
    243e:	39 f0       	breq	.+14     	; 0x244e <vfprintf+0x84>
    2440:	80 33       	cpi	r24, 0x30	; 48
    2442:	39 f4       	brne	.+14     	; 0x2452 <vfprintf+0x88>
    2444:	21 60       	ori	r18, 0x01	; 1
    2446:	26 c0       	rjmp	.+76     	; 0x2494 <vfprintf+0xca>
    2448:	22 60       	ori	r18, 0x02	; 2
    244a:	24 60       	ori	r18, 0x04	; 4
    244c:	23 c0       	rjmp	.+70     	; 0x2494 <vfprintf+0xca>
    244e:	28 60       	ori	r18, 0x08	; 8
    2450:	21 c0       	rjmp	.+66     	; 0x2494 <vfprintf+0xca>
    2452:	27 fd       	sbrc	r18, 7
    2454:	27 c0       	rjmp	.+78     	; 0x24a4 <vfprintf+0xda>
    2456:	30 ed       	ldi	r19, 0xD0	; 208
    2458:	38 0f       	add	r19, r24
    245a:	3a 30       	cpi	r19, 0x0A	; 10
    245c:	78 f4       	brcc	.+30     	; 0x247c <vfprintf+0xb2>
    245e:	26 ff       	sbrs	r18, 6
    2460:	06 c0       	rjmp	.+12     	; 0x246e <vfprintf+0xa4>
    2462:	fa e0       	ldi	r31, 0x0A	; 10
    2464:	5f 9e       	mul	r5, r31
    2466:	30 0d       	add	r19, r0
    2468:	11 24       	eor	r1, r1
    246a:	53 2e       	mov	r5, r19
    246c:	13 c0       	rjmp	.+38     	; 0x2494 <vfprintf+0xca>
    246e:	8a e0       	ldi	r24, 0x0A	; 10
    2470:	38 9e       	mul	r3, r24
    2472:	30 0d       	add	r19, r0
    2474:	11 24       	eor	r1, r1
    2476:	33 2e       	mov	r3, r19
    2478:	20 62       	ori	r18, 0x20	; 32
    247a:	0c c0       	rjmp	.+24     	; 0x2494 <vfprintf+0xca>
    247c:	8e 32       	cpi	r24, 0x2E	; 46
    247e:	21 f4       	brne	.+8      	; 0x2488 <vfprintf+0xbe>
    2480:	26 fd       	sbrc	r18, 6
    2482:	6b c1       	rjmp	.+726    	; 0x275a <vfprintf+0x390>
    2484:	20 64       	ori	r18, 0x40	; 64
    2486:	06 c0       	rjmp	.+12     	; 0x2494 <vfprintf+0xca>
    2488:	8c 36       	cpi	r24, 0x6C	; 108
    248a:	11 f4       	brne	.+4      	; 0x2490 <vfprintf+0xc6>
    248c:	20 68       	ori	r18, 0x80	; 128
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <vfprintf+0xca>
    2490:	88 36       	cpi	r24, 0x68	; 104
    2492:	41 f4       	brne	.+16     	; 0x24a4 <vfprintf+0xda>
    2494:	f6 01       	movw	r30, r12
    2496:	93 fd       	sbrc	r25, 3
    2498:	85 91       	lpm	r24, Z+
    249a:	93 ff       	sbrs	r25, 3
    249c:	81 91       	ld	r24, Z+
    249e:	6f 01       	movw	r12, r30
    24a0:	81 11       	cpse	r24, r1
    24a2:	c1 cf       	rjmp	.-126    	; 0x2426 <vfprintf+0x5c>
    24a4:	98 2f       	mov	r25, r24
    24a6:	9f 7d       	andi	r25, 0xDF	; 223
    24a8:	95 54       	subi	r25, 0x45	; 69
    24aa:	93 30       	cpi	r25, 0x03	; 3
    24ac:	28 f4       	brcc	.+10     	; 0x24b8 <vfprintf+0xee>
    24ae:	0c 5f       	subi	r16, 0xFC	; 252
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	ff e3       	ldi	r31, 0x3F	; 63
    24b4:	f9 83       	std	Y+1, r31	; 0x01
    24b6:	0d c0       	rjmp	.+26     	; 0x24d2 <vfprintf+0x108>
    24b8:	83 36       	cpi	r24, 0x63	; 99
    24ba:	31 f0       	breq	.+12     	; 0x24c8 <vfprintf+0xfe>
    24bc:	83 37       	cpi	r24, 0x73	; 115
    24be:	71 f0       	breq	.+28     	; 0x24dc <vfprintf+0x112>
    24c0:	83 35       	cpi	r24, 0x53	; 83
    24c2:	09 f0       	breq	.+2      	; 0x24c6 <vfprintf+0xfc>
    24c4:	5b c0       	rjmp	.+182    	; 0x257c <vfprintf+0x1b2>
    24c6:	22 c0       	rjmp	.+68     	; 0x250c <vfprintf+0x142>
    24c8:	f8 01       	movw	r30, r16
    24ca:	80 81       	ld	r24, Z
    24cc:	89 83       	std	Y+1, r24	; 0x01
    24ce:	0e 5f       	subi	r16, 0xFE	; 254
    24d0:	1f 4f       	sbci	r17, 0xFF	; 255
    24d2:	44 24       	eor	r4, r4
    24d4:	43 94       	inc	r4
    24d6:	51 2c       	mov	r5, r1
    24d8:	54 01       	movw	r10, r8
    24da:	15 c0       	rjmp	.+42     	; 0x2506 <vfprintf+0x13c>
    24dc:	38 01       	movw	r6, r16
    24de:	f2 e0       	ldi	r31, 0x02	; 2
    24e0:	6f 0e       	add	r6, r31
    24e2:	71 1c       	adc	r7, r1
    24e4:	f8 01       	movw	r30, r16
    24e6:	a0 80       	ld	r10, Z
    24e8:	b1 80       	ldd	r11, Z+1	; 0x01
    24ea:	26 ff       	sbrs	r18, 6
    24ec:	03 c0       	rjmp	.+6      	; 0x24f4 <vfprintf+0x12a>
    24ee:	65 2d       	mov	r22, r5
    24f0:	70 e0       	ldi	r23, 0x00	; 0
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <vfprintf+0x12e>
    24f4:	6f ef       	ldi	r22, 0xFF	; 255
    24f6:	7f ef       	ldi	r23, 0xFF	; 255
    24f8:	c5 01       	movw	r24, r10
    24fa:	2c 87       	std	Y+12, r18	; 0x0c
    24fc:	0e 94 e5 13 	call	0x27ca	; 0x27ca <strnlen>
    2500:	2c 01       	movw	r4, r24
    2502:	83 01       	movw	r16, r6
    2504:	2c 85       	ldd	r18, Y+12	; 0x0c
    2506:	2f 77       	andi	r18, 0x7F	; 127
    2508:	22 2e       	mov	r2, r18
    250a:	17 c0       	rjmp	.+46     	; 0x253a <vfprintf+0x170>
    250c:	38 01       	movw	r6, r16
    250e:	f2 e0       	ldi	r31, 0x02	; 2
    2510:	6f 0e       	add	r6, r31
    2512:	71 1c       	adc	r7, r1
    2514:	f8 01       	movw	r30, r16
    2516:	a0 80       	ld	r10, Z
    2518:	b1 80       	ldd	r11, Z+1	; 0x01
    251a:	26 ff       	sbrs	r18, 6
    251c:	03 c0       	rjmp	.+6      	; 0x2524 <vfprintf+0x15a>
    251e:	65 2d       	mov	r22, r5
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <vfprintf+0x15e>
    2524:	6f ef       	ldi	r22, 0xFF	; 255
    2526:	7f ef       	ldi	r23, 0xFF	; 255
    2528:	c5 01       	movw	r24, r10
    252a:	2c 87       	std	Y+12, r18	; 0x0c
    252c:	0e 94 d3 13 	call	0x27a6	; 0x27a6 <strnlen_P>
    2530:	2c 01       	movw	r4, r24
    2532:	2c 85       	ldd	r18, Y+12	; 0x0c
    2534:	20 68       	ori	r18, 0x80	; 128
    2536:	22 2e       	mov	r2, r18
    2538:	83 01       	movw	r16, r6
    253a:	23 fc       	sbrc	r2, 3
    253c:	1b c0       	rjmp	.+54     	; 0x2574 <vfprintf+0x1aa>
    253e:	83 2d       	mov	r24, r3
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	48 16       	cp	r4, r24
    2544:	59 06       	cpc	r5, r25
    2546:	b0 f4       	brcc	.+44     	; 0x2574 <vfprintf+0x1aa>
    2548:	b7 01       	movw	r22, r14
    254a:	80 e2       	ldi	r24, 0x20	; 32
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    2552:	3a 94       	dec	r3
    2554:	f4 cf       	rjmp	.-24     	; 0x253e <vfprintf+0x174>
    2556:	f5 01       	movw	r30, r10
    2558:	27 fc       	sbrc	r2, 7
    255a:	85 91       	lpm	r24, Z+
    255c:	27 fe       	sbrs	r2, 7
    255e:	81 91       	ld	r24, Z+
    2560:	5f 01       	movw	r10, r30
    2562:	b7 01       	movw	r22, r14
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    256a:	31 10       	cpse	r3, r1
    256c:	3a 94       	dec	r3
    256e:	f1 e0       	ldi	r31, 0x01	; 1
    2570:	4f 1a       	sub	r4, r31
    2572:	51 08       	sbc	r5, r1
    2574:	41 14       	cp	r4, r1
    2576:	51 04       	cpc	r5, r1
    2578:	71 f7       	brne	.-36     	; 0x2556 <vfprintf+0x18c>
    257a:	e5 c0       	rjmp	.+458    	; 0x2746 <vfprintf+0x37c>
    257c:	84 36       	cpi	r24, 0x64	; 100
    257e:	11 f0       	breq	.+4      	; 0x2584 <vfprintf+0x1ba>
    2580:	89 36       	cpi	r24, 0x69	; 105
    2582:	39 f5       	brne	.+78     	; 0x25d2 <vfprintf+0x208>
    2584:	f8 01       	movw	r30, r16
    2586:	27 ff       	sbrs	r18, 7
    2588:	07 c0       	rjmp	.+14     	; 0x2598 <vfprintf+0x1ce>
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	0c 5f       	subi	r16, 0xFC	; 252
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	08 c0       	rjmp	.+16     	; 0x25a8 <vfprintf+0x1de>
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	88 27       	eor	r24, r24
    259e:	77 fd       	sbrc	r23, 7
    25a0:	80 95       	com	r24
    25a2:	98 2f       	mov	r25, r24
    25a4:	0e 5f       	subi	r16, 0xFE	; 254
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	2f 76       	andi	r18, 0x6F	; 111
    25aa:	b2 2e       	mov	r11, r18
    25ac:	97 ff       	sbrs	r25, 7
    25ae:	09 c0       	rjmp	.+18     	; 0x25c2 <vfprintf+0x1f8>
    25b0:	90 95       	com	r25
    25b2:	80 95       	com	r24
    25b4:	70 95       	com	r23
    25b6:	61 95       	neg	r22
    25b8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ba:	8f 4f       	sbci	r24, 0xFF	; 255
    25bc:	9f 4f       	sbci	r25, 0xFF	; 255
    25be:	20 68       	ori	r18, 0x80	; 128
    25c0:	b2 2e       	mov	r11, r18
    25c2:	2a e0       	ldi	r18, 0x0A	; 10
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	a4 01       	movw	r20, r8
    25c8:	0e 94 22 14 	call	0x2844	; 0x2844 <__ultoa_invert>
    25cc:	a8 2e       	mov	r10, r24
    25ce:	a8 18       	sub	r10, r8
    25d0:	44 c0       	rjmp	.+136    	; 0x265a <vfprintf+0x290>
    25d2:	85 37       	cpi	r24, 0x75	; 117
    25d4:	29 f4       	brne	.+10     	; 0x25e0 <vfprintf+0x216>
    25d6:	2f 7e       	andi	r18, 0xEF	; 239
    25d8:	b2 2e       	mov	r11, r18
    25da:	2a e0       	ldi	r18, 0x0A	; 10
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	25 c0       	rjmp	.+74     	; 0x262a <vfprintf+0x260>
    25e0:	f2 2f       	mov	r31, r18
    25e2:	f9 7f       	andi	r31, 0xF9	; 249
    25e4:	bf 2e       	mov	r11, r31
    25e6:	8f 36       	cpi	r24, 0x6F	; 111
    25e8:	c1 f0       	breq	.+48     	; 0x261a <vfprintf+0x250>
    25ea:	18 f4       	brcc	.+6      	; 0x25f2 <vfprintf+0x228>
    25ec:	88 35       	cpi	r24, 0x58	; 88
    25ee:	79 f0       	breq	.+30     	; 0x260e <vfprintf+0x244>
    25f0:	b4 c0       	rjmp	.+360    	; 0x275a <vfprintf+0x390>
    25f2:	80 37       	cpi	r24, 0x70	; 112
    25f4:	19 f0       	breq	.+6      	; 0x25fc <vfprintf+0x232>
    25f6:	88 37       	cpi	r24, 0x78	; 120
    25f8:	21 f0       	breq	.+8      	; 0x2602 <vfprintf+0x238>
    25fa:	af c0       	rjmp	.+350    	; 0x275a <vfprintf+0x390>
    25fc:	2f 2f       	mov	r18, r31
    25fe:	20 61       	ori	r18, 0x10	; 16
    2600:	b2 2e       	mov	r11, r18
    2602:	b4 fe       	sbrs	r11, 4
    2604:	0d c0       	rjmp	.+26     	; 0x2620 <vfprintf+0x256>
    2606:	8b 2d       	mov	r24, r11
    2608:	84 60       	ori	r24, 0x04	; 4
    260a:	b8 2e       	mov	r11, r24
    260c:	09 c0       	rjmp	.+18     	; 0x2620 <vfprintf+0x256>
    260e:	24 ff       	sbrs	r18, 4
    2610:	0a c0       	rjmp	.+20     	; 0x2626 <vfprintf+0x25c>
    2612:	9f 2f       	mov	r25, r31
    2614:	96 60       	ori	r25, 0x06	; 6
    2616:	b9 2e       	mov	r11, r25
    2618:	06 c0       	rjmp	.+12     	; 0x2626 <vfprintf+0x25c>
    261a:	28 e0       	ldi	r18, 0x08	; 8
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	05 c0       	rjmp	.+10     	; 0x262a <vfprintf+0x260>
    2620:	20 e1       	ldi	r18, 0x10	; 16
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	02 c0       	rjmp	.+4      	; 0x262a <vfprintf+0x260>
    2626:	20 e1       	ldi	r18, 0x10	; 16
    2628:	32 e0       	ldi	r19, 0x02	; 2
    262a:	f8 01       	movw	r30, r16
    262c:	b7 fe       	sbrs	r11, 7
    262e:	07 c0       	rjmp	.+14     	; 0x263e <vfprintf+0x274>
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	0c 5f       	subi	r16, 0xFC	; 252
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	06 c0       	rjmp	.+12     	; 0x264a <vfprintf+0x280>
    263e:	60 81       	ld	r22, Z
    2640:	71 81       	ldd	r23, Z+1	; 0x01
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	0e 5f       	subi	r16, 0xFE	; 254
    2648:	1f 4f       	sbci	r17, 0xFF	; 255
    264a:	a4 01       	movw	r20, r8
    264c:	0e 94 22 14 	call	0x2844	; 0x2844 <__ultoa_invert>
    2650:	a8 2e       	mov	r10, r24
    2652:	a8 18       	sub	r10, r8
    2654:	fb 2d       	mov	r31, r11
    2656:	ff 77       	andi	r31, 0x7F	; 127
    2658:	bf 2e       	mov	r11, r31
    265a:	b6 fe       	sbrs	r11, 6
    265c:	0b c0       	rjmp	.+22     	; 0x2674 <vfprintf+0x2aa>
    265e:	2b 2d       	mov	r18, r11
    2660:	2e 7f       	andi	r18, 0xFE	; 254
    2662:	a5 14       	cp	r10, r5
    2664:	50 f4       	brcc	.+20     	; 0x267a <vfprintf+0x2b0>
    2666:	b4 fe       	sbrs	r11, 4
    2668:	0a c0       	rjmp	.+20     	; 0x267e <vfprintf+0x2b4>
    266a:	b2 fc       	sbrc	r11, 2
    266c:	08 c0       	rjmp	.+16     	; 0x267e <vfprintf+0x2b4>
    266e:	2b 2d       	mov	r18, r11
    2670:	2e 7e       	andi	r18, 0xEE	; 238
    2672:	05 c0       	rjmp	.+10     	; 0x267e <vfprintf+0x2b4>
    2674:	7a 2c       	mov	r7, r10
    2676:	2b 2d       	mov	r18, r11
    2678:	03 c0       	rjmp	.+6      	; 0x2680 <vfprintf+0x2b6>
    267a:	7a 2c       	mov	r7, r10
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <vfprintf+0x2b6>
    267e:	75 2c       	mov	r7, r5
    2680:	24 ff       	sbrs	r18, 4
    2682:	0d c0       	rjmp	.+26     	; 0x269e <vfprintf+0x2d4>
    2684:	fe 01       	movw	r30, r28
    2686:	ea 0d       	add	r30, r10
    2688:	f1 1d       	adc	r31, r1
    268a:	80 81       	ld	r24, Z
    268c:	80 33       	cpi	r24, 0x30	; 48
    268e:	11 f4       	brne	.+4      	; 0x2694 <vfprintf+0x2ca>
    2690:	29 7e       	andi	r18, 0xE9	; 233
    2692:	09 c0       	rjmp	.+18     	; 0x26a6 <vfprintf+0x2dc>
    2694:	22 ff       	sbrs	r18, 2
    2696:	06 c0       	rjmp	.+12     	; 0x26a4 <vfprintf+0x2da>
    2698:	73 94       	inc	r7
    269a:	73 94       	inc	r7
    269c:	04 c0       	rjmp	.+8      	; 0x26a6 <vfprintf+0x2dc>
    269e:	82 2f       	mov	r24, r18
    26a0:	86 78       	andi	r24, 0x86	; 134
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <vfprintf+0x2dc>
    26a4:	73 94       	inc	r7
    26a6:	23 fd       	sbrc	r18, 3
    26a8:	13 c0       	rjmp	.+38     	; 0x26d0 <vfprintf+0x306>
    26aa:	20 ff       	sbrs	r18, 0
    26ac:	06 c0       	rjmp	.+12     	; 0x26ba <vfprintf+0x2f0>
    26ae:	5a 2c       	mov	r5, r10
    26b0:	73 14       	cp	r7, r3
    26b2:	18 f4       	brcc	.+6      	; 0x26ba <vfprintf+0x2f0>
    26b4:	53 0c       	add	r5, r3
    26b6:	57 18       	sub	r5, r7
    26b8:	73 2c       	mov	r7, r3
    26ba:	73 14       	cp	r7, r3
    26bc:	68 f4       	brcc	.+26     	; 0x26d8 <vfprintf+0x30e>
    26be:	b7 01       	movw	r22, r14
    26c0:	80 e2       	ldi	r24, 0x20	; 32
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	2c 87       	std	Y+12, r18	; 0x0c
    26c6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    26ca:	73 94       	inc	r7
    26cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ce:	f5 cf       	rjmp	.-22     	; 0x26ba <vfprintf+0x2f0>
    26d0:	73 14       	cp	r7, r3
    26d2:	10 f4       	brcc	.+4      	; 0x26d8 <vfprintf+0x30e>
    26d4:	37 18       	sub	r3, r7
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <vfprintf+0x310>
    26d8:	31 2c       	mov	r3, r1
    26da:	24 ff       	sbrs	r18, 4
    26dc:	12 c0       	rjmp	.+36     	; 0x2702 <vfprintf+0x338>
    26de:	b7 01       	movw	r22, r14
    26e0:	80 e3       	ldi	r24, 0x30	; 48
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	2c 87       	std	Y+12, r18	; 0x0c
    26e6:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    26ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ec:	22 ff       	sbrs	r18, 2
    26ee:	17 c0       	rjmp	.+46     	; 0x271e <vfprintf+0x354>
    26f0:	21 ff       	sbrs	r18, 1
    26f2:	03 c0       	rjmp	.+6      	; 0x26fa <vfprintf+0x330>
    26f4:	88 e5       	ldi	r24, 0x58	; 88
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <vfprintf+0x334>
    26fa:	88 e7       	ldi	r24, 0x78	; 120
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	b7 01       	movw	r22, r14
    2700:	0c c0       	rjmp	.+24     	; 0x271a <vfprintf+0x350>
    2702:	82 2f       	mov	r24, r18
    2704:	86 78       	andi	r24, 0x86	; 134
    2706:	59 f0       	breq	.+22     	; 0x271e <vfprintf+0x354>
    2708:	21 fd       	sbrc	r18, 1
    270a:	02 c0       	rjmp	.+4      	; 0x2710 <vfprintf+0x346>
    270c:	80 e2       	ldi	r24, 0x20	; 32
    270e:	01 c0       	rjmp	.+2      	; 0x2712 <vfprintf+0x348>
    2710:	8b e2       	ldi	r24, 0x2B	; 43
    2712:	27 fd       	sbrc	r18, 7
    2714:	8d e2       	ldi	r24, 0x2D	; 45
    2716:	b7 01       	movw	r22, r14
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    271e:	a5 14       	cp	r10, r5
    2720:	38 f4       	brcc	.+14     	; 0x2730 <vfprintf+0x366>
    2722:	b7 01       	movw	r22, r14
    2724:	80 e3       	ldi	r24, 0x30	; 48
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    272c:	5a 94       	dec	r5
    272e:	f7 cf       	rjmp	.-18     	; 0x271e <vfprintf+0x354>
    2730:	aa 94       	dec	r10
    2732:	f4 01       	movw	r30, r8
    2734:	ea 0d       	add	r30, r10
    2736:	f1 1d       	adc	r31, r1
    2738:	80 81       	ld	r24, Z
    273a:	b7 01       	movw	r22, r14
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    2742:	a1 10       	cpse	r10, r1
    2744:	f5 cf       	rjmp	.-22     	; 0x2730 <vfprintf+0x366>
    2746:	33 20       	and	r3, r3
    2748:	09 f4       	brne	.+2      	; 0x274c <vfprintf+0x382>
    274a:	51 ce       	rjmp	.-862    	; 0x23ee <vfprintf+0x24>
    274c:	b7 01       	movw	r22, r14
    274e:	80 e2       	ldi	r24, 0x20	; 32
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	0e 94 f0 13 	call	0x27e0	; 0x27e0 <fputc>
    2756:	3a 94       	dec	r3
    2758:	f6 cf       	rjmp	.-20     	; 0x2746 <vfprintf+0x37c>
    275a:	f7 01       	movw	r30, r14
    275c:	86 81       	ldd	r24, Z+6	; 0x06
    275e:	97 81       	ldd	r25, Z+7	; 0x07
    2760:	02 c0       	rjmp	.+4      	; 0x2766 <vfprintf+0x39c>
    2762:	8f ef       	ldi	r24, 0xFF	; 255
    2764:	9f ef       	ldi	r25, 0xFF	; 255
    2766:	2c 96       	adiw	r28, 0x0c	; 12
    2768:	e2 e1       	ldi	r30, 0x12	; 18
    276a:	0c 94 af 14 	jmp	0x295e	; 0x295e <__epilogue_restores__>

0000276e <calloc>:
    276e:	0f 93       	push	r16
    2770:	1f 93       	push	r17
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	86 9f       	mul	r24, r22
    2778:	80 01       	movw	r16, r0
    277a:	87 9f       	mul	r24, r23
    277c:	10 0d       	add	r17, r0
    277e:	96 9f       	mul	r25, r22
    2780:	10 0d       	add	r17, r0
    2782:	11 24       	eor	r1, r1
    2784:	c8 01       	movw	r24, r16
    2786:	0e 94 01 10 	call	0x2002	; 0x2002 <malloc>
    278a:	ec 01       	movw	r28, r24
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	29 f0       	breq	.+10     	; 0x279a <calloc+0x2c>
    2790:	a8 01       	movw	r20, r16
    2792:	60 e0       	ldi	r22, 0x00	; 0
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	0e 94 de 13 	call	0x27bc	; 0x27bc <memset>
    279a:	ce 01       	movw	r24, r28
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <strnlen_P>:
    27a6:	fc 01       	movw	r30, r24
    27a8:	05 90       	lpm	r0, Z+
    27aa:	61 50       	subi	r22, 0x01	; 1
    27ac:	70 40       	sbci	r23, 0x00	; 0
    27ae:	01 10       	cpse	r0, r1
    27b0:	d8 f7       	brcc	.-10     	; 0x27a8 <strnlen_P+0x2>
    27b2:	80 95       	com	r24
    27b4:	90 95       	com	r25
    27b6:	8e 0f       	add	r24, r30
    27b8:	9f 1f       	adc	r25, r31
    27ba:	08 95       	ret

000027bc <memset>:
    27bc:	dc 01       	movw	r26, r24
    27be:	01 c0       	rjmp	.+2      	; 0x27c2 <memset+0x6>
    27c0:	6d 93       	st	X+, r22
    27c2:	41 50       	subi	r20, 0x01	; 1
    27c4:	50 40       	sbci	r21, 0x00	; 0
    27c6:	e0 f7       	brcc	.-8      	; 0x27c0 <memset+0x4>
    27c8:	08 95       	ret

000027ca <strnlen>:
    27ca:	fc 01       	movw	r30, r24
    27cc:	61 50       	subi	r22, 0x01	; 1
    27ce:	70 40       	sbci	r23, 0x00	; 0
    27d0:	01 90       	ld	r0, Z+
    27d2:	01 10       	cpse	r0, r1
    27d4:	d8 f7       	brcc	.-10     	; 0x27cc <strnlen+0x2>
    27d6:	80 95       	com	r24
    27d8:	90 95       	com	r25
    27da:	8e 0f       	add	r24, r30
    27dc:	9f 1f       	adc	r25, r31
    27de:	08 95       	ret

000027e0 <fputc>:
    27e0:	0f 93       	push	r16
    27e2:	1f 93       	push	r17
    27e4:	cf 93       	push	r28
    27e6:	df 93       	push	r29
    27e8:	18 2f       	mov	r17, r24
    27ea:	09 2f       	mov	r16, r25
    27ec:	eb 01       	movw	r28, r22
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	81 fd       	sbrc	r24, 1
    27f2:	03 c0       	rjmp	.+6      	; 0x27fa <fputc+0x1a>
    27f4:	8f ef       	ldi	r24, 0xFF	; 255
    27f6:	9f ef       	ldi	r25, 0xFF	; 255
    27f8:	20 c0       	rjmp	.+64     	; 0x283a <fputc+0x5a>
    27fa:	82 ff       	sbrs	r24, 2
    27fc:	10 c0       	rjmp	.+32     	; 0x281e <fputc+0x3e>
    27fe:	4e 81       	ldd	r20, Y+6	; 0x06
    2800:	5f 81       	ldd	r21, Y+7	; 0x07
    2802:	2c 81       	ldd	r18, Y+4	; 0x04
    2804:	3d 81       	ldd	r19, Y+5	; 0x05
    2806:	42 17       	cp	r20, r18
    2808:	53 07       	cpc	r21, r19
    280a:	7c f4       	brge	.+30     	; 0x282a <fputc+0x4a>
    280c:	e8 81       	ld	r30, Y
    280e:	f9 81       	ldd	r31, Y+1	; 0x01
    2810:	9f 01       	movw	r18, r30
    2812:	2f 5f       	subi	r18, 0xFF	; 255
    2814:	3f 4f       	sbci	r19, 0xFF	; 255
    2816:	39 83       	std	Y+1, r19	; 0x01
    2818:	28 83       	st	Y, r18
    281a:	10 83       	st	Z, r17
    281c:	06 c0       	rjmp	.+12     	; 0x282a <fputc+0x4a>
    281e:	e8 85       	ldd	r30, Y+8	; 0x08
    2820:	f9 85       	ldd	r31, Y+9	; 0x09
    2822:	81 2f       	mov	r24, r17
    2824:	09 95       	icall
    2826:	89 2b       	or	r24, r25
    2828:	29 f7       	brne	.-54     	; 0x27f4 <fputc+0x14>
    282a:	2e 81       	ldd	r18, Y+6	; 0x06
    282c:	3f 81       	ldd	r19, Y+7	; 0x07
    282e:	2f 5f       	subi	r18, 0xFF	; 255
    2830:	3f 4f       	sbci	r19, 0xFF	; 255
    2832:	3f 83       	std	Y+7, r19	; 0x07
    2834:	2e 83       	std	Y+6, r18	; 0x06
    2836:	81 2f       	mov	r24, r17
    2838:	90 2f       	mov	r25, r16
    283a:	df 91       	pop	r29
    283c:	cf 91       	pop	r28
    283e:	1f 91       	pop	r17
    2840:	0f 91       	pop	r16
    2842:	08 95       	ret

00002844 <__ultoa_invert>:
    2844:	fa 01       	movw	r30, r20
    2846:	aa 27       	eor	r26, r26
    2848:	28 30       	cpi	r18, 0x08	; 8
    284a:	51 f1       	breq	.+84     	; 0x28a0 <__ultoa_invert+0x5c>
    284c:	20 31       	cpi	r18, 0x10	; 16
    284e:	81 f1       	breq	.+96     	; 0x28b0 <__ultoa_invert+0x6c>
    2850:	e8 94       	clt
    2852:	6f 93       	push	r22
    2854:	6e 7f       	andi	r22, 0xFE	; 254
    2856:	6e 5f       	subi	r22, 0xFE	; 254
    2858:	7f 4f       	sbci	r23, 0xFF	; 255
    285a:	8f 4f       	sbci	r24, 0xFF	; 255
    285c:	9f 4f       	sbci	r25, 0xFF	; 255
    285e:	af 4f       	sbci	r26, 0xFF	; 255
    2860:	b1 e0       	ldi	r27, 0x01	; 1
    2862:	3e d0       	rcall	.+124    	; 0x28e0 <__ultoa_invert+0x9c>
    2864:	b4 e0       	ldi	r27, 0x04	; 4
    2866:	3c d0       	rcall	.+120    	; 0x28e0 <__ultoa_invert+0x9c>
    2868:	67 0f       	add	r22, r23
    286a:	78 1f       	adc	r23, r24
    286c:	89 1f       	adc	r24, r25
    286e:	9a 1f       	adc	r25, r26
    2870:	a1 1d       	adc	r26, r1
    2872:	68 0f       	add	r22, r24
    2874:	79 1f       	adc	r23, r25
    2876:	8a 1f       	adc	r24, r26
    2878:	91 1d       	adc	r25, r1
    287a:	a1 1d       	adc	r26, r1
    287c:	6a 0f       	add	r22, r26
    287e:	71 1d       	adc	r23, r1
    2880:	81 1d       	adc	r24, r1
    2882:	91 1d       	adc	r25, r1
    2884:	a1 1d       	adc	r26, r1
    2886:	20 d0       	rcall	.+64     	; 0x28c8 <__ultoa_invert+0x84>
    2888:	09 f4       	brne	.+2      	; 0x288c <__ultoa_invert+0x48>
    288a:	68 94       	set
    288c:	3f 91       	pop	r19
    288e:	2a e0       	ldi	r18, 0x0A	; 10
    2890:	26 9f       	mul	r18, r22
    2892:	11 24       	eor	r1, r1
    2894:	30 19       	sub	r19, r0
    2896:	30 5d       	subi	r19, 0xD0	; 208
    2898:	31 93       	st	Z+, r19
    289a:	de f6       	brtc	.-74     	; 0x2852 <__ultoa_invert+0xe>
    289c:	cf 01       	movw	r24, r30
    289e:	08 95       	ret
    28a0:	46 2f       	mov	r20, r22
    28a2:	47 70       	andi	r20, 0x07	; 7
    28a4:	40 5d       	subi	r20, 0xD0	; 208
    28a6:	41 93       	st	Z+, r20
    28a8:	b3 e0       	ldi	r27, 0x03	; 3
    28aa:	0f d0       	rcall	.+30     	; 0x28ca <__ultoa_invert+0x86>
    28ac:	c9 f7       	brne	.-14     	; 0x28a0 <__ultoa_invert+0x5c>
    28ae:	f6 cf       	rjmp	.-20     	; 0x289c <__ultoa_invert+0x58>
    28b0:	46 2f       	mov	r20, r22
    28b2:	4f 70       	andi	r20, 0x0F	; 15
    28b4:	40 5d       	subi	r20, 0xD0	; 208
    28b6:	4a 33       	cpi	r20, 0x3A	; 58
    28b8:	18 f0       	brcs	.+6      	; 0x28c0 <__ultoa_invert+0x7c>
    28ba:	49 5d       	subi	r20, 0xD9	; 217
    28bc:	31 fd       	sbrc	r19, 1
    28be:	40 52       	subi	r20, 0x20	; 32
    28c0:	41 93       	st	Z+, r20
    28c2:	02 d0       	rcall	.+4      	; 0x28c8 <__ultoa_invert+0x84>
    28c4:	a9 f7       	brne	.-22     	; 0x28b0 <__ultoa_invert+0x6c>
    28c6:	ea cf       	rjmp	.-44     	; 0x289c <__ultoa_invert+0x58>
    28c8:	b4 e0       	ldi	r27, 0x04	; 4
    28ca:	a6 95       	lsr	r26
    28cc:	97 95       	ror	r25
    28ce:	87 95       	ror	r24
    28d0:	77 95       	ror	r23
    28d2:	67 95       	ror	r22
    28d4:	ba 95       	dec	r27
    28d6:	c9 f7       	brne	.-14     	; 0x28ca <__ultoa_invert+0x86>
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	61 05       	cpc	r22, r1
    28dc:	71 05       	cpc	r23, r1
    28de:	08 95       	ret
    28e0:	9b 01       	movw	r18, r22
    28e2:	ac 01       	movw	r20, r24
    28e4:	0a 2e       	mov	r0, r26
    28e6:	06 94       	lsr	r0
    28e8:	57 95       	ror	r21
    28ea:	47 95       	ror	r20
    28ec:	37 95       	ror	r19
    28ee:	27 95       	ror	r18
    28f0:	ba 95       	dec	r27
    28f2:	c9 f7       	brne	.-14     	; 0x28e6 <__ultoa_invert+0xa2>
    28f4:	62 0f       	add	r22, r18
    28f6:	73 1f       	adc	r23, r19
    28f8:	84 1f       	adc	r24, r20
    28fa:	95 1f       	adc	r25, r21
    28fc:	a0 1d       	adc	r26, r0
    28fe:	08 95       	ret

00002900 <__muluhisi3>:
    2900:	0e 94 ca 14 	call	0x2994	; 0x2994 <__umulhisi3>
    2904:	a5 9f       	mul	r26, r21
    2906:	90 0d       	add	r25, r0
    2908:	b4 9f       	mul	r27, r20
    290a:	90 0d       	add	r25, r0
    290c:	a4 9f       	mul	r26, r20
    290e:	80 0d       	add	r24, r0
    2910:	91 1d       	adc	r25, r1
    2912:	11 24       	eor	r1, r1
    2914:	08 95       	ret

00002916 <__mulshisi3>:
    2916:	b7 ff       	sbrs	r27, 7
    2918:	0c 94 80 14 	jmp	0x2900	; 0x2900 <__muluhisi3>

0000291c <__mulohisi3>:
    291c:	0e 94 80 14 	call	0x2900	; 0x2900 <__muluhisi3>
    2920:	82 1b       	sub	r24, r18
    2922:	93 0b       	sbc	r25, r19
    2924:	08 95       	ret

00002926 <__prologue_saves__>:
    2926:	2f 92       	push	r2
    2928:	3f 92       	push	r3
    292a:	4f 92       	push	r4
    292c:	5f 92       	push	r5
    292e:	6f 92       	push	r6
    2930:	7f 92       	push	r7
    2932:	8f 92       	push	r8
    2934:	9f 92       	push	r9
    2936:	af 92       	push	r10
    2938:	bf 92       	push	r11
    293a:	cf 92       	push	r12
    293c:	df 92       	push	r13
    293e:	ef 92       	push	r14
    2940:	ff 92       	push	r15
    2942:	0f 93       	push	r16
    2944:	1f 93       	push	r17
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	ca 1b       	sub	r28, r26
    2950:	db 0b       	sbc	r29, r27
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	09 94       	ijmp

0000295e <__epilogue_restores__>:
    295e:	2a 88       	ldd	r2, Y+18	; 0x12
    2960:	39 88       	ldd	r3, Y+17	; 0x11
    2962:	48 88       	ldd	r4, Y+16	; 0x10
    2964:	5f 84       	ldd	r5, Y+15	; 0x0f
    2966:	6e 84       	ldd	r6, Y+14	; 0x0e
    2968:	7d 84       	ldd	r7, Y+13	; 0x0d
    296a:	8c 84       	ldd	r8, Y+12	; 0x0c
    296c:	9b 84       	ldd	r9, Y+11	; 0x0b
    296e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2970:	b9 84       	ldd	r11, Y+9	; 0x09
    2972:	c8 84       	ldd	r12, Y+8	; 0x08
    2974:	df 80       	ldd	r13, Y+7	; 0x07
    2976:	ee 80       	ldd	r14, Y+6	; 0x06
    2978:	fd 80       	ldd	r15, Y+5	; 0x05
    297a:	0c 81       	ldd	r16, Y+4	; 0x04
    297c:	1b 81       	ldd	r17, Y+3	; 0x03
    297e:	aa 81       	ldd	r26, Y+2	; 0x02
    2980:	b9 81       	ldd	r27, Y+1	; 0x01
    2982:	ce 0f       	add	r28, r30
    2984:	d1 1d       	adc	r29, r1
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	ed 01       	movw	r28, r26
    2992:	08 95       	ret

00002994 <__umulhisi3>:
    2994:	a2 9f       	mul	r26, r18
    2996:	b0 01       	movw	r22, r0
    2998:	b3 9f       	mul	r27, r19
    299a:	c0 01       	movw	r24, r0
    299c:	a3 9f       	mul	r26, r19
    299e:	70 0d       	add	r23, r0
    29a0:	81 1d       	adc	r24, r1
    29a2:	11 24       	eor	r1, r1
    29a4:	91 1d       	adc	r25, r1
    29a6:	b2 9f       	mul	r27, r18
    29a8:	70 0d       	add	r23, r0
    29aa:	81 1d       	adc	r24, r1
    29ac:	11 24       	eor	r1, r1
    29ae:	91 1d       	adc	r25, r1
    29b0:	08 95       	ret

000029b2 <_exit>:
    29b2:	f8 94       	cli

000029b4 <__stop_program>:
    29b4:	ff cf       	rjmp	.-2      	; 0x29b4 <__stop_program>
