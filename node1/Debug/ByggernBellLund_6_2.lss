
ByggernBellLund_6_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e6  00800100  00003864  000038f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003864  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008002e6  008002e6  00003ade  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003ade  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004d0  00000000  00000000  00003b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005656  00000000  00000000  0000400a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001f1e  00000000  00000000  00009660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000020e5  00000000  00000000  0000b57e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000fb0  00000000  00000000  0000d664  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cb7  00000000  00000000  0000e614  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000417b  00000000  00000000  0000f2cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000528  00000000  00000000  00013446  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__ctors_end>
       4:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
       8:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__vector_2>
       c:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      10:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      14:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      18:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      1c:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      20:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      24:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      28:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      2c:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      30:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      34:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      38:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__vector_14>
      3c:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      40:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      44:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      48:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      4c:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      50:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      54:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      58:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      5c:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      60:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      64:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      68:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>
      6c:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	0c 00       	.word	0x000c	; ????
      72:	0c 00       	.word	0x000c	; ????
      74:	0c 00       	.word	0x000c	; ????
      76:	0c 00       	.word	0x000c	; ????
      78:	0c 00       	.word	0x000c	; ????
      7a:	0c 00       	.word	0x000c	; ????
      7c:	0c 00       	.word	0x000c	; ????
      7e:	0c 00       	.word	0x000c	; ????
      80:	0c 00       	.word	0x000c	; ????
      82:	0c 00       	.word	0x000c	; ????
      84:	0c 00       	.word	0x000c	; ????
      86:	0c 00       	.word	0x000c	; ????
      88:	0c 00       	.word	0x000c	; ????
      8a:	0c 00       	.word	0x000c	; ????
      8c:	0c 00       	.word	0x000c	; ????
      8e:	0c 00       	.word	0x000c	; ????
      90:	0c 00       	.word	0x000c	; ????
      92:	0c 00       	.word	0x000c	; ????
      94:	0c 00       	.word	0x000c	; ????
      96:	0c 00       	.word	0x000c	; ????
      98:	0c 00       	.word	0x000c	; ????
      9a:	0c 00       	.word	0x000c	; ????
      9c:	0c 00       	.word	0x000c	; ????
      9e:	0c 00       	.word	0x000c	; ????
      a0:	0c 00       	.word	0x000c	; ????
      a2:	0c 00       	.word	0x000c	; ????
      a4:	0c 00       	.word	0x000c	; ????
      a6:	0c 00       	.word	0x000c	; ????
      a8:	0c 00       	.word	0x000c	; ????
      aa:	0c 00       	.word	0x000c	; ????
      ac:	0c 00       	.word	0x000c	; ????
      ae:	0c 00       	.word	0x000c	; ????
      b0:	09 00       	.word	0x0009	; ????
      b2:	09 00       	.word	0x0009	; ????
      b4:	09 00       	.word	0x0009	; ????
      b6:	0c 00       	.word	0x000c	; ????
      b8:	0c 00       	.word	0x000c	; ????
      ba:	0c 00       	.word	0x000c	; ????
      bc:	0c 00       	.word	0x000c	; ????
      be:	0c 00       	.word	0x000c	; ????
      c0:	0c 00       	.word	0x000c	; ????
      c2:	0c 00       	.word	0x000c	; ????
      c4:	0c 00       	.word	0x000c	; ????
      c6:	0c 00       	.word	0x000c	; ????
      c8:	0c 00       	.word	0x000c	; ????
      ca:	0c 00       	.word	0x000c	; ????
      cc:	0c 00       	.word	0x000c	; ????
      ce:	0c 00       	.word	0x000c	; ????
      d0:	0c 00       	.word	0x000c	; ????
      d2:	0c 00       	.word	0x000c	; ????
      d4:	0c 00       	.word	0x000c	; ????
      d6:	0c 00       	.word	0x000c	; ????
      d8:	0c 00       	.word	0x000c	; ????
      da:	0c 00       	.word	0x000c	; ????
      dc:	0c 00       	.word	0x000c	; ????
      de:	0c 00       	.word	0x000c	; ????
      e0:	0c 00       	.word	0x000c	; ????
      e2:	0c 00       	.word	0x000c	; ????
      e4:	0c 00       	.word	0x000c	; ????
      e6:	0c 00       	.word	0x000c	; ????
      e8:	0c 00       	.word	0x000c	; ????
      ea:	0c 00       	.word	0x000c	; ????
      ec:	0c 00       	.word	0x000c	; ????
      ee:	09 00       	.word	0x0009	; ????
      f0:	09 00       	.word	0x0009	; ????
      f2:	09 00       	.word	0x0009	; ????
      f4:	0c 00       	.word	0x000c	; ????
      f6:	0c 00       	.word	0x000c	; ????
      f8:	0c 00       	.word	0x000c	; ????
      fa:	0c 00       	.word	0x000c	; ????
      fc:	0c 00       	.word	0x000c	; ????
      fe:	0c 00       	.word	0x000c	; ????
     100:	0c 00       	.word	0x000c	; ????
     102:	0c 00       	.word	0x000c	; ????
     104:	0c 00       	.word	0x000c	; ????
     106:	0c 00       	.word	0x000c	; ????
     108:	0c 00       	.word	0x000c	; ????
     10a:	0c 00       	.word	0x000c	; ????

0000010c <mario_notes>:
     10c:	4d 0a 4d 0a 00 00 4d 0a 00 00 2d 08 4d 0a 00 00     M.M...M...-.M...
     11c:	40 0c 00 00 00 00 00 00 20 06 00 00 00 00 00 00     @....... .......
     12c:	2d 08 00 00 00 00 20 06 00 00 00 00 27 05 00 00     -..... .....'...
     13c:	00 00 e0 06 00 00 b8 07 00 00 49 07 e0 06 00 00     ..........I.....
     14c:	20 06 4d 0a 40 0c c0 0d 00 00 ea 0a 40 0c 00 00      .M.@.......@...
     15c:	4d 0a 00 00 2d 08 2d 09 b8 07 00 00 00 00 2d 08     M...-.-.......-.
     16c:	00 00 00 00 20 06 00 00 00 00 27 05 00 00 00 00     .... .....'.....
     17c:	e0 06 00 00 b8 07 00 00 49 07 e0 06 00 00 20 06     ........I..... .
     18c:	4d 0a 40 0c c0 0d 00 00 ea 0a 40 0c 00 00 4d 0a     M.@.......@...M.
     19c:	00 00 2d 08 2d 09 b8 07 00 00 00 00                 ..-.-.......

000001a8 <font>:
	...
     1b0:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     1c0:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     1d0:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     1e0:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     1f0:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     200:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     210:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     220:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     230:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     240:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     250:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     260:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     270:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     280:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     290:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     2a0:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     2b0:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     2c0:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     2d0:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     2e0:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     2f0:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     300:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     310:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     320:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     330:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     340:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     350:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     360:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     370:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     380:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     390:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     3a0:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     3b0:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     3c0:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     3d0:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     3e0:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     3f0:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     400:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     410:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     420:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     430:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     440:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     450:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     460:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     470:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     480:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     490:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

000004a0 <__ctors_end>:
     4a0:	11 24       	eor	r1, r1
     4a2:	1f be       	out	0x3f, r1	; 63
     4a4:	cf ef       	ldi	r28, 0xFF	; 255
     4a6:	d4 e0       	ldi	r29, 0x04	; 4
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	cd bf       	out	0x3d, r28	; 61

000004ac <__do_copy_data>:
     4ac:	12 e0       	ldi	r17, 0x02	; 2
     4ae:	a0 e0       	ldi	r26, 0x00	; 0
     4b0:	b1 e0       	ldi	r27, 0x01	; 1
     4b2:	e4 e6       	ldi	r30, 0x64	; 100
     4b4:	f8 e3       	ldi	r31, 0x38	; 56
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__do_copy_data+0x10>
     4b8:	05 90       	lpm	r0, Z+
     4ba:	0d 92       	st	X+, r0
     4bc:	a6 3e       	cpi	r26, 0xE6	; 230
     4be:	b1 07       	cpc	r27, r17
     4c0:	d9 f7       	brne	.-10     	; 0x4b8 <__do_copy_data+0xc>

000004c2 <__do_clear_bss>:
     4c2:	22 e0       	ldi	r18, 0x02	; 2
     4c4:	a6 ee       	ldi	r26, 0xE6	; 230
     4c6:	b2 e0       	ldi	r27, 0x02	; 2
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <.do_clear_bss_start>

000004ca <.do_clear_bss_loop>:
     4ca:	1d 92       	st	X+, r1

000004cc <.do_clear_bss_start>:
     4cc:	a2 3f       	cpi	r26, 0xF2	; 242
     4ce:	b2 07       	cpc	r27, r18
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <.do_clear_bss_loop>
     4d2:	0e 94 02 08 	call	0x1004	; 0x1004 <main>
     4d6:	0c 94 30 1c 	jmp	0x3860	; 0x3860 <_exit>

000004da <__bad_interrupt>:
     4da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004de <EEPROM_read>:

// The Atmega 162 contains a 512 bytes EEPROM space.

uint8_t EEPROM_read(unsigned int address){
	//Wait for compleated preveouse write
	while(EECR & (1<<EEWE));
     4de:	e1 99       	sbic	0x1c, 1	; 28
     4e0:	fe cf       	rjmp	.-4      	; 0x4de <EEPROM_read>
	
	//Set write address
	EEAR = address;
     4e2:	9f bb       	out	0x1f, r25	; 31
     4e4:	8e bb       	out	0x1e, r24	; 30
	
	//Start read
	EECR |= (1<<EERE);
     4e6:	e0 9a       	sbi	0x1c, 0	; 28
	
	return EEDR;
     4e8:	8d b3       	in	r24, 0x1d	; 29
}
     4ea:	08 95       	ret

000004ec <EEPROM_write>:

void EEPROM_write(unsigned int address, uint8_t data){
	//Disable interrupt to make sure write is performed
	cli();
     4ec:	f8 94       	cli
	
	//Wait for compleated preveouse write
	while(EECR & (1<<EEWE));
     4ee:	e1 99       	sbic	0x1c, 1	; 28
     4f0:	fe cf       	rjmp	.-4      	; 0x4ee <EEPROM_write+0x2>
	
	//Set write address
	EEAR = address;
     4f2:	9f bb       	out	0x1f, r25	; 31
     4f4:	8e bb       	out	0x1e, r24	; 30
	
	//Save data to EEPROM Data Register
	EEDR = data;
     4f6:	6d bb       	out	0x1d, r22	; 29
	
	//Set EEMWE to 1 to enable write (set EEWE within four clock cycles to write)
	EECR |= (1<<EEMWE);
     4f8:	e2 9a       	sbi	0x1c, 2	; 28
	
	//Start EEPROM write
	EECR |= (1<<EEWE);
     4fa:	e1 9a       	sbi	0x1c, 1	; 28
	
	//Enable interrupt
	sei();
     4fc:	78 94       	sei
     4fe:	08 95       	ret

00000500 <init_handler>:
volatile int handelingMessage = 0;


void init_handler(){
	// Set pin as input (PD3 = INT1)
	DDRD &= ~(1 << PD3);
     500:	8b 98       	cbi	0x11, 3	; 17
	// Set internal pull-up
	PORTD |= (1 << PD3);
     502:	93 9a       	sbi	0x12, 3	; 18
	
	//initialize external interrupt on falling edge
	MCUCR |= (1<<ISC11);
     504:	85 b7       	in	r24, 0x35	; 53
     506:	88 60       	ori	r24, 0x08	; 8
     508:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     50a:	85 b7       	in	r24, 0x35	; 53
     50c:	8b 7f       	andi	r24, 0xFB	; 251
     50e:	85 bf       	out	0x35, r24	; 53
	GICR = (1<<INT1);
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	8b bf       	out	0x3b, r24	; 59
	
	//Enable global interrupts
	sei();
     514:	78 94       	sei
     516:	08 95       	ret

00000518 <send_controlls>:
		default:
			break;
	}
}

void send_controlls(){
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	2a 97       	sbiw	r28, 0x0a	; 10
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	Message m;
	Joystick J;
	Slider S;
		
	//Joystick
	J = get_joystick_position();
     52c:	0e 94 31 09 	call	0x1262	; 0x1262 <get_joystick_position>
	m.id = JOY;
     530:	19 82       	std	Y+1, r1	; 0x01
	m.length = 8;
     532:	28 e0       	ldi	r18, 0x08	; 8
     534:	2a 83       	std	Y+2, r18	; 0x02
	m.data[0] = J.X;
     536:	6b 83       	std	Y+3, r22	; 0x03
	m.data[1] = J.Y;
     538:	7c 83       	std	Y+4, r23	; 0x04
	m.data[2] = J.D;
     53a:	8d 83       	std	Y+5, r24	; 0x05
	m.data[3] = J.Button;
     53c:	9e 83       	std	Y+6, r25	; 0x06
		
	//Slider
	S = get_slider_position();
     53e:	0e 94 b4 08 	call	0x1168	; 0x1168 <get_slider_position>
	m.data[4] = S.left;
     542:	6f 83       	std	Y+7, r22	; 0x07
	m.data[5] = S.right;
     544:	78 87       	std	Y+8, r23	; 0x08
	m.data[6] = S.leftButton;
     546:	89 87       	std	Y+9, r24	; 0x09
	m.data[7] = S.rightButton;
     548:	9a 87       	std	Y+10, r25	; 0x0a
		
	//Send can message
	CAN_transmit(&m);
     54a:	ce 01       	movw	r24, r28
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	0e 94 46 08 	call	0x108c	; 0x108c <CAN_transmit>
}
     552:	2a 96       	adiw	r28, 0x0a	; 10
     554:	0f b6       	in	r0, 0x3f	; 63
     556:	f8 94       	cli
     558:	de bf       	out	0x3e, r29	; 62
     55a:	0f be       	out	0x3f, r0	; 63
     55c:	cd bf       	out	0x3d, r28	; 61
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <send_highscore>:

//send ping-pong highscore to node 2 through CAN
void send_highscore(uint8_t i){
     564:	1f 93       	push	r17
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	ca 55       	subi	r28, 0x5A	; 90
     570:	d1 09       	sbc	r29, r1
     572:	0f b6       	in	r0, 0x3f	; 63
     574:	f8 94       	cli
     576:	de bf       	out	0x3e, r29	; 62
     578:	0f be       	out	0x3f, r0	; 63
     57a:	cd bf       	out	0x3d, r28	; 61
     57c:	18 2f       	mov	r17, r24
	highscore leaderboard[16];
	highscore_leaderboard(PINGPONG, leaderboard, 16);
     57e:	40 e1       	ldi	r20, 0x10	; 16
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	be 01       	movw	r22, r28
     584:	6f 5f       	subi	r22, 0xFF	; 255
     586:	7f 4f       	sbci	r23, 0xFF	; 255
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	0e 94 2a 05 	call	0xa54	; 0xa54 <highscore_leaderboard>
	Message m;
	m.id = HIGHSCORE;
     58e:	83 e0       	ldi	r24, 0x03	; 3
     590:	62 96       	adiw	r28, 0x12	; 18
     592:	8f af       	std	Y+63, r24	; 0x3f
     594:	62 97       	sbiw	r28, 0x12	; 18
	m.length = 5;
     596:	85 e0       	ldi	r24, 0x05	; 5
     598:	63 96       	adiw	r28, 0x13	; 19
     59a:	8f af       	std	Y+63, r24	; 0x3f
     59c:	63 97       	sbiw	r28, 0x13	; 19
	m.data[0] = leaderboard[i].place;
     59e:	81 2f       	mov	r24, r17
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	fc 01       	movw	r30, r24
     5a4:	ee 0f       	add	r30, r30
     5a6:	ff 1f       	adc	r31, r31
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	e8 0f       	add	r30, r24
     5ae:	f9 1f       	adc	r31, r25
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	8c 0f       	add	r24, r28
     5b6:	9d 1f       	adc	r25, r29
     5b8:	e8 0f       	add	r30, r24
     5ba:	f9 1f       	adc	r31, r25
     5bc:	84 81       	ldd	r24, Z+4	; 0x04
     5be:	64 96       	adiw	r28, 0x14	; 20
     5c0:	8f af       	std	Y+63, r24	; 0x3f
     5c2:	64 97       	sbiw	r28, 0x14	; 20
	m.data[1] = leaderboard[i].name[0];
     5c4:	80 81       	ld	r24, Z
     5c6:	65 96       	adiw	r28, 0x15	; 21
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	65 97       	sbiw	r28, 0x15	; 21
	m.data[2] = leaderboard[i].name[1];
     5cc:	81 81       	ldd	r24, Z+1	; 0x01
     5ce:	66 96       	adiw	r28, 0x16	; 22
     5d0:	8f af       	std	Y+63, r24	; 0x3f
     5d2:	66 97       	sbiw	r28, 0x16	; 22
	m.data[3] = leaderboard[i].name[2];
     5d4:	82 81       	ldd	r24, Z+2	; 0x02
     5d6:	67 96       	adiw	r28, 0x17	; 23
     5d8:	8f af       	std	Y+63, r24	; 0x3f
     5da:	67 97       	sbiw	r28, 0x17	; 23
	m.data[4] = leaderboard[i].score;
     5dc:	83 81       	ldd	r24, Z+3	; 0x03
     5de:	68 96       	adiw	r28, 0x18	; 24
     5e0:	8f af       	std	Y+63, r24	; 0x3f
     5e2:	68 97       	sbiw	r28, 0x18	; 24
	CAN_transmit(&m);
     5e4:	ce 01       	movw	r24, r28
     5e6:	8f 5a       	subi	r24, 0xAF	; 175
     5e8:	9f 4f       	sbci	r25, 0xFF	; 255
     5ea:	0e 94 46 08 	call	0x108c	; 0x108c <CAN_transmit>
}
     5ee:	c6 5a       	subi	r28, 0xA6	; 166
     5f0:	df 4f       	sbci	r29, 0xFF	; 255
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	08 95       	ret

00000604 <handle_message>:
ISR(INT1_vect){
	handle_message();
}


void handle_message(){
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	cd b7       	in	r28, 0x3d	; 61
     60a:	de b7       	in	r29, 0x3e	; 62
     60c:	2a 97       	sbiw	r28, 0x0a	; 10
     60e:	0f b6       	in	r0, 0x3f	; 63
     610:	f8 94       	cli
     612:	de bf       	out	0x3e, r29	; 62
     614:	0f be       	out	0x3f, r0	; 63
     616:	cd bf       	out	0x3d, r28	; 61
	Message m;
	CAN_receive(&m);
     618:	ce 01       	movw	r24, r28
     61a:	01 96       	adiw	r24, 0x01	; 1
     61c:	0e 94 79 08 	call	0x10f2	; 0x10f2 <CAN_receive>
	
	//Decide what to do
	switch(m.id){
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	82 30       	cpi	r24, 0x02	; 2
     624:	39 f0       	breq	.+14     	; 0x634 <handle_message+0x30>
     626:	83 30       	cpi	r24, 0x03	; 3
     628:	61 f0       	breq	.+24     	; 0x642 <handle_message+0x3e>
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	71 f4       	brne	.+28     	; 0x64a <handle_message+0x46>
		case JOY:
			break;
		case JOYREQ:
			send_controlls();
     62e:	0e 94 8c 02 	call	0x518	; 0x518 <send_controlls>
			break;
     632:	0b c0       	rjmp	.+22     	; 0x64a <handle_message+0x46>
		case GAME_STATUS:
			state_set(m.data[0]);
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	0e 94 f5 07 	call	0xfea	; 0xfea <state_set>
			score_set(m.data[1]);
     63a:	8c 81       	ldd	r24, Y+4	; 0x04
     63c:	0e 94 f8 07 	call	0xff0	; 0xff0 <score_set>
			break;
     640:	04 c0       	rjmp	.+8      	; 0x64a <handle_message+0x46>
		case HIGHSCORE:
			send_highscore(m.data[0]);
     642:	8b 81       	ldd	r24, Y+3	; 0x03
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 b2 02 	call	0x564	; 0x564 <send_highscore>
		default:
			break;
	}
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <__vector_2>:
	
	//Enable global interrupts
	sei();
}

ISR(INT1_vect){
     65c:	1f 92       	push	r1
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	0f 92       	push	r0
     664:	11 24       	eor	r1, r1
     666:	2f 93       	push	r18
     668:	3f 93       	push	r19
     66a:	4f 93       	push	r20
     66c:	5f 93       	push	r21
     66e:	6f 93       	push	r22
     670:	7f 93       	push	r23
     672:	8f 93       	push	r24
     674:	9f 93       	push	r25
     676:	af 93       	push	r26
     678:	bf 93       	push	r27
     67a:	ef 93       	push	r30
     67c:	ff 93       	push	r31
	handle_message();
     67e:	0e 94 02 03 	call	0x604	; 0x604 <handle_message>
}
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	bf 91       	pop	r27
     688:	af 91       	pop	r26
     68a:	9f 91       	pop	r25
     68c:	8f 91       	pop	r24
     68e:	7f 91       	pop	r23
     690:	6f 91       	pop	r22
     692:	5f 91       	pop	r21
     694:	4f 91       	pop	r20
     696:	3f 91       	pop	r19
     698:	2f 91       	pop	r18
     69a:	0f 90       	pop	r0
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	0f 90       	pop	r0
     6a0:	1f 90       	pop	r1
     6a2:	18 95       	reti

000006a4 <music_init>:
	12, 12, 12, 12,
	12, 12, 12, 12,
};
void music_init(){
	//set data direction out
	DDRE |= (1 << NOTE_PIN);
     6a4:	32 9a       	sbi	0x06, 2	; 6
     6a6:	08 95       	ret

000006a8 <delay_us>:
}
//delay for realtime variable length
void delay_us(uint16_t count) {
	while(count--) {
     6a8:	00 97       	sbiw	r24, 0x00	; 0
     6aa:	31 f0       	breq	.+12     	; 0x6b8 <delay_us+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <delay_us+0x6>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <delay_us+0x8>
     6b0:	00 00       	nop
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	d1 f7       	brne	.-12     	; 0x6ac <delay_us+0x4>
     6b8:	08 95       	ret

000006ba <play_note>:
		_delay_us(1);

	}
}
//duration == length of note in ms, period == 1/Hz
void play_note(float duration, float period){
     6ba:	8f 92       	push	r8
     6bc:	9f 92       	push	r9
     6be:	af 92       	push	r10
     6c0:	bf 92       	push	r11
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
     6ce:	4b 01       	movw	r8, r22
     6d0:	5c 01       	movw	r10, r24
     6d2:	69 01       	movw	r12, r18
     6d4:	7a 01       	movw	r14, r20
	int cycles = duration*1000/period; //number of cycles to toggle pin to make frequency
	int half_period = period/2;
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	40 e0       	ldi	r20, 0x00	; 0
     6dc:	5f e3       	ldi	r21, 0x3F	; 63
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     6e6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixsfsi>
     6ea:	eb 01       	movw	r28, r22

	}
}
//duration == length of note in ms, period == 1/Hz
void play_note(float duration, float period){
	int cycles = duration*1000/period; //number of cycles to toggle pin to make frequency
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	4a e7       	ldi	r20, 0x7A	; 122
     6f2:	54 e4       	ldi	r21, 0x44	; 68
     6f4:	c5 01       	movw	r24, r10
     6f6:	b4 01       	movw	r22, r8
     6f8:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
     6fc:	a7 01       	movw	r20, r14
     6fe:	96 01       	movw	r18, r12
     700:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__divsf3>
     704:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixsfsi>
     708:	6b 01       	movw	r12, r22
	int half_period = period/2;

	for(uint16_t i = 0; i < cycles; i++){
     70a:	61 15       	cp	r22, r1
     70c:	71 05       	cpc	r23, r1
     70e:	81 f0       	breq	.+32     	; 0x730 <play_note+0x76>
     710:	e1 2c       	mov	r14, r1
     712:	f1 2c       	mov	r15, r1
		NOTE_PORT |= (1 << NOTE_PIN);
     714:	3a 9a       	sbi	0x07, 2	; 7
		delay_us(half_period);
     716:	ce 01       	movw	r24, r28
     718:	0e 94 54 03 	call	0x6a8	; 0x6a8 <delay_us>
		NOTE_PORT &= ~(1 << NOTE_PIN);
     71c:	3a 98       	cbi	0x07, 2	; 7
		delay_us(half_period);
     71e:	ce 01       	movw	r24, r28
     720:	0e 94 54 03 	call	0x6a8	; 0x6a8 <delay_us>
//duration == length of note in ms, period == 1/Hz
void play_note(float duration, float period){
	int cycles = duration*1000/period; //number of cycles to toggle pin to make frequency
	int half_period = period/2;

	for(uint16_t i = 0; i < cycles; i++){
     724:	8f ef       	ldi	r24, 0xFF	; 255
     726:	e8 1a       	sub	r14, r24
     728:	f8 0a       	sbc	r15, r24
     72a:	ec 14       	cp	r14, r12
     72c:	fd 04       	cpc	r15, r13
     72e:	91 f7       	brne	.-28     	; 0x714 <play_note+0x5a>
		NOTE_PORT |= (1 << NOTE_PIN);
		delay_us(half_period);
		NOTE_PORT &= ~(1 << NOTE_PIN);
		delay_us(half_period);
	}
}
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	ff 90       	pop	r15
     736:	ef 90       	pop	r14
     738:	df 90       	pop	r13
     73a:	cf 90       	pop	r12
     73c:	bf 90       	pop	r11
     73e:	af 90       	pop	r10
     740:	9f 90       	pop	r9
     742:	8f 90       	pop	r8
     744:	08 95       	ret

00000746 <play_song>:


void play_song(uint16_t notes[], uint16_t beats[], uint8_t song_length, uint16_t tempo_scale){
     746:	2f 92       	push	r2
     748:	3f 92       	push	r3
     74a:	4f 92       	push	r4
     74c:	5f 92       	push	r5
     74e:	6f 92       	push	r6
     750:	7f 92       	push	r7
     752:	8f 92       	push	r8
     754:	9f 92       	push	r9
     756:	af 92       	push	r10
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	00 d0       	rcall	.+0      	; 0x76c <play_song+0x26>
     76c:	00 d0       	rcall	.+0      	; 0x76e <play_song+0x28>
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
     772:	08 2f       	mov	r16, r24
     774:	19 2f       	mov	r17, r25
     776:	f6 2e       	mov	r15, r22
     778:	d7 2e       	mov	r13, r23
     77a:	e4 2e       	mov	r14, r20
     77c:	19 01       	movw	r2, r18
	music_init();
     77e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <music_init>
	for(int i = 0; i < song_length; i++ ){
     782:	ee 20       	and	r14, r14
     784:	09 f4       	brne	.+2      	; 0x788 <play_song+0x42>
     786:	48 c0       	rjmp	.+144    	; 0x818 <play_song+0xd2>
     788:	a0 2e       	mov	r10, r16
     78a:	b1 2e       	mov	r11, r17
     78c:	0f 2d       	mov	r16, r15
     78e:	1d 2d       	mov	r17, r13
     790:	4e 2d       	mov	r20, r14
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	9a 01       	movw	r18, r20
     796:	22 0f       	add	r18, r18
     798:	33 1f       	adc	r19, r19
     79a:	3a 83       	std	Y+2, r19	; 0x02
     79c:	29 83       	std	Y+1, r18	; 0x01
     79e:	1c 82       	std	Y+4, r1	; 0x04
     7a0:	1b 82       	std	Y+3, r1	; 0x03
		//if (notes[i] == 0){
			//delay_us(tempo_scale*beats[i]);
		//}
		//else{
			play_note(tempo_scale*beats[i], 1000000/notes[i]);
     7a2:	0f 2e       	mov	r0, r31
     7a4:	f0 e4       	ldi	r31, 0x40	; 64
     7a6:	4f 2e       	mov	r4, r31
     7a8:	f2 e4       	ldi	r31, 0x42	; 66
     7aa:	5f 2e       	mov	r5, r31
     7ac:	ff e0       	ldi	r31, 0x0F	; 15
     7ae:	6f 2e       	mov	r6, r31
     7b0:	71 2c       	mov	r7, r1
     7b2:	f0 2d       	mov	r31, r0
     7b4:	f5 01       	movw	r30, r10
     7b6:	21 91       	ld	r18, Z+
     7b8:	31 91       	ld	r19, Z+
     7ba:	5f 01       	movw	r10, r30
     7bc:	f8 01       	movw	r30, r16
     7be:	81 90       	ld	r8, Z+
     7c0:	91 90       	ld	r9, Z+
     7c2:	8f 01       	movw	r16, r30
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	c3 01       	movw	r24, r6
     7ca:	b2 01       	movw	r22, r4
     7cc:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__divmodsi4>
     7d0:	ca 01       	movw	r24, r20
     7d2:	b9 01       	movw	r22, r18
     7d4:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
     7d8:	6b 01       	movw	r12, r22
     7da:	7c 01       	movw	r14, r24
     7dc:	82 9c       	mul	r8, r2
     7de:	b0 01       	movw	r22, r0
     7e0:	83 9c       	mul	r8, r3
     7e2:	70 0d       	add	r23, r0
     7e4:	92 9c       	mul	r9, r2
     7e6:	70 0d       	add	r23, r0
     7e8:	11 24       	eor	r1, r1
     7ea:	80 e0       	ldi	r24, 0x00	; 0
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__floatunsisf>
     7f2:	a7 01       	movw	r20, r14
     7f4:	96 01       	movw	r18, r12
     7f6:	0e 94 5d 03 	call	0x6ba	; 0x6ba <play_note>
     7fa:	86 e6       	ldi	r24, 0x66	; 102
     7fc:	92 e0       	ldi	r25, 0x02	; 2
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <play_song+0xb8>
     802:	00 00       	nop
     804:	eb 81       	ldd	r30, Y+3	; 0x03
     806:	fc 81       	ldd	r31, Y+4	; 0x04
     808:	32 96       	adiw	r30, 0x02	; 2
     80a:	fc 83       	std	Y+4, r31	; 0x04
     80c:	eb 83       	std	Y+3, r30	; 0x03
}


void play_song(uint16_t notes[], uint16_t beats[], uint8_t song_length, uint16_t tempo_scale){
	music_init();
	for(int i = 0; i < song_length; i++ ){
     80e:	29 81       	ldd	r18, Y+1	; 0x01
     810:	3a 81       	ldd	r19, Y+2	; 0x02
     812:	e2 17       	cp	r30, r18
     814:	f3 07       	cpc	r31, r19
     816:	71 f6       	brne	.-100    	; 0x7b4 <play_song+0x6e>
		//else{
			play_note(tempo_scale*beats[i], 1000000/notes[i]);
			_delay_us(500);		
		//}
	}
}
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	0f 90       	pop	r0
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	1f 91       	pop	r17
     826:	0f 91       	pop	r16
     828:	ff 90       	pop	r15
     82a:	ef 90       	pop	r14
     82c:	df 90       	pop	r13
     82e:	cf 90       	pop	r12
     830:	bf 90       	pop	r11
     832:	af 90       	pop	r10
     834:	9f 90       	pop	r9
     836:	8f 90       	pop	r8
     838:	7f 90       	pop	r7
     83a:	6f 90       	pop	r6
     83c:	5f 90       	pop	r5
     83e:	4f 90       	pop	r4
     840:	3f 90       	pop	r3
     842:	2f 90       	pop	r2
     844:	08 95       	ret

00000846 <play_lisa>:

void play_lisa(){
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	cd b7       	in	r28, 0x3d	; 61
     84c:	de b7       	in	r29, 0x3e	; 62
     84e:	c8 55       	subi	r28, 0x58	; 88
     850:	d1 09       	sbc	r29, r1
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
	const uint16_t lisa_notes[] = {NOTE_C4,NOTE_D4,NOTE_E4, NOTE_F4, NOTE_G4, NOTE_G4, NOTE_A4, NOTE_A4, NOTE_A4, NOTE_A4, NOTE_G4, NOTE_F4, NOTE_F4, NOTE_F4, NOTE_F4, NOTE_E4, NOTE_E4, NOTE_D4,NOTE_D4,NOTE_D4,NOTE_D4, NOTE_C4 };
     85c:	8c e2       	ldi	r24, 0x2C	; 44
     85e:	e2 e1       	ldi	r30, 0x12	; 18
     860:	f1 e0       	ldi	r31, 0x01	; 1
     862:	de 01       	movw	r26, r28
     864:	11 96       	adiw	r26, 0x01	; 1
     866:	01 90       	ld	r0, Z+
     868:	0d 92       	st	X+, r0
     86a:	8a 95       	dec	r24
     86c:	e1 f7       	brne	.-8      	; 0x866 <play_lisa+0x20>
	const uint16_t lisa_beats[] = {200,200,200,200, 400,400, 200,200,200,200, 800, 200,200,200,200, 400,400, 200,200,200,200, 800 };
     86e:	8c e2       	ldi	r24, 0x2C	; 44
     870:	ee e3       	ldi	r30, 0x3E	; 62
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	de 01       	movw	r26, r28
     876:	9d 96       	adiw	r26, 0x2d	; 45
     878:	01 90       	ld	r0, Z+
     87a:	0d 92       	st	X+, r0
     87c:	8a 95       	dec	r24
     87e:	e1 f7       	brne	.-8      	; 0x878 <play_lisa+0x32>
	uint8_t song_length = 22;
	play_song(lisa_notes, lisa_beats, song_length, 1);
     880:	21 e0       	ldi	r18, 0x01	; 1
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	46 e1       	ldi	r20, 0x16	; 22
     886:	be 01       	movw	r22, r28
     888:	63 5d       	subi	r22, 0xD3	; 211
     88a:	7f 4f       	sbci	r23, 0xFF	; 255
     88c:	ce 01       	movw	r24, r28
     88e:	01 96       	adiw	r24, 0x01	; 1
     890:	0e 94 a3 03 	call	0x746	; 0x746 <play_song>
}
     894:	c8 5a       	subi	r28, 0xA8	; 168
     896:	df 4f       	sbci	r29, 0xFF	; 255
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <play_mario>:

void play_mario(){

	uint8_t song_length = 78;
	play_song(mario_notes, mario_beats, song_length, 10000);
     8a8:	20 e1       	ldi	r18, 0x10	; 16
     8aa:	37 e2       	ldi	r19, 0x27	; 39
     8ac:	4e e4       	ldi	r20, 0x4E	; 78
     8ae:	60 e7       	ldi	r22, 0x70	; 112
     8b0:	70 e0       	ldi	r23, 0x00	; 0
     8b2:	8c e0       	ldi	r24, 0x0C	; 12
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	0e 94 a3 03 	call	0x746	; 0x746 <play_song>
     8ba:	08 95       	ret

000008bc <SPI_init>:
#define SCK		PB7
#define SS		PB4

void SPI_init(){
	//Datadir: MOSI (== PB5) out, SCK (== PB7) out, !SS (== PB4) out
	DDRB = (1<<MOSI)|(1<<SCK)|(1<<SS);
     8bc:	80 eb       	ldi	r24, 0xB0	; 176
     8be:	87 bb       	out	0x17, r24	; 23
	//Enable SPI and Master, and set clock rate to fck/16
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     8c0:	81 e5       	ldi	r24, 0x51	; 81
     8c2:	8d b9       	out	0x0d, r24	; 13
     8c4:	08 95       	ret

000008c6 <SPI_transmit>:
}
uint8_t SPI_transmit(uint8_t data){
	// start transmission
	SPDR = data;
     8c6:	8f b9       	out	0x0f, r24	; 15
	//Wait for data to be ent and receved
	while(!(SPSR & (1<<SPIF)));
     8c8:	77 9b       	sbis	0x0e, 7	; 14
     8ca:	fe cf       	rjmp	.-4      	; 0x8c8 <SPI_transmit+0x2>
	//Return answer
	return SPDR;
     8cc:	8f b1       	in	r24, 0x0f	; 15
}
     8ce:	08 95       	ret

000008d0 <SPI_send>:

void SPI_send(uint8_t c){
	SPI_transmit(c);
     8d0:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_transmit>
     8d4:	08 95       	ret

000008d6 <SPI_receive>:
}

uint8_t SPI_receive(){
	return SPI_transmit(0b11001100);
     8d6:	8c ec       	ldi	r24, 0xCC	; 204
     8d8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_transmit>
}
     8dc:	08 95       	ret

000008de <SPI_ss_high>:

void SPI_ss_high(){
	PORTB |= (1<<SS);
     8de:	c4 9a       	sbi	0x18, 4	; 24
     8e0:	08 95       	ret

000008e2 <SPI_ss_low>:
}

void SPI_ss_low(){
	PORTB &= ~(1<<SS);
     8e2:	c4 98       	cbi	0x18, 4	; 24
     8e4:	08 95       	ret

000008e6 <highscore_save>:
#include "..\Driver_files\EEPROM_driver.h"
#include "..\Driver_files\oled_driver.h"
#include "..\Driver_files\joy_driver.h"


void highscore_save(uint8_t game, highscore *score){
     8e6:	6f 92       	push	r6
     8e8:	7f 92       	push	r7
     8ea:	8f 92       	push	r8
     8ec:	9f 92       	push	r9
     8ee:	af 92       	push	r10
     8f0:	bf 92       	push	r11
     8f2:	cf 92       	push	r12
     8f4:	df 92       	push	r13
     8f6:	ef 92       	push	r14
     8f8:	ff 92       	push	r15
     8fa:	0f 93       	push	r16
     8fc:	1f 93       	push	r17
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	8b 01       	movw	r16, r22
	if (score->place > 0 && score->place < 17){
     904:	fb 01       	movw	r30, r22
     906:	84 80       	ldd	r8, Z+4	; 0x04
     908:	9f ef       	ldi	r25, 0xFF	; 255
     90a:	98 0d       	add	r25, r8
     90c:	90 31       	cpi	r25, 0x10	; 16
     90e:	28 f5       	brcc	.+74     	; 0x95a <highscore_save+0x74>
		//Calculate index of score
		int index = (score->place-1)*4;
     910:	91 2c       	mov	r9, r1
     912:	f1 e0       	ldi	r31, 0x01	; 1
     914:	8f 1a       	sub	r8, r31
     916:	91 08       	sbc	r9, r1
     918:	88 0c       	add	r8, r8
     91a:	99 1c       	adc	r9, r9
     91c:	88 0c       	add	r8, r8
     91e:	99 1c       	adc	r9, r9
     920:	eb 01       	movw	r28, r22
		
		//Save name, score in EEPROM
		for (int i = 0; i < 3; i++){
     922:	61 2c       	mov	r6, r1
     924:	71 2c       	mov	r7, r1
			EEPROM_write(game + index + i, score->name[i]);
     926:	e8 2e       	mov	r14, r24
     928:	f1 2c       	mov	r15, r1
     92a:	54 01       	movw	r10, r8
     92c:	ae 0c       	add	r10, r14
     92e:	bf 1c       	adc	r11, r15
     930:	69 91       	ld	r22, Y+
     932:	c5 01       	movw	r24, r10
     934:	86 0d       	add	r24, r6
     936:	97 1d       	adc	r25, r7
     938:	0e 94 76 02 	call	0x4ec	; 0x4ec <EEPROM_write>
	if (score->place > 0 && score->place < 17){
		//Calculate index of score
		int index = (score->place-1)*4;
		
		//Save name, score in EEPROM
		for (int i = 0; i < 3; i++){
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	68 1a       	sub	r6, r24
     940:	78 0a       	sbc	r7, r24
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	69 16       	cp	r6, r25
     946:	71 04       	cpc	r7, r1
     948:	99 f7       	brne	.-26     	; 0x930 <highscore_save+0x4a>
			EEPROM_write(game + index + i, score->name[i]);
		}
		EEPROM_write(game + index + 3, score->score);
     94a:	c4 01       	movw	r24, r8
     94c:	8e 0d       	add	r24, r14
     94e:	9f 1d       	adc	r25, r15
     950:	f8 01       	movw	r30, r16
     952:	63 81       	ldd	r22, Z+3	; 0x03
     954:	03 96       	adiw	r24, 0x03	; 3
     956:	0e 94 76 02 	call	0x4ec	; 0x4ec <EEPROM_write>
	}
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	9f 90       	pop	r9
     970:	8f 90       	pop	r8
     972:	7f 90       	pop	r7
     974:	6f 90       	pop	r6
     976:	08 95       	ret

00000978 <highscore_get>:
		}
		return score->place;
	}
}

highscore highscore_get(uint8_t game, uint8_t position){
     978:	5f 92       	push	r5
     97a:	6f 92       	push	r6
     97c:	7f 92       	push	r7
     97e:	8f 92       	push	r8
     980:	9f 92       	push	r9
     982:	af 92       	push	r10
     984:	bf 92       	push	r11
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	0f 93       	push	r16
     990:	1f 93       	push	r17
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62
     99a:	2a 97       	sbiw	r28, 0x0a	; 10
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	56 2e       	mov	r5, r22
	highscore hs;
	
	//Make sure legal position between 1 and 16
	position = (position > 0 && position < 17)? position : 0;
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	96 0f       	add	r25, r22
     9ac:	90 31       	cpi	r25, 0x10	; 16
     9ae:	08 f0       	brcs	.+2      	; 0x9b2 <highscore_get+0x3a>
     9b0:	51 2c       	mov	r5, r1
	hs.place = position;
	
	//Calculate index of score
	int index = (position-1)*4;
     9b2:	65 2c       	mov	r6, r5
     9b4:	71 2c       	mov	r7, r1
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	69 1a       	sub	r6, r25
     9ba:	71 08       	sbc	r7, r1
     9bc:	66 0c       	add	r6, r6
     9be:	77 1c       	adc	r7, r7
     9c0:	66 0c       	add	r6, r6
     9c2:	77 1c       	adc	r7, r7
     9c4:	8e 01       	movw	r16, r28
     9c6:	0a 5f       	subi	r16, 0xFA	; 250
     9c8:	1f 4f       	sbci	r17, 0xFF	; 255
     9ca:	4e 01       	movw	r8, r28
     9cc:	e9 e0       	ldi	r30, 0x09	; 9
     9ce:	8e 0e       	add	r8, r30
     9d0:	91 1c       	adc	r9, r1
	
	//Get name, score from EEPROM
	for (int i = 0; i < 3; i++){
		hs.name[i] = EEPROM_read(game + index + i);
     9d2:	e8 2e       	mov	r14, r24
     9d4:	f1 2c       	mov	r15, r1
     9d6:	57 01       	movw	r10, r14
     9d8:	a0 1a       	sub	r10, r16
     9da:	b1 0a       	sbc	r11, r17
     9dc:	a6 0c       	add	r10, r6
     9de:	b7 1c       	adc	r11, r7
     9e0:	c5 01       	movw	r24, r10
     9e2:	80 0f       	add	r24, r16
     9e4:	91 1f       	adc	r25, r17
     9e6:	0e 94 6f 02 	call	0x4de	; 0x4de <EEPROM_read>
     9ea:	f8 01       	movw	r30, r16
     9ec:	81 93       	st	Z+, r24
     9ee:	8f 01       	movw	r16, r30
	
	//Calculate index of score
	int index = (position-1)*4;
	
	//Get name, score from EEPROM
	for (int i = 0; i < 3; i++){
     9f0:	e8 15       	cp	r30, r8
     9f2:	f9 05       	cpc	r31, r9
     9f4:	a9 f7       	brne	.-22     	; 0x9e0 <highscore_get+0x68>
		hs.name[i] = EEPROM_read(game + index + i);
	}
	hs.score = EEPROM_read(game + index + 3);
     9f6:	c3 01       	movw	r24, r6
     9f8:	8e 0d       	add	r24, r14
     9fa:	9f 1d       	adc	r25, r15
     9fc:	03 96       	adiw	r24, 0x03	; 3
     9fe:	0e 94 6f 02 	call	0x4de	; 0x4de <EEPROM_read>
	return hs;
     a02:	89 87       	std	Y+9, r24	; 0x09
     a04:	5a 86       	std	Y+10, r5	; 0x0a
     a06:	85 e0       	ldi	r24, 0x05	; 5
     a08:	fe 01       	movw	r30, r28
     a0a:	36 96       	adiw	r30, 0x06	; 6
     a0c:	de 01       	movw	r26, r28
     a0e:	11 96       	adiw	r26, 0x01	; 1
     a10:	01 90       	ld	r0, Z+
     a12:	0d 92       	st	X+, r0
     a14:	8a 95       	dec	r24
     a16:	e1 f7       	brne	.-8      	; 0xa10 <highscore_get+0x98>
     a18:	29 81       	ldd	r18, Y+1	; 0x01
     a1a:	3a 81       	ldd	r19, Y+2	; 0x02
     a1c:	4b 81       	ldd	r20, Y+3	; 0x03
     a1e:	5c 81       	ldd	r21, Y+4	; 0x04
     a20:	6d 81       	ldd	r22, Y+5	; 0x05
}
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	2a 96       	adiw	r28, 0x0a	; 10
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	7f 90       	pop	r7
     a4e:	6f 90       	pop	r6
     a50:	5f 90       	pop	r5
     a52:	08 95       	ret

00000a54 <highscore_leaderboard>:


void highscore_leaderboard(uint8_t game, highscore leaderboard[], int length){
     a54:	df 92       	push	r13
     a56:	ef 92       	push	r14
     a58:	ff 92       	push	r15
     a5a:	0f 93       	push	r16
     a5c:	1f 93       	push	r17
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	d8 2e       	mov	r13, r24
	for (int i = 0; i < length; i++){
     a64:	14 16       	cp	r1, r20
     a66:	15 06       	cpc	r1, r21
     a68:	bc f4       	brge	.+46     	; 0xa98 <highscore_leaderboard+0x44>
     a6a:	c6 2f       	mov	r28, r22
     a6c:	d7 2f       	mov	r29, r23
     a6e:	7a 01       	movw	r14, r20
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	e8 1a       	sub	r14, r24
     a74:	f8 0a       	sbc	r15, r24
     a76:	01 e0       	ldi	r16, 0x01	; 1
     a78:	10 e0       	ldi	r17, 0x00	; 0
		leaderboard[i] = highscore_get(game, i+1);
     a7a:	60 2f       	mov	r22, r16
     a7c:	8d 2d       	mov	r24, r13
     a7e:	0e 94 bc 04 	call	0x978	; 0x978 <highscore_get>
     a82:	28 83       	st	Y, r18
     a84:	39 83       	std	Y+1, r19	; 0x01
     a86:	4a 83       	std	Y+2, r20	; 0x02
     a88:	5b 83       	std	Y+3, r21	; 0x03
     a8a:	6c 83       	std	Y+4, r22	; 0x04
     a8c:	0f 5f       	subi	r16, 0xFF	; 255
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	25 96       	adiw	r28, 0x05	; 5
	return hs;
}


void highscore_leaderboard(uint8_t game, highscore leaderboard[], int length){
	for (int i = 0; i < length; i++){
     a92:	0e 15       	cp	r16, r14
     a94:	1f 05       	cpc	r17, r15
     a96:	89 f7       	brne	.-30     	; 0xa7a <highscore_leaderboard+0x26>
		leaderboard[i] = highscore_get(game, i+1);
	}
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	ff 90       	pop	r15
     aa2:	ef 90       	pop	r14
     aa4:	df 90       	pop	r13
     aa6:	08 95       	ret

00000aa8 <highscore_add>:
		}
		EEPROM_write(game + index + 3, score->score);
	}
}

uint8_t highscore_add(uint8_t game, highscore *score){
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	c0 55       	subi	r28, 0x50	; 80
     ac0:	d1 09       	sbc	r29, r1
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	d8 2e       	mov	r13, r24
     ace:	7b 01       	movw	r14, r22
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
     ad0:	40 e1       	ldi	r20, 0x10	; 16
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	be 01       	movw	r22, r28
     ad6:	6f 5f       	subi	r22, 0xFF	; 255
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	0e 94 2a 05 	call	0xa54	; 0xa54 <highscore_leaderboard>
	score->place = 0;
     ade:	f7 01       	movw	r30, r14
     ae0:	14 82       	std	Z+4, r1	; 0x04
	
	//find place
	for(int i = 0; i < 16; i++){
		if(leaderboard[i].score < score->score){
     ae2:	93 81       	ldd	r25, Z+3	; 0x03
     ae4:	fe 01       	movw	r30, r28
     ae6:	34 96       	adiw	r30, 0x04	; 4
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
	score->place = 0;
	
	//find place
	for(int i = 0; i < 16; i++){
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
		if(leaderboard[i].score < score->score){
     aec:	80 81       	ld	r24, Z
     aee:	89 17       	cp	r24, r25
     af0:	80 f4       	brcc	.+32     	; 0xb12 <highscore_add+0x6a>
			score->place = leaderboard[i].place;
     af2:	f9 01       	movw	r30, r18
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	2e 0f       	add	r18, r30
     afe:	3f 1f       	adc	r19, r31
     b00:	fe 01       	movw	r30, r28
     b02:	e2 0f       	add	r30, r18
     b04:	f3 1f       	adc	r31, r19
     b06:	85 81       	ldd	r24, Z+5	; 0x05
     b08:	f7 01       	movw	r30, r14
     b0a:	84 83       	std	Z+4, r24	; 0x04
			i = 16;
		}
	}
	
	//return 0 if not a highscore
	if(score->place == 0){
     b0c:	88 23       	and	r24, r24
     b0e:	a1 f1       	breq	.+104    	; 0xb78 <highscore_add+0xd0>
     b10:	07 c0       	rjmp	.+14     	; 0xb20 <highscore_add+0x78>
	highscore leaderboard[16];
	highscore_leaderboard(game, leaderboard, 16);
	score->place = 0;
	
	//find place
	for(int i = 0; i < 16; i++){
     b12:	2f 5f       	subi	r18, 0xFF	; 255
     b14:	3f 4f       	sbci	r19, 0xFF	; 255
     b16:	35 96       	adiw	r30, 0x05	; 5
     b18:	20 31       	cpi	r18, 0x10	; 16
     b1a:	31 05       	cpc	r19, r1
     b1c:	39 f7       	brne	.-50     	; 0xaec <highscore_add+0x44>
     b1e:	2e c0       	rjmp	.+92     	; 0xb7c <highscore_add+0xd4>
		return 0;
	}
	
	// Add score and move down other scores
	else{
		highscore_save(game, score);
     b20:	b7 01       	movw	r22, r14
     b22:	8d 2d       	mov	r24, r13
     b24:	0e 94 73 04 	call	0x8e6	; 0x8e6 <highscore_save>
		for (int i = score->place -1; i < 16; i++){
     b28:	f7 01       	movw	r30, r14
     b2a:	84 81       	ldd	r24, Z+4	; 0x04
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	01 97       	sbiw	r24, 0x01	; 1
     b30:	80 31       	cpi	r24, 0x10	; 16
     b32:	91 05       	cpc	r25, r1
     b34:	f4 f4       	brge	.+60     	; 0xb72 <highscore_add+0xca>
     b36:	8c 01       	movw	r16, r24
     b38:	00 0f       	add	r16, r16
     b3a:	11 1f       	adc	r17, r17
     b3c:	00 0f       	add	r16, r16
     b3e:	11 1f       	adc	r17, r17
     b40:	08 0f       	add	r16, r24
     b42:	19 1f       	adc	r17, r25
     b44:	0c 0f       	add	r16, r28
     b46:	1d 1f       	adc	r17, r29
     b48:	0b 5f       	subi	r16, 0xFB	; 251
     b4a:	1f 4f       	sbci	r17, 0xFF	; 255
     b4c:	5e 01       	movw	r10, r28
     b4e:	f5 e5       	ldi	r31, 0x55	; 85
     b50:	af 0e       	add	r10, r31
     b52:	b1 1c       	adc	r11, r1
			leaderboard[i].place++;
     b54:	f8 01       	movw	r30, r16
     b56:	80 81       	ld	r24, Z
     b58:	8f 5f       	subi	r24, 0xFF	; 255
     b5a:	80 83       	st	Z, r24
     b5c:	b8 01       	movw	r22, r16
     b5e:	64 50       	subi	r22, 0x04	; 4
     b60:	71 09       	sbc	r23, r1
			highscore_save(game, &leaderboard[i]);
     b62:	8d 2d       	mov	r24, r13
     b64:	0e 94 73 04 	call	0x8e6	; 0x8e6 <highscore_save>
     b68:	0b 5f       	subi	r16, 0xFB	; 251
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
	}
	
	// Add score and move down other scores
	else{
		highscore_save(game, score);
		for (int i = score->place -1; i < 16; i++){
     b6c:	0a 15       	cp	r16, r10
     b6e:	1b 05       	cpc	r17, r11
     b70:	89 f7       	brne	.-30     	; 0xb54 <highscore_add+0xac>
			leaderboard[i].place++;
			highscore_save(game, &leaderboard[i]);
		}
		return score->place;
     b72:	f7 01       	movw	r30, r14
     b74:	84 81       	ldd	r24, Z+4	; 0x04
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <highscore_add+0xd6>
		}
	}
	
	//return 0 if not a highscore
	if(score->place == 0){
		return 0;
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <highscore_add+0xd6>
     b7c:	80 e0       	ldi	r24, 0x00	; 0
			leaderboard[i].place++;
			highscore_save(game, &leaderboard[i]);
		}
		return score->place;
	}
}
     b7e:	c0 5b       	subi	r28, 0xB0	; 176
     b80:	df 4f       	sbci	r29, 0xFF	; 255
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	bf 90       	pop	r11
     b9c:	af 90       	pop	r10
     b9e:	08 95       	ret

00000ba0 <highscore_clear>:
	for (int i = 0; i < length; i++){
		leaderboard[i] = highscore_get(game, i+1);
	}
}

void highscore_clear(uint8_t game){
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <highscore_clear+0xa>
     baa:	00 d0       	rcall	.+0      	; 0xbac <highscore_clear+0xc>
     bac:	1f 92       	push	r1
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	08 2f       	mov	r16, r24
	highscore hs;
	
	hs.name[0] = 'N';
     bb4:	8e e4       	ldi	r24, 0x4E	; 78
     bb6:	89 83       	std	Y+1, r24	; 0x01
	hs.name[1] = 'A';
     bb8:	91 e4       	ldi	r25, 0x41	; 65
     bba:	9a 83       	std	Y+2, r25	; 0x02
	hs.name[2] = 'N';
     bbc:	8b 83       	std	Y+3, r24	; 0x03
	hs.score = 0;
     bbe:	1c 82       	std	Y+4, r1	; 0x04
     bc0:	11 e0       	ldi	r17, 0x01	; 1
	for (int i = 0; i < 16; i++){
		hs.place = i + 1;
     bc2:	1d 83       	std	Y+5, r17	; 0x05
		highscore_save(game, &hs);
     bc4:	be 01       	movw	r22, r28
     bc6:	6f 5f       	subi	r22, 0xFF	; 255
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	80 2f       	mov	r24, r16
     bcc:	0e 94 73 04 	call	0x8e6	; 0x8e6 <highscore_save>
     bd0:	1f 5f       	subi	r17, 0xFF	; 255
	
	hs.name[0] = 'N';
	hs.name[1] = 'A';
	hs.name[2] = 'N';
	hs.score = 0;
	for (int i = 0; i < 16; i++){
     bd2:	11 31       	cpi	r17, 0x11	; 17
     bd4:	b1 f7       	brne	.-20     	; 0xbc2 <highscore_clear+0x22>
		hs.place = i + 1;
		highscore_save(game, &hs);
	} 
}
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	0f 90       	pop	r0
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	08 95       	ret

00000bea <highscore_clear_all>:

void highscore_clear_all(){
	highscore_clear(PINGPONG);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	0e 94 d0 05 	call	0xba0	; 0xba0 <highscore_clear>
	highscore_clear(PONG);
     bf0:	80 e8       	ldi	r24, 0x80	; 128
     bf2:	0e 94 d0 05 	call	0xba0	; 0xba0 <highscore_clear>
	highscore_clear(SNAKE);
     bf6:	80 e4       	ldi	r24, 0x40	; 64
     bf8:	0e 94 d0 05 	call	0xba0	; 0xba0 <highscore_clear>
     bfc:	08 95       	ret

00000bfe <highscore_print>:
}

void highscore_print(uint8_t game){
     bfe:	af 92       	push	r10
     c00:	bf 92       	push	r11
     c02:	cf 92       	push	r12
     c04:	df 92       	push	r13
     c06:	ef 92       	push	r14
     c08:	ff 92       	push	r15
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	c0 56       	subi	r28, 0x60	; 96
     c18:	d1 09       	sbc	r29, r1
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
	//Get highscore list
	highscore hslist[16];
	highscore_leaderboard(game, hslist, 16);
     c24:	40 e1       	ldi	r20, 0x10	; 16
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	be 01       	movw	r22, r28
     c2a:	6f 5f       	subi	r22, 0xFF	; 255
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	0e 94 2a 05 	call	0xa54	; 0xa54 <highscore_leaderboard>
	
	//Clear SRAM and print list to SRAM
	oled_sram_clear_screen(0);
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
     c3a:	8e 01       	movw	r16, r28
     c3c:	0b 5f       	subi	r16, 0xFB	; 251
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
	char score[16];
	for (int i = 0; i < 7; i++){
     c40:	e1 2c       	mov	r14, r1
     c42:	f1 2c       	mov	r15, r1
		sprintf(score, "%i %c%c%c %i", hslist[i].place, hslist[i].name[0], hslist[i].name[1], hslist[i].name[2], hslist[i].score );
     c44:	0f 2e       	mov	r0, r31
     c46:	fa e6       	ldi	r31, 0x6A	; 106
     c48:	af 2e       	mov	r10, r31
     c4a:	f1 e0       	ldi	r31, 0x01	; 1
     c4c:	bf 2e       	mov	r11, r31
     c4e:	f0 2d       	mov	r31, r0
     c50:	6e 01       	movw	r12, r28
     c52:	21 e5       	ldi	r18, 0x51	; 81
     c54:	c2 0e       	add	r12, r18
     c56:	d1 1c       	adc	r13, r1
     c58:	f8 01       	movw	r30, r16
     c5a:	31 97       	sbiw	r30, 0x01	; 1
     c5c:	80 81       	ld	r24, Z
     c5e:	1f 92       	push	r1
     c60:	8f 93       	push	r24
     c62:	31 97       	sbiw	r30, 0x01	; 1
     c64:	80 81       	ld	r24, Z
     c66:	1f 92       	push	r1
     c68:	8f 93       	push	r24
     c6a:	31 97       	sbiw	r30, 0x01	; 1
     c6c:	80 81       	ld	r24, Z
     c6e:	1f 92       	push	r1
     c70:	8f 93       	push	r24
     c72:	31 97       	sbiw	r30, 0x01	; 1
     c74:	80 81       	ld	r24, Z
     c76:	1f 92       	push	r1
     c78:	8f 93       	push	r24
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 81       	ld	r24, Z
     c7e:	1f 92       	push	r1
     c80:	8f 93       	push	r24
     c82:	bf 92       	push	r11
     c84:	af 92       	push	r10
     c86:	df 92       	push	r13
     c88:	cf 92       	push	r12
     c8a:	0e 94 1a 19 	call	0x3234	; 0x3234 <sprintf>
		oled_sram_write_string(0, score, i);
     c8e:	a7 01       	movw	r20, r14
     c90:	b6 01       	movw	r22, r12
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
	highscore_leaderboard(game, hslist, 16);
	
	//Clear SRAM and print list to SRAM
	oled_sram_clear_screen(0);
	char score[16];
	for (int i = 0; i < 7; i++){
     c9a:	ff ef       	ldi	r31, 0xFF	; 255
     c9c:	ef 1a       	sub	r14, r31
     c9e:	ff 0a       	sbc	r15, r31
     ca0:	0b 5f       	subi	r16, 0xFB	; 251
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	97 e0       	ldi	r25, 0x07	; 7
     cb0:	e9 16       	cp	r14, r25
     cb2:	f1 04       	cpc	r15, r1
     cb4:	89 f6       	brne	.-94     	; 0xc58 <highscore_print+0x5a>
		sprintf(score, "%i %c%c%c %i", hslist[i].place, hslist[i].name[0], hslist[i].name[1], hslist[i].name[2], hslist[i].score );
		oled_sram_write_string(0, score, i);
		//printf("%s \n\r", score);
	}
	
	oled_sram_flush(0);
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
	while(get_joystick_position().D != LEFT){
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <highscore_print+0xd4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc0:	ef ef       	ldi	r30, 0xFF	; 255
     cc2:	ff e7       	ldi	r31, 0x7F	; 127
     cc4:	21 e0       	ldi	r18, 0x01	; 1
     cc6:	e1 50       	subi	r30, 0x01	; 1
     cc8:	f0 40       	sbci	r31, 0x00	; 0
     cca:	20 40       	sbci	r18, 0x00	; 0
     ccc:	e1 f7       	brne	.-8      	; 0xcc6 <highscore_print+0xc8>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <highscore_print+0xd2>
     cd0:	00 c0       	rjmp	.+0      	; 0xcd2 <highscore_print+0xd4>
     cd2:	0e 94 31 09 	call	0x1262	; 0x1262 <get_joystick_position>
     cd6:	81 11       	cpse	r24, r1
     cd8:	f3 cf       	rjmp	.-26     	; 0xcc0 <highscore_print+0xc2>
		_delay_ms(100);
	}
}
     cda:	c0 5a       	subi	r28, 0xA0	; 160
     cdc:	df 4f       	sbci	r29, 0xFF	; 255
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	f8 94       	cli
     ce2:	de bf       	out	0x3e, r29	; 62
     ce4:	0f be       	out	0x3f, r0	; 63
     ce6:	cd bf       	out	0x3d, r28	; 61
     ce8:	df 91       	pop	r29
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	df 90       	pop	r13
     cf6:	cf 90       	pop	r12
     cf8:	bf 90       	pop	r11
     cfa:	af 90       	pop	r10
     cfc:	08 95       	ret

00000cfe <highscore_print_pingpong>:

void highscore_print_pingpong(){
	highscore_print(PINGPONG);
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0e 94 ff 05 	call	0xbfe	; 0xbfe <highscore_print>
     d04:	08 95       	ret

00000d06 <highscore_print_snake>:
}

void highscore_print_snake(){
	highscore_print(SNAKE);
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	0e 94 ff 05 	call	0xbfe	; 0xbfe <highscore_print>
     d0c:	08 95       	ret

00000d0e <highscore_print_pong>:
}

void highscore_print_pong(){
	highscore_print(PONG);
     d0e:	80 e8       	ldi	r24, 0x80	; 128
     d10:	0e 94 ff 05 	call	0xbfe	; 0xbfe <highscore_print>
     d14:	08 95       	ret

00000d16 <highscore_prompt>:
}

void highscore_prompt(uint8_t game, uint8_t score){
     d16:	8f 92       	push	r8
     d18:	9f 92       	push	r9
     d1a:	af 92       	push	r10
     d1c:	bf 92       	push	r11
     d1e:	cf 92       	push	r12
     d20:	df 92       	push	r13
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	65 97       	sbiw	r28, 0x15	; 21
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	98 2e       	mov	r9, r24
	//Make highscore
	highscore hs;
	hs.name[0] = 'A';
     d40:	81 e4       	ldi	r24, 0x41	; 65
     d42:	89 83       	std	Y+1, r24	; 0x01
	hs.name[1] = 'A';
     d44:	8a 83       	std	Y+2, r24	; 0x02
	hs.name[2] = 'A';
     d46:	8b 83       	std	Y+3, r24	; 0x03
	hs.score = score;
     d48:	6c 83       	std	Y+4, r22	; 0x04
	
	//Print highscore
	oled_sram_clear_screen(0);
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	char buffer[16];
	sprintf(buffer, "Score: %i", hs.score );
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	1f 92       	push	r1
     d56:	8f 93       	push	r24
     d58:	87 e7       	ldi	r24, 0x77	; 119
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	9f 93       	push	r25
     d5e:	8f 93       	push	r24
     d60:	8e 01       	movw	r16, r28
     d62:	0a 5f       	subi	r16, 0xFA	; 250
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	1f 93       	push	r17
     d68:	0f 93       	push	r16
     d6a:	0e 94 1a 19 	call	0x3234	; 0x3234 <sprintf>
	oled_sram_write_string(0, buffer, 2);
     d6e:	42 e0       	ldi	r20, 0x02	; 2
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	b8 01       	movw	r22, r16
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
	
	//Allow user to change name
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
     d7c:	0e 94 31 09 	call	0x1262	; 0x1262 <get_joystick_position>
     d80:	88 2e       	mov	r8, r24
     d82:	0f 90       	pop	r0
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
	sprintf(buffer, "Score: %i", hs.score );
	oled_sram_write_string(0, buffer, 2);
	
	//Allow user to change name
	
	int letter_pointer = 0; 
     d8e:	e1 2c       	mov	r14, r1
     d90:	f1 2c       	mov	r15, r1
		_delay_ms(100);
		if(D != get_joystick_position().D){
			D = get_joystick_position().D;
			switch(D){
				case LEFT:
					letter_pointer = (letter_pointer + 2)%3;
     d92:	0f 2e       	mov	r0, r31
     d94:	f3 e0       	ldi	r31, 0x03	; 3
     d96:	af 2e       	mov	r10, r31
     d98:	b1 2c       	mov	r11, r1
     d9a:	f0 2d       	mov	r31, r0
					break;
				default:
					break;
			}
		}
		sprintf(buffer, "Name: %c%c%c", hs.name[0], hs.name[1], hs.name[2]);
     d9c:	0f 2e       	mov	r0, r31
     d9e:	f1 e8       	ldi	r31, 0x81	; 129
     da0:	cf 2e       	mov	r12, r31
     da2:	f1 e0       	ldi	r31, 0x01	; 1
     da4:	df 2e       	mov	r13, r31
     da6:	f0 2d       	mov	r31, r0
     da8:	2f ef       	ldi	r18, 0xFF	; 255
     daa:	8f e7       	ldi	r24, 0x7F	; 127
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	21 50       	subi	r18, 0x01	; 1
     db0:	80 40       	sbci	r24, 0x00	; 0
     db2:	90 40       	sbci	r25, 0x00	; 0
     db4:	e1 f7       	brne	.-8      	; 0xdae <highscore_prompt+0x98>
     db6:	00 c0       	rjmp	.+0      	; 0xdb8 <highscore_prompt+0xa2>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <highscore_prompt+0xa4>
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
	while(letter_pointer < 3){
		_delay_ms(100);
		if(D != get_joystick_position().D){
     dba:	0e 94 31 09 	call	0x1262	; 0x1262 <get_joystick_position>
     dbe:	88 16       	cp	r8, r24
     dc0:	69 f1       	breq	.+90     	; 0xe1c <highscore_prompt+0x106>
			D = get_joystick_position().D;
     dc2:	0e 94 31 09 	call	0x1262	; 0x1262 <get_joystick_position>
     dc6:	88 2e       	mov	r8, r24
			switch(D){
     dc8:	21 e0       	ldi	r18, 0x01	; 1
     dca:	82 17       	cp	r24, r18
     dcc:	81 f0       	breq	.+32     	; 0xdee <highscore_prompt+0xd8>
     dce:	82 17       	cp	r24, r18
     dd0:	38 f0       	brcs	.+14     	; 0xde0 <highscore_prompt+0xca>
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	88 16       	cp	r8, r24
     dd6:	79 f0       	breq	.+30     	; 0xdf6 <highscore_prompt+0xe0>
     dd8:	93 e0       	ldi	r25, 0x03	; 3
     dda:	89 16       	cp	r8, r25
     ddc:	b1 f0       	breq	.+44     	; 0xe0a <highscore_prompt+0xf4>
     dde:	1e c0       	rjmp	.+60     	; 0xe1c <highscore_prompt+0x106>
				case LEFT:
					letter_pointer = (letter_pointer + 2)%3;
     de0:	c7 01       	movw	r24, r14
     de2:	02 96       	adiw	r24, 0x02	; 2
     de4:	b5 01       	movw	r22, r10
     de6:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
     dea:	7c 01       	movw	r14, r24
					break;
     dec:	17 c0       	rjmp	.+46     	; 0xe1c <highscore_prompt+0x106>
				case RIGHT:
					letter_pointer++;
     dee:	2f ef       	ldi	r18, 0xFF	; 255
     df0:	e2 1a       	sub	r14, r18
     df2:	f2 0a       	sbc	r15, r18
					break;
     df4:	13 c0       	rjmp	.+38     	; 0xe1c <highscore_prompt+0x106>
				case UP:
					hs.name[letter_pointer]++;
     df6:	e1 e0       	ldi	r30, 0x01	; 1
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	ec 0f       	add	r30, r28
     dfc:	fd 1f       	adc	r31, r29
     dfe:	ee 0d       	add	r30, r14
     e00:	ff 1d       	adc	r31, r15
     e02:	80 81       	ld	r24, Z
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	80 83       	st	Z, r24
					break;
     e08:	09 c0       	rjmp	.+18     	; 0xe1c <highscore_prompt+0x106>
				case DOWN:
					hs.name[letter_pointer]--;
     e0a:	e1 e0       	ldi	r30, 0x01	; 1
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	ec 0f       	add	r30, r28
     e10:	fd 1f       	adc	r31, r29
     e12:	ee 0d       	add	r30, r14
     e14:	ff 1d       	adc	r31, r15
     e16:	80 81       	ld	r24, Z
     e18:	81 50       	subi	r24, 0x01	; 1
     e1a:	80 83       	st	Z, r24
					break;
				default:
					break;
			}
		}
		sprintf(buffer, "Name: %c%c%c", hs.name[0], hs.name[1], hs.name[2]);
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	1f 92       	push	r1
     e20:	8f 93       	push	r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	1f 92       	push	r1
     e26:	8f 93       	push	r24
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	1f 92       	push	r1
     e2c:	8f 93       	push	r24
     e2e:	df 92       	push	r13
     e30:	cf 92       	push	r12
     e32:	1f 93       	push	r17
     e34:	0f 93       	push	r16
     e36:	0e 94 1a 19 	call	0x3234	; 0x3234 <sprintf>
		oled_sram_write_string(0, buffer, 3);
     e3a:	a5 01       	movw	r20, r10
     e3c:	b8 01       	movw	r22, r16
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
		oled_sram_write_string(0, "          ", 4);
     e46:	44 e0       	ldi	r20, 0x04	; 4
     e48:	50 e0       	ldi	r21, 0x00	; 0
     e4a:	6e e8       	ldi	r22, 0x8E	; 142
     e4c:	71 e0       	ldi	r23, 0x01	; 1
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
		oled_sram_write_char(0, "^", 4, (6+letter_pointer)*8);
     e56:	97 01       	movw	r18, r14
     e58:	2a 5f       	subi	r18, 0xFA	; 250
     e5a:	3f 4f       	sbci	r19, 0xFF	; 255
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	22 0f       	add	r18, r18
     e66:	33 1f       	adc	r19, r19
     e68:	44 e0       	ldi	r20, 0x04	; 4
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	69 e9       	ldi	r22, 0x99	; 153
     e6e:	71 e0       	ldi	r23, 0x01	; 1
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
		oled_sram_flush(0);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
	
	//Allow user to change name
	
	int letter_pointer = 0; 
	direction D = get_joystick_position().D;
	while(letter_pointer < 3){
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	e9 16       	cp	r14, r25
     e8e:	f1 04       	cpc	r15, r1
     e90:	0c f4       	brge	.+2      	; 0xe94 <highscore_prompt+0x17e>
     e92:	8a cf       	rjmp	.-236    	; 0xda8 <highscore_prompt+0x92>
		oled_sram_write_char(0, "^", 4, (6+letter_pointer)*8);
		oled_sram_flush(0);
	}
	
	
	highscore_add(game, &hs);
     e94:	be 01       	movw	r22, r28
     e96:	6f 5f       	subi	r22, 0xFF	; 255
     e98:	7f 4f       	sbci	r23, 0xFF	; 255
     e9a:	89 2d       	mov	r24, r9
     e9c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <highscore_add>
     ea0:	65 96       	adiw	r28, 0x15	; 21
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	df 90       	pop	r13
     eba:	cf 90       	pop	r12
     ebc:	bf 90       	pop	r11
     ebe:	af 90       	pop	r10
     ec0:	9f 90       	pop	r9
     ec2:	8f 90       	pop	r8
     ec4:	08 95       	ret

00000ec6 <play_pingpong>:

volatile State current_state;
volatile uint8_t current_score;

//Send CAN message to node 2 to start ping pong game with one of two controller states
void play_pingpong(uint8_t state){
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	6a 97       	sbiw	r28, 0x1a	; 26
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
}


void state_set(State state){
	
	current_state = state;
     ee6:	80 93 e6 02 	sts	0x02E6, r24
}

void score_set(uint8_t score){
	current_score = score;
     eea:	10 92 e7 02 	sts	0x02E7, r1
	state_set(state);
	score_set(0);
	
	//Send message to node 2
	Message m;
	m.id = GAME_STATUS;
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	99 83       	std	Y+1, r25	; 0x01
	m.length = 1;
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	9a 83       	std	Y+2, r25	; 0x02
	m.data[0] = state;
     ef6:	8b 83       	std	Y+3, r24	; 0x03
	CAN_transmit(&m);
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	0e 94 46 08 	call	0x108c	; 0x108c <CAN_transmit>
	
	//Print message on screen, and go into waiting mode
	oled_sram_clear_screen(0);
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	oled_sram_write_string(0, "Playing pingpong", 2);
     f08:	42 e0       	ldi	r20, 0x02	; 2
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	6b e9       	ldi	r22, 0x9B	; 155
     f0e:	71 e0       	ldi	r23, 0x01	; 1
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
	char score[16];
	while(current_state == PLAY_PINGPONG_WEB || current_state == PLAY_PINGPONG_JOY || current_state == PLAY_PINGPONG_SELF){
		_delay_ms(100);
		printf("State %i \n\r", current_state);
     f18:	0f 2e       	mov	r0, r31
     f1a:	fc ea       	ldi	r31, 0xAC	; 172
     f1c:	cf 2e       	mov	r12, r31
     f1e:	f1 e0       	ldi	r31, 0x01	; 1
     f20:	df 2e       	mov	r13, r31
     f22:	f0 2d       	mov	r31, r0
		send_controlls();
		sprintf(score, "Score: %d", current_score);
     f24:	0f 2e       	mov	r0, r31
     f26:	f8 eb       	ldi	r31, 0xB8	; 184
     f28:	ef 2e       	mov	r14, r31
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	ff 2e       	mov	r15, r31
     f2e:	f0 2d       	mov	r31, r0
     f30:	8e 01       	movw	r16, r28
     f32:	05 5f       	subi	r16, 0xF5	; 245
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
	
	//Print message on screen, and go into waiting mode
	oled_sram_clear_screen(0);
	oled_sram_write_string(0, "Playing pingpong", 2);
	char score[16];
	while(current_state == PLAY_PINGPONG_WEB || current_state == PLAY_PINGPONG_JOY || current_state == PLAY_PINGPONG_SELF){
     f36:	2d c0       	rjmp	.+90     	; 0xf92 <play_pingpong+0xcc>
     f38:	2f ef       	ldi	r18, 0xFF	; 255
     f3a:	8f e7       	ldi	r24, 0x7F	; 127
     f3c:	91 e0       	ldi	r25, 0x01	; 1
     f3e:	21 50       	subi	r18, 0x01	; 1
     f40:	80 40       	sbci	r24, 0x00	; 0
     f42:	90 40       	sbci	r25, 0x00	; 0
     f44:	e1 f7       	brne	.-8      	; 0xf3e <play_pingpong+0x78>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <play_pingpong+0x82>
     f48:	00 c0       	rjmp	.+0      	; 0xf4a <play_pingpong+0x84>
		_delay_ms(100);
		printf("State %i \n\r", current_state);
     f4a:	80 91 e6 02 	lds	r24, 0x02E6
     f4e:	1f 92       	push	r1
     f50:	8f 93       	push	r24
     f52:	df 92       	push	r13
     f54:	cf 92       	push	r12
     f56:	0e 94 06 19 	call	0x320c	; 0x320c <printf>
		send_controlls();
     f5a:	0e 94 8c 02 	call	0x518	; 0x518 <send_controlls>
		sprintf(score, "Score: %d", current_score);
     f5e:	80 91 e7 02 	lds	r24, 0x02E7
     f62:	1f 92       	push	r1
     f64:	8f 93       	push	r24
     f66:	ff 92       	push	r15
     f68:	ef 92       	push	r14
     f6a:	1f 93       	push	r17
     f6c:	0f 93       	push	r16
     f6e:	0e 94 1a 19 	call	0x3234	; 0x3234 <sprintf>
		oled_sram_write_string(0, score, 4);
     f72:	44 e0       	ldi	r20, 0x04	; 4
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	b8 01       	movw	r22, r16
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
		oled_sram_flush(0);
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	f8 94       	cli
     f8c:	de bf       	out	0x3e, r29	; 62
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	cd bf       	out	0x3d, r28	; 61
	
	//Print message on screen, and go into waiting mode
	oled_sram_clear_screen(0);
	oled_sram_write_string(0, "Playing pingpong", 2);
	char score[16];
	while(current_state == PLAY_PINGPONG_WEB || current_state == PLAY_PINGPONG_JOY || current_state == PLAY_PINGPONG_SELF){
     f92:	80 91 e6 02 	lds	r24, 0x02E6
     f96:	81 30       	cpi	r24, 0x01	; 1
     f98:	79 f2       	breq	.-98     	; 0xf38 <play_pingpong+0x72>
     f9a:	80 91 e6 02 	lds	r24, 0x02E6
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	59 f2       	breq	.-106    	; 0xf38 <play_pingpong+0x72>
     fa2:	80 91 e6 02 	lds	r24, 0x02E6
     fa6:	83 30       	cpi	r24, 0x03	; 3
     fa8:	39 f2       	breq	.-114    	; 0xf38 <play_pingpong+0x72>
		sprintf(score, "Score: %d", current_score);
		oled_sram_write_string(0, score, 4);
		oled_sram_flush(0);
	}
	
	highscore_prompt(PINGPONG, current_score);
     faa:	60 91 e7 02 	lds	r22, 0x02E7
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	0e 94 8b 06 	call	0xd16	; 0xd16 <highscore_prompt>
}
     fb4:	6a 96       	adiw	r28, 0x1a	; 26
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	df 91       	pop	r29
     fc2:	cf 91       	pop	r28
     fc4:	1f 91       	pop	r17
     fc6:	0f 91       	pop	r16
     fc8:	ff 90       	pop	r15
     fca:	ef 90       	pop	r14
     fcc:	df 90       	pop	r13
     fce:	cf 90       	pop	r12
     fd0:	08 95       	ret

00000fd2 <play_pingpong_web>:

void play_pingpong_web(){
	play_pingpong(PLAY_PINGPONG_WEB);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	0e 94 63 07 	call	0xec6	; 0xec6 <play_pingpong>
     fd8:	08 95       	ret

00000fda <play_pingpong_joy>:
}

void play_pingpong_joy(){
	play_pingpong(PLAY_PINGPONG_JOY);
     fda:	82 e0       	ldi	r24, 0x02	; 2
     fdc:	0e 94 63 07 	call	0xec6	; 0xec6 <play_pingpong>
     fe0:	08 95       	ret

00000fe2 <play_pingpong_self>:
}

void play_pingpong_self(){
	play_pingpong(PLAY_PINGPONG_SELF);
     fe2:	83 e0       	ldi	r24, 0x03	; 3
     fe4:	0e 94 63 07 	call	0xec6	; 0xec6 <play_pingpong>
     fe8:	08 95       	ret

00000fea <state_set>:
}


void state_set(State state){
	
	current_state = state;
     fea:	80 93 e6 02 	sts	0x02E6, r24
     fee:	08 95       	ret

00000ff0 <score_set>:
}

void score_set(uint8_t score){
	current_score = score;
     ff0:	80 93 e7 02 	sts	0x02E7, r24
     ff4:	08 95       	ret

00000ff6 <bus_init>:
#define INCFILE1_H_


void bus_init(void){
	//Mask out 4 msb of addrBus
	SFIOR |= (1<<XMM2);
     ff6:	80 b7       	in	r24, 0x30	; 48
     ff8:	80 62       	ori	r24, 0x20	; 32
     ffa:	80 bf       	out	0x30, r24	; 48
	//Enable bus
	MCUCR |= (1<<SRE);
     ffc:	85 b7       	in	r24, 0x35	; 53
     ffe:	80 68       	ori	r24, 0x80	; 128
    1000:	85 bf       	out	0x35, r24	; 53
    1002:	08 95       	ret

00001004 <main>:
#include "Driver_files/music_driver.h"

int main(void)
{
	//DDRA = 0xFF;
	uartInit(9600);
    1004:	80 e8       	ldi	r24, 0x80	; 128
    1006:	95 e2       	ldi	r25, 0x25	; 37
    1008:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uartInit>
	bus_init();
    100c:	0e 94 fb 07 	call	0xff6	; 0xff6 <bus_init>
	oled_init();
    1010:	0e 94 de 0a 	call	0x15bc	; 0x15bc <oled_init>
	init_handler();
    1014:	0e 94 80 02 	call	0x500	; 0x500 <init_handler>
	//oled_sram_init();
	CAN_init();
    1018:	0e 94 2d 08 	call	0x105a	; 0x105a <CAN_init>
	printf("Reset?");
    101c:	82 ec       	ldi	r24, 0xC2	; 194
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	9f 93       	push	r25
    1022:	8f 93       	push	r24
    1024:	0e 94 06 19 	call	0x320c	; 0x320c <printf>
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    while(1)
    {
		menuSystem();
    102c:	0e 94 47 13 	call	0x268e	; 0x268e <menuSystem>
    1030:	fd cf       	rjmp	.-6      	; 0x102c <main+0x28>

00001032 <get_adc>:
}

uint8_t get_adc(int channel){
	volatile char *adc = (char *) 0x1400; // Start address adc

	adc[0] = 4 + (channel%4);
    1032:	83 70       	andi	r24, 0x03	; 3
    1034:	90 78       	andi	r25, 0x80	; 128
    1036:	99 23       	and	r25, r25
    1038:	24 f4       	brge	.+8      	; 0x1042 <get_adc+0x10>
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	8c 6f       	ori	r24, 0xFC	; 252
    103e:	9f 6f       	ori	r25, 0xFF	; 255
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	8c 5f       	subi	r24, 0xFC	; 252
    1044:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1048:	85 ef       	ldi	r24, 0xF5	; 245
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	01 97       	sbiw	r24, 0x01	; 1
    104e:	f1 f7       	brne	.-4      	; 0x104c <get_adc+0x1a>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <get_adc+0x20>
    1052:	00 00       	nop
	_delay_us(200);
	return adc[0];
    1054:	80 91 00 14 	lds	r24, 0x1400
}
    1058:	08 95       	ret

0000105a <CAN_init>:
#include "CAN_driver.h"
#include "MCP_driver.h"


int CAN_init(){
	MCP_init();
    105a:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <MCP_init>
	//Enter config mode
	MCP_reset();
    105e:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MCP_reset>
	//set normal mode on CANCTRL
	MCP_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL);
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	60 ee       	ldi	r22, 0xE0	; 224
    1066:	8f e0       	ldi	r24, 0x0F	; 15
    1068:	0e 94 c4 0a 	call	0x1588	; 0x1588 <MCP_bit_modify>
	//Enable receve interrupt
	MCP_bit_modify(MCP_CANINTE, MCP_RX_INT, 0xFF);
    106c:	4f ef       	ldi	r20, 0xFF	; 255
    106e:	63 e0       	ldi	r22, 0x03	; 3
    1070:	8b e2       	ldi	r24, 0x2B	; 43
    1072:	0e 94 c4 0a 	call	0x1588	; 0x1588 <MCP_bit_modify>
	uint8_t value = MCP_read(MCP_CANSTAT);
    1076:	8e e0       	ldi	r24, 0x0E	; 14
    1078:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MCP_read>
	if ((value & MODE_MASK) != MODE_NORMAL){
    107c:	28 2f       	mov	r18, r24
    107e:	20 7e       	andi	r18, 0xE0	; 224
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	11 f4       	brne	.+4      	; 0x108a <CAN_init+0x30>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
		return 1;
	}
	return 0;
}
    108a:	08 95       	ret

0000108c <CAN_transmit>:

void CAN_transmit(Message *m){
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	ec 01       	movw	r28, r24
	//Write id to register
	MCP_bit_modify(MCP_TXB0SIDL, 0xE0, m->id<<5);
    1094:	48 81       	ld	r20, Y
    1096:	42 95       	swap	r20
    1098:	44 0f       	add	r20, r20
    109a:	40 7e       	andi	r20, 0xE0	; 224
    109c:	60 ee       	ldi	r22, 0xE0	; 224
    109e:	82 e3       	ldi	r24, 0x32	; 50
    10a0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <MCP_bit_modify>
	MCP_bit_modify(MCP_TXB0SIDH, 0xFF, m->id>>3);
    10a4:	48 81       	ld	r20, Y
    10a6:	46 95       	lsr	r20
    10a8:	46 95       	lsr	r20
    10aa:	46 95       	lsr	r20
    10ac:	6f ef       	ldi	r22, 0xFF	; 255
    10ae:	81 e3       	ldi	r24, 0x31	; 49
    10b0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <MCP_bit_modify>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
    10b4:	69 81       	ldd	r22, Y+1	; 0x01
    10b6:	85 e3       	ldi	r24, 0x35	; 53
    10b8:	0e 94 8f 0a 	call	0x151e	; 0x151e <MCP_write>
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
    10bc:	69 81       	ldd	r22, Y+1	; 0x01
    10be:	85 e3       	ldi	r24, 0x35	; 53
    10c0:	0e 94 8f 0a 	call	0x151e	; 0x151e <MCP_write>
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	88 23       	and	r24, r24
    10c8:	69 f0       	breq	.+26     	; 0x10e4 <CAN_transmit+0x58>
    10ca:	10 e0       	ldi	r17, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
    10cc:	fe 01       	movw	r30, r28
    10ce:	e1 0f       	add	r30, r17
    10d0:	f1 1d       	adc	r31, r1
    10d2:	62 81       	ldd	r22, Z+2	; 0x02
    10d4:	86 e3       	ldi	r24, 0x36	; 54
    10d6:	81 0f       	add	r24, r17
    10d8:	0e 94 8f 0a 	call	0x151e	; 0x151e <MCP_write>
	MCP_write(MCP_TXB0DLC, m->length);
	
	//Write length to register
	MCP_write(MCP_TXB0DLC, m->length);
	//Write data to register
	for (uint8_t i = 0; i < m->length; i++){
    10dc:	1f 5f       	subi	r17, 0xFF	; 255
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	18 17       	cp	r17, r24
    10e2:	a0 f3       	brcs	.-24     	; 0x10cc <CAN_transmit+0x40>
		MCP_write(MCP_TXB0D0 + i, m->data[i]);
	}
	
	//Send SPI RTS
	MCP_rts(0);
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	0e 94 a3 0a 	call	0x1546	; 0x1546 <MCP_rts>
	
	//set !TXnRTS low of transmit register
}
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	1f 91       	pop	r17
    10f0:	08 95       	ret

000010f2 <CAN_receive>:

int CAN_receive(Message *m){
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ec 01       	movw	r28, r24
	//IF interrupt flag high
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
    10fa:	8c e2       	ldi	r24, 0x2C	; 44
    10fc:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MCP_read>
    1100:	80 ff       	sbrs	r24, 0
    1102:	2c c0       	rjmp	.+88     	; 0x115c <CAN_receive+0x6a>
		m->length = MCP_read(MCP_RBB0DLC);
    1104:	85 e6       	ldi	r24, 0x65	; 101
    1106:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MCP_read>
    110a:	89 83       	std	Y+1, r24	; 0x01
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
    110c:	82 e6       	ldi	r24, 0x62	; 98
    110e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MCP_read>
    1112:	18 2f       	mov	r17, r24
    1114:	12 95       	swap	r17
    1116:	16 95       	lsr	r17
    1118:	17 70       	andi	r17, 0x07	; 7
    111a:	18 83       	st	Y, r17
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
    111c:	81 e6       	ldi	r24, 0x61	; 97
    111e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MCP_read>
    1122:	88 0f       	add	r24, r24
    1124:	88 0f       	add	r24, r24
    1126:	88 0f       	add	r24, r24
    1128:	18 0f       	add	r17, r24
    112a:	18 83       	st	Y, r17
		for(uint8_t i = 0; i < m->length; i++){
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	88 23       	and	r24, r24
    1130:	69 f0       	breq	.+26     	; 0x114c <CAN_receive+0x5a>
    1132:	10 e0       	ldi	r17, 0x00	; 0
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
    1134:	86 e6       	ldi	r24, 0x66	; 102
    1136:	81 0f       	add	r24, r17
    1138:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MCP_read>
    113c:	fe 01       	movw	r30, r28
    113e:	e1 0f       	add	r30, r17
    1140:	f1 1d       	adc	r31, r1
    1142:	82 83       	std	Z+2, r24	; 0x02
	if (MCP_read(MCP_CANINTF) & MCP_RX0IF){
		m->length = MCP_read(MCP_RBB0DLC);
		//Get lower id
		m->id = (MCP_read(MCP_RXB0SIDL) >> 5)&0x07;
		m->id += (MCP_read(MCP_RXB0SIDH) << 3);
		for(uint8_t i = 0; i < m->length; i++){
    1144:	1f 5f       	subi	r17, 0xFF	; 255
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	18 17       	cp	r17, r24
    114a:	a0 f3       	brcs	.-24     	; 0x1134 <CAN_receive+0x42>
			m->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		
		//Set intrupt flag low to indicate that message is read
		MCP_bit_modify(MCP_CANINTF, MCP_RX0IF, 0);
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	8c e2       	ldi	r24, 0x2C	; 44
    1152:	0e 94 c4 0a 	call	0x1588	; 0x1588 <MCP_bit_modify>
		return 0;
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <CAN_receive+0x6e>
	}
	return 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	1f 91       	pop	r17
    1166:	08 95       	ret

00001168 <get_slider_position>:
#include <util/delay.h>

float xMean = 127;
float yMean = 127;

Slider get_slider_position(){
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 19 08 	call	0x1032	; 0x1032 <get_adc>
    1174:	ec 01       	movw	r28, r24
	slide.right = ((get_adc(0))*100)/255;
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 19 08 	call	0x1032	; 0x1032 <get_adc>
    117e:	fc 01       	movw	r30, r24
float xMean = 127;
float yMean = 127;

Slider get_slider_position(){
	Slider slide;
	slide.left = ((get_adc(1))*100)/255;
    1180:	44 e6       	ldi	r20, 0x64	; 100
    1182:	4c 9f       	mul	r20, r28
    1184:	c0 01       	movw	r24, r0
    1186:	4d 9f       	mul	r20, r29
    1188:	90 0d       	add	r25, r0
    118a:	11 24       	eor	r1, r1
    118c:	2f ef       	ldi	r18, 0xFF	; 255
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	b9 01       	movw	r22, r18
    1192:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    1196:	c6 2f       	mov	r28, r22
	slide.right = ((get_adc(0))*100)/255;
    1198:	4e 9f       	mul	r20, r30
    119a:	c0 01       	movw	r24, r0
    119c:	4f 9f       	mul	r20, r31
    119e:	90 0d       	add	r25, r0
    11a0:	11 24       	eor	r1, r1
    11a2:	b9 01       	movw	r22, r18
    11a4:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    11a8:	76 2f       	mov	r23, r22
	return slide;
}
    11aa:	6c 2f       	mov	r22, r28
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <get_joystick_direction>:
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
	joy.D = get_joystick_direction(joy.X, joy.Y);
	return joy;
}

direction get_joystick_direction(int x, int y){
    11b6:	cf 92       	push	r12
    11b8:	df 92       	push	r13
    11ba:	ef 92       	push	r14
    11bc:	ff 92       	push	r15
    11be:	0f 93       	push	r16
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	8c 01       	movw	r16, r24
    11c8:	eb 01       	movw	r28, r22
	
	if(fabs(x) < 50 && fabs(y) < 50){
    11ca:	bc 01       	movw	r22, r24
    11cc:	88 27       	eor	r24, r24
    11ce:	77 fd       	sbrc	r23, 7
    11d0:	80 95       	com	r24
    11d2:	98 2f       	mov	r25, r24
    11d4:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    11d8:	6b 01       	movw	r12, r22
    11da:	7c 01       	movw	r14, r24
    11dc:	e8 94       	clt
    11de:	f7 f8       	bld	r15, 7
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	48 e4       	ldi	r20, 0x48	; 72
    11e6:	52 e4       	ldi	r21, 0x42	; 66
    11e8:	c7 01       	movw	r24, r14
    11ea:	b6 01       	movw	r22, r12
    11ec:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__cmpsf2>
    11f0:	88 23       	and	r24, r24
    11f2:	84 f4       	brge	.+32     	; 0x1214 <get_joystick_direction+0x5e>
    11f4:	be 01       	movw	r22, r28
    11f6:	88 27       	eor	r24, r24
    11f8:	77 fd       	sbrc	r23, 7
    11fa:	80 95       	com	r24
    11fc:	98 2f       	mov	r25, r24
    11fe:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1202:	9f 77       	andi	r25, 0x7F	; 127
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	48 e4       	ldi	r20, 0x48	; 72
    120a:	52 e4       	ldi	r21, 0x42	; 66
    120c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__cmpsf2>
    1210:	88 23       	and	r24, r24
    1212:	dc f0       	brlt	.+54     	; 0x124a <get_joystick_direction+0x94>
		return NEUTRAL;
	}
	
	if(fabs(x) < fabs(y)){
    1214:	be 01       	movw	r22, r28
    1216:	88 27       	eor	r24, r24
    1218:	77 fd       	sbrc	r23, 7
    121a:	80 95       	com	r24
    121c:	98 2f       	mov	r25, r24
    121e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1222:	9b 01       	movw	r18, r22
    1224:	ac 01       	movw	r20, r24
    1226:	5f 77       	andi	r21, 0x7F	; 127
    1228:	c7 01       	movw	r24, r14
    122a:	b6 01       	movw	r22, r12
    122c:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__cmpsf2>
    1230:	88 23       	and	r24, r24
    1232:	2c f4       	brge	.+10     	; 0x123e <get_joystick_direction+0x88>
		if(y > 0){
    1234:	1c 16       	cp	r1, r28
    1236:	1d 06       	cpc	r1, r29
    1238:	54 f4       	brge	.+20     	; 0x124e <get_joystick_direction+0x98>
			return UP;
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	09 c0       	rjmp	.+18     	; 0x1250 <get_joystick_direction+0x9a>
		else{
			return DOWN;
		}
	}
	else{
		if(x > 0){
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	10 16       	cp	r1, r16
    1242:	11 06       	cpc	r1, r17
    1244:	2c f0       	brlt	.+10     	; 0x1250 <get_joystick_direction+0x9a>
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	03 c0       	rjmp	.+6      	; 0x1250 <get_joystick_direction+0x9a>
}

direction get_joystick_direction(int x, int y){
	
	if(fabs(x) < 50 && fabs(y) < 50){
		return NEUTRAL;
    124a:	84 e0       	ldi	r24, 0x04	; 4
    124c:	01 c0       	rjmp	.+2      	; 0x1250 <get_joystick_direction+0x9a>
	if(fabs(x) < fabs(y)){
		if(y > 0){
			return UP;
		}
		else{
			return DOWN;
    124e:	83 e0       	ldi	r24, 0x03	; 3
		}
		else{
			return LEFT;
		} 
	}
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	df 90       	pop	r13
    125e:	cf 90       	pop	r12
    1260:	08 95       	ret

00001262 <get_joystick_position>:
	slide.left = ((get_adc(1))*100)/255;
	slide.right = ((get_adc(0))*100)/255;
	return slide;
}

Joystick get_joystick_position(){
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	cf 93       	push	r28
	Joystick joy;
	joy.Y = ((get_adc(2)-yMean)*100)/yMean;
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0e 94 19 08 	call	0x1032	; 0x1032 <get_adc>
    1274:	c0 90 0a 01 	lds	r12, 0x010A
    1278:	d0 90 0b 01 	lds	r13, 0x010B
    127c:	e0 90 0c 01 	lds	r14, 0x010C
    1280:	f0 90 0d 01 	lds	r15, 0x010D
    1284:	bc 01       	movw	r22, r24
    1286:	88 27       	eor	r24, r24
    1288:	77 fd       	sbrc	r23, 7
    128a:	80 95       	com	r24
    128c:	98 2f       	mov	r25, r24
    128e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1292:	a7 01       	movw	r20, r14
    1294:	96 01       	movw	r18, r12
    1296:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	48 ec       	ldi	r20, 0xC8	; 200
    12a0:	52 e4       	ldi	r21, 0x42	; 66
    12a2:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    12a6:	a7 01       	movw	r20, r14
    12a8:	96 01       	movw	r18, r12
    12aa:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__divsf3>
    12ae:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixsfsi>
    12b2:	c6 2f       	mov	r28, r22
	joy.X = ((get_adc(3)-xMean)*100)/xMean;
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 19 08 	call	0x1032	; 0x1032 <get_adc>
    12bc:	c0 90 0e 01 	lds	r12, 0x010E
    12c0:	d0 90 0f 01 	lds	r13, 0x010F
    12c4:	e0 90 10 01 	lds	r14, 0x0110
    12c8:	f0 90 11 01 	lds	r15, 0x0111
    12cc:	bc 01       	movw	r22, r24
    12ce:	88 27       	eor	r24, r24
    12d0:	77 fd       	sbrc	r23, 7
    12d2:	80 95       	com	r24
    12d4:	98 2f       	mov	r25, r24
    12d6:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    12da:	a7 01       	movw	r20, r14
    12dc:	96 01       	movw	r18, r12
    12de:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	48 ec       	ldi	r20, 0xC8	; 200
    12e8:	52 e4       	ldi	r21, 0x42	; 66
    12ea:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    12ee:	a7 01       	movw	r20, r14
    12f0:	96 01       	movw	r18, r12
    12f2:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__divsf3>
    12f6:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixsfsi>
    12fa:	f6 2e       	mov	r15, r22
	joy.D = get_joystick_direction(joy.X, joy.Y);
    12fc:	6c 2f       	mov	r22, r28
    12fe:	77 27       	eor	r23, r23
    1300:	67 fd       	sbrc	r22, 7
    1302:	70 95       	com	r23
    1304:	8f 2d       	mov	r24, r15
    1306:	99 27       	eor	r25, r25
    1308:	87 fd       	sbrc	r24, 7
    130a:	90 95       	com	r25
    130c:	0e 94 db 08 	call	0x11b6	; 0x11b6 <get_joystick_direction>
	return joy;
}
    1310:	6f 2d       	mov	r22, r15
    1312:	7c 2f       	mov	r23, r28
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	cf 91       	pop	r28
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	08 95       	ret

00001322 <calibration_visual_countdown>:
	yMean = (yMax - yMin)/2.0;
	xMean = (xMax - xMin)/2.0;
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
}

void calibration_visual_countdown(int i){
    1322:	cf 93       	push	r28
    1324:	df 93       	push	r29
    1326:	1f 92       	push	r1
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
	char c = (1000-i)/200 + 48;
    132c:	28 ee       	ldi	r18, 0xE8	; 232
    132e:	33 e0       	ldi	r19, 0x03	; 3
    1330:	a9 01       	movw	r20, r18
    1332:	48 1b       	sub	r20, r24
    1334:	59 0b       	sbc	r21, r25
    1336:	ca 01       	movw	r24, r20
    1338:	68 ec       	ldi	r22, 0xC8	; 200
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    1340:	60 5d       	subi	r22, 0xD0	; 208
    1342:	69 83       	std	Y+1, r22	; 0x01
	oled_sram_clear_screen(0);
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	oled_sram_write_string(0,"Move Joystick",0);
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	69 ec       	ldi	r22, 0xC9	; 201
    1352:	71 e0       	ldi	r23, 0x01	; 1
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
	oled_sram_write_string(0,"Time left: ", 2);
    135c:	42 e0       	ldi	r20, 0x02	; 2
    135e:	50 e0       	ldi	r21, 0x00	; 0
    1360:	67 ed       	ldi	r22, 0xD7	; 215
    1362:	71 e0       	ldi	r23, 0x01	; 1
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
	oled_sram_write_char(0, &c, 2, 12*8); //writes count after "Time left: "
    136c:	20 e6       	ldi	r18, 0x60	; 96
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	42 e0       	ldi	r20, 0x02	; 2
    1372:	50 e0       	ldi	r21, 0x00	; 0
    1374:	be 01       	movw	r22, r28
    1376:	6f 5f       	subi	r22, 0xFF	; 255
    1378:	7f 4f       	sbci	r23, 0xFF	; 255
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
	oled_sram_flush(0);
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <calibrate_joystick>:
			return LEFT;
		} 
	}
}

void calibrate_joystick(){
    1392:	bf 92       	push	r11
    1394:	cf 92       	push	r12
    1396:	df 92       	push	r13
    1398:	ef 92       	push	r14
    139a:	ff 92       	push	r15
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
    13a4:	e1 2c       	mov	r14, r1
    13a6:	f1 2c       	mov	r15, r1

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
    13a8:	1f e7       	ldi	r17, 0x7F	; 127
}

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
    13aa:	0f e7       	ldi	r16, 0x7F	; 127
	}
}

void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
    13ac:	cf e7       	ldi	r28, 0x7F	; 127
		} 
	}
}

void calibrate_joystick(){
	uint8_t yMax = 127;
    13ae:	df e7       	ldi	r29, 0x7F	; 127
		xMin = (x < xMin) ? x : xMin;
		
		xMax = (x > xMax) ? x : xMax;
		yMax = (y > yMax) ? y : yMax;
		_delay_ms(5);
		if (i%200 == 0){
    13b0:	0f 2e       	mov	r0, r31
    13b2:	f8 ec       	ldi	r31, 0xC8	; 200
    13b4:	cf 2e       	mov	r12, r31
    13b6:	d1 2c       	mov	r13, r1
    13b8:	f0 2d       	mov	r31, r0
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
	{
		uint8_t y = get_adc(2);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 94 19 08 	call	0x1032	; 0x1032 <get_adc>
    13c2:	b8 2e       	mov	r11, r24
		uint8_t x = get_adc(3);
    13c4:	83 e0       	ldi	r24, 0x03	; 3
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	0e 94 19 08 	call	0x1032	; 0x1032 <get_adc>
		
		yMin = (y < yMin) ? y : yMin;
    13cc:	bc 16       	cp	r11, r28
    13ce:	08 f4       	brcc	.+2      	; 0x13d2 <calibrate_joystick+0x40>
    13d0:	cb 2d       	mov	r28, r11
		xMin = (x < xMin) ? x : xMin;
    13d2:	81 17       	cp	r24, r17
    13d4:	08 f4       	brcc	.+2      	; 0x13d8 <calibrate_joystick+0x46>
    13d6:	18 2f       	mov	r17, r24
		
		xMax = (x > xMax) ? x : xMax;
    13d8:	08 17       	cp	r16, r24
    13da:	08 f4       	brcc	.+2      	; 0x13de <calibrate_joystick+0x4c>
    13dc:	08 2f       	mov	r16, r24
		yMax = (y > yMax) ? y : yMax;
    13de:	db 15       	cp	r29, r11
    13e0:	08 f4       	brcc	.+2      	; 0x13e4 <calibrate_joystick+0x52>
    13e2:	db 2d       	mov	r29, r11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13e4:	8f ef       	ldi	r24, 0xFF	; 255
    13e6:	97 e1       	ldi	r25, 0x17	; 23
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <calibrate_joystick+0x56>
    13ec:	00 c0       	rjmp	.+0      	; 0x13ee <calibrate_joystick+0x5c>
    13ee:	00 00       	nop
		_delay_ms(5);
		if (i%200 == 0){
    13f0:	c7 01       	movw	r24, r14
    13f2:	b6 01       	movw	r22, r12
    13f4:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    13f8:	89 2b       	or	r24, r25
    13fa:	19 f4       	brne	.+6      	; 0x1402 <calibrate_joystick+0x70>
			calibration_visual_countdown(i);
    13fc:	c7 01       	movw	r24, r14
    13fe:	0e 94 91 09 	call	0x1322	; 0x1322 <calibration_visual_countdown>
void calibrate_joystick(){
	uint8_t yMax = 127;
	uint8_t yMin = 127;
	uint8_t xMax = 127;
	uint8_t xMin = 127;
	for (int i = 0; i < 1000; i++)
    1402:	9f ef       	ldi	r25, 0xFF	; 255
    1404:	e9 1a       	sub	r14, r25
    1406:	f9 0a       	sbc	r15, r25
    1408:	88 ee       	ldi	r24, 0xE8	; 232
    140a:	e8 16       	cp	r14, r24
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	f8 06       	cpc	r15, r24
    1410:	a1 f6       	brne	.-88     	; 0x13ba <calibrate_joystick+0x28>
		if (i%200 == 0){
			calibration_visual_countdown(i);
		}
	}
	
	yMean = (yMax - yMin)/2.0;
    1412:	6d 2f       	mov	r22, r29
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	6c 1b       	sub	r22, r28
    1418:	71 09       	sbc	r23, r1
    141a:	88 27       	eor	r24, r24
    141c:	77 fd       	sbrc	r23, 7
    141e:	80 95       	com	r24
    1420:	98 2f       	mov	r25, r24
    1422:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	40 e0       	ldi	r20, 0x00	; 0
    142c:	5f e3       	ldi	r21, 0x3F	; 63
    142e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1432:	60 93 0a 01 	sts	0x010A, r22
    1436:	70 93 0b 01 	sts	0x010B, r23
    143a:	80 93 0c 01 	sts	0x010C, r24
    143e:	90 93 0d 01 	sts	0x010D, r25
	xMean = (xMax - xMin)/2.0;
    1442:	60 2f       	mov	r22, r16
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	61 1b       	sub	r22, r17
    1448:	71 09       	sbc	r23, r1
    144a:	88 27       	eor	r24, r24
    144c:	77 fd       	sbrc	r23, 7
    144e:	80 95       	com	r24
    1450:	98 2f       	mov	r25, r24
    1452:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	5f e3       	ldi	r21, 0x3F	; 63
    145e:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1462:	60 93 0e 01 	sts	0x010E, r22
    1466:	70 93 0f 01 	sts	0x010F, r23
    146a:	80 93 10 01 	sts	0x0110, r24
    146e:	90 93 11 01 	sts	0x0111, r25
	printf("%i %i %i %i", yMin, yMax, xMin, xMax);
    1472:	1f 92       	push	r1
    1474:	0f 93       	push	r16
    1476:	1f 92       	push	r1
    1478:	1f 93       	push	r17
    147a:	1f 92       	push	r1
    147c:	df 93       	push	r29
    147e:	1f 92       	push	r1
    1480:	cf 93       	push	r28
    1482:	83 ee       	ldi	r24, 0xE3	; 227
    1484:	91 e0       	ldi	r25, 0x01	; 1
    1486:	9f 93       	push	r25
    1488:	8f 93       	push	r24
    148a:	0e 94 06 19 	call	0x320c	; 0x320c <printf>
    148e:	8d b7       	in	r24, 0x3d	; 61
    1490:	9e b7       	in	r25, 0x3e	; 62
    1492:	0a 96       	adiw	r24, 0x0a	; 10
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	9e bf       	out	0x3e, r25	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	8d bf       	out	0x3d, r24	; 61
}
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	bf 90       	pop	r11
    14b0:	08 95       	ret

000014b2 <MCP_reset>:
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    14b2:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPI_ss_low>
	}
}

void MCP_reset(){
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
    14b6:	80 ec       	ldi	r24, 0xC0	; 192
    14b8:	0e 94 63 04 	call	0x8c6	; 0x8c6 <SPI_transmit>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    14bc:	0e 94 6f 04 	call	0x8de	; 0x8de <SPI_ss_high>
    14c0:	08 95       	ret

000014c2 <MCP_read>:
	toggle_cs(0); //CS low
	SPI_transmit(MCP_RESET); // sen reset command 0b11000000
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
    14c2:	cf 93       	push	r28
    14c4:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    14c6:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPI_ss_low>
	toggle_cs(1); //CS high
}

uint8_t MCP_read(uint8_t address){
	toggle_cs(0);
	SPI_send(MCP_READ); //Send read command 0b00000011
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	SPI_send(address);
    14d0:	8c 2f       	mov	r24, r28
    14d2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	uint8_t data = SPI_receive();
    14d6:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <SPI_receive>
    14da:	c8 2f       	mov	r28, r24
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    14dc:	0e 94 6f 04 	call	0x8de	; 0x8de <SPI_ss_high>
	SPI_send(MCP_READ); //Send read command 0b00000011
	SPI_send(address);
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
    14e0:	8c 2f       	mov	r24, r28
    14e2:	cf 91       	pop	r28
    14e4:	08 95       	ret

000014e6 <MCP_init>:
#include "SPI_driver.h"


int MCP_init(){
	//Using printf in MPC_init
	uartInit(9600);
    14e6:	80 e8       	ldi	r24, 0x80	; 128
    14e8:	95 e2       	ldi	r25, 0x25	; 37
    14ea:	0e 94 6b 0c 	call	0x18d6	; 0x18d6 <uartInit>
	
	//Start SPI driver
	SPI_init();
    14ee:	0e 94 5e 04 	call	0x8bc	; 0x8bc <SPI_init>
	
	//Reset MPC to enter configuration mode
	MCP_reset();
    14f2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <MCP_reset>
	
	// Self-test
	uint8_t value = MCP_read(MCP_CANSTAT);
    14f6:	8e e0       	ldi	r24, 0x0E	; 14
    14f8:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <MCP_read>
	if ((value & MODE_MASK) != MODE_CONFIG) {
    14fc:	80 7e       	andi	r24, 0xE0	; 224
    14fe:	80 38       	cpi	r24, 0x80	; 128
    1500:	59 f0       	breq	.+22     	; 0x1518 <MCP_init+0x32>
		printf("MCP2515 is NOT in configuration mode after reset!\n\r");
    1502:	8f ee       	ldi	r24, 0xEF	; 239
    1504:	91 e0       	ldi	r25, 0x01	; 1
    1506:	9f 93       	push	r25
    1508:	8f 93       	push	r24
    150a:	0e 94 06 19 	call	0x320c	; 0x320c <printf>
		return 1;
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	08 95       	ret
	}
	return 0;
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
}
    151c:	08 95       	ret

0000151e <MCP_write>:
	toggle_cs(1);
	return data;
}


void MCP_write(uint8_t address, uint8_t data){
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	d8 2f       	mov	r29, r24
    1524:	c6 2f       	mov	r28, r22
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    1526:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPI_ss_low>
}


void MCP_write(uint8_t address, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
    152a:	82 e0       	ldi	r24, 0x02	; 2
    152c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	SPI_send(address);
    1530:	8d 2f       	mov	r24, r29
    1532:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	SPI_send(data);
    1536:	8c 2f       	mov	r24, r28
    1538:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    153c:	0e 94 6f 04 	call	0x8de	; 0x8de <SPI_ss_high>
	toggle_cs(0);
	SPI_send(MCP_WRITE); //Send write command 0b00000010
	SPI_send(address);
	SPI_send(data);
	toggle_cs(1);
}
    1540:	df 91       	pop	r29
    1542:	cf 91       	pop	r28
    1544:	08 95       	ret

00001546 <MCP_rts>:

void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
    1546:	cf 93       	push	r28
    1548:	c8 2f       	mov	r28, r24
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    154a:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPI_ss_low>
void MCP_load_tx(){
	return 0;
}
void MCP_rts(uint8_t buffer){
	toggle_cs(0);
	switch(buffer%4){ //Select buffer to use, 3 = all
    154e:	8c 2f       	mov	r24, r28
    1550:	83 70       	andi	r24, 0x03	; 3
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	51 f0       	breq	.+20     	; 0x156a <MCP_rts+0x24>
    1556:	28 f0       	brcs	.+10     	; 0x1562 <MCP_rts+0x1c>
    1558:	82 30       	cpi	r24, 0x02	; 2
    155a:	59 f0       	breq	.+22     	; 0x1572 <MCP_rts+0x2c>
    155c:	83 30       	cpi	r24, 0x03	; 3
    155e:	69 f0       	breq	.+26     	; 0x157a <MCP_rts+0x34>
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <MCP_rts+0x3a>
		case 0:
			SPI_send(MCP_RTS_TX0);
    1562:	81 e8       	ldi	r24, 0x81	; 129
    1564:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
			break;
    1568:	0b c0       	rjmp	.+22     	; 0x1580 <MCP_rts+0x3a>
		case 1:
			SPI_send(MCP_RTS_TX1);
    156a:	82 e8       	ldi	r24, 0x82	; 130
    156c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
			break;
    1570:	07 c0       	rjmp	.+14     	; 0x1580 <MCP_rts+0x3a>
		case 2:
			SPI_send(MCP_RTS_TX2);
    1572:	84 e8       	ldi	r24, 0x84	; 132
    1574:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
			break;
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <MCP_rts+0x3a>
		case 3:
			SPI_send(MCP_RTS_ALL);
    157a:	87 e8       	ldi	r24, 0x87	; 135
    157c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    1580:	0e 94 6f 04 	call	0x8de	; 0x8de <SPI_ss_high>
			break;
		default:
			break;
	}
	toggle_cs(1);
}
    1584:	cf 91       	pop	r28
    1586:	08 95       	ret

00001588 <MCP_bit_modify>:
	SPI_send(MCP_RX_STATUS); // send read rx status code: 0b10110000
	uint8_t data = SPI_receive();
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	18 2f       	mov	r17, r24
    1590:	d6 2f       	mov	r29, r22
    1592:	c4 2f       	mov	r28, r20
void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
	}
	else{
		SPI_ss_low();
    1594:	0e 94 71 04 	call	0x8e2	; 0x8e2 <SPI_ss_low>
	toggle_cs(1);
	return data;
}
void MCP_bit_modify(uint8_t address, uint8_t mask, uint8_t data){
	toggle_cs(0);
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
    1598:	85 e0       	ldi	r24, 0x05	; 5
    159a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	SPI_send(address);
    159e:	81 2f       	mov	r24, r17
    15a0:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	SPI_send(mask);
    15a4:	8d 2f       	mov	r24, r29
    15a6:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	SPI_send(data);
    15aa:	8c 2f       	mov	r24, r28
    15ac:	0e 94 68 04 	call	0x8d0	; 0x8d0 <SPI_send>
	return 0;
}

void toggle_cs(uint8_t i){
	if(i){
		SPI_ss_high();
    15b0:	0e 94 6f 04 	call	0x8de	; 0x8de <SPI_ss_high>
	SPI_send(MCP_BITMOD); // send bit modify command: 0b00000101
	SPI_send(address);
	SPI_send(mask);
	SPI_send(data);
	toggle_cs(1);
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	08 95       	ret

000015bc <oled_init>:
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    15bc:	e0 e0       	ldi	r30, 0x00	; 0
    15be:	f0 e1       	ldi	r31, 0x10	; 16
    15c0:	8e ea       	ldi	r24, 0xAE	; 174
    15c2:	80 83       	st	Z, r24
    15c4:	81 ea       	ldi	r24, 0xA1	; 161
    15c6:	80 83       	st	Z, r24
    15c8:	8a ed       	ldi	r24, 0xDA	; 218
    15ca:	80 83       	st	Z, r24
    15cc:	82 e1       	ldi	r24, 0x12	; 18
    15ce:	80 83       	st	Z, r24
    15d0:	88 ec       	ldi	r24, 0xC8	; 200
    15d2:	80 83       	st	Z, r24
    15d4:	88 ea       	ldi	r24, 0xA8	; 168
    15d6:	80 83       	st	Z, r24
    15d8:	8f e3       	ldi	r24, 0x3F	; 63
    15da:	80 83       	st	Z, r24
    15dc:	85 ed       	ldi	r24, 0xD5	; 213
    15de:	80 83       	st	Z, r24
    15e0:	80 e8       	ldi	r24, 0x80	; 128
    15e2:	80 83       	st	Z, r24
    15e4:	81 e8       	ldi	r24, 0x81	; 129
    15e6:	80 83       	st	Z, r24
    15e8:	80 e5       	ldi	r24, 0x50	; 80
    15ea:	80 83       	st	Z, r24
    15ec:	89 ed       	ldi	r24, 0xD9	; 217
    15ee:	80 83       	st	Z, r24
    15f0:	81 e2       	ldi	r24, 0x21	; 33
    15f2:	80 83       	st	Z, r24
    15f4:	80 e2       	ldi	r24, 0x20	; 32
    15f6:	80 83       	st	Z, r24
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	80 83       	st	Z, r24
    15fc:	8b ed       	ldi	r24, 0xDB	; 219
    15fe:	80 83       	st	Z, r24
    1600:	80 e3       	ldi	r24, 0x30	; 48
    1602:	80 83       	st	Z, r24
    1604:	8d ea       	ldi	r24, 0xAD	; 173
    1606:	80 83       	st	Z, r24
    1608:	10 82       	st	Z, r1
    160a:	84 ea       	ldi	r24, 0xA4	; 164
    160c:	80 83       	st	Z, r24
    160e:	86 ea       	ldi	r24, 0xA6	; 166
    1610:	80 83       	st	Z, r24
    1612:	8f ea       	ldi	r24, 0xAF	; 175
    1614:	80 83       	st	Z, r24
    1616:	08 95       	ret

00001618 <oled_sram_flush>:
ISR(TIMER1_COMPB_vect){
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	5c 01       	movw	r10, r24
	int line = 0;
	for (int i = 0; i < 128*8; i++){
    162e:	c0 e0       	ldi	r28, 0x00	; 0
    1630:	d0 e0       	ldi	r29, 0x00	; 0
	oled_sram_flush(0);
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
    1632:	e1 2c       	mov	r14, r1
    1634:	f1 2c       	mov	r15, r1
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    1636:	c1 2c       	mov	r12, r1
    1638:	68 94       	set
    163a:	dd 24       	eor	r13, r13
    163c:	d4 f8       	bld	r13, 4
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    163e:	00 e0       	ldi	r16, 0x00	; 0
    1640:	12 e1       	ldi	r17, 0x12	; 18
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
    1642:	ce 01       	movw	r24, r28
    1644:	9e 01       	movw	r18, r28
    1646:	2f 77       	andi	r18, 0x7F	; 127
    1648:	33 27       	eor	r19, r19
    164a:	23 2b       	or	r18, r19
    164c:	39 f4       	brne	.+14     	; 0x165c <oled_sram_flush+0x44>
	oled_pos(0,0);
}

void oled_goto_line(uint8_t line){
	//Set Page Start Address for Page Addressing Mode
	write_command(line + 0xB0);
    164e:	20 eb       	ldi	r18, 0xB0	; 176
    1650:	2e 0d       	add	r18, r14
	oled_data[0] = data;
}

void write_command(uint8_t command){
	volatile char *oled_command = (char *) 0x1000;
	oled_command[0] = command;
    1652:	f6 01       	movw	r30, r12
    1654:	20 83       	st	Z, r18
void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
		if(i%128 == 0){
			oled_goto_line(line);
			line++;
    1656:	ff ef       	ldi	r31, 0xFF	; 255
    1658:	ef 1a       	sub	r14, r31
    165a:	ff 0a       	sbc	r15, r31
		}
		write_data(getSRAM(i + start));
    165c:	8a 0d       	add	r24, r10
    165e:	9b 1d       	adc	r25, r11
    1660:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <getSRAM>
#include <avr/interrupt.h>


void write_data(uint8_t data){
	volatile char *oled_data = (char *) 0x1200;
	oled_data[0] = data;
    1664:	f8 01       	movw	r30, r16
    1666:	80 83       	st	Z, r24
	TCNT1 = 0;
}

void oled_sram_flush(int start){
	int line = 0;
	for (int i = 0; i < 128*8; i++){
    1668:	21 96       	adiw	r28, 0x01	; 1
    166a:	c1 15       	cp	r28, r1
    166c:	f4 e0       	ldi	r31, 0x04	; 4
    166e:	df 07       	cpc	r29, r31
    1670:	41 f7       	brne	.-48     	; 0x1642 <oled_sram_flush+0x2a>
			oled_goto_line(line);
			line++;
		}
		write_data(getSRAM(i + start));
	}
}
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	af 90       	pop	r10
    1686:	08 95       	ret

00001688 <__vector_14>:
	TIFR |= (1<< OCF1B); //Output compare
	TIMSK |= (1 << OCIE1B); // Enable global interrupt on output compare B timer 1
	sei();
}

ISR(TIMER1_COMPB_vect){
    1688:	1f 92       	push	r1
    168a:	0f 92       	push	r0
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	0f 92       	push	r0
    1690:	11 24       	eor	r1, r1
    1692:	2f 93       	push	r18
    1694:	3f 93       	push	r19
    1696:	4f 93       	push	r20
    1698:	5f 93       	push	r21
    169a:	6f 93       	push	r22
    169c:	7f 93       	push	r23
    169e:	8f 93       	push	r24
    16a0:	9f 93       	push	r25
    16a2:	af 93       	push	r26
    16a4:	bf 93       	push	r27
    16a6:	ef 93       	push	r30
    16a8:	ff 93       	push	r31
	oled_sram_flush(0);
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
	TCNT1 = 0;
    16b2:	1d bc       	out	0x2d, r1	; 45
    16b4:	1c bc       	out	0x2c, r1	; 44
}
    16b6:	ff 91       	pop	r31
    16b8:	ef 91       	pop	r30
    16ba:	bf 91       	pop	r27
    16bc:	af 91       	pop	r26
    16be:	9f 91       	pop	r25
    16c0:	8f 91       	pop	r24
    16c2:	7f 91       	pop	r23
    16c4:	6f 91       	pop	r22
    16c6:	5f 91       	pop	r21
    16c8:	4f 91       	pop	r20
    16ca:	3f 91       	pop	r19
    16cc:	2f 91       	pop	r18
    16ce:	0f 90       	pop	r0
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	0f 90       	pop	r0
    16d4:	1f 90       	pop	r1
    16d6:	18 95       	reti

000016d8 <oled_sram_write_string>:
void oled_sram_write(int start, int page, int column, uint8_t value){
	setSRAM(start + page*128 + column, value);
}


void oled_sram_write_string(int start, char *cstr, int page){
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
	start = start + page*128; //Starts at chosen line
    16ec:	6a 01       	movw	r12, r20
    16ee:	d6 94       	lsr	r13
    16f0:	dc 2c       	mov	r13, r12
    16f2:	cc 24       	eor	r12, r12
    16f4:	d7 94       	ror	r13
    16f6:	c7 94       	ror	r12
    16f8:	c8 0e       	add	r12, r24
    16fa:	d9 1e       	adc	r13, r25
	int index = 0;
	char c = cstr[0];
    16fc:	fb 01       	movw	r30, r22
    16fe:	e0 80       	ld	r14, Z
	while(c != '\0'){
    1700:	ee 20       	and	r14, r14
    1702:	69 f1       	breq	.+90     	; 0x175e <oled_sram_write_string+0x86>
    1704:	5b 01       	movw	r10, r22
    1706:	ff ef       	ldi	r31, 0xFF	; 255
    1708:	af 1a       	sub	r10, r31
    170a:	bf 0a       	sbc	r11, r31
    170c:	15 c0       	rjmp	.+42     	; 0x1738 <oled_sram_write_string+0x60>
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
    170e:	ce 01       	movw	r24, r28
    1710:	f7 01       	movw	r30, r14
    1712:	e8 0f       	add	r30, r24
    1714:	f9 1f       	adc	r31, r25
    1716:	64 91       	lpm	r22, Z
    1718:	ec 01       	movw	r28, r24
    171a:	21 96       	adiw	r28, 0x01	; 1
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <setSRAM>
void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
		for(int line = 0; line < 8; line++){
    1722:	c0 17       	cp	r28, r16
    1724:	d1 07       	cpc	r29, r17
    1726:	99 f7       	brne	.-26     	; 0x170e <oled_sram_write_string+0x36>
    1728:	48 e0       	ldi	r20, 0x08	; 8
    172a:	c4 0e       	add	r12, r20
    172c:	d1 1c       	adc	r13, r1
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
		}
		c = cstr[++index];
    172e:	f5 01       	movw	r30, r10
    1730:	e1 90       	ld	r14, Z+
    1732:	5f 01       	movw	r10, r30

void oled_sram_write_string(int start, char *cstr, int page){
	start = start + page*128; //Starts at chosen line
	int index = 0;
	char c = cstr[0];
	while(c != '\0'){
    1734:	ee 20       	and	r14, r14
    1736:	99 f0       	breq	.+38     	; 0x175e <oled_sram_write_string+0x86>
    1738:	86 01       	movw	r16, r12
    173a:	08 5f       	subi	r16, 0xF8	; 248
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	f1 2c       	mov	r15, r1
    1740:	ee 0c       	add	r14, r14
    1742:	ff 1c       	adc	r15, r15
    1744:	ee 0c       	add	r14, r14
    1746:	ff 1c       	adc	r15, r15
    1748:	ee 0c       	add	r14, r14
    174a:	ff 1c       	adc	r15, r15
    174c:	97 01       	movw	r18, r14
    174e:	2c 19       	sub	r18, r12
    1750:	3d 09       	sbc	r19, r13
		for(int line = 0; line < 8; line++){
			setSRAM(start++,pgm_read_byte(&font[c - 32][line]));
    1752:	c6 01       	movw	r24, r12
    1754:	a9 01       	movw	r20, r18
    1756:	48 55       	subi	r20, 0x58	; 88
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
    175a:	7a 01       	movw	r14, r20
    175c:	d9 cf       	rjmp	.-78     	; 0x1710 <oled_sram_write_string+0x38>
		}
		c = cstr[++index];
	}
}
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	1f 91       	pop	r17
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	08 95       	ret

00001774 <oled_sram_write_char>:

void oled_sram_write_char(int start, char *c, int page, int col){
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	cf 93       	push	r28
    177e:	df 93       	push	r29
    1780:	7b 01       	movw	r14, r22
	start = start + page*128+col;
    1782:	8a 01       	movw	r16, r20
    1784:	16 95       	lsr	r17
    1786:	10 2f       	mov	r17, r16
    1788:	00 27       	eor	r16, r16
    178a:	17 95       	ror	r17
    178c:	07 95       	ror	r16
    178e:	80 0f       	add	r24, r16
    1790:	91 1f       	adc	r25, r17
    1792:	8c 01       	movw	r16, r24
    1794:	02 0f       	add	r16, r18
    1796:	13 1f       	adc	r17, r19
	for(int line = 0; line < 8; line++){
    1798:	c0 e0       	ldi	r28, 0x00	; 0
    179a:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
    179c:	d7 01       	movw	r26, r14
    179e:	ec 91       	ld	r30, X
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	b0 97       	sbiw	r30, 0x20	; 32
    17a4:	ee 0f       	add	r30, r30
    17a6:	ff 1f       	adc	r31, r31
    17a8:	ee 0f       	add	r30, r30
    17aa:	ff 1f       	adc	r31, r31
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	ec 0f       	add	r30, r28
    17b2:	fd 1f       	adc	r31, r29
    17b4:	e8 55       	subi	r30, 0x58	; 88
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	64 91       	lpm	r22, Z
    17ba:	70 e0       	ldi	r23, 0x00	; 0
    17bc:	ce 01       	movw	r24, r28
    17be:	80 0f       	add	r24, r16
    17c0:	91 1f       	adc	r25, r17
    17c2:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <setSRAM>
	}
}

void oled_sram_write_char(int start, char *c, int page, int col){
	start = start + page*128+col;
	for(int line = 0; line < 8; line++){
    17c6:	21 96       	adiw	r28, 0x01	; 1
    17c8:	c8 30       	cpi	r28, 0x08	; 8
    17ca:	d1 05       	cpc	r29, r1
    17cc:	39 f7       	brne	.-50     	; 0x179c <oled_sram_write_char+0x28>
		setSRAM(start++,pgm_read_byte(&font[*c - 32][line]));
	}
}
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	1f 91       	pop	r17
    17d4:	0f 91       	pop	r16
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	08 95       	ret

000017dc <oled_sram_clear_line>:

void oled_sram_clear_line(int start, int page){
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
	start = start + page*128; // Starts on correct page
    17e4:	8b 01       	movw	r16, r22
    17e6:	16 95       	lsr	r17
    17e8:	10 2f       	mov	r17, r16
    17ea:	00 27       	eor	r16, r16
    17ec:	17 95       	ror	r17
    17ee:	07 95       	ror	r16
    17f0:	08 0f       	add	r16, r24
    17f2:	19 1f       	adc	r17, r25
	for (int i = 0; i < 128; i++){
    17f4:	c0 e0       	ldi	r28, 0x00	; 0
    17f6:	d0 e0       	ldi	r29, 0x00	; 0
		setSRAM(start + i, 0);
    17f8:	60 e0       	ldi	r22, 0x00	; 0
    17fa:	70 e0       	ldi	r23, 0x00	; 0
    17fc:	ce 01       	movw	r24, r28
    17fe:	80 0f       	add	r24, r16
    1800:	91 1f       	adc	r25, r17
    1802:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <setSRAM>
	}
}

void oled_sram_clear_line(int start, int page){
	start = start + page*128; // Starts on correct page
	for (int i = 0; i < 128; i++){
    1806:	21 96       	adiw	r28, 0x01	; 1
    1808:	c0 38       	cpi	r28, 0x80	; 128
    180a:	d1 05       	cpc	r29, r1
    180c:	a9 f7       	brne	.-22     	; 0x17f8 <oled_sram_clear_line+0x1c>
		setSRAM(start + i, 0);
	}
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret

00001818 <oled_sram_clear_screen>:

void oled_sram_clear_screen(int start){
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	8c 01       	movw	r16, r24
	for (int page = 0; page < 8; page++){
    1822:	c0 e0       	ldi	r28, 0x00	; 0
    1824:	d0 e0       	ldi	r29, 0x00	; 0
		oled_sram_clear_line(start, page);
    1826:	be 01       	movw	r22, r28
    1828:	c8 01       	movw	r24, r16
    182a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <oled_sram_clear_line>
		setSRAM(start + i, 0);
	}
}

void oled_sram_clear_screen(int start){
	for (int page = 0; page < 8; page++){
    182e:	21 96       	adiw	r28, 0x01	; 1
    1830:	c8 30       	cpi	r28, 0x08	; 8
    1832:	d1 05       	cpc	r29, r1
    1834:	c1 f7       	brne	.-16     	; 0x1826 <oled_sram_clear_screen+0xe>
		oled_sram_clear_line(start, page);
	}
}
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	1f 91       	pop	r17
    183c:	0f 91       	pop	r16
    183e:	08 95       	ret

00001840 <oled_sram_write_bit>:
		}
	}
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
    1844:	cf 93       	push	r28
    1846:	df 93       	push	r29
    1848:	ea 01       	movw	r28, r20
	int page = y/8;
    184a:	9a 01       	movw	r18, r20
    184c:	dd 23       	and	r29, r29
    184e:	14 f4       	brge	.+4      	; 0x1854 <oled_sram_write_bit+0x14>
    1850:	29 5f       	subi	r18, 0xF9	; 249
    1852:	3f 4f       	sbci	r19, 0xFF	; 255
    1854:	89 01       	movw	r16, r18
    1856:	15 95       	asr	r17
    1858:	07 95       	ror	r16
    185a:	15 95       	asr	r17
    185c:	07 95       	ror	r16
    185e:	15 95       	asr	r17
    1860:	07 95       	ror	r16
	int row = y%8;
	int index = start + page*128 + x;
    1862:	16 95       	lsr	r17
    1864:	10 2f       	mov	r17, r16
    1866:	00 27       	eor	r16, r16
    1868:	17 95       	ror	r17
    186a:	07 95       	ror	r16
    186c:	08 0f       	add	r16, r24
    186e:	19 1f       	adc	r17, r25
    1870:	06 0f       	add	r16, r22
    1872:	17 1f       	adc	r17, r23
	uint8_t temp = getSRAM( index );
    1874:	c8 01       	movw	r24, r16
    1876:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <getSRAM>
	oled_sram_flush(0);
}

void oled_sram_write_bit(int start, int x, int y){
	int page = y/8;
	int row = y%8;
    187a:	ae 01       	movw	r20, r28
    187c:	47 70       	andi	r20, 0x07	; 7
    187e:	50 78       	andi	r21, 0x80	; 128
    1880:	55 23       	and	r21, r21
    1882:	34 f4       	brge	.+12     	; 0x1890 <oled_sram_write_bit+0x50>
    1884:	41 50       	subi	r20, 0x01	; 1
    1886:	51 09       	sbc	r21, r1
    1888:	48 6f       	ori	r20, 0xF8	; 248
    188a:	5f 6f       	ori	r21, 0xFF	; 255
    188c:	4f 5f       	subi	r20, 0xFF	; 255
    188e:	5f 4f       	sbci	r21, 0xFF	; 255
	int index = start + page*128 + x;
	uint8_t temp = getSRAM( index );
	temp |= (1 << row);
    1890:	21 e0       	ldi	r18, 0x01	; 1
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	b9 01       	movw	r22, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <oled_sram_write_bit+0x5c>
    1898:	66 0f       	add	r22, r22
    189a:	77 1f       	adc	r23, r23
    189c:	4a 95       	dec	r20
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <oled_sram_write_bit+0x58>
    18a0:	ab 01       	movw	r20, r22
    18a2:	48 2b       	or	r20, r24
	setSRAM(index, temp);
    18a4:	64 2f       	mov	r22, r20
    18a6:	70 e0       	ldi	r23, 0x00	; 0
    18a8:	c8 01       	movw	r24, r16
    18aa:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <setSRAM>
    18ae:	df 91       	pop	r29
    18b0:	cf 91       	pop	r28
    18b2:	1f 91       	pop	r17
    18b4:	0f 91       	pop	r16
    18b6:	08 95       	ret

000018b8 <getSRAM>:
	
}

uint8_t getSRAM(int index){
	volatile char *ext_ram = (char *) 0x1800;
	return ext_ram[index];
    18b8:	98 5e       	subi	r25, 0xE8	; 232
    18ba:	fc 01       	movw	r30, r24
    18bc:	80 81       	ld	r24, Z
}
    18be:	08 95       	ret

000018c0 <setSRAM>:

uint8_t setSRAM(int index, int value){
		volatile char *ext_ram = (char *) 0x1800;
		uint8_t temp = ext_ram[index];
    18c0:	fc 01       	movw	r30, r24
    18c2:	f8 5e       	subi	r31, 0xE8	; 232
    18c4:	80 81       	ld	r24, Z
		ext_ram[index] = value;
    18c6:	60 83       	st	Z, r22
		return temp;
}
    18c8:	08 95       	ret

000018ca <uartSend>:
	
	return 0;
}
int uartSend(char c){
	//Wait for empty buffer
	while( !( UCSR0A & (1<<UDRE0)) );
    18ca:	5d 9b       	sbis	0x0b, 5	; 11
    18cc:	fe cf       	rjmp	.-4      	; 0x18ca <uartSend>
	
	//Put data into buffer and send it
	UDR0 = c;
    18ce:	8c b9       	out	0x0c, r24	; 12
	
	return 0;
}
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	08 95       	ret

000018d6 <uartInit>:
#include <stdio.h>
#include "uart_driver.h"

int uartInit(unsigned int baud){
	//Calculate ubrr value
	unsigned int ubrr = F_CPU / 16 / baud - 1;
    18d6:	9c 01       	movw	r18, r24
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	50 e0       	ldi	r21, 0x00	; 0
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 eb       	ldi	r23, 0xB0	; 176
    18e0:	84 e0       	ldi	r24, 0x04	; 4
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__divmodsi4>
    18e8:	21 50       	subi	r18, 0x01	; 1
    18ea:	31 09       	sbc	r19, r1
	
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
    18ec:	30 bd       	out	0x20, r19	; 32
	UBRR0L = (unsigned char) ubrr;
    18ee:	29 b9       	out	0x09, r18	; 9

	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
    18f0:	8a b1       	in	r24, 0x0a	; 10
    18f2:	88 61       	ori	r24, 0x18	; 24
    18f4:	8a b9       	out	0x0a, r24	; 10
	
	// 8data, 1stop
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
    18f6:	80 b5       	in	r24, 0x20	; 32
    18f8:	86 68       	ori	r24, 0x86	; 134
    18fa:	80 bd       	out	0x20, r24	; 32
	
	//Enable printf for uart
	fdevopen(&uartSend, NULL);
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	85 e6       	ldi	r24, 0x65	; 101
    1902:	9c e0       	ldi	r25, 0x0C	; 12
    1904:	0e 94 bb 18 	call	0x3176	; 0x3176 <fdevopen>
	
	return 0;
}
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	08 95       	ret

0000190e <play_draw>:
#include "../Driver_files/oled_driver.h"
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	int x = 63;
	int y = 31;
    1916:	0f e1       	ldi	r16, 0x1F	; 31
    1918:	10 e0       	ldi	r17, 0x00	; 0
#include "draw.h"


void play_draw(){
	oled_sram_clear_screen(0);
	int x = 63;
    191a:	cf e3       	ldi	r28, 0x3F	; 63
    191c:	d0 e0       	ldi	r29, 0x00	; 0
	int y = 31;
	
	Joystick joy;
	while (1){
		joy = get_joystick_position();
    191e:	0e 94 31 09 	call	0x1262	; 0x1262 <get_joystick_position>
		switch(joy.D){
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	71 f0       	breq	.+28     	; 0x1942 <play_draw+0x34>
    1926:	58 f0       	brcs	.+22     	; 0x193e <play_draw+0x30>
    1928:	82 30       	cpi	r24, 0x02	; 2
    192a:	19 f0       	breq	.+6      	; 0x1932 <play_draw+0x24>
    192c:	83 30       	cpi	r24, 0x03	; 3
    192e:	21 f0       	breq	.+8      	; 0x1938 <play_draw+0x2a>
    1930:	09 c0       	rjmp	.+18     	; 0x1944 <play_draw+0x36>
			case NEUTRAL:
				break;
			case UP:
				y--;
    1932:	01 50       	subi	r16, 0x01	; 1
    1934:	11 09       	sbc	r17, r1
				break;
    1936:	06 c0       	rjmp	.+12     	; 0x1944 <play_draw+0x36>
			case DOWN:
				y++;
    1938:	0f 5f       	subi	r16, 0xFF	; 255
    193a:	1f 4f       	sbci	r17, 0xFF	; 255
				break;
    193c:	03 c0       	rjmp	.+6      	; 0x1944 <play_draw+0x36>
			case LEFT:
				x--;
    193e:	21 97       	sbiw	r28, 0x01	; 1
				break;
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <play_draw+0x36>
			case RIGHT:
				x++;
    1942:	21 96       	adiw	r28, 0x01	; 1
			break;
			default:
			break;
		}
		oled_sram_write_bit(0,x,y);
    1944:	a8 01       	movw	r20, r16
    1946:	be 01       	movw	r22, r28
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
		oled_sram_flush(0);
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
    1958:	2f ef       	ldi	r18, 0xFF	; 255
    195a:	8f e7       	ldi	r24, 0x7F	; 127
    195c:	91 e0       	ldi	r25, 0x01	; 1
    195e:	21 50       	subi	r18, 0x01	; 1
    1960:	80 40       	sbci	r24, 0x00	; 0
    1962:	90 40       	sbci	r25, 0x00	; 0
    1964:	e1 f7       	brne	.-8      	; 0x195e <play_draw+0x50>
    1966:	00 c0       	rjmp	.+0      	; 0x1968 <play_draw+0x5a>
    1968:	00 c0       	rjmp	.+0      	; 0x196a <play_draw+0x5c>
    196a:	d9 cf       	rjmp	.-78     	; 0x191e <play_draw+0x10>

0000196c <racketHit>:

typedef struct{
	int pos; // from 0 to 45 (16 in width)
} Racket;

int racketHit(Ball *ball, int racketPos){
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	eb 01       	movw	r28, r22
	if (ball->posY >= racketPos && ball->posY < racketPos + RACKETSIZE )
    197a:	fc 01       	movw	r30, r24
    197c:	c2 80       	ldd	r12, Z+2	; 0x02
    197e:	d3 80       	ldd	r13, Z+3	; 0x03
    1980:	e4 80       	ldd	r14, Z+4	; 0x04
    1982:	f5 80       	ldd	r15, Z+5	; 0x05
    1984:	88 27       	eor	r24, r24
    1986:	77 fd       	sbrc	r23, 7
    1988:	80 95       	com	r24
    198a:	98 2f       	mov	r25, r24
    198c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1990:	9b 01       	movw	r18, r22
    1992:	ac 01       	movw	r20, r24
    1994:	c7 01       	movw	r24, r14
    1996:	b6 01       	movw	r22, r12
    1998:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__gesf2>
    199c:	88 23       	and	r24, r24
    199e:	bc f0       	brlt	.+46     	; 0x19ce <racketHit+0x62>
    19a0:	be 01       	movw	r22, r28
    19a2:	60 5f       	subi	r22, 0xF0	; 240
    19a4:	7f 4f       	sbci	r23, 0xFF	; 255
    19a6:	88 27       	eor	r24, r24
    19a8:	77 fd       	sbrc	r23, 7
    19aa:	80 95       	com	r24
    19ac:	98 2f       	mov	r25, r24
    19ae:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	d1 e0       	ldi	r29, 0x01	; 1
    19b8:	c0 e0       	ldi	r28, 0x00	; 0
    19ba:	c7 01       	movw	r24, r14
    19bc:	b6 01       	movw	r22, r12
    19be:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__cmpsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	0c f0       	brlt	.+2      	; 0x19c8 <racketHit+0x5c>
    19c6:	d0 e0       	ldi	r29, 0x00	; 0
		return 1;
    19c8:	8d 2f       	mov	r24, r29
    19ca:	9c 2f       	mov	r25, r28
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <racketHit+0x66>
	return 0;
    19ce:	80 e0       	ldi	r24, 0x00	; 0
    19d0:	90 e0       	ldi	r25, 0x00	; 0
}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	08 95       	ret

000019e0 <updateBallAngle>:

void updateBallAngle(Ball *ball, int racketPos){
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	ec 01       	movw	r28, r24
    19f2:	8b 01       	movw	r16, r22
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
	int newBallAngle = ball->angle + hitPos * 45;
    19f4:	6e 81       	ldd	r22, Y+6	; 0x06
    19f6:	7f 81       	ldd	r23, Y+7	; 0x07
    19f8:	88 27       	eor	r24, r24
    19fa:	77 fd       	sbrc	r23, 7
    19fc:	80 95       	com	r24
    19fe:	98 2f       	mov	r25, r24
    1a00:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1a04:	6b 01       	movw	r12, r22
    1a06:	7c 01       	movw	r14, r24
		return 1;
	return 0;
}

void updateBallAngle(Ball *ball, int racketPos){
	float hitPos = (float)(ball->posY - racketPos - 8)/8; //from -1 to 1
    1a08:	b8 01       	movw	r22, r16
    1a0a:	88 27       	eor	r24, r24
    1a0c:	77 fd       	sbrc	r23, 7
    1a0e:	80 95       	com	r24
    1a10:	98 2f       	mov	r25, r24
    1a12:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1a16:	9b 01       	movw	r18, r22
    1a18:	ac 01       	movw	r20, r24
    1a1a:	6a 81       	ldd	r22, Y+2	; 0x02
    1a1c:	7b 81       	ldd	r23, Y+3	; 0x03
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e0       	ldi	r20, 0x00	; 0
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	5e e3       	ldi	r21, 0x3E	; 62
    1a3a:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
	int newBallAngle = ball->angle + hitPos * 45;
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	44 e3       	ldi	r20, 0x34	; 52
    1a44:	52 e4       	ldi	r21, 0x42	; 66
    1a46:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <__mulsf3>
    1a4a:	9b 01       	movw	r18, r22
    1a4c:	ac 01       	movw	r20, r24
    1a4e:	c7 01       	movw	r24, r14
    1a50:	b6 01       	movw	r22, r12
    1a52:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1a56:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixsfsi>
	if(newBallAngle > 45) ball->angle = 45;
    1a5a:	6e 32       	cpi	r22, 0x2E	; 46
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	2c f0       	brlt	.+10     	; 0x1a6a <updateBallAngle+0x8a>
    1a60:	8d e2       	ldi	r24, 0x2D	; 45
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9f 83       	std	Y+7, r25	; 0x07
    1a66:	8e 83       	std	Y+6, r24	; 0x06
    1a68:	0b c0       	rjmp	.+22     	; 0x1a80 <updateBallAngle+0xa0>
	else if(newBallAngle < -45) ball->angle = 45;
    1a6a:	63 3d       	cpi	r22, 0xD3	; 211
    1a6c:	4f ef       	ldi	r20, 0xFF	; 255
    1a6e:	74 07       	cpc	r23, r20
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <updateBallAngle+0x9c>
    1a72:	8d e2       	ldi	r24, 0x2D	; 45
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9f 83       	std	Y+7, r25	; 0x07
    1a78:	8e 83       	std	Y+6, r24	; 0x06
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <updateBallAngle+0xa0>
	else ball->angle = newBallAngle;
    1a7c:	7f 83       	std	Y+7, r23	; 0x07
    1a7e:	6e 83       	std	Y+6, r22	; 0x06
}
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	ff 90       	pop	r15
    1a8a:	ef 90       	pop	r14
    1a8c:	df 90       	pop	r13
    1a8e:	cf 90       	pop	r12
    1a90:	08 95       	ret

00001a92 <ballInit>:

void ballInit(Ball *ball){
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	ec 01       	movw	r28, r24
	ball->dir = rand() % 2;
    1a98:	0e 94 ab 18 	call	0x3156	; 0x3156 <rand>
    1a9c:	81 70       	andi	r24, 0x01	; 1
    1a9e:	90 78       	andi	r25, 0x80	; 128
    1aa0:	99 23       	and	r25, r25
    1aa2:	24 f4       	brge	.+8      	; 0x1aac <ballInit+0x1a>
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	8e 6f       	ori	r24, 0xFE	; 254
    1aa8:	9f 6f       	ori	r25, 0xFF	; 255
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	99 87       	std	Y+9, r25	; 0x09
    1aae:	88 87       	std	Y+8, r24	; 0x08
	ball->angle = (rand() % 91) - 45;
    1ab0:	0e 94 ab 18 	call	0x3156	; 0x3156 <rand>
    1ab4:	6b e5       	ldi	r22, 0x5B	; 91
    1ab6:	70 e0       	ldi	r23, 0x00	; 0
    1ab8:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    1abc:	8d 97       	sbiw	r24, 0x2d	; 45
    1abe:	9f 83       	std	Y+7, r25	; 0x07
    1ac0:	8e 83       	std	Y+6, r24	; 0x06
	ball->posX = 63;
    1ac2:	8f e3       	ldi	r24, 0x3F	; 63
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	99 83       	std	Y+1, r25	; 0x01
    1ac8:	88 83       	st	Y, r24
}
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	08 95       	ret

00001ad0 <updateBallPosition>:

void updateBallPosition(Ball *ball){
    1ad0:	cf 92       	push	r12
    1ad2:	df 92       	push	r13
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	ec 01       	movw	r28, r24
	float tempPosY = ball->posY + ((float)(ball->angle)/45);
    1ae2:	0e 81       	ldd	r16, Y+6	; 0x06
    1ae4:	1f 81       	ldd	r17, Y+7	; 0x07
    1ae6:	b8 01       	movw	r22, r16
    1ae8:	88 27       	eor	r24, r24
    1aea:	77 fd       	sbrc	r23, 7
    1aec:	80 95       	com	r24
    1aee:	98 2f       	mov	r25, r24
    1af0:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <__floatsisf>
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	44 e3       	ldi	r20, 0x34	; 52
    1afa:	52 e4       	ldi	r21, 0x42	; 66
    1afc:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <__divsf3>
    1b00:	2a 81       	ldd	r18, Y+2	; 0x02
    1b02:	3b 81       	ldd	r19, Y+3	; 0x03
    1b04:	4c 81       	ldd	r20, Y+4	; 0x04
    1b06:	5d 81       	ldd	r21, Y+5	; 0x05
    1b08:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1b0c:	6b 01       	movw	r12, r22
    1b0e:	7c 01       	movw	r14, r24
	
	//hits the wall
	if (tempPosY > 63){ 
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	4c e7       	ldi	r20, 0x7C	; 124
    1b16:	52 e4       	ldi	r21, 0x42	; 66
    1b18:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__gesf2>
    1b1c:	18 16       	cp	r1, r24
    1b1e:	d4 f4       	brge	.+52     	; 0x1b54 <updateBallPosition+0x84>
		ball->posY = 63 - (tempPosY - 63);
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4c e7       	ldi	r20, 0x7C	; 124
    1b26:	52 e4       	ldi	r21, 0x42	; 66
    1b28:	c7 01       	movw	r24, r14
    1b2a:	b6 01       	movw	r22, r12
    1b2c:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1b30:	9b 01       	movw	r18, r22
    1b32:	ac 01       	movw	r20, r24
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	8c e7       	ldi	r24, 0x7C	; 124
    1b3a:	92 e4       	ldi	r25, 0x42	; 66
    1b3c:	0e 94 b2 14 	call	0x2964	; 0x2964 <__subsf3>
    1b40:	6a 83       	std	Y+2, r22	; 0x02
    1b42:	7b 83       	std	Y+3, r23	; 0x03
    1b44:	8c 83       	std	Y+4, r24	; 0x04
    1b46:	9d 83       	std	Y+5, r25	; 0x05
		ball->angle *= -1;
    1b48:	11 95       	neg	r17
    1b4a:	01 95       	neg	r16
    1b4c:	11 09       	sbc	r17, r1
    1b4e:	1f 83       	std	Y+7, r17	; 0x07
    1b50:	0e 83       	std	Y+6, r16	; 0x06
    1b52:	1b c0       	rjmp	.+54     	; 0x1b8a <updateBallPosition+0xba>
	}
	else if (tempPosY < 0){
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	a9 01       	movw	r20, r18
    1b5a:	c7 01       	movw	r24, r14
    1b5c:	b6 01       	movw	r22, r12
    1b5e:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__cmpsf2>
    1b62:	88 23       	and	r24, r24
    1b64:	74 f4       	brge	.+28     	; 0x1b82 <updateBallPosition+0xb2>
		ball->posY = -1*tempPosY;
    1b66:	f7 fa       	bst	r15, 7
    1b68:	f0 94       	com	r15
    1b6a:	f7 f8       	bld	r15, 7
    1b6c:	f0 94       	com	r15
    1b6e:	ca 82       	std	Y+2, r12	; 0x02
    1b70:	db 82       	std	Y+3, r13	; 0x03
    1b72:	ec 82       	std	Y+4, r14	; 0x04
    1b74:	fd 82       	std	Y+5, r15	; 0x05
		ball->angle *= -1;
    1b76:	11 95       	neg	r17
    1b78:	01 95       	neg	r16
    1b7a:	11 09       	sbc	r17, r1
    1b7c:	1f 83       	std	Y+7, r17	; 0x07
    1b7e:	0e 83       	std	Y+6, r16	; 0x06
    1b80:	04 c0       	rjmp	.+8      	; 0x1b8a <updateBallPosition+0xba>
	}
	else ball->posY = tempPosY;
    1b82:	ca 82       	std	Y+2, r12	; 0x02
    1b84:	db 82       	std	Y+3, r13	; 0x03
    1b86:	ec 82       	std	Y+4, r14	; 0x04
    1b88:	fd 82       	std	Y+5, r15	; 0x05
	if(ball->dir == RIGHT)
    1b8a:	88 85       	ldd	r24, Y+8	; 0x08
    1b8c:	99 85       	ldd	r25, Y+9	; 0x09
    1b8e:	01 97       	sbiw	r24, 0x01	; 1
    1b90:	31 f4       	brne	.+12     	; 0x1b9e <updateBallPosition+0xce>
		ball->posX++;
    1b92:	88 81       	ld	r24, Y
    1b94:	99 81       	ldd	r25, Y+1	; 0x01
    1b96:	01 96       	adiw	r24, 0x01	; 1
    1b98:	99 83       	std	Y+1, r25	; 0x01
    1b9a:	88 83       	st	Y, r24
    1b9c:	05 c0       	rjmp	.+10     	; 0x1ba8 <updateBallPosition+0xd8>
	else ball->posX--;
    1b9e:	88 81       	ld	r24, Y
    1ba0:	99 81       	ldd	r25, Y+1	; 0x01
    1ba2:	01 97       	sbiw	r24, 0x01	; 1
    1ba4:	99 83       	std	Y+1, r25	; 0x01
    1ba6:	88 83       	st	Y, r24
}
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	ff 90       	pop	r15
    1bb2:	ef 90       	pop	r14
    1bb4:	df 90       	pop	r13
    1bb6:	cf 90       	pop	r12
    1bb8:	08 95       	ret

00001bba <updateSliderPosition>:
void updateSliderPosition(Slider *slide){
    1bba:	cf 93       	push	r28
    1bbc:	df 93       	push	r29
    1bbe:	ec 01       	movw	r28, r24
	*slide = get_slider_position();
    1bc0:	0e 94 b4 08 	call	0x1168	; 0x1168 <get_slider_position>
    1bc4:	79 83       	std	Y+1, r23	; 0x01
    1bc6:	8a 83       	std	Y+2, r24	; 0x02
    1bc8:	9b 83       	std	Y+3, r25	; 0x03
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
    1bca:	4f e2       	ldi	r20, 0x2F	; 47
    1bcc:	46 9f       	mul	r20, r22
    1bce:	c0 01       	movw	r24, r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	24 e6       	ldi	r18, 0x64	; 100
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	b9 01       	movw	r22, r18
    1bd8:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    1bdc:	68 83       	st	Y, r22
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	48 9f       	mul	r20, r24
    1be2:	c0 01       	movw	r24, r0
    1be4:	11 24       	eor	r1, r1
    1be6:	b9 01       	movw	r22, r18
    1be8:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    1bec:	69 83       	std	Y+1, r22	; 0x01
} 
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	08 95       	ret

00001bf4 <updateScreen>:
			printEndScreen("Player Left won!");
		}
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
    1bf4:	cf 92       	push	r12
    1bf6:	df 92       	push	r13
    1bf8:	ef 92       	push	r14
    1bfa:	ff 92       	push	r15
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	2a 97       	sbiw	r28, 0x0a	; 10
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	09 83       	std	Y+1, r16	; 0x01
    1c16:	1a 83       	std	Y+2, r17	; 0x02
    1c18:	2b 83       	std	Y+3, r18	; 0x03
    1c1a:	3c 83       	std	Y+4, r19	; 0x04
    1c1c:	4d 83       	std	Y+5, r20	; 0x05
    1c1e:	5e 83       	std	Y+6, r21	; 0x06
	oled_sram_clear_screen(0);
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	for (int i = 0; i < RACKETSIZE; i++){
    1c28:	00 e0       	ldi	r16, 0x00	; 0
    1c2a:	10 e0       	ldi	r17, 0x00	; 0
    1c2c:	a8 01       	movw	r20, r16
    1c2e:	4e 0d       	add	r20, r14
    1c30:	5f 1d       	adc	r21, r15
		oled_sram_write_bit(0, 1, leftRacketPos + i);
    1c32:	61 e0       	ldi	r22, 0x01	; 1
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
    1c3e:	a8 01       	movw	r20, r16
    1c40:	4c 0d       	add	r20, r12
    1c42:	5d 1d       	adc	r21, r13
		oled_sram_write_bit(0,127, rightRacketPos + i);
    1c44:	6f e7       	ldi	r22, 0x7F	; 127
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
	}
}

void updateScreen(Ball ball, int leftRacketPos, int rightRacketPos){
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
    1c50:	0f 5f       	subi	r16, 0xFF	; 255
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	00 31       	cpi	r16, 0x10	; 16
    1c56:	11 05       	cpc	r17, r1
    1c58:	49 f7       	brne	.-46     	; 0x1c2c <updateScreen+0x38>
    1c5a:	00 e0       	ldi	r16, 0x00	; 0
    1c5c:	10 e0       	ldi	r17, 0x00	; 0
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	a9 01       	movw	r20, r18
    1c64:	6b 81       	ldd	r22, Y+3	; 0x03
    1c66:	7c 81       	ldd	r23, Y+4	; 0x04
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1c70:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixsfsi>
    1c74:	29 81       	ldd	r18, Y+1	; 0x01
    1c76:	3a 81       	ldd	r19, Y+2	; 0x02
    1c78:	20 0f       	add	r18, r16
    1c7a:	31 1f       	adc	r19, r17
    1c7c:	ab 01       	movw	r20, r22
    1c7e:	b9 01       	movw	r22, r18
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	6b 81       	ldd	r22, Y+3	; 0x03
    1c92:	7c 81       	ldd	r23, Y+4	; 0x04
    1c94:	8d 81       	ldd	r24, Y+5	; 0x05
    1c96:	9e 81       	ldd	r25, Y+6	; 0x06
    1c98:	0e 94 b3 14 	call	0x2966	; 0x2966 <__addsf3>
    1c9c:	0e 94 83 15 	call	0x2b06	; 0x2b06 <__fixsfsi>
    1ca0:	29 81       	ldd	r18, Y+1	; 0x01
    1ca2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ca4:	20 0f       	add	r18, r16
    1ca6:	31 1f       	adc	r19, r17
    1ca8:	ab 01       	movw	r20, r22
    1caa:	b9 01       	movw	r22, r18
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
	oled_sram_clear_screen(0);
	for (int i = 0; i < RACKETSIZE; i++){
		oled_sram_write_bit(0, 1, leftRacketPos + i);
		oled_sram_write_bit(0,127, rightRacketPos + i);
	}
	for(int i = 0; i < 2; i++){
    1cb4:	0f 5f       	subi	r16, 0xFF	; 255
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	02 30       	cpi	r16, 0x02	; 2
    1cba:	11 05       	cpc	r17, r1
    1cbc:	81 f6       	brne	.-96     	; 0x1c5e <updateScreen+0x6a>
		for(int j = 0; j < 2; j++){
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
}
    1cc6:	2a 96       	adiw	r28, 0x0a	; 10
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	08 95       	ret

00001ce4 <playRound>:
	*slide = get_slider_position();
	slide->left = (slide->left)*(63-RACKETSIZE)/100;
	slide->right = (slide->right)*(63-RACKETSIZE)/100;
} 

int playRound(){
    1ce4:	af 92       	push	r10
    1ce6:	bf 92       	push	r11
    1ce8:	cf 92       	push	r12
    1cea:	df 92       	push	r13
    1cec:	ef 92       	push	r14
    1cee:	ff 92       	push	r15
    1cf0:	0f 93       	push	r16
    1cf2:	1f 93       	push	r17
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
    1cfc:	2e 97       	sbiw	r28, 0x0e	; 14
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	f8 94       	cli
    1d02:	de bf       	out	0x3e, r29	; 62
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	cd bf       	out	0x3d, r28	; 61
	Ball ball;
	Slider slide;
	ballInit(&ball);
    1d08:	ce 01       	movw	r24, r28
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <ballInit>
				return LEFT;
			}
		}
		else if (ball.posX == 1){
			if (racketHit(&ball, slide.left) ){
				ball.dir = RIGHT;
    1d10:	aa 24       	eor	r10, r10
    1d12:	a3 94       	inc	r10
    1d14:	b1 2c       	mov	r11, r1
	Ball ball;
	Slider slide;
	ballInit(&ball);
	int time = 25;
	while(1){
		updateSliderPosition(&slide);
    1d16:	ce 01       	movw	r24, r28
    1d18:	0b 96       	adiw	r24, 0x0b	; 11
    1d1a:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <updateSliderPosition>
		if (ball.posX >= 126){
    1d1e:	09 81       	ldd	r16, Y+1	; 0x01
    1d20:	1a 81       	ldd	r17, Y+2	; 0x02
    1d22:	0e 37       	cpi	r16, 0x7E	; 126
    1d24:	11 05       	cpc	r17, r1
    1d26:	94 f0       	brlt	.+36     	; 0x1d4c <playRound+0x68>
			if (racketHit(&ball, slide.right) ){
    1d28:	ec 84       	ldd	r14, Y+12	; 0x0c
    1d2a:	f1 2c       	mov	r15, r1
    1d2c:	b7 01       	movw	r22, r14
    1d2e:	ce 01       	movw	r24, r28
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	0e 94 b6 0c 	call	0x196c	; 0x196c <racketHit>
    1d36:	8c 01       	movw	r16, r24
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	a9 f1       	breq	.+106    	; 0x1da6 <playRound+0xc2>
				ball.dir = LEFT;
    1d3c:	1a 86       	std	Y+10, r1	; 0x0a
    1d3e:	19 86       	std	Y+9, r1	; 0x09
				updateBallAngle(&ball, slide.right);
    1d40:	b7 01       	movw	r22, r14
    1d42:	ce 01       	movw	r24, r28
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <updateBallAngle>
    1d4a:	13 c0       	rjmp	.+38     	; 0x1d72 <playRound+0x8e>
			}
			else{
				return LEFT;
			}
		}
		else if (ball.posX == 1){
    1d4c:	01 30       	cpi	r16, 0x01	; 1
    1d4e:	11 05       	cpc	r17, r1
    1d50:	81 f4       	brne	.+32     	; 0x1d72 <playRound+0x8e>
			if (racketHit(&ball, slide.left) ){
    1d52:	eb 84       	ldd	r14, Y+11	; 0x0b
    1d54:	f1 2c       	mov	r15, r1
    1d56:	b7 01       	movw	r22, r14
    1d58:	ce 01       	movw	r24, r28
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	0e 94 b6 0c 	call	0x196c	; 0x196c <racketHit>
    1d60:	89 2b       	or	r24, r25
    1d62:	09 f1       	breq	.+66     	; 0x1da6 <playRound+0xc2>
				ball.dir = RIGHT;
    1d64:	ba 86       	std	Y+10, r11	; 0x0a
    1d66:	a9 86       	std	Y+9, r10	; 0x09
				updateBallAngle(&ball, slide.left);
    1d68:	b7 01       	movw	r22, r14
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <updateBallAngle>
			}
			else {
				return RIGHT;
			}
		}
		updateBallPosition(&ball);
    1d72:	ce 01       	movw	r24, r28
    1d74:	01 96       	adiw	r24, 0x01	; 1
    1d76:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <updateBallPosition>
		updateScreen(ball, slide.left, slide.right);
    1d7a:	cc 84       	ldd	r12, Y+12	; 0x0c
    1d7c:	d1 2c       	mov	r13, r1
    1d7e:	eb 84       	ldd	r14, Y+11	; 0x0b
    1d80:	f1 2c       	mov	r15, r1
    1d82:	09 81       	ldd	r16, Y+1	; 0x01
    1d84:	1a 81       	ldd	r17, Y+2	; 0x02
    1d86:	2b 81       	ldd	r18, Y+3	; 0x03
    1d88:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d8c:	5e 81       	ldd	r21, Y+6	; 0x06
    1d8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d90:	78 85       	ldd	r23, Y+8	; 0x08
    1d92:	89 85       	ldd	r24, Y+9	; 0x09
    1d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d96:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <updateScreen>
    1d9a:	89 e9       	ldi	r24, 0x99	; 153
    1d9c:	99 e0       	ldi	r25, 0x09	; 9
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <playRound+0xba>
    1da2:	00 c0       	rjmp	.+0      	; 0x1da4 <playRound+0xc0>
    1da4:	b8 cf       	rjmp	.-144    	; 0x1d16 <playRound+0x32>
		_delay_ms(2);
	}
}
    1da6:	c8 01       	movw	r24, r16
    1da8:	2e 96       	adiw	r28, 0x0e	; 14
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	df 91       	pop	r29
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	ff 90       	pop	r15
    1dbe:	ef 90       	pop	r14
    1dc0:	df 90       	pop	r13
    1dc2:	cf 90       	pop	r12
    1dc4:	bf 90       	pop	r11
    1dc6:	af 90       	pop	r10
    1dc8:	08 95       	ret

00001dca <printScore>:
			oled_sram_write_bit(0, ball.posX + i, ball.posY + j);
		}
	}
	oled_sram_flush(0);
}
void printScore(int leftPoints, int rightPoints){
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <printScore+0xa>
    1dd4:	1f 92       	push	r1
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	08 2f       	mov	r16, r24
    1ddc:	16 2f       	mov	r17, r22
	oled_sram_clear_screen(0);
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	char lp = leftPoints + '0';
    1de6:	00 5d       	subi	r16, 0xD0	; 208
    1de8:	09 83       	std	Y+1, r16	; 0x01
	char mid = '-';
    1dea:	8d e2       	ldi	r24, 0x2D	; 45
    1dec:	8a 83       	std	Y+2, r24	; 0x02
	char rp = rightPoints + '0';
    1dee:	10 5d       	subi	r17, 0xD0	; 208
    1df0:	1b 83       	std	Y+3, r17	; 0x03
	oled_sram_write_char(0, &lp, 2, 56);
    1df2:	28 e3       	ldi	r18, 0x38	; 56
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	42 e0       	ldi	r20, 0x02	; 2
    1df8:	50 e0       	ldi	r21, 0x00	; 0
    1dfa:	be 01       	movw	r22, r28
    1dfc:	6f 5f       	subi	r22, 0xFF	; 255
    1dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
	oled_sram_write_char(0, &mid, 2, 64);
    1e08:	20 e4       	ldi	r18, 0x40	; 64
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	42 e0       	ldi	r20, 0x02	; 2
    1e0e:	50 e0       	ldi	r21, 0x00	; 0
    1e10:	be 01       	movw	r22, r28
    1e12:	6e 5f       	subi	r22, 0xFE	; 254
    1e14:	7f 4f       	sbci	r23, 0xFF	; 255
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
	oled_sram_write_char(0, &rp, 2, 72);
    1e1e:	28 e4       	ldi	r18, 0x48	; 72
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	42 e0       	ldi	r20, 0x02	; 2
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	be 01       	movw	r22, r28
    1e28:	6d 5f       	subi	r22, 0xFD	; 253
    1e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
	oled_sram_flush(0);	
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
}
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	0f 91       	pop	r16
    1e4a:	08 95       	ret

00001e4c <printEndScreen>:
void printEndScreen(char *endMessage){
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	8c 01       	movw	r16, r24
	oled_sram_clear_screen(0);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	for(int i = 0; i < 10; i++){
    1e5e:	c0 e0       	ldi	r28, 0x00	; 0
    1e60:	d0 e0       	ldi	r29, 0x00	; 0
		if( i % 2 ){
    1e62:	c0 ff       	sbrs	r28, 0
    1e64:	11 c0       	rjmp	.+34     	; 0x1e88 <printEndScreen+0x3c>
			oled_sram_write_string(0, endMessage, 2);
    1e66:	42 e0       	ldi	r20, 0x02	; 2
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	b8 01       	movw	r22, r16
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
    1e74:	8f ef       	ldi	r24, 0xFF	; 255
    1e76:	9f e7       	ldi	r25, 0x7F	; 127
    1e78:	24 e0       	ldi	r18, 0x04	; 4
    1e7a:	81 50       	subi	r24, 0x01	; 1
    1e7c:	90 40       	sbci	r25, 0x00	; 0
    1e7e:	20 40       	sbci	r18, 0x00	; 0
    1e80:	e1 f7       	brne	.-8      	; 0x1e7a <printEndScreen+0x2e>
    1e82:	00 c0       	rjmp	.+0      	; 0x1e84 <printEndScreen+0x38>
    1e84:	00 00       	nop
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <printEndScreen+0x4e>
    1e88:	8f ef       	ldi	r24, 0xFF	; 255
    1e8a:	9f e7       	ldi	r25, 0x7F	; 127
    1e8c:	24 e0       	ldi	r18, 0x04	; 4
    1e8e:	81 50       	subi	r24, 0x01	; 1
    1e90:	90 40       	sbci	r25, 0x00	; 0
    1e92:	20 40       	sbci	r18, 0x00	; 0
    1e94:	e1 f7       	brne	.-8      	; 0x1e8e <printEndScreen+0x42>
    1e96:	00 c0       	rjmp	.+0      	; 0x1e98 <printEndScreen+0x4c>
    1e98:	00 00       	nop
	oled_sram_write_char(0, &rp, 2, 72);
	oled_sram_flush(0);	
}
void printEndScreen(char *endMessage){
	oled_sram_clear_screen(0);
	for(int i = 0; i < 10; i++){
    1e9a:	21 96       	adiw	r28, 0x01	; 1
    1e9c:	ca 30       	cpi	r28, 0x0A	; 10
    1e9e:	d1 05       	cpc	r29, r1
    1ea0:	01 f7       	brne	.-64     	; 0x1e62 <printEndScreen+0x16>
			oled_sram_write_string(0, endMessage, 2);
			_delay_ms(300);
		}
		else _delay_ms(300);
	}
	oled_sram_flush(0);	
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	08 95       	ret

00001eb4 <playPong>:

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	}
}

void playPong(){
	int pointLeft = 0;
	int pointRight = 0;
    1ebc:	00 e0       	ldi	r16, 0x00	; 0
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
		_delay_ms(2);
	}
}

void playPong(){
	int pointLeft = 0;
    1ec0:	c0 e0       	ldi	r28, 0x00	; 0
    1ec2:	d0 e0       	ldi	r29, 0x00	; 0
	int pointRight = 0;
	int point;
	oled_sram_clear_screen(0);
	while(1){
		printScore(pointLeft, pointRight);
    1ec4:	b8 01       	movw	r22, r16
    1ec6:	ce 01       	movw	r24, r28
    1ec8:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <printScore>
    1ecc:	2f ef       	ldi	r18, 0xFF	; 255
    1ece:	8f ef       	ldi	r24, 0xFF	; 255
    1ed0:	9d e1       	ldi	r25, 0x1D	; 29
    1ed2:	21 50       	subi	r18, 0x01	; 1
    1ed4:	80 40       	sbci	r24, 0x00	; 0
    1ed6:	90 40       	sbci	r25, 0x00	; 0
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <playPong+0x1e>
    1eda:	00 c0       	rjmp	.+0      	; 0x1edc <playPong+0x28>
    1edc:	00 00       	nop
		_delay_ms(2000);
		point = playRound();
    1ede:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <playRound>
		if (point == LEFT) pointLeft++;
    1ee2:	89 2b       	or	r24, r25
    1ee4:	11 f4       	brne	.+4      	; 0x1eea <playPong+0x36>
    1ee6:	21 96       	adiw	r28, 0x01	; 1
    1ee8:	02 c0       	rjmp	.+4      	; 0x1eee <playPong+0x3a>
		else pointRight++;
    1eea:	0f 5f       	subi	r16, 0xFF	; 255
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
		if(pointLeft == 5){
    1eee:	c5 30       	cpi	r28, 0x05	; 5
    1ef0:	d1 05       	cpc	r29, r1
    1ef2:	29 f4       	brne	.+10     	; 0x1efe <playPong+0x4a>
			printEndScreen("Player Right won!");
    1ef4:	83 e2       	ldi	r24, 0x23	; 35
    1ef6:	92 e0       	ldi	r25, 0x02	; 2
    1ef8:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <printEndScreen>
    1efc:	e3 cf       	rjmp	.-58     	; 0x1ec4 <playPong+0x10>
		}
		else if(pointRight == 5){
    1efe:	05 30       	cpi	r16, 0x05	; 5
    1f00:	11 05       	cpc	r17, r1
    1f02:	01 f7       	brne	.-64     	; 0x1ec4 <playPong+0x10>
			printEndScreen("Player Left won!");
    1f04:	85 e3       	ldi	r24, 0x35	; 53
    1f06:	92 e0       	ldi	r25, 0x02	; 2
    1f08:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <printEndScreen>
    1f0c:	db cf       	rjmp	.-74     	; 0x1ec4 <playPong+0x10>

00001f0e <detectCollision>:
#include "../Driver_files/oled_driver.h"
#include <stdlib.h>
#include "highscore.h"


int detectCollision(segment *s, int x, int y){
    1f0e:	fc 01       	movw	r30, r24
	while(s){
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	81 f0       	breq	.+32     	; 0x1f34 <detectCollision+0x26>
		if (s->x == x && s->y == y){
    1f14:	84 81       	ldd	r24, Z+4	; 0x04
    1f16:	95 81       	ldd	r25, Z+5	; 0x05
    1f18:	86 17       	cp	r24, r22
    1f1a:	97 07       	cpc	r25, r23
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <detectCollision+0x1a>
    1f1e:	86 81       	ldd	r24, Z+6	; 0x06
    1f20:	97 81       	ldd	r25, Z+7	; 0x07
    1f22:	84 17       	cp	r24, r20
    1f24:	95 07       	cpc	r25, r21
    1f26:	49 f0       	breq	.+18     	; 0x1f3a <detectCollision+0x2c>
			return 1;
		}
		s = s->next;
    1f28:	01 90       	ld	r0, Z+
    1f2a:	f0 81       	ld	r31, Z
    1f2c:	e0 2d       	mov	r30, r0
#include <stdlib.h>
#include "highscore.h"


int detectCollision(segment *s, int x, int y){
	while(s){
    1f2e:	30 97       	sbiw	r30, 0x00	; 0
    1f30:	89 f7       	brne	.-30     	; 0x1f14 <detectCollision+0x6>
    1f32:	06 c0       	rjmp	.+12     	; 0x1f40 <detectCollision+0x32>
		if (s->x == x && s->y == y){
			return 1;
		}
		s = s->next;
	}
	return 0;
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	08 95       	ret


int detectCollision(segment *s, int x, int y){
	while(s){
		if (s->x == x && s->y == y){
			return 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	08 95       	ret
		}
		s = s->next;
	}
	return 0;
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
}
    1f44:	08 95       	ret

00001f46 <placeFood>:

void placeFood(int food[], segment *first){
    1f46:	0f 93       	push	r16
    1f48:	1f 93       	push	r17
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	ec 01       	movw	r28, r24
    1f50:	8b 01       	movw	r16, r22
	do{
		food[0] = rand() % 64;
    1f52:	0e 94 ab 18 	call	0x3156	; 0x3156 <rand>
    1f56:	8f 73       	andi	r24, 0x3F	; 63
    1f58:	90 78       	andi	r25, 0x80	; 128
    1f5a:	99 23       	and	r25, r25
    1f5c:	24 f4       	brge	.+8      	; 0x1f66 <placeFood+0x20>
    1f5e:	01 97       	sbiw	r24, 0x01	; 1
    1f60:	80 6c       	ori	r24, 0xC0	; 192
    1f62:	9f 6f       	ori	r25, 0xFF	; 255
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	99 83       	std	Y+1, r25	; 0x01
    1f68:	88 83       	st	Y, r24
		food[1] = rand() % 32;
    1f6a:	0e 94 ab 18 	call	0x3156	; 0x3156 <rand>
    1f6e:	ac 01       	movw	r20, r24
    1f70:	4f 71       	andi	r20, 0x1F	; 31
    1f72:	50 78       	andi	r21, 0x80	; 128
    1f74:	55 23       	and	r21, r21
    1f76:	34 f4       	brge	.+12     	; 0x1f84 <placeFood+0x3e>
    1f78:	41 50       	subi	r20, 0x01	; 1
    1f7a:	51 09       	sbc	r21, r1
    1f7c:	40 6e       	ori	r20, 0xE0	; 224
    1f7e:	5f 6f       	ori	r21, 0xFF	; 255
    1f80:	4f 5f       	subi	r20, 0xFF	; 255
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	5b 83       	std	Y+3, r21	; 0x03
    1f86:	4a 83       	std	Y+2, r20	; 0x02
	} while(detectCollision(first, food[0], food[1]));
    1f88:	68 81       	ld	r22, Y
    1f8a:	79 81       	ldd	r23, Y+1	; 0x01
    1f8c:	c8 01       	movw	r24, r16
    1f8e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <detectCollision>
    1f92:	89 2b       	or	r24, r25
    1f94:	f1 f6       	brne	.-68     	; 0x1f52 <placeFood+0xc>
}
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	08 95       	ret

00001fa0 <drawBoard>:

void drawBoard(segment *s, int food[]){
    1fa0:	cf 92       	push	r12
    1fa2:	df 92       	push	r13
    1fa4:	ef 92       	push	r14
    1fa6:	ff 92       	push	r15
    1fa8:	0f 93       	push	r16
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	8c 01       	movw	r16, r24
    1fb2:	7b 01       	movw	r14, r22
	oled_sram_clear_screen(0);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	while(s){
    1fbc:	01 15       	cp	r16, r1
    1fbe:	11 05       	cpc	r17, r1
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <drawBoard+0x24>
    1fc2:	59 c0       	rjmp	.+178    	; 0x2076 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    1fc4:	c1 2c       	mov	r12, r1
    1fc6:	d1 2c       	mov	r13, r1
    1fc8:	2a c0       	rjmp	.+84     	; 0x201e <drawBoard+0x7e>
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
    1fca:	f8 01       	movw	r30, r16
    1fcc:	46 81       	ldd	r20, Z+6	; 0x06
    1fce:	57 81       	ldd	r21, Z+7	; 0x07
    1fd0:	44 0f       	add	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	64 81       	ldd	r22, Z+4	; 0x04
    1fd6:	75 81       	ldd	r23, Z+5	; 0x05
    1fd8:	66 0f       	add	r22, r22
    1fda:	77 1f       	adc	r23, r23
    1fdc:	6c 0f       	add	r22, r28
    1fde:	7d 1f       	adc	r23, r29
    1fe0:	8c 2d       	mov	r24, r12
    1fe2:	9d 2d       	mov	r25, r13
    1fe4:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
    1fe8:	f8 01       	movw	r30, r16
    1fea:	46 81       	ldd	r20, Z+6	; 0x06
    1fec:	57 81       	ldd	r21, Z+7	; 0x07
    1fee:	44 0f       	add	r20, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	4f 5f       	subi	r20, 0xFF	; 255
    1ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff6:	64 81       	ldd	r22, Z+4	; 0x04
    1ff8:	75 81       	ldd	r23, Z+5	; 0x05
    1ffa:	66 0f       	add	r22, r22
    1ffc:	77 1f       	adc	r23, r23
    1ffe:	6c 0f       	add	r22, r28
    2000:	7d 1f       	adc	r23, r29
    2002:	8c 2d       	mov	r24, r12
    2004:	9d 2d       	mov	r25, r13
    2006:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
		for(int i = 0; i < 2; i++){
    200a:	21 96       	adiw	r28, 0x01	; 1
    200c:	c2 30       	cpi	r28, 0x02	; 2
    200e:	d1 05       	cpc	r29, r1
    2010:	e1 f6       	brne	.-72     	; 0x1fca <drawBoard+0x2a>
			for (int j = 0; j < 2; j++){
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
    2012:	f8 01       	movw	r30, r16
    2014:	00 81       	ld	r16, Z
    2016:	11 81       	ldd	r17, Z+1	; 0x01
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
	oled_sram_clear_screen(0);
	while(s){
    2018:	01 15       	cp	r16, r1
    201a:	11 05       	cpc	r17, r1
    201c:	61 f1       	breq	.+88     	; 0x2076 <drawBoard+0xd6>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    201e:	cc 2d       	mov	r28, r12
    2020:	dd 2d       	mov	r29, r13
    2022:	d3 cf       	rjmp	.-90     	; 0x1fca <drawBoard+0x2a>
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
    2024:	f7 01       	movw	r30, r14
    2026:	42 81       	ldd	r20, Z+2	; 0x02
    2028:	53 81       	ldd	r21, Z+3	; 0x03
    202a:	44 0f       	add	r20, r20
    202c:	55 1f       	adc	r21, r21
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	66 0f       	add	r22, r22
    2034:	77 1f       	adc	r23, r23
    2036:	6c 0f       	add	r22, r28
    2038:	7d 1f       	adc	r23, r29
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
    2042:	f7 01       	movw	r30, r14
    2044:	42 81       	ldd	r20, Z+2	; 0x02
    2046:	53 81       	ldd	r21, Z+3	; 0x03
    2048:	44 0f       	add	r20, r20
    204a:	55 1f       	adc	r21, r21
    204c:	4f 5f       	subi	r20, 0xFF	; 255
    204e:	5f 4f       	sbci	r21, 0xFF	; 255
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	66 0f       	add	r22, r22
    2056:	77 1f       	adc	r23, r23
    2058:	6c 0f       	add	r22, r28
    205a:	7d 1f       	adc	r23, r29
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	0e 94 20 0c 	call	0x1840	; 0x1840 <oled_sram_write_bit>
				oled_sram_write_bit(0, s->x*2 + i, s->y*2 + j);
			}
		}
		s = s->next;
	}
	for(int i = 0; i < 2; i++){
    2064:	21 96       	adiw	r28, 0x01	; 1
    2066:	c2 30       	cpi	r28, 0x02	; 2
    2068:	d1 05       	cpc	r29, r1
    206a:	e1 f6       	brne	.-72     	; 0x2024 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
    2074:	03 c0       	rjmp	.+6      	; 0x207c <drawBoard+0xdc>
		food[0] = rand() % 64;
		food[1] = rand() % 32;
	} while(detectCollision(first, food[0], food[1]));
}

void drawBoard(segment *s, int food[]){
    2076:	c0 e0       	ldi	r28, 0x00	; 0
    2078:	d0 e0       	ldi	r29, 0x00	; 0
    207a:	d4 cf       	rjmp	.-88     	; 0x2024 <drawBoard+0x84>
		for (int j = 0; j < 2; j++){
			oled_sram_write_bit(0, food[0]*2 +i, food[1]*2 + j);
		}
	}
	oled_sram_flush(0);
}
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	df 90       	pop	r13
    208a:	cf 90       	pop	r12
    208c:	08 95       	ret

0000208e <playSnake>:

void playSnake(){
    208e:	af 92       	push	r10
    2090:	bf 92       	push	r11
    2092:	cf 92       	push	r12
    2094:	df 92       	push	r13
    2096:	ef 92       	push	r14
    2098:	ff 92       	push	r15
    209a:	0f 93       	push	r16
    209c:	1f 93       	push	r17
    209e:	cf 93       	push	r28
    20a0:	df 93       	push	r29
    20a2:	00 d0       	rcall	.+0      	; 0x20a4 <playSnake+0x16>
    20a4:	00 d0       	rcall	.+0      	; 0x20a6 <playSnake+0x18>
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    20aa:	88 e0       	ldi	r24, 0x08	; 8
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    20b2:	7c 01       	movw	r14, r24
	first->x = 32;
    20b4:	80 e2       	ldi	r24, 0x20	; 32
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	d7 01       	movw	r26, r14
    20ba:	15 96       	adiw	r26, 0x05	; 5
    20bc:	9c 93       	st	X, r25
    20be:	8e 93       	st	-X, r24
    20c0:	14 97       	sbiw	r26, 0x04	; 4
	first->y = 16;
    20c2:	80 e1       	ldi	r24, 0x10	; 16
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	17 96       	adiw	r26, 0x07	; 7
    20c8:	9c 93       	st	X, r25
    20ca:	8e 93       	st	-X, r24
    20cc:	16 97       	sbiw	r26, 0x06	; 6
	segment *last = first;
	first->next = 0;
    20ce:	11 96       	adiw	r26, 0x01	; 1
    20d0:	1c 92       	st	X, r1
    20d2:	1e 92       	st	-X, r1
	first->prev = 0;
    20d4:	13 96       	adiw	r26, 0x03	; 3
    20d6:	1c 92       	st	X, r1
    20d8:	1e 92       	st	-X, r1
    20da:	12 97       	sbiw	r26, 0x02	; 2
	oled_sram_flush(0);
}

void playSnake(){
	//create linked list of snake segments
	segment *first = (segment*)malloc(sizeof(segment));
    20dc:	67 01       	movw	r12, r14
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
    20de:	68 94       	set
    20e0:	aa 24       	eor	r10, r10
    20e2:	a2 f8       	bld	r10, 2
    20e4:	b1 2c       	mov	r11, r1
	for(int i = 0; i < 4; i++){
		segment *temp = (segment*)malloc(sizeof(segment));
    20e6:	88 e0       	ldi	r24, 0x08	; 8
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    20ee:	8c 01       	movw	r16, r24
		temp->x = first->x + 1;
    20f0:	f6 01       	movw	r30, r12
    20f2:	84 81       	ldd	r24, Z+4	; 0x04
    20f4:	95 81       	ldd	r25, Z+5	; 0x05
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	d8 01       	movw	r26, r16
    20fa:	15 96       	adiw	r26, 0x05	; 5
    20fc:	9c 93       	st	X, r25
    20fe:	8e 93       	st	-X, r24
    2100:	14 97       	sbiw	r26, 0x04	; 4
		temp->y = first->y;
    2102:	86 81       	ldd	r24, Z+6	; 0x06
    2104:	97 81       	ldd	r25, Z+7	; 0x07
    2106:	17 96       	adiw	r26, 0x07	; 7
    2108:	9c 93       	st	X, r25
    210a:	8e 93       	st	-X, r24
    210c:	16 97       	sbiw	r26, 0x06	; 6
		temp->next = first;
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	dc 92       	st	X, r13
    2112:	ce 92       	st	-X, r12
		temp->prev = 0;
    2114:	13 96       	adiw	r26, 0x03	; 3
    2116:	1c 92       	st	X, r1
    2118:	1e 92       	st	-X, r1
    211a:	12 97       	sbiw	r26, 0x02	; 2
		first->prev = temp;
    211c:	13 83       	std	Z+3, r17	; 0x03
    211e:	02 83       	std	Z+2, r16	; 0x02
    2120:	b1 e0       	ldi	r27, 0x01	; 1
    2122:	ab 1a       	sub	r10, r27
    2124:	b1 08       	sbc	r11, r1
	first->x = 32;
	first->y = 16;
	segment *last = first;
	first->next = 0;
	first->prev = 0;
	for(int i = 0; i < 4; i++){
    2126:	a1 14       	cp	r10, r1
    2128:	b1 04       	cpc	r11, r1
    212a:	11 f0       	breq	.+4      	; 0x2130 <playSnake+0xa2>
		segment *temp = (segment*)malloc(sizeof(segment));
    212c:	68 01       	movw	r12, r16
    212e:	db cf       	rjmp	.-74     	; 0x20e6 <playSnake+0x58>
	}


	//initalize food
	int food[2];
	placeFood(food, first);
    2130:	b8 01       	movw	r22, r16
    2132:	ce 01       	movw	r24, r28
    2134:	01 96       	adiw	r24, 0x01	; 1
    2136:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <placeFood>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	//initalize food
	int food[2];
	placeFood(food, first);

	//initialize direction of snake
	direction S = RIGHT;
    2142:	dd 24       	eor	r13, r13
    2144:	d3 94       	inc	r13
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    2146:	97 c0       	rjmp	.+302    	; 0x2276 <playSnake+0x1e8>
		Joystick j = get_joystick_position();
    2148:	0e 94 31 09 	call	0x1262	; 0x1262 <get_joystick_position>
    214c:	c8 2e       	mov	r12, r24
		direction D = j.D;
		//S = (D == NEUTRAL) ? S : D;
		if (D == NEUTRAL){ // New direction neutral
    214e:	e4 e0       	ldi	r30, 0x04	; 4
    2150:	8e 17       	cp	r24, r30
    2152:	f1 f0       	breq	.+60     	; 0x2190 <playSnake+0x102>
			//Do nothing
		}
		else if((D == DOWN && S == UP) || (D == UP && S == DOWN) || (D == LEFT && S == RIGHT) || (D == RIGHT && S == LEFT)){ //New direction in opposite direction(NOT ALLOWED)
    2154:	f3 e0       	ldi	r31, 0x03	; 3
    2156:	8f 13       	cpse	r24, r31
    2158:	04 c0       	rjmp	.+8      	; 0x2162 <playSnake+0xd4>
    215a:	22 e0       	ldi	r18, 0x02	; 2
    215c:	d2 12       	cpse	r13, r18
    215e:	10 c0       	rjmp	.+32     	; 0x2180 <playSnake+0xf2>
    2160:	b9 c0       	rjmp	.+370    	; 0x22d4 <playSnake+0x246>
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	c8 12       	cpse	r12, r24
    2166:	06 c0       	rjmp	.+12     	; 0x2174 <playSnake+0xe6>
    2168:	93 e0       	ldi	r25, 0x03	; 3
    216a:	d9 16       	cp	r13, r25
    216c:	09 f4       	brne	.+2      	; 0x2170 <playSnake+0xe2>
    216e:	cd c0       	rjmp	.+410    	; 0x230a <playSnake+0x27c>
			//Do nothing
		}   
		else{
			S = D;
    2170:	dc 2c       	mov	r13, r12
    2172:	0e c0       	rjmp	.+28     	; 0x2190 <playSnake+0x102>
		direction D = j.D;
		//S = (D == NEUTRAL) ? S : D;
		if (D == NEUTRAL){ // New direction neutral
			//Do nothing
		}
		else if((D == DOWN && S == UP) || (D == UP && S == DOWN) || (D == LEFT && S == RIGHT) || (D == RIGHT && S == LEFT)){ //New direction in opposite direction(NOT ALLOWED)
    2174:	c1 10       	cpse	r12, r1
    2176:	04 c0       	rjmp	.+8      	; 0x2180 <playSnake+0xf2>
    2178:	a1 e0       	ldi	r26, 0x01	; 1
    217a:	da 12       	cpse	r13, r26
    217c:	19 c1       	rjmp	.+562    	; 0x23b0 <playSnake+0x322>
    217e:	fc c0       	rjmp	.+504    	; 0x2378 <playSnake+0x2ea>
    2180:	b1 e0       	ldi	r27, 0x01	; 1
    2182:	cb 12       	cpse	r12, r27
    2184:	04 c0       	rjmp	.+8      	; 0x218e <playSnake+0x100>
    2186:	dd 20       	and	r13, r13
    2188:	09 f4       	brne	.+2      	; 0x218c <playSnake+0xfe>
    218a:	da c0       	rjmp	.+436    	; 0x2340 <playSnake+0x2b2>
    218c:	2c c1       	rjmp	.+600    	; 0x23e6 <playSnake+0x358>
			//Do nothing
		}   
		else{
			S = D;
    218e:	dc 2c       	mov	r13, r12
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    2190:	88 e0       	ldi	r24, 0x08	; 8
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    2198:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    219a:	d8 01       	movw	r26, r16
    219c:	14 96       	adiw	r26, 0x04	; 4
    219e:	8d 91       	ld	r24, X+
    21a0:	9c 91       	ld	r25, X
    21a2:	15 97       	sbiw	r26, 0x05	; 5
    21a4:	95 83       	std	Z+5, r25	; 0x05
    21a6:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    21a8:	16 96       	adiw	r26, 0x06	; 6
    21aa:	8d 91       	ld	r24, X+
    21ac:	9c 91       	ld	r25, X
    21ae:	17 97       	sbiw	r26, 0x07	; 7
    21b0:	97 83       	std	Z+7, r25	; 0x07
    21b2:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    21b4:	11 83       	std	Z+1, r17	; 0x01
    21b6:	00 83       	st	Z, r16
		temp->prev = 0;
    21b8:	13 82       	std	Z+3, r1	; 0x03
    21ba:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    21bc:	13 96       	adiw	r26, 0x03	; 3
    21be:	fc 93       	st	X, r31
    21c0:	ee 93       	st	-X, r30
    21c2:	12 97       	sbiw	r26, 0x02	; 2

		//Find direction of snake movement
		switch (S){
    21c4:	b1 e0       	ldi	r27, 0x01	; 1
    21c6:	db 16       	cp	r13, r27
    21c8:	09 f1       	breq	.+66     	; 0x220c <playSnake+0x17e>
    21ca:	db 16       	cp	r13, r27
    21cc:	a8 f0       	brcs	.+42     	; 0x21f8 <playSnake+0x16a>
    21ce:	22 e0       	ldi	r18, 0x02	; 2
    21d0:	d2 16       	cp	r13, r18
    21d2:	21 f0       	breq	.+8      	; 0x21dc <playSnake+0x14e>
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	d8 12       	cpse	r13, r24
    21d8:	25 c0       	rjmp	.+74     	; 0x2224 <playSnake+0x196>
    21da:	07 c0       	rjmp	.+14     	; 0x21ea <playSnake+0x15c>
			case UP:
			temp->y--;
    21dc:	86 81       	ldd	r24, Z+6	; 0x06
    21de:	97 81       	ldd	r25, Z+7	; 0x07
    21e0:	01 97       	sbiw	r24, 0x01	; 1
    21e2:	97 83       	std	Z+7, r25	; 0x07
    21e4:	86 83       	std	Z+6, r24	; 0x06
			break;
    21e6:	8f 01       	movw	r16, r30
    21e8:	1e c0       	rjmp	.+60     	; 0x2226 <playSnake+0x198>
			case DOWN:
			temp->y++;
    21ea:	86 81       	ldd	r24, Z+6	; 0x06
    21ec:	97 81       	ldd	r25, Z+7	; 0x07
    21ee:	01 96       	adiw	r24, 0x01	; 1
    21f0:	97 83       	std	Z+7, r25	; 0x07
    21f2:	86 83       	std	Z+6, r24	; 0x06
			break;
    21f4:	8f 01       	movw	r16, r30
    21f6:	17 c0       	rjmp	.+46     	; 0x2226 <playSnake+0x198>
		temp->next = first;
		temp->prev = 0;
		first->prev = temp;

		//Find direction of snake movement
		switch (S){
    21f8:	cd 2c       	mov	r12, r13
			break;
			case DOWN:
			temp->y++;
			break;
			case LEFT:
			temp->x--;
    21fa:	24 81       	ldd	r18, Z+4	; 0x04
    21fc:	35 81       	ldd	r19, Z+5	; 0x05
    21fe:	21 50       	subi	r18, 0x01	; 1
    2200:	31 09       	sbc	r19, r1
    2202:	35 83       	std	Z+5, r19	; 0x05
    2204:	24 83       	std	Z+4, r18	; 0x04
			break;
    2206:	8f 01       	movw	r16, r30
    2208:	dc 2c       	mov	r13, r12
    220a:	0d c0       	rjmp	.+26     	; 0x2226 <playSnake+0x198>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    220c:	8f 01       	movw	r16, r30
			break;
			case LEFT:
			temp->x--;
			break;
			case RIGHT:
			temp->x++;
    220e:	d8 01       	movw	r26, r16
    2210:	14 96       	adiw	r26, 0x04	; 4
    2212:	8d 91       	ld	r24, X+
    2214:	9c 91       	ld	r25, X
    2216:	15 97       	sbiw	r26, 0x05	; 5
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	15 96       	adiw	r26, 0x05	; 5
    221c:	9c 93       	st	X, r25
    221e:	8e 93       	st	-X, r24
    2220:	14 97       	sbiw	r26, 0x04	; 4
			break;
    2222:	01 c0       	rjmp	.+2      	; 0x2226 <playSnake+0x198>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    2224:	8f 01       	movw	r16, r30
			break;
		}

		first = temp;
		
		if(detectCollision(first, food[0], food[1])){//hit food?
    2226:	4b 81       	ldd	r20, Y+3	; 0x03
    2228:	5c 81       	ldd	r21, Y+4	; 0x04
    222a:	69 81       	ldd	r22, Y+1	; 0x01
    222c:	7a 81       	ldd	r23, Y+2	; 0x02
    222e:	c8 01       	movw	r24, r16
    2230:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <detectCollision>
    2234:	89 2b       	or	r24, r25
    2236:	31 f0       	breq	.+12     	; 0x2244 <playSnake+0x1b6>
			placeFood(food, first);
    2238:	b8 01       	movw	r22, r16
    223a:	ce 01       	movw	r24, r28
    223c:	01 96       	adiw	r24, 0x01	; 1
    223e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <placeFood>
    2242:	0a c0       	rjmp	.+20     	; 0x2258 <playSnake+0x1ca>
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    2244:	f7 01       	movw	r30, r14
    2246:	a2 80       	ldd	r10, Z+2	; 0x02
    2248:	b3 80       	ldd	r11, Z+3	; 0x03
			last->next = 0;
    224a:	d5 01       	movw	r26, r10
    224c:	1d 92       	st	X+, r1
    224e:	1c 92       	st	X, r1
			free(temp);
    2250:	c7 01       	movw	r24, r14
    2252:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <free>
			placeFood(food, first);
			temp = 0;
		}
		else{
			temp = last;
			last = last->prev;
    2256:	75 01       	movw	r14, r10
			last->next = 0;
			free(temp);
		}
		drawBoard(first, food);
    2258:	be 01       	movw	r22, r28
    225a:	6f 5f       	subi	r22, 0xFF	; 255
    225c:	7f 4f       	sbci	r23, 0xFF	; 255
    225e:	c8 01       	movw	r24, r16
    2260:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <drawBoard>
    2264:	bf ef       	ldi	r27, 0xFF	; 255
    2266:	ef e7       	ldi	r30, 0x7F	; 127
    2268:	f1 e0       	ldi	r31, 0x01	; 1
    226a:	b1 50       	subi	r27, 0x01	; 1
    226c:	e0 40       	sbci	r30, 0x00	; 0
    226e:	f0 40       	sbci	r31, 0x00	; 0
    2270:	e1 f7       	brne	.-8      	; 0x226a <playSnake+0x1dc>
    2272:	00 c0       	rjmp	.+0      	; 0x2274 <playSnake+0x1e6>
    2274:	00 c0       	rjmp	.+0      	; 0x2276 <playSnake+0x1e8>

	//initialize direction of snake
	direction S = RIGHT;
	oled_sram_clear_screen(0);
	//gamplay while loop
	while (!detectCollision(first->next, first->x, first->y)){
    2276:	d8 01       	movw	r26, r16
    2278:	16 96       	adiw	r26, 0x06	; 6
    227a:	4d 91       	ld	r20, X+
    227c:	5c 91       	ld	r21, X
    227e:	17 97       	sbiw	r26, 0x07	; 7
    2280:	14 96       	adiw	r26, 0x04	; 4
    2282:	6d 91       	ld	r22, X+
    2284:	7c 91       	ld	r23, X
    2286:	15 97       	sbiw	r26, 0x05	; 5
    2288:	8d 91       	ld	r24, X+
    228a:	9c 91       	ld	r25, X
    228c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <detectCollision>
    2290:	89 2b       	or	r24, r25
    2292:	09 f4       	brne	.+2      	; 0x2296 <playSnake+0x208>
    2294:	59 cf       	rjmp	.-334    	; 0x2148 <playSnake+0xba>
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    2296:	0e 15       	cp	r16, r14
    2298:	1f 05       	cpc	r17, r15
    229a:	81 f0       	breq	.+32     	; 0x22bc <playSnake+0x22e>
    229c:	a1 2c       	mov	r10, r1
    229e:	b1 2c       	mov	r11, r1
		segment* temp = first;
		first = first->next;
    22a0:	f8 01       	movw	r30, r16
    22a2:	c0 80       	ld	r12, Z
    22a4:	d1 80       	ldd	r13, Z+1	; 0x01
		free(temp);
    22a6:	c8 01       	movw	r24, r16
    22a8:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <free>
		score++;
    22ac:	ff ef       	ldi	r31, 0xFF	; 255
    22ae:	af 1a       	sub	r10, r31
    22b0:	bf 0a       	sbc	r11, r31
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    22b2:	ec 14       	cp	r14, r12
    22b4:	fd 04       	cpc	r15, r13
    22b6:	29 f0       	breq	.+10     	; 0x22c2 <playSnake+0x234>
		segment* temp = first;
		first = first->next;
    22b8:	86 01       	movw	r16, r12
    22ba:	f2 cf       	rjmp	.-28     	; 0x22a0 <playSnake+0x212>
		_delay_ms(100);
	}
	
	//Game finished free memory and find score
	int score = 0;
	while(first != last){
    22bc:	68 01       	movw	r12, r16
    22be:	a1 2c       	mov	r10, r1
    22c0:	b1 2c       	mov	r11, r1
		segment* temp = first;
		first = first->next;
		free(temp);
		score++;
	}
	free(first);
    22c2:	c6 01       	movw	r24, r12
    22c4:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <free>
	
	highscore_prompt(SNAKE, score-4);
    22c8:	6c ef       	ldi	r22, 0xFC	; 252
    22ca:	6a 0d       	add	r22, r10
    22cc:	80 e4       	ldi	r24, 0x40	; 64
    22ce:	0e 94 8b 06 	call	0xd16	; 0xd16 <highscore_prompt>
    22d2:	a6 c0       	rjmp	.+332    	; 0x2420 <playSnake+0x392>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    22d4:	88 e0       	ldi	r24, 0x08	; 8
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    22dc:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    22de:	d8 01       	movw	r26, r16
    22e0:	14 96       	adiw	r26, 0x04	; 4
    22e2:	8d 91       	ld	r24, X+
    22e4:	9c 91       	ld	r25, X
    22e6:	15 97       	sbiw	r26, 0x05	; 5
    22e8:	95 83       	std	Z+5, r25	; 0x05
    22ea:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    22ec:	16 96       	adiw	r26, 0x06	; 6
    22ee:	8d 91       	ld	r24, X+
    22f0:	9c 91       	ld	r25, X
    22f2:	17 97       	sbiw	r26, 0x07	; 7
    22f4:	97 83       	std	Z+7, r25	; 0x07
    22f6:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    22f8:	11 83       	std	Z+1, r17	; 0x01
    22fa:	00 83       	st	Z, r16
		temp->prev = 0;
    22fc:	13 82       	std	Z+3, r1	; 0x03
    22fe:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    2300:	13 96       	adiw	r26, 0x03	; 3
    2302:	fc 93       	st	X, r31
    2304:	ee 93       	st	-X, r30
    2306:	12 97       	sbiw	r26, 0x02	; 2
    2308:	69 cf       	rjmp	.-302    	; 0x21dc <playSnake+0x14e>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    230a:	88 e0       	ldi	r24, 0x08	; 8
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    2312:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    2314:	d8 01       	movw	r26, r16
    2316:	14 96       	adiw	r26, 0x04	; 4
    2318:	8d 91       	ld	r24, X+
    231a:	9c 91       	ld	r25, X
    231c:	15 97       	sbiw	r26, 0x05	; 5
    231e:	95 83       	std	Z+5, r25	; 0x05
    2320:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    2322:	16 96       	adiw	r26, 0x06	; 6
    2324:	8d 91       	ld	r24, X+
    2326:	9c 91       	ld	r25, X
    2328:	17 97       	sbiw	r26, 0x07	; 7
    232a:	97 83       	std	Z+7, r25	; 0x07
    232c:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    232e:	11 83       	std	Z+1, r17	; 0x01
    2330:	00 83       	st	Z, r16
		temp->prev = 0;
    2332:	13 82       	std	Z+3, r1	; 0x03
    2334:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    2336:	13 96       	adiw	r26, 0x03	; 3
    2338:	fc 93       	st	X, r31
    233a:	ee 93       	st	-X, r30
    233c:	12 97       	sbiw	r26, 0x02	; 2
    233e:	55 cf       	rjmp	.-342    	; 0x21ea <playSnake+0x15c>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    2340:	88 e0       	ldi	r24, 0x08	; 8
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    2348:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    234a:	d8 01       	movw	r26, r16
    234c:	14 96       	adiw	r26, 0x04	; 4
    234e:	8d 91       	ld	r24, X+
    2350:	9c 91       	ld	r25, X
    2352:	15 97       	sbiw	r26, 0x05	; 5
    2354:	95 83       	std	Z+5, r25	; 0x05
    2356:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    2358:	16 96       	adiw	r26, 0x06	; 6
    235a:	8d 91       	ld	r24, X+
    235c:	9c 91       	ld	r25, X
    235e:	17 97       	sbiw	r26, 0x07	; 7
    2360:	97 83       	std	Z+7, r25	; 0x07
    2362:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    2364:	11 83       	std	Z+1, r17	; 0x01
    2366:	00 83       	st	Z, r16
		temp->prev = 0;
    2368:	13 82       	std	Z+3, r1	; 0x03
    236a:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    236c:	13 96       	adiw	r26, 0x03	; 3
    236e:	fc 93       	st	X, r31
    2370:	ee 93       	st	-X, r30
    2372:	12 97       	sbiw	r26, 0x02	; 2
    2374:	cd 2c       	mov	r12, r13
    2376:	41 cf       	rjmp	.-382    	; 0x21fa <playSnake+0x16c>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    2378:	88 e0       	ldi	r24, 0x08	; 8
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    2380:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    2382:	d8 01       	movw	r26, r16
    2384:	14 96       	adiw	r26, 0x04	; 4
    2386:	8d 91       	ld	r24, X+
    2388:	9c 91       	ld	r25, X
    238a:	15 97       	sbiw	r26, 0x05	; 5
    238c:	95 83       	std	Z+5, r25	; 0x05
    238e:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    2390:	16 96       	adiw	r26, 0x06	; 6
    2392:	8d 91       	ld	r24, X+
    2394:	9c 91       	ld	r25, X
    2396:	17 97       	sbiw	r26, 0x07	; 7
    2398:	97 83       	std	Z+7, r25	; 0x07
    239a:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    239c:	11 83       	std	Z+1, r17	; 0x01
    239e:	00 83       	st	Z, r16
		temp->prev = 0;
    23a0:	13 82       	std	Z+3, r1	; 0x03
    23a2:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    23a4:	13 96       	adiw	r26, 0x03	; 3
    23a6:	fc 93       	st	X, r31
    23a8:	ee 93       	st	-X, r30
    23aa:	12 97       	sbiw	r26, 0x02	; 2
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    23ac:	8f 01       	movw	r16, r30
    23ae:	2f cf       	rjmp	.-418    	; 0x220e <playSnake+0x180>
    23b0:	88 e0       	ldi	r24, 0x08	; 8
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    23b8:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    23ba:	d8 01       	movw	r26, r16
    23bc:	14 96       	adiw	r26, 0x04	; 4
    23be:	2d 91       	ld	r18, X+
    23c0:	3c 91       	ld	r19, X
    23c2:	15 97       	sbiw	r26, 0x05	; 5
    23c4:	35 83       	std	Z+5, r19	; 0x05
    23c6:	24 83       	std	Z+4, r18	; 0x04
		temp->y = first->y;
    23c8:	16 96       	adiw	r26, 0x06	; 6
    23ca:	2d 91       	ld	r18, X+
    23cc:	3c 91       	ld	r19, X
    23ce:	17 97       	sbiw	r26, 0x07	; 7
    23d0:	37 83       	std	Z+7, r19	; 0x07
    23d2:	26 83       	std	Z+6, r18	; 0x06
		temp->next = first;
    23d4:	11 83       	std	Z+1, r17	; 0x01
    23d6:	00 83       	st	Z, r16
		temp->prev = 0;
    23d8:	13 82       	std	Z+3, r1	; 0x03
    23da:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    23dc:	13 96       	adiw	r26, 0x03	; 3
    23de:	9c 93       	st	X, r25
    23e0:	8e 93       	st	-X, r24
    23e2:	12 97       	sbiw	r26, 0x02	; 2
    23e4:	0a cf       	rjmp	.-492    	; 0x21fa <playSnake+0x16c>
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    23e6:	88 e0       	ldi	r24, 0x08	; 8
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    23ee:	fc 01       	movw	r30, r24
		
		temp->x = first->x;
    23f0:	d8 01       	movw	r26, r16
    23f2:	14 96       	adiw	r26, 0x04	; 4
    23f4:	8d 91       	ld	r24, X+
    23f6:	9c 91       	ld	r25, X
    23f8:	15 97       	sbiw	r26, 0x05	; 5
    23fa:	95 83       	std	Z+5, r25	; 0x05
    23fc:	84 83       	std	Z+4, r24	; 0x04
		temp->y = first->y;
    23fe:	16 96       	adiw	r26, 0x06	; 6
    2400:	8d 91       	ld	r24, X+
    2402:	9c 91       	ld	r25, X
    2404:	17 97       	sbiw	r26, 0x07	; 7
    2406:	97 83       	std	Z+7, r25	; 0x07
    2408:	86 83       	std	Z+6, r24	; 0x06
		temp->next = first;
    240a:	11 83       	std	Z+1, r17	; 0x01
    240c:	00 83       	st	Z, r16
		temp->prev = 0;
    240e:	13 82       	std	Z+3, r1	; 0x03
    2410:	12 82       	std	Z+2, r1	; 0x02
		first->prev = temp;
    2412:	13 96       	adiw	r26, 0x03	; 3
    2414:	fc 93       	st	X, r31
    2416:	ee 93       	st	-X, r30
    2418:	12 97       	sbiw	r26, 0x02	; 2
		}   
		else{
			S = D;
		}
		//Create and set up next snake segment
		segment *temp = (segment*)malloc(sizeof(segment));
    241a:	8f 01       	movw	r16, r30
		}
		else if((D == DOWN && S == UP) || (D == UP && S == DOWN) || (D == LEFT && S == RIGHT) || (D == RIGHT && S == LEFT)){ //New direction in opposite direction(NOT ALLOWED)
			//Do nothing
		}   
		else{
			S = D;
    241c:	dc 2c       	mov	r13, r12
    241e:	f7 ce       	rjmp	.-530    	; 0x220e <playSnake+0x180>
		score++;
	}
	free(first);
	
	highscore_prompt(SNAKE, score-4);
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	1f 91       	pop	r17
    242e:	0f 91       	pop	r16
    2430:	ff 90       	pop	r15
    2432:	ef 90       	pop	r14
    2434:	df 90       	pop	r13
    2436:	cf 90       	pop	r12
    2438:	bf 90       	pop	r11
    243a:	af 90       	pop	r10
    243c:	08 95       	ret

0000243e <make_screen>:
	
	
	
}

void make_screen(menu* m){
    243e:	2f 92       	push	r2
    2440:	3f 92       	push	r3
    2442:	4f 92       	push	r4
    2444:	5f 92       	push	r5
    2446:	6f 92       	push	r6
    2448:	7f 92       	push	r7
    244a:	8f 92       	push	r8
    244c:	9f 92       	push	r9
    244e:	af 92       	push	r10
    2450:	bf 92       	push	r11
    2452:	cf 92       	push	r12
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	00 d0       	rcall	.+0      	; 0x2464 <make_screen+0x26>
    2464:	1f 92       	push	r1
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	7c 01       	movw	r14, r24
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	0e 94 0c 0c 	call	0x1818	; 0x1818 <oled_sram_clear_screen>
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
    2474:	d7 01       	movw	r26, r14
    2476:	6d 91       	ld	r22, X+
    2478:	7c 91       	ld	r23, X
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	50 e0       	ldi	r21, 0x00	; 0
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <oled_sram_write_string>
	for (int i = 0; i < m->num_submenues; i++){
    2486:	f7 01       	movw	r30, r14
    2488:	84 89       	ldd	r24, Z+20	; 0x14
    248a:	95 89       	ldd	r25, Z+21	; 0x15
    248c:	18 16       	cp	r1, r24
    248e:	19 06       	cpc	r1, r25
    2490:	0c f0       	brlt	.+2      	; 0x2494 <make_screen+0x56>
    2492:	6d c0       	rjmp	.+218    	; 0x256e <make_screen+0x130>
    2494:	c7 01       	movw	r24, r14
    2496:	04 96       	adiw	r24, 0x04	; 4
    2498:	9b 83       	std	Y+3, r25	; 0x03
    249a:	8a 83       	std	Y+2, r24	; 0x02
    249c:	cc 24       	eor	r12, r12
    249e:	c3 94       	inc	r12
    24a0:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    24a2:	68 94       	set
    24a4:	22 24       	eor	r2, r2
    24a6:	23 f8       	bld	r2, 3
    24a8:	31 2c       	mov	r3, r1
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
		menu *sm = m->submenues[i];
    24aa:	aa 81       	ldd	r26, Y+2	; 0x02
    24ac:	bb 81       	ldd	r27, Y+3	; 0x03
    24ae:	6d 90       	ld	r6, X+
    24b0:	7d 90       	ld	r7, X+
    24b2:	bb 83       	std	Y+3, r27	; 0x03
    24b4:	aa 83       	std	Y+2, r26	; 0x02
		
		int index = 1;
		char c = sm->name[0];
    24b6:	d3 01       	movw	r26, r6
    24b8:	ed 91       	ld	r30, X+
    24ba:	fc 91       	ld	r31, X
    24bc:	80 81       	ld	r24, Z
    24be:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i){
    24c0:	f7 01       	movw	r30, r14
    24c2:	40 ad       	ldd	r20, Z+56	; 0x38
    24c4:	51 ad       	ldd	r21, Z+57	; 0x39
    24c6:	c6 01       	movw	r24, r12
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	48 17       	cp	r20, r24
    24cc:	59 07       	cpc	r21, r25
    24ce:	59 f4       	brne	.+22     	; 0x24e6 <make_screen+0xa8>
			oled_sram_write_char(startAddress, ">", i+1, 0);
    24d0:	4f 5f       	subi	r20, 0xFF	; 255
    24d2:	5f 4f       	sbci	r21, 0xFF	; 255
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	66 e4       	ldi	r22, 0x46	; 70
    24da:	72 e0       	ldi	r23, 0x02	; 2
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
    24e4:	09 c0       	rjmp	.+18     	; 0x24f8 <make_screen+0xba>
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	a6 01       	movw	r20, r12
    24ec:	67 e9       	ldi	r22, 0x97	; 151
    24ee:	71 e0       	ldi	r23, 0x01	; 1
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
		}
		while(c != '\0'){
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	88 23       	and	r24, r24
    24fc:	59 f1       	breq	.+86     	; 0x2554 <make_screen+0x116>
    24fe:	68 94       	set
    2500:	aa 24       	eor	r10, r10
    2502:	a3 f8       	bld	r10, 3
    2504:	b1 2c       	mov	r11, r1
    2506:	88 24       	eor	r8, r8
    2508:	83 94       	inc	r8
    250a:	91 2c       	mov	r9, r1
    250c:	1e c0       	rjmp	.+60     	; 0x254a <make_screen+0x10c>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    250e:	24 2d       	mov	r18, r4
    2510:	35 2d       	mov	r19, r5
    2512:	a6 01       	movw	r20, r12
    2514:	be 01       	movw	r22, r28
    2516:	6f 5f       	subi	r22, 0xFF	; 255
    2518:	7f 4f       	sbci	r23, 0xFF	; 255
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
    2522:	01 50       	subi	r16, 0x01	; 1
    2524:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    2526:	01 15       	cp	r16, r1
    2528:	11 05       	cpc	r17, r1
    252a:	89 f7       	brne	.-30     	; 0x250e <make_screen+0xd0>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
    252c:	d3 01       	movw	r26, r6
    252e:	ed 91       	ld	r30, X+
    2530:	fc 91       	ld	r31, X
    2532:	e8 0d       	add	r30, r8
    2534:	f9 1d       	adc	r31, r9
    2536:	80 81       	ld	r24, Z
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	bf ef       	ldi	r27, 0xFF	; 255
    253c:	8b 1a       	sub	r8, r27
    253e:	9b 0a       	sbc	r9, r27
    2540:	e8 e0       	ldi	r30, 0x08	; 8
    2542:	ae 0e       	add	r10, r30
    2544:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i+1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i+1, 0);
		}
		while(c != '\0'){
    2546:	88 23       	and	r24, r24
    2548:	29 f0       	breq	.+10     	; 0x2554 <make_screen+0x116>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i+1, index*8);
    254a:	4a 2c       	mov	r4, r10
    254c:	5b 2c       	mov	r5, r11
    254e:	02 2d       	mov	r16, r2
    2550:	13 2d       	mov	r17, r3
    2552:	dd cf       	rjmp	.-70     	; 0x250e <make_screen+0xd0>
void make_screen(menu* m){
	int startAddress = 0;
	
	oled_sram_clear_screen(startAddress);
	oled_sram_write_string(startAddress, m->name, 0); //Print menu name
	for (int i = 0; i < m->num_submenues; i++){
    2554:	c6 01       	movw	r24, r12
    2556:	ff ef       	ldi	r31, 0xFF	; 255
    2558:	cf 1a       	sub	r12, r31
    255a:	df 0a       	sbc	r13, r31
    255c:	d7 01       	movw	r26, r14
    255e:	54 96       	adiw	r26, 0x14	; 20
    2560:	2d 91       	ld	r18, X+
    2562:	3c 91       	ld	r19, X
    2564:	55 97       	sbiw	r26, 0x15	; 21
    2566:	82 17       	cp	r24, r18
    2568:	93 07       	cpc	r25, r19
    256a:	0c f4       	brge	.+2      	; 0x256e <make_screen+0x130>
    256c:	9e cf       	rjmp	.-196    	; 0x24aa <make_screen+0x6c>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    256e:	f7 01       	movw	r30, r14
    2570:	86 a9       	ldd	r24, Z+54	; 0x36
    2572:	97 a9       	ldd	r25, Z+55	; 0x37
    2574:	18 16       	cp	r1, r24
    2576:	19 06       	cpc	r1, r25
    2578:	0c f0       	brlt	.+2      	; 0x257c <make_screen+0x13e>
    257a:	6f c0       	rjmp	.+222    	; 0x265a <make_screen+0x21c>
    257c:	37 01       	movw	r6, r14
    257e:	f6 e1       	ldi	r31, 0x16	; 22
    2580:	6f 0e       	add	r6, r31
    2582:	71 1c       	adc	r7, r1
    2584:	c1 2c       	mov	r12, r1
    2586:	d1 2c       	mov	r13, r1
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    2588:	68 94       	set
    258a:	44 24       	eor	r4, r4
    258c:	43 f8       	bld	r4, 3
    258e:	51 2c       	mov	r5, r1
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
		char *funcnames = m->name_functions[i];
    2590:	d3 01       	movw	r26, r6
    2592:	8d 90       	ld	r8, X+
    2594:	9d 90       	ld	r9, X+
    2596:	3d 01       	movw	r6, r26
		
		int index = 1;
		char c = funcnames[0];
    2598:	f4 01       	movw	r30, r8
    259a:	80 81       	ld	r24, Z
    259c:	89 83       	std	Y+1, r24	; 0x01
		if(m->arrow == i + m->num_submenues){
    259e:	d7 01       	movw	r26, r14
    25a0:	d8 96       	adiw	r26, 0x38	; 56
    25a2:	8d 91       	ld	r24, X+
    25a4:	9c 91       	ld	r25, X
    25a6:	d9 97       	sbiw	r26, 0x39	; 57
    25a8:	54 96       	adiw	r26, 0x14	; 20
    25aa:	4d 91       	ld	r20, X+
    25ac:	5c 91       	ld	r21, X
    25ae:	55 97       	sbiw	r26, 0x15	; 21
    25b0:	4c 0d       	add	r20, r12
    25b2:	5d 1d       	adc	r21, r13
    25b4:	84 17       	cp	r24, r20
    25b6:	95 07       	cpc	r25, r21
    25b8:	61 f4       	brne	.+24     	; 0x25d2 <make_screen+0x194>
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
    25ba:	ac 01       	movw	r20, r24
    25bc:	4f 5f       	subi	r20, 0xFF	; 255
    25be:	5f 4f       	sbci	r21, 0xFF	; 255
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	66 e4       	ldi	r22, 0x46	; 70
    25c6:	72 e0       	ldi	r23, 0x02	; 2
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
    25d0:	0a c0       	rjmp	.+20     	; 0x25e6 <make_screen+0x1a8>
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
    25d2:	4f 5f       	subi	r20, 0xFF	; 255
    25d4:	5f 4f       	sbci	r21, 0xFF	; 255
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	67 e9       	ldi	r22, 0x97	; 151
    25dc:	71 e0       	ldi	r23, 0x01	; 1
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
		}
		while(c != '\0'){
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	88 23       	and	r24, r24
    25ea:	59 f1       	breq	.+86     	; 0x2642 <make_screen+0x204>
    25ec:	bf ef       	ldi	r27, 0xFF	; 255
    25ee:	8b 1a       	sub	r8, r27
    25f0:	9b 0a       	sbc	r9, r27
    25f2:	68 94       	set
    25f4:	aa 24       	eor	r10, r10
    25f6:	a3 f8       	bld	r10, 3
    25f8:	b1 2c       	mov	r11, r1
    25fa:	1e c0       	rjmp	.+60     	; 0x2638 <make_screen+0x1fa>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    25fc:	f7 01       	movw	r30, r14
    25fe:	44 89       	ldd	r20, Z+20	; 0x14
    2600:	55 89       	ldd	r21, Z+21	; 0x15
    2602:	4c 0d       	add	r20, r12
    2604:	5d 1d       	adc	r21, r13
    2606:	4f 5f       	subi	r20, 0xFF	; 255
    2608:	5f 4f       	sbci	r21, 0xFF	; 255
    260a:	22 2d       	mov	r18, r2
    260c:	33 2d       	mov	r19, r3
    260e:	be 01       	movw	r22, r28
    2610:	6f 5f       	subi	r22, 0xFF	; 255
    2612:	7f 4f       	sbci	r23, 0xFF	; 255
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	0e 94 ba 0b 	call	0x1774	; 0x1774 <oled_sram_write_char>
    261c:	01 50       	subi	r16, 0x01	; 1
    261e:	11 09       	sbc	r17, r1
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
			for(int line = 0; line < 8; line++){
    2620:	01 15       	cp	r16, r1
    2622:	11 05       	cpc	r17, r1
    2624:	59 f7       	brne	.-42     	; 0x25fc <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
    2626:	d4 01       	movw	r26, r8
    2628:	8d 91       	ld	r24, X+
    262a:	4d 01       	movw	r8, r26
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	b8 e0       	ldi	r27, 0x08	; 8
    2630:	ab 0e       	add	r10, r27
    2632:	b1 1c       	adc	r11, r1
			oled_sram_write_char(startAddress, ">", i + m->num_submenues + 1, 0);
		}
		else{
			oled_sram_write_char(startAddress, " ", i + m->num_submenues + 1, 0);
		}
		while(c != '\0'){
    2634:	88 23       	and	r24, r24
    2636:	29 f0       	breq	.+10     	; 0x2642 <make_screen+0x204>
			for(int line = 0; line < 8; line++){
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
    2638:	2a 2c       	mov	r2, r10
    263a:	3b 2c       	mov	r3, r11
    263c:	04 2d       	mov	r16, r4
    263e:	15 2d       	mov	r17, r5
    2640:	dd cf       	rjmp	.-70     	; 0x25fc <make_screen+0x1be>
				oled_sram_write_char(startAddress, &c, i+1, index*8);
			}
			c = sm->name[index++];
		}
	}
	for (int i = 0; i < m->num_functions; i++){
    2642:	ef ef       	ldi	r30, 0xFF	; 255
    2644:	ce 1a       	sub	r12, r30
    2646:	de 0a       	sbc	r13, r30
    2648:	d7 01       	movw	r26, r14
    264a:	d6 96       	adiw	r26, 0x36	; 54
    264c:	8d 91       	ld	r24, X+
    264e:	9c 91       	ld	r25, X
    2650:	d7 97       	sbiw	r26, 0x37	; 55
    2652:	c8 16       	cp	r12, r24
    2654:	d9 06       	cpc	r13, r25
    2656:	0c f4       	brge	.+2      	; 0x265a <make_screen+0x21c>
    2658:	9b cf       	rjmp	.-202    	; 0x2590 <make_screen+0x152>
				oled_sram_write_char(startAddress, &c, i + m->num_submenues + 1, index*8);
			}
			c = funcnames[index++];
		}
	}
	oled_sram_flush(startAddress);
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <oled_sram_flush>
} 
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	bf 90       	pop	r11
    267a:	af 90       	pop	r10
    267c:	9f 90       	pop	r9
    267e:	8f 90       	pop	r8
    2680:	7f 90       	pop	r7
    2682:	6f 90       	pop	r6
    2684:	5f 90       	pop	r5
    2686:	4f 90       	pop	r4
    2688:	3f 90       	pop	r3
    268a:	2f 90       	pop	r2
    268c:	08 95       	ret

0000268e <menuSystem>:
#include "../Game_files/pong.h"
#include "../Game_files/pingpong.h"
#include "../Game_files/highscore.h"


void menuSystem(){
    268e:	cf 93       	push	r28
    2690:	df 93       	push	r29
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
    2696:	cc 55       	subi	r28, 0x5C	; 92
    2698:	d1 40       	sbci	r29, 0x01	; 1
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
	menu mainMenu = {.name = "Main menu", .num_submenues = 4};
    26a4:	0f 2e       	mov	r0, r31
    26a6:	fa e3       	ldi	r31, 0x3A	; 58
    26a8:	ff 2e       	mov	r15, r31
    26aa:	f0 2d       	mov	r31, r0
    26ac:	8e 01       	movw	r16, r28
    26ae:	0f 5f       	subi	r16, 0xFF	; 255
    26b0:	1f 4f       	sbci	r17, 0xFF	; 255
    26b2:	d8 01       	movw	r26, r16
    26b4:	ef 2d       	mov	r30, r15
    26b6:	1d 92       	st	X+, r1
    26b8:	ea 95       	dec	r30
    26ba:	e9 f7       	brne	.-6      	; 0x26b6 <menuSystem+0x28>
    26bc:	88 e4       	ldi	r24, 0x48	; 72
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	9a 83       	std	Y+2, r25	; 0x02
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	84 e0       	ldi	r24, 0x04	; 4
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9e 8b       	std	Y+22, r25	; 0x16
    26ca:	8d 8b       	std	Y+21, r24	; 0x15
		
	menu highscore = {.name = "Highscore", .parent = &mainMenu, .num_functions = 3, .num_submenues = 0};
    26cc:	fe 01       	movw	r30, r28
    26ce:	fb 96       	adiw	r30, 0x3b	; 59
    26d0:	df 01       	movw	r26, r30
    26d2:	ef 2c       	mov	r14, r15
    26d4:	1d 92       	st	X+, r1
    26d6:	ea 94       	dec	r14
    26d8:	e9 f7       	brne	.-6      	; 0x26d4 <menuSystem+0x46>
    26da:	82 e5       	ldi	r24, 0x52	; 82
    26dc:	92 e0       	ldi	r25, 0x02	; 2
    26de:	9c af       	std	Y+60, r25	; 0x3c
    26e0:	8b af       	std	Y+59, r24	; 0x3b
    26e2:	1e af       	std	Y+62, r17	; 0x3e
    26e4:	0d af       	std	Y+61, r16	; 0x3d
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	e3 96       	adiw	r28, 0x33	; 51
    26ec:	9f af       	std	Y+63, r25	; 0x3f
    26ee:	8e af       	std	Y+62, r24	; 0x3e
    26f0:	e3 97       	sbiw	r28, 0x33	; 51
	mainMenu.submenues[2] = &highscore;
    26f2:	fa 87       	std	Y+10, r31	; 0x0a
    26f4:	e9 87       	std	Y+9, r30	; 0x09
	highscore.functions[0] = &highscore_print_snake;
    26f6:	23 e8       	ldi	r18, 0x83	; 131
    26f8:	36 e0       	ldi	r19, 0x06	; 6
    26fa:	a3 96       	adiw	r28, 0x23	; 35
    26fc:	3f af       	std	Y+63, r19	; 0x3f
    26fe:	2e af       	std	Y+62, r18	; 0x3e
    2700:	a3 97       	sbiw	r28, 0x23	; 35
	highscore.functions[1] = &highscore_print_pong;
    2702:	27 e8       	ldi	r18, 0x87	; 135
    2704:	36 e0       	ldi	r19, 0x06	; 6
    2706:	a5 96       	adiw	r28, 0x25	; 37
    2708:	3f af       	std	Y+63, r19	; 0x3f
    270a:	2e af       	std	Y+62, r18	; 0x3e
    270c:	a5 97       	sbiw	r28, 0x25	; 37
	highscore.functions[2] = &highscore_print_pingpong;
    270e:	2f e7       	ldi	r18, 0x7F	; 127
    2710:	36 e0       	ldi	r19, 0x06	; 6
    2712:	a7 96       	adiw	r28, 0x27	; 39
    2714:	3f af       	std	Y+63, r19	; 0x3f
    2716:	2e af       	std	Y+62, r18	; 0x3e
    2718:	a7 97       	sbiw	r28, 0x27	; 39
	highscore.name_functions[0] = "Snake";
    271a:	6c e5       	ldi	r22, 0x5C	; 92
    271c:	72 e0       	ldi	r23, 0x02	; 2
    271e:	63 96       	adiw	r28, 0x13	; 19
    2720:	7f af       	std	Y+63, r23	; 0x3f
    2722:	6e af       	std	Y+62, r22	; 0x3e
    2724:	63 97       	sbiw	r28, 0x13	; 19
	highscore.name_functions[1] = "Pong";
    2726:	47 e6       	ldi	r20, 0x67	; 103
    2728:	52 e0       	ldi	r21, 0x02	; 2
    272a:	65 96       	adiw	r28, 0x15	; 21
    272c:	5f af       	std	Y+63, r21	; 0x3f
    272e:	4e af       	std	Y+62, r20	; 0x3e
    2730:	65 97       	sbiw	r28, 0x15	; 21
	highscore.name_functions[2] = "Ping Pong";
    2732:	22 e6       	ldi	r18, 0x62	; 98
    2734:	32 e0       	ldi	r19, 0x02	; 2
    2736:	67 96       	adiw	r28, 0x17	; 23
    2738:	3f af       	std	Y+63, r19	; 0x3f
    273a:	2e af       	std	Y+62, r18	; 0x3e
    273c:	67 97       	sbiw	r28, 0x17	; 23
	
	menu playGame = {.name = "Play Game", .parent = &mainMenu, .num_functions = 3, .num_submenues = 1};
    273e:	fa 96       	adiw	r30, 0x3a	; 58
    2740:	df 01       	movw	r26, r30
    2742:	ef 2c       	mov	r14, r15
    2744:	1d 92       	st	X+, r1
    2746:	ea 94       	dec	r14
    2748:	e9 f7       	brne	.-6      	; 0x2744 <menuSystem+0xb6>
    274a:	ac e6       	ldi	r26, 0x6C	; 108
    274c:	b2 e0       	ldi	r27, 0x02	; 2
    274e:	b1 83       	std	Z+1, r27	; 0x01
    2750:	a0 83       	st	Z, r26
    2752:	13 83       	std	Z+3, r17	; 0x03
    2754:	02 83       	std	Z+2, r16	; 0x02
    2756:	a1 e0       	ldi	r26, 0x01	; 1
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	b5 8b       	std	Z+21, r27	; 0x15
    275c:	a4 8b       	std	Z+20, r26	; 0x14
    275e:	97 ab       	std	Z+55, r25	; 0x37
    2760:	86 ab       	std	Z+54, r24	; 0x36
	playGame.functions[0] = &play_draw;
    2762:	a7 e8       	ldi	r26, 0x87	; 135
    2764:	bc e0       	ldi	r27, 0x0C	; 12
    2766:	b7 a3       	std	Z+39, r27	; 0x27
    2768:	a6 a3       	std	Z+38, r26	; 0x26
	playGame.functions[1] = &playSnake;
    276a:	a7 e4       	ldi	r26, 0x47	; 71
    276c:	b0 e1       	ldi	r27, 0x10	; 16
    276e:	b1 a7       	std	Z+41, r27	; 0x29
    2770:	a0 a7       	std	Z+40, r26	; 0x28
	playGame.functions[2] = &playPong;
    2772:	aa e5       	ldi	r26, 0x5A	; 90
    2774:	bf e0       	ldi	r27, 0x0F	; 15
    2776:	b3 a7       	std	Z+43, r27	; 0x2b
    2778:	a2 a7       	std	Z+42, r26	; 0x2a
	playGame.name_functions[0] = "Draw";
    277a:	a6 e7       	ldi	r26, 0x76	; 118
    277c:	b2 e0       	ldi	r27, 0x02	; 2
    277e:	b7 8b       	std	Z+23, r27	; 0x17
    2780:	a6 8b       	std	Z+22, r26	; 0x16
	playGame.name_functions[1] = "Snake";
    2782:	71 8f       	std	Z+25, r23	; 0x19
    2784:	60 8f       	std	Z+24, r22	; 0x18
	playGame.name_functions[2] = "Pong";
    2786:	53 8f       	std	Z+27, r21	; 0x1b
    2788:	42 8f       	std	Z+26, r20	; 0x1a
	mainMenu.submenues[0] = &playGame;
    278a:	fe 83       	std	Y+6, r31	; 0x06
    278c:	ed 83       	std	Y+5, r30	; 0x05
	
	
	menu ping_pong = {.name = "Ping Pong", .parent = &playGame, .num_functions = 3};
    278e:	be 01       	movw	r22, r28
    2790:	61 55       	subi	r22, 0x51	; 81
    2792:	7f 4f       	sbci	r23, 0xFF	; 255
    2794:	db 01       	movw	r26, r22
    2796:	ef 2c       	mov	r14, r15
    2798:	1d 92       	st	X+, r1
    279a:	ea 94       	dec	r14
    279c:	e9 f7       	brne	.-6      	; 0x2798 <menuSystem+0x10a>
    279e:	db 01       	movw	r26, r22
    27a0:	11 96       	adiw	r26, 0x01	; 1
    27a2:	3c 93       	st	X, r19
    27a4:	2e 93       	st	-X, r18
    27a6:	13 96       	adiw	r26, 0x03	; 3
    27a8:	fc 93       	st	X, r31
    27aa:	ee 93       	st	-X, r30
    27ac:	12 97       	sbiw	r26, 0x02	; 2
    27ae:	d7 96       	adiw	r26, 0x37	; 55
    27b0:	9c 93       	st	X, r25
    27b2:	8e 93       	st	-X, r24
    27b4:	d6 97       	sbiw	r26, 0x36	; 54
	ping_pong.functions[0] = &play_pingpong_joy;
    27b6:	8d ee       	ldi	r24, 0xED	; 237
    27b8:	97 e0       	ldi	r25, 0x07	; 7
    27ba:	97 96       	adiw	r26, 0x27	; 39
    27bc:	9c 93       	st	X, r25
    27be:	8e 93       	st	-X, r24
    27c0:	96 97       	sbiw	r26, 0x26	; 38
	ping_pong.functions[1] = &play_pingpong_web;
    27c2:	89 ee       	ldi	r24, 0xE9	; 233
    27c4:	97 e0       	ldi	r25, 0x07	; 7
    27c6:	99 96       	adiw	r26, 0x29	; 41
    27c8:	9c 93       	st	X, r25
    27ca:	8e 93       	st	-X, r24
    27cc:	98 97       	sbiw	r26, 0x28	; 40
	ping_pong.functions[2] = &play_pingpong_self;
    27ce:	81 ef       	ldi	r24, 0xF1	; 241
    27d0:	97 e0       	ldi	r25, 0x07	; 7
    27d2:	9b 96       	adiw	r26, 0x2b	; 43
    27d4:	9c 93       	st	X, r25
    27d6:	8e 93       	st	-X, r24
    27d8:	9a 97       	sbiw	r26, 0x2a	; 42
	ping_pong.name_functions[0] = "Normal Control";
    27da:	8b e7       	ldi	r24, 0x7B	; 123
    27dc:	92 e0       	ldi	r25, 0x02	; 2
    27de:	57 96       	adiw	r26, 0x17	; 23
    27e0:	9c 93       	st	X, r25
    27e2:	8e 93       	st	-X, r24
    27e4:	56 97       	sbiw	r26, 0x16	; 22
	ping_pong.name_functions[1] = "Web Control";
    27e6:	8a e8       	ldi	r24, 0x8A	; 138
    27e8:	92 e0       	ldi	r25, 0x02	; 2
    27ea:	59 96       	adiw	r26, 0x19	; 25
    27ec:	9c 93       	st	X, r25
    27ee:	8e 93       	st	-X, r24
    27f0:	58 97       	sbiw	r26, 0x18	; 24
	ping_pong.name_functions[2] = "Self Controlled";
    27f2:	86 e9       	ldi	r24, 0x96	; 150
    27f4:	92 e0       	ldi	r25, 0x02	; 2
    27f6:	5b 96       	adiw	r26, 0x1b	; 27
    27f8:	9c 93       	st	X, r25
    27fa:	8e 93       	st	-X, r24
    27fc:	5a 97       	sbiw	r26, 0x1a	; 26
	playGame.submenues[0] = &ping_pong;
    27fe:	75 83       	std	Z+5, r23	; 0x05
    2800:	64 83       	std	Z+4, r22	; 0x04
	
		
	menu settings = {.name = "Settings", .parent = &mainMenu, .num_functions = 2};
    2802:	ec 58       	subi	r30, 0x8C	; 140
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	df 01       	movw	r26, r30
    2808:	ef 2c       	mov	r14, r15
    280a:	1d 92       	st	X+, r1
    280c:	ea 94       	dec	r14
    280e:	e9 f7       	brne	.-6      	; 0x280a <menuSystem+0x17c>
    2810:	86 ea       	ldi	r24, 0xA6	; 166
    2812:	92 e0       	ldi	r25, 0x02	; 2
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	80 83       	st	Z, r24
    2818:	13 83       	std	Z+3, r17	; 0x03
    281a:	02 83       	std	Z+2, r16	; 0x02
    281c:	82 e0       	ldi	r24, 0x02	; 2
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	97 ab       	std	Z+55, r25	; 0x37
    2822:	86 ab       	std	Z+54, r24	; 0x36
	settings.functions[0] = &calibrate_joystick;
    2824:	29 ec       	ldi	r18, 0xC9	; 201
    2826:	39 e0       	ldi	r19, 0x09	; 9
    2828:	37 a3       	std	Z+39, r19	; 0x27
    282a:	26 a3       	std	Z+38, r18	; 0x26
	settings.functions[1] = &highscore_clear_all;
    282c:	25 ef       	ldi	r18, 0xF5	; 245
    282e:	35 e0       	ldi	r19, 0x05	; 5
    2830:	31 a7       	std	Z+41, r19	; 0x29
    2832:	20 a7       	std	Z+40, r18	; 0x28
	settings.name_functions[0] = "Calibrate Joy";
    2834:	2f ea       	ldi	r18, 0xAF	; 175
    2836:	32 e0       	ldi	r19, 0x02	; 2
    2838:	37 8b       	std	Z+23, r19	; 0x17
    283a:	26 8b       	std	Z+22, r18	; 0x16
	settings.name_functions[1] = "Clear highscore";
    283c:	2d eb       	ldi	r18, 0xBD	; 189
    283e:	32 e0       	ldi	r19, 0x02	; 2
    2840:	31 8f       	std	Z+25, r19	; 0x19
    2842:	20 8f       	std	Z+24, r18	; 0x18
	mainMenu.submenues[3] = &settings;
    2844:	fc 87       	std	Y+12, r31	; 0x0c
    2846:	eb 87       	std	Y+11, r30	; 0x0b
	
	menu spotify = {.name = "Spotify", .parent = &mainMenu, .num_functions = 2};
    2848:	fa 96       	adiw	r30, 0x3a	; 58
    284a:	df 01       	movw	r26, r30
    284c:	1d 92       	st	X+, r1
    284e:	fa 94       	dec	r15
    2850:	e9 f7       	brne	.-6      	; 0x284c <menuSystem+0x1be>
    2852:	2d ec       	ldi	r18, 0xCD	; 205
    2854:	32 e0       	ldi	r19, 0x02	; 2
    2856:	31 83       	std	Z+1, r19	; 0x01
    2858:	20 83       	st	Z, r18
    285a:	13 83       	std	Z+3, r17	; 0x03
    285c:	02 83       	std	Z+2, r16	; 0x02
    285e:	97 ab       	std	Z+55, r25	; 0x37
    2860:	86 ab       	std	Z+54, r24	; 0x36
	spotify.functions[0] = &play_lisa;
    2862:	83 e2       	ldi	r24, 0x23	; 35
    2864:	94 e0       	ldi	r25, 0x04	; 4
    2866:	97 a3       	std	Z+39, r25	; 0x27
    2868:	86 a3       	std	Z+38, r24	; 0x26
	spotify.functions[1] = &play_mario;
    286a:	84 e5       	ldi	r24, 0x54	; 84
    286c:	94 e0       	ldi	r25, 0x04	; 4
    286e:	91 a7       	std	Z+41, r25	; 0x29
    2870:	80 a7       	std	Z+40, r24	; 0x28
	spotify.name_functions[0] = "Lisa";
    2872:	85 ed       	ldi	r24, 0xD5	; 213
    2874:	92 e0       	ldi	r25, 0x02	; 2
    2876:	97 8b       	std	Z+23, r25	; 0x17
    2878:	86 8b       	std	Z+22, r24	; 0x16
	spotify.name_functions[1] = "play_mario";
    287a:	8a ed       	ldi	r24, 0xDA	; 218
    287c:	92 e0       	ldi	r25, 0x02	; 2
    287e:	91 8f       	std	Z+25, r25	; 0x19
    2880:	80 8f       	std	Z+24, r24	; 0x18
	mainMenu.submenues[1] = &spotify;
    2882:	f8 87       	std	Y+8, r31	; 0x08
    2884:	ef 83       	std	Y+7, r30	; 0x07
	
	
	

	
	direction previousDirection = NEUTRAL;
    2886:	68 94       	set
    2888:	aa 24       	eor	r10, r10
    288a:	a2 f8       	bld	r10, 2
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    288c:	f8 01       	movw	r30, r16
    288e:	c6 a8       	ldd	r12, Z+54	; 0x36
    2890:	d7 a8       	ldd	r13, Z+55	; 0x37
    2892:	e4 88       	ldd	r14, Z+20	; 0x14
    2894:	f5 88       	ldd	r15, Z+21	; 0x15
		joy = get_joystick_position();
    2896:	0e 94 31 09 	call	0x1262	; 0x1262 <get_joystick_position>
    289a:	b8 2e       	mov	r11, r24
		if (joy.D != previousDirection){
    289c:	a8 16       	cp	r10, r24
    289e:	09 f4       	brne	.+2      	; 0x28a2 <menuSystem+0x214>
    28a0:	53 c0       	rjmp	.+166    	; 0x2948 <menuSystem+0x2ba>
	direction previousDirection = NEUTRAL;
	Joystick joy;
	menu* currentMenu = &mainMenu;
	int num_elements;
	while(1){
		num_elements = (currentMenu->num_functions+currentMenu->num_submenues);
    28a2:	b6 01       	movw	r22, r12
    28a4:	6e 0d       	add	r22, r14
    28a6:	7f 1d       	adc	r23, r15
		joy = get_joystick_position();
		if (joy.D != previousDirection){
			switch(joy.D){
    28a8:	f1 e0       	ldi	r31, 0x01	; 1
    28aa:	8f 17       	cp	r24, r31
    28ac:	79 f1       	breq	.+94     	; 0x290c <menuSystem+0x27e>
    28ae:	8f 17       	cp	r24, r31
    28b0:	18 f1       	brcs	.+70     	; 0x28f8 <menuSystem+0x26a>
    28b2:	68 94       	set
    28b4:	ee 24       	eor	r14, r14
    28b6:	e1 f8       	bld	r14, 1
    28b8:	8e 15       	cp	r24, r14
    28ba:	21 f0       	breq	.+8      	; 0x28c4 <menuSystem+0x236>
    28bc:	23 e0       	ldi	r18, 0x03	; 3
    28be:	82 17       	cp	r24, r18
    28c0:	79 f0       	breq	.+30     	; 0x28e0 <menuSystem+0x252>
    28c2:	42 c0       	rjmp	.+132    	; 0x2948 <menuSystem+0x2ba>
				case NEUTRAL:
					break;
				case UP:
					currentMenu->arrow = (currentMenu->arrow - 1 + num_elements)%num_elements;
    28c4:	d8 01       	movw	r26, r16
    28c6:	d8 96       	adiw	r26, 0x38	; 56
    28c8:	8d 91       	ld	r24, X+
    28ca:	9c 91       	ld	r25, X
    28cc:	d9 97       	sbiw	r26, 0x39	; 57
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	86 0f       	add	r24, r22
    28d2:	97 1f       	adc	r25, r23
    28d4:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    28d8:	f8 01       	movw	r30, r16
    28da:	91 af       	std	Z+57, r25	; 0x39
    28dc:	80 af       	std	Z+56, r24	; 0x38
					break;
    28de:	34 c0       	rjmp	.+104    	; 0x2948 <menuSystem+0x2ba>
				case DOWN:
					currentMenu->arrow = (currentMenu->arrow + 1)%num_elements;
    28e0:	d8 01       	movw	r26, r16
    28e2:	d8 96       	adiw	r26, 0x38	; 56
    28e4:	8d 91       	ld	r24, X+
    28e6:	9c 91       	ld	r25, X
    28e8:	d9 97       	sbiw	r26, 0x39	; 57
    28ea:	01 96       	adiw	r24, 0x01	; 1
    28ec:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <__divmodhi4>
    28f0:	f8 01       	movw	r30, r16
    28f2:	91 af       	std	Z+57, r25	; 0x39
    28f4:	80 af       	std	Z+56, r24	; 0x38
					break;
    28f6:	28 c0       	rjmp	.+80     	; 0x2948 <menuSystem+0x2ba>
				case LEFT:
						currentMenu = (currentMenu->parent) ? currentMenu->parent : currentMenu;
    28f8:	d8 01       	movw	r26, r16
    28fa:	12 96       	adiw	r26, 0x02	; 2
    28fc:	2d 91       	ld	r18, X+
    28fe:	3c 91       	ld	r19, X
    2900:	13 97       	sbiw	r26, 0x03	; 3
    2902:	21 15       	cp	r18, r1
    2904:	31 05       	cpc	r19, r1
    2906:	01 f1       	breq	.+64     	; 0x2948 <menuSystem+0x2ba>
    2908:	89 01       	movw	r16, r18
    290a:	1e c0       	rjmp	.+60     	; 0x2948 <menuSystem+0x2ba>
					break;
				case RIGHT:
					if(currentMenu->arrow < currentMenu->num_submenues){
    290c:	f8 01       	movw	r30, r16
    290e:	20 ad       	ldd	r18, Z+56	; 0x38
    2910:	31 ad       	ldd	r19, Z+57	; 0x39
    2912:	44 89       	ldd	r20, Z+20	; 0x14
    2914:	55 89       	ldd	r21, Z+21	; 0x15
    2916:	24 17       	cp	r18, r20
    2918:	35 07       	cpc	r19, r21
    291a:	4c f4       	brge	.+18     	; 0x292e <menuSystem+0x2a0>
						currentMenu = currentMenu->submenues[currentMenu->arrow];
    291c:	2e 5f       	subi	r18, 0xFE	; 254
    291e:	3f 4f       	sbci	r19, 0xFF	; 255
    2920:	22 0f       	add	r18, r18
    2922:	33 1f       	adc	r19, r19
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	00 81       	ld	r16, Z
    292a:	11 81       	ldd	r17, Z+1	; 0x01
    292c:	0d c0       	rjmp	.+26     	; 0x2948 <menuSystem+0x2ba>
					}
					else{
						currentMenu->functions[(currentMenu->arrow - currentMenu->num_submenues)]();
    292e:	24 1b       	sub	r18, r20
    2930:	35 0b       	sbc	r19, r21
    2932:	2d 5e       	subi	r18, 0xED	; 237
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	f9 01       	movw	r30, r18
    2938:	ee 0f       	add	r30, r30
    293a:	ff 1f       	adc	r31, r31
    293c:	e0 0f       	add	r30, r16
    293e:	f1 1f       	adc	r31, r17
    2940:	01 90       	ld	r0, Z+
    2942:	f0 81       	ld	r31, Z
    2944:	e0 2d       	mov	r30, r0
    2946:	09 95       	icall
					break;
			}
		}
		previousDirection = joy.D;
		
		make_screen(currentMenu);
    2948:	c8 01       	movw	r24, r16
    294a:	0e 94 1f 12 	call	0x243e	; 0x243e <make_screen>
    294e:	ff ef       	ldi	r31, 0xFF	; 255
    2950:	2f e7       	ldi	r18, 0x7F	; 127
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	f1 50       	subi	r31, 0x01	; 1
    2956:	20 40       	sbci	r18, 0x00	; 0
    2958:	40 40       	sbci	r20, 0x00	; 0
    295a:	e1 f7       	brne	.-8      	; 0x2954 <menuSystem+0x2c6>
    295c:	00 c0       	rjmp	.+0      	; 0x295e <menuSystem+0x2d0>
    295e:	00 c0       	rjmp	.+0      	; 0x2960 <menuSystem+0x2d2>
					break;
					default:
					break;
			}
		}
		previousDirection = joy.D;
    2960:	ab 2c       	mov	r10, r11
    2962:	94 cf       	rjmp	.-216    	; 0x288c <menuSystem+0x1fe>

00002964 <__subsf3>:
    2964:	50 58       	subi	r21, 0x80	; 128

00002966 <__addsf3>:
    2966:	bb 27       	eor	r27, r27
    2968:	aa 27       	eor	r26, r26
    296a:	0e d0       	rcall	.+28     	; 0x2988 <__addsf3x>
    296c:	75 c1       	rjmp	.+746    	; 0x2c58 <__fp_round>
    296e:	66 d1       	rcall	.+716    	; 0x2c3c <__fp_pscA>
    2970:	30 f0       	brcs	.+12     	; 0x297e <__addsf3+0x18>
    2972:	6b d1       	rcall	.+726    	; 0x2c4a <__fp_pscB>
    2974:	20 f0       	brcs	.+8      	; 0x297e <__addsf3+0x18>
    2976:	31 f4       	brne	.+12     	; 0x2984 <__addsf3+0x1e>
    2978:	9f 3f       	cpi	r25, 0xFF	; 255
    297a:	11 f4       	brne	.+4      	; 0x2980 <__addsf3+0x1a>
    297c:	1e f4       	brtc	.+6      	; 0x2984 <__addsf3+0x1e>
    297e:	5b c1       	rjmp	.+694    	; 0x2c36 <__fp_nan>
    2980:	0e f4       	brtc	.+2      	; 0x2984 <__addsf3+0x1e>
    2982:	e0 95       	com	r30
    2984:	e7 fb       	bst	r30, 7
    2986:	51 c1       	rjmp	.+674    	; 0x2c2a <__fp_inf>

00002988 <__addsf3x>:
    2988:	e9 2f       	mov	r30, r25
    298a:	77 d1       	rcall	.+750    	; 0x2c7a <__fp_split3>
    298c:	80 f3       	brcs	.-32     	; 0x296e <__addsf3+0x8>
    298e:	ba 17       	cp	r27, r26
    2990:	62 07       	cpc	r22, r18
    2992:	73 07       	cpc	r23, r19
    2994:	84 07       	cpc	r24, r20
    2996:	95 07       	cpc	r25, r21
    2998:	18 f0       	brcs	.+6      	; 0x29a0 <__addsf3x+0x18>
    299a:	71 f4       	brne	.+28     	; 0x29b8 <__addsf3x+0x30>
    299c:	9e f5       	brtc	.+102    	; 0x2a04 <__addsf3x+0x7c>
    299e:	8f c1       	rjmp	.+798    	; 0x2cbe <__fp_zero>
    29a0:	0e f4       	brtc	.+2      	; 0x29a4 <__addsf3x+0x1c>
    29a2:	e0 95       	com	r30
    29a4:	0b 2e       	mov	r0, r27
    29a6:	ba 2f       	mov	r27, r26
    29a8:	a0 2d       	mov	r26, r0
    29aa:	0b 01       	movw	r0, r22
    29ac:	b9 01       	movw	r22, r18
    29ae:	90 01       	movw	r18, r0
    29b0:	0c 01       	movw	r0, r24
    29b2:	ca 01       	movw	r24, r20
    29b4:	a0 01       	movw	r20, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	ff 27       	eor	r31, r31
    29ba:	59 1b       	sub	r21, r25
    29bc:	99 f0       	breq	.+38     	; 0x29e4 <__addsf3x+0x5c>
    29be:	59 3f       	cpi	r21, 0xF9	; 249
    29c0:	50 f4       	brcc	.+20     	; 0x29d6 <__addsf3x+0x4e>
    29c2:	50 3e       	cpi	r21, 0xE0	; 224
    29c4:	68 f1       	brcs	.+90     	; 0x2a20 <__addsf3x+0x98>
    29c6:	1a 16       	cp	r1, r26
    29c8:	f0 40       	sbci	r31, 0x00	; 0
    29ca:	a2 2f       	mov	r26, r18
    29cc:	23 2f       	mov	r18, r19
    29ce:	34 2f       	mov	r19, r20
    29d0:	44 27       	eor	r20, r20
    29d2:	58 5f       	subi	r21, 0xF8	; 248
    29d4:	f3 cf       	rjmp	.-26     	; 0x29bc <__addsf3x+0x34>
    29d6:	46 95       	lsr	r20
    29d8:	37 95       	ror	r19
    29da:	27 95       	ror	r18
    29dc:	a7 95       	ror	r26
    29de:	f0 40       	sbci	r31, 0x00	; 0
    29e0:	53 95       	inc	r21
    29e2:	c9 f7       	brne	.-14     	; 0x29d6 <__addsf3x+0x4e>
    29e4:	7e f4       	brtc	.+30     	; 0x2a04 <__addsf3x+0x7c>
    29e6:	1f 16       	cp	r1, r31
    29e8:	ba 0b       	sbc	r27, r26
    29ea:	62 0b       	sbc	r22, r18
    29ec:	73 0b       	sbc	r23, r19
    29ee:	84 0b       	sbc	r24, r20
    29f0:	ba f0       	brmi	.+46     	; 0x2a20 <__addsf3x+0x98>
    29f2:	91 50       	subi	r25, 0x01	; 1
    29f4:	a1 f0       	breq	.+40     	; 0x2a1e <__addsf3x+0x96>
    29f6:	ff 0f       	add	r31, r31
    29f8:	bb 1f       	adc	r27, r27
    29fa:	66 1f       	adc	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	88 1f       	adc	r24, r24
    2a00:	c2 f7       	brpl	.-16     	; 0x29f2 <__addsf3x+0x6a>
    2a02:	0e c0       	rjmp	.+28     	; 0x2a20 <__addsf3x+0x98>
    2a04:	ba 0f       	add	r27, r26
    2a06:	62 1f       	adc	r22, r18
    2a08:	73 1f       	adc	r23, r19
    2a0a:	84 1f       	adc	r24, r20
    2a0c:	48 f4       	brcc	.+18     	; 0x2a20 <__addsf3x+0x98>
    2a0e:	87 95       	ror	r24
    2a10:	77 95       	ror	r23
    2a12:	67 95       	ror	r22
    2a14:	b7 95       	ror	r27
    2a16:	f7 95       	ror	r31
    2a18:	9e 3f       	cpi	r25, 0xFE	; 254
    2a1a:	08 f0       	brcs	.+2      	; 0x2a1e <__addsf3x+0x96>
    2a1c:	b3 cf       	rjmp	.-154    	; 0x2984 <__addsf3+0x1e>
    2a1e:	93 95       	inc	r25
    2a20:	88 0f       	add	r24, r24
    2a22:	08 f0       	brcs	.+2      	; 0x2a26 <__addsf3x+0x9e>
    2a24:	99 27       	eor	r25, r25
    2a26:	ee 0f       	add	r30, r30
    2a28:	97 95       	ror	r25
    2a2a:	87 95       	ror	r24
    2a2c:	08 95       	ret

00002a2e <__cmpsf2>:
    2a2e:	d9 d0       	rcall	.+434    	; 0x2be2 <__fp_cmp>
    2a30:	08 f4       	brcc	.+2      	; 0x2a34 <__cmpsf2+0x6>
    2a32:	81 e0       	ldi	r24, 0x01	; 1
    2a34:	08 95       	ret

00002a36 <__divsf3>:
    2a36:	0c d0       	rcall	.+24     	; 0x2a50 <__divsf3x>
    2a38:	0f c1       	rjmp	.+542    	; 0x2c58 <__fp_round>
    2a3a:	07 d1       	rcall	.+526    	; 0x2c4a <__fp_pscB>
    2a3c:	40 f0       	brcs	.+16     	; 0x2a4e <__divsf3+0x18>
    2a3e:	fe d0       	rcall	.+508    	; 0x2c3c <__fp_pscA>
    2a40:	30 f0       	brcs	.+12     	; 0x2a4e <__divsf3+0x18>
    2a42:	21 f4       	brne	.+8      	; 0x2a4c <__divsf3+0x16>
    2a44:	5f 3f       	cpi	r21, 0xFF	; 255
    2a46:	19 f0       	breq	.+6      	; 0x2a4e <__divsf3+0x18>
    2a48:	f0 c0       	rjmp	.+480    	; 0x2c2a <__fp_inf>
    2a4a:	51 11       	cpse	r21, r1
    2a4c:	39 c1       	rjmp	.+626    	; 0x2cc0 <__fp_szero>
    2a4e:	f3 c0       	rjmp	.+486    	; 0x2c36 <__fp_nan>

00002a50 <__divsf3x>:
    2a50:	14 d1       	rcall	.+552    	; 0x2c7a <__fp_split3>
    2a52:	98 f3       	brcs	.-26     	; 0x2a3a <__divsf3+0x4>

00002a54 <__divsf3_pse>:
    2a54:	99 23       	and	r25, r25
    2a56:	c9 f3       	breq	.-14     	; 0x2a4a <__divsf3+0x14>
    2a58:	55 23       	and	r21, r21
    2a5a:	b1 f3       	breq	.-20     	; 0x2a48 <__divsf3+0x12>
    2a5c:	95 1b       	sub	r25, r21
    2a5e:	55 0b       	sbc	r21, r21
    2a60:	bb 27       	eor	r27, r27
    2a62:	aa 27       	eor	r26, r26
    2a64:	62 17       	cp	r22, r18
    2a66:	73 07       	cpc	r23, r19
    2a68:	84 07       	cpc	r24, r20
    2a6a:	38 f0       	brcs	.+14     	; 0x2a7a <__divsf3_pse+0x26>
    2a6c:	9f 5f       	subi	r25, 0xFF	; 255
    2a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a70:	22 0f       	add	r18, r18
    2a72:	33 1f       	adc	r19, r19
    2a74:	44 1f       	adc	r20, r20
    2a76:	aa 1f       	adc	r26, r26
    2a78:	a9 f3       	breq	.-22     	; 0x2a64 <__divsf3_pse+0x10>
    2a7a:	33 d0       	rcall	.+102    	; 0x2ae2 <__divsf3_pse+0x8e>
    2a7c:	0e 2e       	mov	r0, r30
    2a7e:	3a f0       	brmi	.+14     	; 0x2a8e <__divsf3_pse+0x3a>
    2a80:	e0 e8       	ldi	r30, 0x80	; 128
    2a82:	30 d0       	rcall	.+96     	; 0x2ae4 <__divsf3_pse+0x90>
    2a84:	91 50       	subi	r25, 0x01	; 1
    2a86:	50 40       	sbci	r21, 0x00	; 0
    2a88:	e6 95       	lsr	r30
    2a8a:	00 1c       	adc	r0, r0
    2a8c:	ca f7       	brpl	.-14     	; 0x2a80 <__divsf3_pse+0x2c>
    2a8e:	29 d0       	rcall	.+82     	; 0x2ae2 <__divsf3_pse+0x8e>
    2a90:	fe 2f       	mov	r31, r30
    2a92:	27 d0       	rcall	.+78     	; 0x2ae2 <__divsf3_pse+0x8e>
    2a94:	66 0f       	add	r22, r22
    2a96:	77 1f       	adc	r23, r23
    2a98:	88 1f       	adc	r24, r24
    2a9a:	bb 1f       	adc	r27, r27
    2a9c:	26 17       	cp	r18, r22
    2a9e:	37 07       	cpc	r19, r23
    2aa0:	48 07       	cpc	r20, r24
    2aa2:	ab 07       	cpc	r26, r27
    2aa4:	b0 e8       	ldi	r27, 0x80	; 128
    2aa6:	09 f0       	breq	.+2      	; 0x2aaa <__divsf3_pse+0x56>
    2aa8:	bb 0b       	sbc	r27, r27
    2aaa:	80 2d       	mov	r24, r0
    2aac:	bf 01       	movw	r22, r30
    2aae:	ff 27       	eor	r31, r31
    2ab0:	93 58       	subi	r25, 0x83	; 131
    2ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab4:	2a f0       	brmi	.+10     	; 0x2ac0 <__divsf3_pse+0x6c>
    2ab6:	9e 3f       	cpi	r25, 0xFE	; 254
    2ab8:	51 05       	cpc	r21, r1
    2aba:	68 f0       	brcs	.+26     	; 0x2ad6 <__divsf3_pse+0x82>
    2abc:	b6 c0       	rjmp	.+364    	; 0x2c2a <__fp_inf>
    2abe:	00 c1       	rjmp	.+512    	; 0x2cc0 <__fp_szero>
    2ac0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ac2:	ec f3       	brlt	.-6      	; 0x2abe <__divsf3_pse+0x6a>
    2ac4:	98 3e       	cpi	r25, 0xE8	; 232
    2ac6:	dc f3       	brlt	.-10     	; 0x2abe <__divsf3_pse+0x6a>
    2ac8:	86 95       	lsr	r24
    2aca:	77 95       	ror	r23
    2acc:	67 95       	ror	r22
    2ace:	b7 95       	ror	r27
    2ad0:	f7 95       	ror	r31
    2ad2:	9f 5f       	subi	r25, 0xFF	; 255
    2ad4:	c9 f7       	brne	.-14     	; 0x2ac8 <__divsf3_pse+0x74>
    2ad6:	88 0f       	add	r24, r24
    2ad8:	91 1d       	adc	r25, r1
    2ada:	96 95       	lsr	r25
    2adc:	87 95       	ror	r24
    2ade:	97 f9       	bld	r25, 7
    2ae0:	08 95       	ret
    2ae2:	e1 e0       	ldi	r30, 0x01	; 1
    2ae4:	66 0f       	add	r22, r22
    2ae6:	77 1f       	adc	r23, r23
    2ae8:	88 1f       	adc	r24, r24
    2aea:	bb 1f       	adc	r27, r27
    2aec:	62 17       	cp	r22, r18
    2aee:	73 07       	cpc	r23, r19
    2af0:	84 07       	cpc	r24, r20
    2af2:	ba 07       	cpc	r27, r26
    2af4:	20 f0       	brcs	.+8      	; 0x2afe <__divsf3_pse+0xaa>
    2af6:	62 1b       	sub	r22, r18
    2af8:	73 0b       	sbc	r23, r19
    2afa:	84 0b       	sbc	r24, r20
    2afc:	ba 0b       	sbc	r27, r26
    2afe:	ee 1f       	adc	r30, r30
    2b00:	88 f7       	brcc	.-30     	; 0x2ae4 <__divsf3_pse+0x90>
    2b02:	e0 95       	com	r30
    2b04:	08 95       	ret

00002b06 <__fixsfsi>:
    2b06:	04 d0       	rcall	.+8      	; 0x2b10 <__fixunssfsi>
    2b08:	68 94       	set
    2b0a:	b1 11       	cpse	r27, r1
    2b0c:	d9 c0       	rjmp	.+434    	; 0x2cc0 <__fp_szero>
    2b0e:	08 95       	ret

00002b10 <__fixunssfsi>:
    2b10:	bc d0       	rcall	.+376    	; 0x2c8a <__fp_splitA>
    2b12:	88 f0       	brcs	.+34     	; 0x2b36 <__fixunssfsi+0x26>
    2b14:	9f 57       	subi	r25, 0x7F	; 127
    2b16:	90 f0       	brcs	.+36     	; 0x2b3c <__fixunssfsi+0x2c>
    2b18:	b9 2f       	mov	r27, r25
    2b1a:	99 27       	eor	r25, r25
    2b1c:	b7 51       	subi	r27, 0x17	; 23
    2b1e:	a0 f0       	brcs	.+40     	; 0x2b48 <__fixunssfsi+0x38>
    2b20:	d1 f0       	breq	.+52     	; 0x2b56 <__fixunssfsi+0x46>
    2b22:	66 0f       	add	r22, r22
    2b24:	77 1f       	adc	r23, r23
    2b26:	88 1f       	adc	r24, r24
    2b28:	99 1f       	adc	r25, r25
    2b2a:	1a f0       	brmi	.+6      	; 0x2b32 <__fixunssfsi+0x22>
    2b2c:	ba 95       	dec	r27
    2b2e:	c9 f7       	brne	.-14     	; 0x2b22 <__fixunssfsi+0x12>
    2b30:	12 c0       	rjmp	.+36     	; 0x2b56 <__fixunssfsi+0x46>
    2b32:	b1 30       	cpi	r27, 0x01	; 1
    2b34:	81 f0       	breq	.+32     	; 0x2b56 <__fixunssfsi+0x46>
    2b36:	c3 d0       	rcall	.+390    	; 0x2cbe <__fp_zero>
    2b38:	b1 e0       	ldi	r27, 0x01	; 1
    2b3a:	08 95       	ret
    2b3c:	c0 c0       	rjmp	.+384    	; 0x2cbe <__fp_zero>
    2b3e:	67 2f       	mov	r22, r23
    2b40:	78 2f       	mov	r23, r24
    2b42:	88 27       	eor	r24, r24
    2b44:	b8 5f       	subi	r27, 0xF8	; 248
    2b46:	39 f0       	breq	.+14     	; 0x2b56 <__fixunssfsi+0x46>
    2b48:	b9 3f       	cpi	r27, 0xF9	; 249
    2b4a:	cc f3       	brlt	.-14     	; 0x2b3e <__fixunssfsi+0x2e>
    2b4c:	86 95       	lsr	r24
    2b4e:	77 95       	ror	r23
    2b50:	67 95       	ror	r22
    2b52:	b3 95       	inc	r27
    2b54:	d9 f7       	brne	.-10     	; 0x2b4c <__fixunssfsi+0x3c>
    2b56:	3e f4       	brtc	.+14     	; 0x2b66 <__fixunssfsi+0x56>
    2b58:	90 95       	com	r25
    2b5a:	80 95       	com	r24
    2b5c:	70 95       	com	r23
    2b5e:	61 95       	neg	r22
    2b60:	7f 4f       	sbci	r23, 0xFF	; 255
    2b62:	8f 4f       	sbci	r24, 0xFF	; 255
    2b64:	9f 4f       	sbci	r25, 0xFF	; 255
    2b66:	08 95       	ret

00002b68 <__floatunsisf>:
    2b68:	e8 94       	clt
    2b6a:	09 c0       	rjmp	.+18     	; 0x2b7e <__floatsisf+0x12>

00002b6c <__floatsisf>:
    2b6c:	97 fb       	bst	r25, 7
    2b6e:	3e f4       	brtc	.+14     	; 0x2b7e <__floatsisf+0x12>
    2b70:	90 95       	com	r25
    2b72:	80 95       	com	r24
    2b74:	70 95       	com	r23
    2b76:	61 95       	neg	r22
    2b78:	7f 4f       	sbci	r23, 0xFF	; 255
    2b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b7e:	99 23       	and	r25, r25
    2b80:	a9 f0       	breq	.+42     	; 0x2bac <__floatsisf+0x40>
    2b82:	f9 2f       	mov	r31, r25
    2b84:	96 e9       	ldi	r25, 0x96	; 150
    2b86:	bb 27       	eor	r27, r27
    2b88:	93 95       	inc	r25
    2b8a:	f6 95       	lsr	r31
    2b8c:	87 95       	ror	r24
    2b8e:	77 95       	ror	r23
    2b90:	67 95       	ror	r22
    2b92:	b7 95       	ror	r27
    2b94:	f1 11       	cpse	r31, r1
    2b96:	f8 cf       	rjmp	.-16     	; 0x2b88 <__floatsisf+0x1c>
    2b98:	fa f4       	brpl	.+62     	; 0x2bd8 <__floatsisf+0x6c>
    2b9a:	bb 0f       	add	r27, r27
    2b9c:	11 f4       	brne	.+4      	; 0x2ba2 <__floatsisf+0x36>
    2b9e:	60 ff       	sbrs	r22, 0
    2ba0:	1b c0       	rjmp	.+54     	; 0x2bd8 <__floatsisf+0x6c>
    2ba2:	6f 5f       	subi	r22, 0xFF	; 255
    2ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ba6:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    2baa:	16 c0       	rjmp	.+44     	; 0x2bd8 <__floatsisf+0x6c>
    2bac:	88 23       	and	r24, r24
    2bae:	11 f0       	breq	.+4      	; 0x2bb4 <__floatsisf+0x48>
    2bb0:	96 e9       	ldi	r25, 0x96	; 150
    2bb2:	11 c0       	rjmp	.+34     	; 0x2bd6 <__floatsisf+0x6a>
    2bb4:	77 23       	and	r23, r23
    2bb6:	21 f0       	breq	.+8      	; 0x2bc0 <__floatsisf+0x54>
    2bb8:	9e e8       	ldi	r25, 0x8E	; 142
    2bba:	87 2f       	mov	r24, r23
    2bbc:	76 2f       	mov	r23, r22
    2bbe:	05 c0       	rjmp	.+10     	; 0x2bca <__floatsisf+0x5e>
    2bc0:	66 23       	and	r22, r22
    2bc2:	71 f0       	breq	.+28     	; 0x2be0 <__floatsisf+0x74>
    2bc4:	96 e8       	ldi	r25, 0x86	; 134
    2bc6:	86 2f       	mov	r24, r22
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	2a f0       	brmi	.+10     	; 0x2bd8 <__floatsisf+0x6c>
    2bce:	9a 95       	dec	r25
    2bd0:	66 0f       	add	r22, r22
    2bd2:	77 1f       	adc	r23, r23
    2bd4:	88 1f       	adc	r24, r24
    2bd6:	da f7       	brpl	.-10     	; 0x2bce <__floatsisf+0x62>
    2bd8:	88 0f       	add	r24, r24
    2bda:	96 95       	lsr	r25
    2bdc:	87 95       	ror	r24
    2bde:	97 f9       	bld	r25, 7
    2be0:	08 95       	ret

00002be2 <__fp_cmp>:
    2be2:	99 0f       	add	r25, r25
    2be4:	00 08       	sbc	r0, r0
    2be6:	55 0f       	add	r21, r21
    2be8:	aa 0b       	sbc	r26, r26
    2bea:	e0 e8       	ldi	r30, 0x80	; 128
    2bec:	fe ef       	ldi	r31, 0xFE	; 254
    2bee:	16 16       	cp	r1, r22
    2bf0:	17 06       	cpc	r1, r23
    2bf2:	e8 07       	cpc	r30, r24
    2bf4:	f9 07       	cpc	r31, r25
    2bf6:	c0 f0       	brcs	.+48     	; 0x2c28 <__fp_cmp+0x46>
    2bf8:	12 16       	cp	r1, r18
    2bfa:	13 06       	cpc	r1, r19
    2bfc:	e4 07       	cpc	r30, r20
    2bfe:	f5 07       	cpc	r31, r21
    2c00:	98 f0       	brcs	.+38     	; 0x2c28 <__fp_cmp+0x46>
    2c02:	62 1b       	sub	r22, r18
    2c04:	73 0b       	sbc	r23, r19
    2c06:	84 0b       	sbc	r24, r20
    2c08:	95 0b       	sbc	r25, r21
    2c0a:	39 f4       	brne	.+14     	; 0x2c1a <__fp_cmp+0x38>
    2c0c:	0a 26       	eor	r0, r26
    2c0e:	61 f0       	breq	.+24     	; 0x2c28 <__fp_cmp+0x46>
    2c10:	23 2b       	or	r18, r19
    2c12:	24 2b       	or	r18, r20
    2c14:	25 2b       	or	r18, r21
    2c16:	21 f4       	brne	.+8      	; 0x2c20 <__fp_cmp+0x3e>
    2c18:	08 95       	ret
    2c1a:	0a 26       	eor	r0, r26
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <__fp_cmp+0x3e>
    2c1e:	a1 40       	sbci	r26, 0x01	; 1
    2c20:	a6 95       	lsr	r26
    2c22:	8f ef       	ldi	r24, 0xFF	; 255
    2c24:	81 1d       	adc	r24, r1
    2c26:	81 1d       	adc	r24, r1
    2c28:	08 95       	ret

00002c2a <__fp_inf>:
    2c2a:	97 f9       	bld	r25, 7
    2c2c:	9f 67       	ori	r25, 0x7F	; 127
    2c2e:	80 e8       	ldi	r24, 0x80	; 128
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	60 e0       	ldi	r22, 0x00	; 0
    2c34:	08 95       	ret

00002c36 <__fp_nan>:
    2c36:	9f ef       	ldi	r25, 0xFF	; 255
    2c38:	80 ec       	ldi	r24, 0xC0	; 192
    2c3a:	08 95       	ret

00002c3c <__fp_pscA>:
    2c3c:	00 24       	eor	r0, r0
    2c3e:	0a 94       	dec	r0
    2c40:	16 16       	cp	r1, r22
    2c42:	17 06       	cpc	r1, r23
    2c44:	18 06       	cpc	r1, r24
    2c46:	09 06       	cpc	r0, r25
    2c48:	08 95       	ret

00002c4a <__fp_pscB>:
    2c4a:	00 24       	eor	r0, r0
    2c4c:	0a 94       	dec	r0
    2c4e:	12 16       	cp	r1, r18
    2c50:	13 06       	cpc	r1, r19
    2c52:	14 06       	cpc	r1, r20
    2c54:	05 06       	cpc	r0, r21
    2c56:	08 95       	ret

00002c58 <__fp_round>:
    2c58:	09 2e       	mov	r0, r25
    2c5a:	03 94       	inc	r0
    2c5c:	00 0c       	add	r0, r0
    2c5e:	11 f4       	brne	.+4      	; 0x2c64 <__fp_round+0xc>
    2c60:	88 23       	and	r24, r24
    2c62:	52 f0       	brmi	.+20     	; 0x2c78 <__fp_round+0x20>
    2c64:	bb 0f       	add	r27, r27
    2c66:	40 f4       	brcc	.+16     	; 0x2c78 <__fp_round+0x20>
    2c68:	bf 2b       	or	r27, r31
    2c6a:	11 f4       	brne	.+4      	; 0x2c70 <__fp_round+0x18>
    2c6c:	60 ff       	sbrs	r22, 0
    2c6e:	04 c0       	rjmp	.+8      	; 0x2c78 <__fp_round+0x20>
    2c70:	6f 5f       	subi	r22, 0xFF	; 255
    2c72:	7f 4f       	sbci	r23, 0xFF	; 255
    2c74:	8f 4f       	sbci	r24, 0xFF	; 255
    2c76:	9f 4f       	sbci	r25, 0xFF	; 255
    2c78:	08 95       	ret

00002c7a <__fp_split3>:
    2c7a:	57 fd       	sbrc	r21, 7
    2c7c:	90 58       	subi	r25, 0x80	; 128
    2c7e:	44 0f       	add	r20, r20
    2c80:	55 1f       	adc	r21, r21
    2c82:	59 f0       	breq	.+22     	; 0x2c9a <__fp_splitA+0x10>
    2c84:	5f 3f       	cpi	r21, 0xFF	; 255
    2c86:	71 f0       	breq	.+28     	; 0x2ca4 <__fp_splitA+0x1a>
    2c88:	47 95       	ror	r20

00002c8a <__fp_splitA>:
    2c8a:	88 0f       	add	r24, r24
    2c8c:	97 fb       	bst	r25, 7
    2c8e:	99 1f       	adc	r25, r25
    2c90:	61 f0       	breq	.+24     	; 0x2caa <__fp_splitA+0x20>
    2c92:	9f 3f       	cpi	r25, 0xFF	; 255
    2c94:	79 f0       	breq	.+30     	; 0x2cb4 <__fp_splitA+0x2a>
    2c96:	87 95       	ror	r24
    2c98:	08 95       	ret
    2c9a:	12 16       	cp	r1, r18
    2c9c:	13 06       	cpc	r1, r19
    2c9e:	14 06       	cpc	r1, r20
    2ca0:	55 1f       	adc	r21, r21
    2ca2:	f2 cf       	rjmp	.-28     	; 0x2c88 <__fp_split3+0xe>
    2ca4:	46 95       	lsr	r20
    2ca6:	f1 df       	rcall	.-30     	; 0x2c8a <__fp_splitA>
    2ca8:	08 c0       	rjmp	.+16     	; 0x2cba <__fp_splitA+0x30>
    2caa:	16 16       	cp	r1, r22
    2cac:	17 06       	cpc	r1, r23
    2cae:	18 06       	cpc	r1, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	f1 cf       	rjmp	.-30     	; 0x2c96 <__fp_splitA+0xc>
    2cb4:	86 95       	lsr	r24
    2cb6:	71 05       	cpc	r23, r1
    2cb8:	61 05       	cpc	r22, r1
    2cba:	08 94       	sec
    2cbc:	08 95       	ret

00002cbe <__fp_zero>:
    2cbe:	e8 94       	clt

00002cc0 <__fp_szero>:
    2cc0:	bb 27       	eor	r27, r27
    2cc2:	66 27       	eor	r22, r22
    2cc4:	77 27       	eor	r23, r23
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	97 f9       	bld	r25, 7
    2cca:	08 95       	ret

00002ccc <__gesf2>:
    2ccc:	8a df       	rcall	.-236    	; 0x2be2 <__fp_cmp>
    2cce:	08 f4       	brcc	.+2      	; 0x2cd2 <__gesf2+0x6>
    2cd0:	8f ef       	ldi	r24, 0xFF	; 255
    2cd2:	08 95       	ret

00002cd4 <__mulsf3>:
    2cd4:	0b d0       	rcall	.+22     	; 0x2cec <__mulsf3x>
    2cd6:	c0 cf       	rjmp	.-128    	; 0x2c58 <__fp_round>
    2cd8:	b1 df       	rcall	.-158    	; 0x2c3c <__fp_pscA>
    2cda:	28 f0       	brcs	.+10     	; 0x2ce6 <__mulsf3+0x12>
    2cdc:	b6 df       	rcall	.-148    	; 0x2c4a <__fp_pscB>
    2cde:	18 f0       	brcs	.+6      	; 0x2ce6 <__mulsf3+0x12>
    2ce0:	95 23       	and	r25, r21
    2ce2:	09 f0       	breq	.+2      	; 0x2ce6 <__mulsf3+0x12>
    2ce4:	a2 cf       	rjmp	.-188    	; 0x2c2a <__fp_inf>
    2ce6:	a7 cf       	rjmp	.-178    	; 0x2c36 <__fp_nan>
    2ce8:	11 24       	eor	r1, r1
    2cea:	ea cf       	rjmp	.-44     	; 0x2cc0 <__fp_szero>

00002cec <__mulsf3x>:
    2cec:	c6 df       	rcall	.-116    	; 0x2c7a <__fp_split3>
    2cee:	a0 f3       	brcs	.-24     	; 0x2cd8 <__mulsf3+0x4>

00002cf0 <__mulsf3_pse>:
    2cf0:	95 9f       	mul	r25, r21
    2cf2:	d1 f3       	breq	.-12     	; 0x2ce8 <__mulsf3+0x14>
    2cf4:	95 0f       	add	r25, r21
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	55 1f       	adc	r21, r21
    2cfa:	62 9f       	mul	r22, r18
    2cfc:	f0 01       	movw	r30, r0
    2cfe:	72 9f       	mul	r23, r18
    2d00:	bb 27       	eor	r27, r27
    2d02:	f0 0d       	add	r31, r0
    2d04:	b1 1d       	adc	r27, r1
    2d06:	63 9f       	mul	r22, r19
    2d08:	aa 27       	eor	r26, r26
    2d0a:	f0 0d       	add	r31, r0
    2d0c:	b1 1d       	adc	r27, r1
    2d0e:	aa 1f       	adc	r26, r26
    2d10:	64 9f       	mul	r22, r20
    2d12:	66 27       	eor	r22, r22
    2d14:	b0 0d       	add	r27, r0
    2d16:	a1 1d       	adc	r26, r1
    2d18:	66 1f       	adc	r22, r22
    2d1a:	82 9f       	mul	r24, r18
    2d1c:	22 27       	eor	r18, r18
    2d1e:	b0 0d       	add	r27, r0
    2d20:	a1 1d       	adc	r26, r1
    2d22:	62 1f       	adc	r22, r18
    2d24:	73 9f       	mul	r23, r19
    2d26:	b0 0d       	add	r27, r0
    2d28:	a1 1d       	adc	r26, r1
    2d2a:	62 1f       	adc	r22, r18
    2d2c:	83 9f       	mul	r24, r19
    2d2e:	a0 0d       	add	r26, r0
    2d30:	61 1d       	adc	r22, r1
    2d32:	22 1f       	adc	r18, r18
    2d34:	74 9f       	mul	r23, r20
    2d36:	33 27       	eor	r19, r19
    2d38:	a0 0d       	add	r26, r0
    2d3a:	61 1d       	adc	r22, r1
    2d3c:	23 1f       	adc	r18, r19
    2d3e:	84 9f       	mul	r24, r20
    2d40:	60 0d       	add	r22, r0
    2d42:	21 1d       	adc	r18, r1
    2d44:	82 2f       	mov	r24, r18
    2d46:	76 2f       	mov	r23, r22
    2d48:	6a 2f       	mov	r22, r26
    2d4a:	11 24       	eor	r1, r1
    2d4c:	9f 57       	subi	r25, 0x7F	; 127
    2d4e:	50 40       	sbci	r21, 0x00	; 0
    2d50:	8a f0       	brmi	.+34     	; 0x2d74 <__mulsf3_pse+0x84>
    2d52:	e1 f0       	breq	.+56     	; 0x2d8c <__mulsf3_pse+0x9c>
    2d54:	88 23       	and	r24, r24
    2d56:	4a f0       	brmi	.+18     	; 0x2d6a <__mulsf3_pse+0x7a>
    2d58:	ee 0f       	add	r30, r30
    2d5a:	ff 1f       	adc	r31, r31
    2d5c:	bb 1f       	adc	r27, r27
    2d5e:	66 1f       	adc	r22, r22
    2d60:	77 1f       	adc	r23, r23
    2d62:	88 1f       	adc	r24, r24
    2d64:	91 50       	subi	r25, 0x01	; 1
    2d66:	50 40       	sbci	r21, 0x00	; 0
    2d68:	a9 f7       	brne	.-22     	; 0x2d54 <__mulsf3_pse+0x64>
    2d6a:	9e 3f       	cpi	r25, 0xFE	; 254
    2d6c:	51 05       	cpc	r21, r1
    2d6e:	70 f0       	brcs	.+28     	; 0x2d8c <__mulsf3_pse+0x9c>
    2d70:	5c cf       	rjmp	.-328    	; 0x2c2a <__fp_inf>
    2d72:	a6 cf       	rjmp	.-180    	; 0x2cc0 <__fp_szero>
    2d74:	5f 3f       	cpi	r21, 0xFF	; 255
    2d76:	ec f3       	brlt	.-6      	; 0x2d72 <__mulsf3_pse+0x82>
    2d78:	98 3e       	cpi	r25, 0xE8	; 232
    2d7a:	dc f3       	brlt	.-10     	; 0x2d72 <__mulsf3_pse+0x82>
    2d7c:	86 95       	lsr	r24
    2d7e:	77 95       	ror	r23
    2d80:	67 95       	ror	r22
    2d82:	b7 95       	ror	r27
    2d84:	f7 95       	ror	r31
    2d86:	e7 95       	ror	r30
    2d88:	9f 5f       	subi	r25, 0xFF	; 255
    2d8a:	c1 f7       	brne	.-16     	; 0x2d7c <__mulsf3_pse+0x8c>
    2d8c:	fe 2b       	or	r31, r30
    2d8e:	88 0f       	add	r24, r24
    2d90:	91 1d       	adc	r25, r1
    2d92:	96 95       	lsr	r25
    2d94:	87 95       	ror	r24
    2d96:	97 f9       	bld	r25, 7
    2d98:	08 95       	ret

00002d9a <__divmodhi4>:
    2d9a:	97 fb       	bst	r25, 7
    2d9c:	07 2e       	mov	r0, r23
    2d9e:	16 f4       	brtc	.+4      	; 0x2da4 <__divmodhi4+0xa>
    2da0:	00 94       	com	r0
    2da2:	07 d0       	rcall	.+14     	; 0x2db2 <__divmodhi4_neg1>
    2da4:	77 fd       	sbrc	r23, 7
    2da6:	09 d0       	rcall	.+18     	; 0x2dba <__divmodhi4_neg2>
    2da8:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodhi4>
    2dac:	07 fc       	sbrc	r0, 7
    2dae:	05 d0       	rcall	.+10     	; 0x2dba <__divmodhi4_neg2>
    2db0:	3e f4       	brtc	.+14     	; 0x2dc0 <__divmodhi4_exit>

00002db2 <__divmodhi4_neg1>:
    2db2:	90 95       	com	r25
    2db4:	81 95       	neg	r24
    2db6:	9f 4f       	sbci	r25, 0xFF	; 255
    2db8:	08 95       	ret

00002dba <__divmodhi4_neg2>:
    2dba:	70 95       	com	r23
    2dbc:	61 95       	neg	r22
    2dbe:	7f 4f       	sbci	r23, 0xFF	; 255

00002dc0 <__divmodhi4_exit>:
    2dc0:	08 95       	ret

00002dc2 <__divmodsi4>:
    2dc2:	05 2e       	mov	r0, r21
    2dc4:	97 fb       	bst	r25, 7
    2dc6:	1e f4       	brtc	.+6      	; 0x2dce <__divmodsi4+0xc>
    2dc8:	00 94       	com	r0
    2dca:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__negsi2>
    2dce:	57 fd       	sbrc	r21, 7
    2dd0:	07 d0       	rcall	.+14     	; 0x2de0 <__divmodsi4_neg2>
    2dd2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <__udivmodsi4>
    2dd6:	07 fc       	sbrc	r0, 7
    2dd8:	03 d0       	rcall	.+6      	; 0x2de0 <__divmodsi4_neg2>
    2dda:	4e f4       	brtc	.+18     	; 0x2dee <__divmodsi4_exit>
    2ddc:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <__negsi2>

00002de0 <__divmodsi4_neg2>:
    2de0:	50 95       	com	r21
    2de2:	40 95       	com	r20
    2de4:	30 95       	com	r19
    2de6:	21 95       	neg	r18
    2de8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dea:	4f 4f       	sbci	r20, 0xFF	; 255
    2dec:	5f 4f       	sbci	r21, 0xFF	; 255

00002dee <__divmodsi4_exit>:
    2dee:	08 95       	ret

00002df0 <__negsi2>:
    2df0:	90 95       	com	r25
    2df2:	80 95       	com	r24
    2df4:	70 95       	com	r23
    2df6:	61 95       	neg	r22
    2df8:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfa:	8f 4f       	sbci	r24, 0xFF	; 255
    2dfc:	9f 4f       	sbci	r25, 0xFF	; 255
    2dfe:	08 95       	ret

00002e00 <__udivmodhi4>:
    2e00:	aa 1b       	sub	r26, r26
    2e02:	bb 1b       	sub	r27, r27
    2e04:	51 e1       	ldi	r21, 0x11	; 17
    2e06:	07 c0       	rjmp	.+14     	; 0x2e16 <__udivmodhi4_ep>

00002e08 <__udivmodhi4_loop>:
    2e08:	aa 1f       	adc	r26, r26
    2e0a:	bb 1f       	adc	r27, r27
    2e0c:	a6 17       	cp	r26, r22
    2e0e:	b7 07       	cpc	r27, r23
    2e10:	10 f0       	brcs	.+4      	; 0x2e16 <__udivmodhi4_ep>
    2e12:	a6 1b       	sub	r26, r22
    2e14:	b7 0b       	sbc	r27, r23

00002e16 <__udivmodhi4_ep>:
    2e16:	88 1f       	adc	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	5a 95       	dec	r21
    2e1c:	a9 f7       	brne	.-22     	; 0x2e08 <__udivmodhi4_loop>
    2e1e:	80 95       	com	r24
    2e20:	90 95       	com	r25
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	08 95       	ret

00002e28 <__udivmodsi4>:
    2e28:	a1 e2       	ldi	r26, 0x21	; 33
    2e2a:	1a 2e       	mov	r1, r26
    2e2c:	aa 1b       	sub	r26, r26
    2e2e:	bb 1b       	sub	r27, r27
    2e30:	fd 01       	movw	r30, r26
    2e32:	0d c0       	rjmp	.+26     	; 0x2e4e <__udivmodsi4_ep>

00002e34 <__udivmodsi4_loop>:
    2e34:	aa 1f       	adc	r26, r26
    2e36:	bb 1f       	adc	r27, r27
    2e38:	ee 1f       	adc	r30, r30
    2e3a:	ff 1f       	adc	r31, r31
    2e3c:	a2 17       	cp	r26, r18
    2e3e:	b3 07       	cpc	r27, r19
    2e40:	e4 07       	cpc	r30, r20
    2e42:	f5 07       	cpc	r31, r21
    2e44:	20 f0       	brcs	.+8      	; 0x2e4e <__udivmodsi4_ep>
    2e46:	a2 1b       	sub	r26, r18
    2e48:	b3 0b       	sbc	r27, r19
    2e4a:	e4 0b       	sbc	r30, r20
    2e4c:	f5 0b       	sbc	r31, r21

00002e4e <__udivmodsi4_ep>:
    2e4e:	66 1f       	adc	r22, r22
    2e50:	77 1f       	adc	r23, r23
    2e52:	88 1f       	adc	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	1a 94       	dec	r1
    2e58:	69 f7       	brne	.-38     	; 0x2e34 <__udivmodsi4_loop>
    2e5a:	60 95       	com	r22
    2e5c:	70 95       	com	r23
    2e5e:	80 95       	com	r24
    2e60:	90 95       	com	r25
    2e62:	9b 01       	movw	r18, r22
    2e64:	ac 01       	movw	r20, r24
    2e66:	bd 01       	movw	r22, r26
    2e68:	cf 01       	movw	r24, r30
    2e6a:	08 95       	ret

00002e6c <malloc>:
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	82 30       	cpi	r24, 0x02	; 2
    2e72:	91 05       	cpc	r25, r1
    2e74:	10 f4       	brcc	.+4      	; 0x2e7a <malloc+0xe>
    2e76:	82 e0       	ldi	r24, 0x02	; 2
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	e0 91 ea 02 	lds	r30, 0x02EA
    2e7e:	f0 91 eb 02 	lds	r31, 0x02EB
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	a0 e0       	ldi	r26, 0x00	; 0
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	30 97       	sbiw	r30, 0x00	; 0
    2e8c:	39 f1       	breq	.+78     	; 0x2edc <malloc+0x70>
    2e8e:	40 81       	ld	r20, Z
    2e90:	51 81       	ldd	r21, Z+1	; 0x01
    2e92:	48 17       	cp	r20, r24
    2e94:	59 07       	cpc	r21, r25
    2e96:	b8 f0       	brcs	.+46     	; 0x2ec6 <malloc+0x5a>
    2e98:	48 17       	cp	r20, r24
    2e9a:	59 07       	cpc	r21, r25
    2e9c:	71 f4       	brne	.+28     	; 0x2eba <malloc+0x4e>
    2e9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ea0:	93 81       	ldd	r25, Z+3	; 0x03
    2ea2:	10 97       	sbiw	r26, 0x00	; 0
    2ea4:	29 f0       	breq	.+10     	; 0x2eb0 <malloc+0x44>
    2ea6:	13 96       	adiw	r26, 0x03	; 3
    2ea8:	9c 93       	st	X, r25
    2eaa:	8e 93       	st	-X, r24
    2eac:	12 97       	sbiw	r26, 0x02	; 2
    2eae:	2c c0       	rjmp	.+88     	; 0x2f08 <malloc+0x9c>
    2eb0:	90 93 eb 02 	sts	0x02EB, r25
    2eb4:	80 93 ea 02 	sts	0x02EA, r24
    2eb8:	27 c0       	rjmp	.+78     	; 0x2f08 <malloc+0x9c>
    2eba:	21 15       	cp	r18, r1
    2ebc:	31 05       	cpc	r19, r1
    2ebe:	31 f0       	breq	.+12     	; 0x2ecc <malloc+0x60>
    2ec0:	42 17       	cp	r20, r18
    2ec2:	53 07       	cpc	r21, r19
    2ec4:	18 f0       	brcs	.+6      	; 0x2ecc <malloc+0x60>
    2ec6:	a9 01       	movw	r20, r18
    2ec8:	db 01       	movw	r26, r22
    2eca:	01 c0       	rjmp	.+2      	; 0x2ece <malloc+0x62>
    2ecc:	ef 01       	movw	r28, r30
    2ece:	9a 01       	movw	r18, r20
    2ed0:	bd 01       	movw	r22, r26
    2ed2:	df 01       	movw	r26, r30
    2ed4:	02 80       	ldd	r0, Z+2	; 0x02
    2ed6:	f3 81       	ldd	r31, Z+3	; 0x03
    2ed8:	e0 2d       	mov	r30, r0
    2eda:	d7 cf       	rjmp	.-82     	; 0x2e8a <malloc+0x1e>
    2edc:	21 15       	cp	r18, r1
    2ede:	31 05       	cpc	r19, r1
    2ee0:	f9 f0       	breq	.+62     	; 0x2f20 <malloc+0xb4>
    2ee2:	28 1b       	sub	r18, r24
    2ee4:	39 0b       	sbc	r19, r25
    2ee6:	24 30       	cpi	r18, 0x04	; 4
    2ee8:	31 05       	cpc	r19, r1
    2eea:	80 f4       	brcc	.+32     	; 0x2f0c <malloc+0xa0>
    2eec:	8a 81       	ldd	r24, Y+2	; 0x02
    2eee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ef0:	61 15       	cp	r22, r1
    2ef2:	71 05       	cpc	r23, r1
    2ef4:	21 f0       	breq	.+8      	; 0x2efe <malloc+0x92>
    2ef6:	fb 01       	movw	r30, r22
    2ef8:	93 83       	std	Z+3, r25	; 0x03
    2efa:	82 83       	std	Z+2, r24	; 0x02
    2efc:	04 c0       	rjmp	.+8      	; 0x2f06 <malloc+0x9a>
    2efe:	90 93 eb 02 	sts	0x02EB, r25
    2f02:	80 93 ea 02 	sts	0x02EA, r24
    2f06:	fe 01       	movw	r30, r28
    2f08:	32 96       	adiw	r30, 0x02	; 2
    2f0a:	44 c0       	rjmp	.+136    	; 0x2f94 <malloc+0x128>
    2f0c:	fe 01       	movw	r30, r28
    2f0e:	e2 0f       	add	r30, r18
    2f10:	f3 1f       	adc	r31, r19
    2f12:	81 93       	st	Z+, r24
    2f14:	91 93       	st	Z+, r25
    2f16:	22 50       	subi	r18, 0x02	; 2
    2f18:	31 09       	sbc	r19, r1
    2f1a:	39 83       	std	Y+1, r19	; 0x01
    2f1c:	28 83       	st	Y, r18
    2f1e:	3a c0       	rjmp	.+116    	; 0x2f94 <malloc+0x128>
    2f20:	20 91 e8 02 	lds	r18, 0x02E8
    2f24:	30 91 e9 02 	lds	r19, 0x02E9
    2f28:	23 2b       	or	r18, r19
    2f2a:	41 f4       	brne	.+16     	; 0x2f3c <malloc+0xd0>
    2f2c:	20 91 02 01 	lds	r18, 0x0102
    2f30:	30 91 03 01 	lds	r19, 0x0103
    2f34:	30 93 e9 02 	sts	0x02E9, r19
    2f38:	20 93 e8 02 	sts	0x02E8, r18
    2f3c:	20 91 00 01 	lds	r18, 0x0100
    2f40:	30 91 01 01 	lds	r19, 0x0101
    2f44:	21 15       	cp	r18, r1
    2f46:	31 05       	cpc	r19, r1
    2f48:	41 f4       	brne	.+16     	; 0x2f5a <malloc+0xee>
    2f4a:	2d b7       	in	r18, 0x3d	; 61
    2f4c:	3e b7       	in	r19, 0x3e	; 62
    2f4e:	40 91 04 01 	lds	r20, 0x0104
    2f52:	50 91 05 01 	lds	r21, 0x0105
    2f56:	24 1b       	sub	r18, r20
    2f58:	35 0b       	sbc	r19, r21
    2f5a:	e0 91 e8 02 	lds	r30, 0x02E8
    2f5e:	f0 91 e9 02 	lds	r31, 0x02E9
    2f62:	e2 17       	cp	r30, r18
    2f64:	f3 07       	cpc	r31, r19
    2f66:	a0 f4       	brcc	.+40     	; 0x2f90 <malloc+0x124>
    2f68:	2e 1b       	sub	r18, r30
    2f6a:	3f 0b       	sbc	r19, r31
    2f6c:	28 17       	cp	r18, r24
    2f6e:	39 07       	cpc	r19, r25
    2f70:	78 f0       	brcs	.+30     	; 0x2f90 <malloc+0x124>
    2f72:	ac 01       	movw	r20, r24
    2f74:	4e 5f       	subi	r20, 0xFE	; 254
    2f76:	5f 4f       	sbci	r21, 0xFF	; 255
    2f78:	24 17       	cp	r18, r20
    2f7a:	35 07       	cpc	r19, r21
    2f7c:	48 f0       	brcs	.+18     	; 0x2f90 <malloc+0x124>
    2f7e:	4e 0f       	add	r20, r30
    2f80:	5f 1f       	adc	r21, r31
    2f82:	50 93 e9 02 	sts	0x02E9, r21
    2f86:	40 93 e8 02 	sts	0x02E8, r20
    2f8a:	81 93       	st	Z+, r24
    2f8c:	91 93       	st	Z+, r25
    2f8e:	02 c0       	rjmp	.+4      	; 0x2f94 <malloc+0x128>
    2f90:	e0 e0       	ldi	r30, 0x00	; 0
    2f92:	f0 e0       	ldi	r31, 0x00	; 0
    2f94:	cf 01       	movw	r24, r30
    2f96:	df 91       	pop	r29
    2f98:	cf 91       	pop	r28
    2f9a:	08 95       	ret

00002f9c <free>:
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <free+0xa>
    2fa4:	87 c0       	rjmp	.+270    	; 0x30b4 <free+0x118>
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	32 97       	sbiw	r30, 0x02	; 2
    2faa:	13 82       	std	Z+3, r1	; 0x03
    2fac:	12 82       	std	Z+2, r1	; 0x02
    2fae:	c0 91 ea 02 	lds	r28, 0x02EA
    2fb2:	d0 91 eb 02 	lds	r29, 0x02EB
    2fb6:	20 97       	sbiw	r28, 0x00	; 0
    2fb8:	81 f4       	brne	.+32     	; 0x2fda <free+0x3e>
    2fba:	20 81       	ld	r18, Z
    2fbc:	31 81       	ldd	r19, Z+1	; 0x01
    2fbe:	28 0f       	add	r18, r24
    2fc0:	39 1f       	adc	r19, r25
    2fc2:	80 91 e8 02 	lds	r24, 0x02E8
    2fc6:	90 91 e9 02 	lds	r25, 0x02E9
    2fca:	82 17       	cp	r24, r18
    2fcc:	93 07       	cpc	r25, r19
    2fce:	79 f5       	brne	.+94     	; 0x302e <free+0x92>
    2fd0:	f0 93 e9 02 	sts	0x02E9, r31
    2fd4:	e0 93 e8 02 	sts	0x02E8, r30
    2fd8:	6d c0       	rjmp	.+218    	; 0x30b4 <free+0x118>
    2fda:	de 01       	movw	r26, r28
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	ae 17       	cp	r26, r30
    2fe2:	bf 07       	cpc	r27, r31
    2fe4:	50 f4       	brcc	.+20     	; 0x2ffa <free+0x5e>
    2fe6:	12 96       	adiw	r26, 0x02	; 2
    2fe8:	4d 91       	ld	r20, X+
    2fea:	5c 91       	ld	r21, X
    2fec:	13 97       	sbiw	r26, 0x03	; 3
    2fee:	9d 01       	movw	r18, r26
    2ff0:	41 15       	cp	r20, r1
    2ff2:	51 05       	cpc	r21, r1
    2ff4:	09 f1       	breq	.+66     	; 0x3038 <free+0x9c>
    2ff6:	da 01       	movw	r26, r20
    2ff8:	f3 cf       	rjmp	.-26     	; 0x2fe0 <free+0x44>
    2ffa:	b3 83       	std	Z+3, r27	; 0x03
    2ffc:	a2 83       	std	Z+2, r26	; 0x02
    2ffe:	40 81       	ld	r20, Z
    3000:	51 81       	ldd	r21, Z+1	; 0x01
    3002:	84 0f       	add	r24, r20
    3004:	95 1f       	adc	r25, r21
    3006:	8a 17       	cp	r24, r26
    3008:	9b 07       	cpc	r25, r27
    300a:	71 f4       	brne	.+28     	; 0x3028 <free+0x8c>
    300c:	8d 91       	ld	r24, X+
    300e:	9c 91       	ld	r25, X
    3010:	11 97       	sbiw	r26, 0x01	; 1
    3012:	84 0f       	add	r24, r20
    3014:	95 1f       	adc	r25, r21
    3016:	02 96       	adiw	r24, 0x02	; 2
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	12 96       	adiw	r26, 0x02	; 2
    301e:	8d 91       	ld	r24, X+
    3020:	9c 91       	ld	r25, X
    3022:	13 97       	sbiw	r26, 0x03	; 3
    3024:	93 83       	std	Z+3, r25	; 0x03
    3026:	82 83       	std	Z+2, r24	; 0x02
    3028:	21 15       	cp	r18, r1
    302a:	31 05       	cpc	r19, r1
    302c:	29 f4       	brne	.+10     	; 0x3038 <free+0x9c>
    302e:	f0 93 eb 02 	sts	0x02EB, r31
    3032:	e0 93 ea 02 	sts	0x02EA, r30
    3036:	3e c0       	rjmp	.+124    	; 0x30b4 <free+0x118>
    3038:	d9 01       	movw	r26, r18
    303a:	13 96       	adiw	r26, 0x03	; 3
    303c:	fc 93       	st	X, r31
    303e:	ee 93       	st	-X, r30
    3040:	12 97       	sbiw	r26, 0x02	; 2
    3042:	4d 91       	ld	r20, X+
    3044:	5d 91       	ld	r21, X+
    3046:	a4 0f       	add	r26, r20
    3048:	b5 1f       	adc	r27, r21
    304a:	ea 17       	cp	r30, r26
    304c:	fb 07       	cpc	r31, r27
    304e:	79 f4       	brne	.+30     	; 0x306e <free+0xd2>
    3050:	80 81       	ld	r24, Z
    3052:	91 81       	ldd	r25, Z+1	; 0x01
    3054:	84 0f       	add	r24, r20
    3056:	95 1f       	adc	r25, r21
    3058:	02 96       	adiw	r24, 0x02	; 2
    305a:	d9 01       	movw	r26, r18
    305c:	11 96       	adiw	r26, 0x01	; 1
    305e:	9c 93       	st	X, r25
    3060:	8e 93       	st	-X, r24
    3062:	82 81       	ldd	r24, Z+2	; 0x02
    3064:	93 81       	ldd	r25, Z+3	; 0x03
    3066:	13 96       	adiw	r26, 0x03	; 3
    3068:	9c 93       	st	X, r25
    306a:	8e 93       	st	-X, r24
    306c:	12 97       	sbiw	r26, 0x02	; 2
    306e:	e0 e0       	ldi	r30, 0x00	; 0
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	8a 81       	ldd	r24, Y+2	; 0x02
    3074:	9b 81       	ldd	r25, Y+3	; 0x03
    3076:	00 97       	sbiw	r24, 0x00	; 0
    3078:	19 f0       	breq	.+6      	; 0x3080 <free+0xe4>
    307a:	fe 01       	movw	r30, r28
    307c:	ec 01       	movw	r28, r24
    307e:	f9 cf       	rjmp	.-14     	; 0x3072 <free+0xd6>
    3080:	ce 01       	movw	r24, r28
    3082:	02 96       	adiw	r24, 0x02	; 2
    3084:	28 81       	ld	r18, Y
    3086:	39 81       	ldd	r19, Y+1	; 0x01
    3088:	82 0f       	add	r24, r18
    308a:	93 1f       	adc	r25, r19
    308c:	20 91 e8 02 	lds	r18, 0x02E8
    3090:	30 91 e9 02 	lds	r19, 0x02E9
    3094:	28 17       	cp	r18, r24
    3096:	39 07       	cpc	r19, r25
    3098:	69 f4       	brne	.+26     	; 0x30b4 <free+0x118>
    309a:	30 97       	sbiw	r30, 0x00	; 0
    309c:	29 f4       	brne	.+10     	; 0x30a8 <free+0x10c>
    309e:	10 92 eb 02 	sts	0x02EB, r1
    30a2:	10 92 ea 02 	sts	0x02EA, r1
    30a6:	02 c0       	rjmp	.+4      	; 0x30ac <free+0x110>
    30a8:	13 82       	std	Z+3, r1	; 0x03
    30aa:	12 82       	std	Z+2, r1	; 0x02
    30ac:	d0 93 e9 02 	sts	0x02E9, r29
    30b0:	c0 93 e8 02 	sts	0x02E8, r28
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	08 95       	ret

000030ba <do_rand>:
    30ba:	8f 92       	push	r8
    30bc:	9f 92       	push	r9
    30be:	af 92       	push	r10
    30c0:	bf 92       	push	r11
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	cf 93       	push	r28
    30cc:	df 93       	push	r29
    30ce:	ec 01       	movw	r28, r24
    30d0:	68 81       	ld	r22, Y
    30d2:	79 81       	ldd	r23, Y+1	; 0x01
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	9b 81       	ldd	r25, Y+3	; 0x03
    30d8:	61 15       	cp	r22, r1
    30da:	71 05       	cpc	r23, r1
    30dc:	81 05       	cpc	r24, r1
    30de:	91 05       	cpc	r25, r1
    30e0:	21 f4       	brne	.+8      	; 0x30ea <do_rand+0x30>
    30e2:	64 e2       	ldi	r22, 0x24	; 36
    30e4:	79 ed       	ldi	r23, 0xD9	; 217
    30e6:	8b e5       	ldi	r24, 0x5B	; 91
    30e8:	97 e0       	ldi	r25, 0x07	; 7
    30ea:	2d e1       	ldi	r18, 0x1D	; 29
    30ec:	33 ef       	ldi	r19, 0xF3	; 243
    30ee:	41 e0       	ldi	r20, 0x01	; 1
    30f0:	50 e0       	ldi	r21, 0x00	; 0
    30f2:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__divmodsi4>
    30f6:	49 01       	movw	r8, r18
    30f8:	5a 01       	movw	r10, r20
    30fa:	9b 01       	movw	r18, r22
    30fc:	ac 01       	movw	r20, r24
    30fe:	a7 ea       	ldi	r26, 0xA7	; 167
    3100:	b1 e4       	ldi	r27, 0x41	; 65
    3102:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__muluhisi3>
    3106:	6b 01       	movw	r12, r22
    3108:	7c 01       	movw	r14, r24
    310a:	ac ee       	ldi	r26, 0xEC	; 236
    310c:	b4 ef       	ldi	r27, 0xF4	; 244
    310e:	a5 01       	movw	r20, r10
    3110:	94 01       	movw	r18, r8
    3112:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__mulohisi3>
    3116:	c6 0e       	add	r12, r22
    3118:	d7 1e       	adc	r13, r23
    311a:	e8 1e       	adc	r14, r24
    311c:	f9 1e       	adc	r15, r25
    311e:	f7 fe       	sbrs	r15, 7
    3120:	06 c0       	rjmp	.+12     	; 0x312e <do_rand+0x74>
    3122:	81 e0       	ldi	r24, 0x01	; 1
    3124:	c8 1a       	sub	r12, r24
    3126:	d1 08       	sbc	r13, r1
    3128:	e1 08       	sbc	r14, r1
    312a:	80 e8       	ldi	r24, 0x80	; 128
    312c:	f8 0a       	sbc	r15, r24
    312e:	c8 82       	st	Y, r12
    3130:	d9 82       	std	Y+1, r13	; 0x01
    3132:	ea 82       	std	Y+2, r14	; 0x02
    3134:	fb 82       	std	Y+3, r15	; 0x03
    3136:	c6 01       	movw	r24, r12
    3138:	9f 77       	andi	r25, 0x7F	; 127
    313a:	df 91       	pop	r29
    313c:	cf 91       	pop	r28
    313e:	ff 90       	pop	r15
    3140:	ef 90       	pop	r14
    3142:	df 90       	pop	r13
    3144:	cf 90       	pop	r12
    3146:	bf 90       	pop	r11
    3148:	af 90       	pop	r10
    314a:	9f 90       	pop	r9
    314c:	8f 90       	pop	r8
    314e:	08 95       	ret

00003150 <rand_r>:
    3150:	0e 94 5d 18 	call	0x30ba	; 0x30ba <do_rand>
    3154:	08 95       	ret

00003156 <rand>:
    3156:	86 e0       	ldi	r24, 0x06	; 6
    3158:	91 e0       	ldi	r25, 0x01	; 1
    315a:	0e 94 5d 18 	call	0x30ba	; 0x30ba <do_rand>
    315e:	08 95       	ret

00003160 <srand>:
    3160:	a0 e0       	ldi	r26, 0x00	; 0
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	80 93 06 01 	sts	0x0106, r24
    3168:	90 93 07 01 	sts	0x0107, r25
    316c:	a0 93 08 01 	sts	0x0108, r26
    3170:	b0 93 09 01 	sts	0x0109, r27
    3174:	08 95       	ret

00003176 <fdevopen>:
    3176:	0f 93       	push	r16
    3178:	1f 93       	push	r17
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	ec 01       	movw	r28, r24
    3180:	8b 01       	movw	r16, r22
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	31 f4       	brne	.+12     	; 0x3192 <fdevopen+0x1c>
    3186:	61 15       	cp	r22, r1
    3188:	71 05       	cpc	r23, r1
    318a:	19 f4       	brne	.+6      	; 0x3192 <fdevopen+0x1c>
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	38 c0       	rjmp	.+112    	; 0x3202 <fdevopen+0x8c>
    3192:	6e e0       	ldi	r22, 0x0E	; 14
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 0e 1b 	call	0x361c	; 0x361c <calloc>
    319e:	fc 01       	movw	r30, r24
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	a1 f3       	breq	.-24     	; 0x318c <fdevopen+0x16>
    31a4:	80 e8       	ldi	r24, 0x80	; 128
    31a6:	83 83       	std	Z+3, r24	; 0x03
    31a8:	01 15       	cp	r16, r1
    31aa:	11 05       	cpc	r17, r1
    31ac:	71 f0       	breq	.+28     	; 0x31ca <fdevopen+0x54>
    31ae:	13 87       	std	Z+11, r17	; 0x0b
    31b0:	02 87       	std	Z+10, r16	; 0x0a
    31b2:	81 e8       	ldi	r24, 0x81	; 129
    31b4:	83 83       	std	Z+3, r24	; 0x03
    31b6:	80 91 ec 02 	lds	r24, 0x02EC
    31ba:	90 91 ed 02 	lds	r25, 0x02ED
    31be:	89 2b       	or	r24, r25
    31c0:	21 f4       	brne	.+8      	; 0x31ca <fdevopen+0x54>
    31c2:	f0 93 ed 02 	sts	0x02ED, r31
    31c6:	e0 93 ec 02 	sts	0x02EC, r30
    31ca:	20 97       	sbiw	r28, 0x00	; 0
    31cc:	c9 f0       	breq	.+50     	; 0x3200 <fdevopen+0x8a>
    31ce:	d1 87       	std	Z+9, r29	; 0x09
    31d0:	c0 87       	std	Z+8, r28	; 0x08
    31d2:	83 81       	ldd	r24, Z+3	; 0x03
    31d4:	82 60       	ori	r24, 0x02	; 2
    31d6:	83 83       	std	Z+3, r24	; 0x03
    31d8:	80 91 ee 02 	lds	r24, 0x02EE
    31dc:	90 91 ef 02 	lds	r25, 0x02EF
    31e0:	89 2b       	or	r24, r25
    31e2:	71 f4       	brne	.+28     	; 0x3200 <fdevopen+0x8a>
    31e4:	f0 93 ef 02 	sts	0x02EF, r31
    31e8:	e0 93 ee 02 	sts	0x02EE, r30
    31ec:	80 91 f0 02 	lds	r24, 0x02F0
    31f0:	90 91 f1 02 	lds	r25, 0x02F1
    31f4:	89 2b       	or	r24, r25
    31f6:	21 f4       	brne	.+8      	; 0x3200 <fdevopen+0x8a>
    31f8:	f0 93 f1 02 	sts	0x02F1, r31
    31fc:	e0 93 f0 02 	sts	0x02F0, r30
    3200:	cf 01       	movw	r24, r30
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	08 95       	ret

0000320c <printf>:
    320c:	a0 e0       	ldi	r26, 0x00	; 0
    320e:	b0 e0       	ldi	r27, 0x00	; 0
    3210:	ec e0       	ldi	r30, 0x0C	; 12
    3212:	f9 e1       	ldi	r31, 0x19	; 25
    3214:	0c 94 fa 1b 	jmp	0x37f4	; 0x37f4 <__prologue_saves__+0x20>
    3218:	fe 01       	movw	r30, r28
    321a:	35 96       	adiw	r30, 0x05	; 5
    321c:	61 91       	ld	r22, Z+
    321e:	71 91       	ld	r23, Z+
    3220:	af 01       	movw	r20, r30
    3222:	80 91 ee 02 	lds	r24, 0x02EE
    3226:	90 91 ef 02 	lds	r25, 0x02EF
    322a:	0e 94 3c 19 	call	0x3278	; 0x3278 <vfprintf>
    322e:	e2 e0       	ldi	r30, 0x02	; 2
    3230:	0c 94 16 1c 	jmp	0x382c	; 0x382c <__epilogue_restores__+0x20>

00003234 <sprintf>:
    3234:	ae e0       	ldi	r26, 0x0E	; 14
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	e0 e2       	ldi	r30, 0x20	; 32
    323a:	f9 e1       	ldi	r31, 0x19	; 25
    323c:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__prologue_saves__+0x1c>
    3240:	0d 89       	ldd	r16, Y+21	; 0x15
    3242:	1e 89       	ldd	r17, Y+22	; 0x16
    3244:	86 e0       	ldi	r24, 0x06	; 6
    3246:	8c 83       	std	Y+4, r24	; 0x04
    3248:	1a 83       	std	Y+2, r17	; 0x02
    324a:	09 83       	std	Y+1, r16	; 0x01
    324c:	8f ef       	ldi	r24, 0xFF	; 255
    324e:	9f e7       	ldi	r25, 0x7F	; 127
    3250:	9e 83       	std	Y+6, r25	; 0x06
    3252:	8d 83       	std	Y+5, r24	; 0x05
    3254:	ae 01       	movw	r20, r28
    3256:	47 5e       	subi	r20, 0xE7	; 231
    3258:	5f 4f       	sbci	r21, 0xFF	; 255
    325a:	6f 89       	ldd	r22, Y+23	; 0x17
    325c:	78 8d       	ldd	r23, Y+24	; 0x18
    325e:	ce 01       	movw	r24, r28
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	0e 94 3c 19 	call	0x3278	; 0x3278 <vfprintf>
    3266:	ef 81       	ldd	r30, Y+7	; 0x07
    3268:	f8 85       	ldd	r31, Y+8	; 0x08
    326a:	e0 0f       	add	r30, r16
    326c:	f1 1f       	adc	r31, r17
    326e:	10 82       	st	Z, r1
    3270:	2e 96       	adiw	r28, 0x0e	; 14
    3272:	e4 e0       	ldi	r30, 0x04	; 4
    3274:	0c 94 14 1c 	jmp	0x3828	; 0x3828 <__epilogue_restores__+0x1c>

00003278 <vfprintf>:
    3278:	ac e0       	ldi	r26, 0x0C	; 12
    327a:	b0 e0       	ldi	r27, 0x00	; 0
    327c:	e2 e4       	ldi	r30, 0x42	; 66
    327e:	f9 e1       	ldi	r31, 0x19	; 25
    3280:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <__prologue_saves__>
    3284:	7c 01       	movw	r14, r24
    3286:	6b 01       	movw	r12, r22
    3288:	8a 01       	movw	r16, r20
    328a:	fc 01       	movw	r30, r24
    328c:	17 82       	std	Z+7, r1	; 0x07
    328e:	16 82       	std	Z+6, r1	; 0x06
    3290:	83 81       	ldd	r24, Z+3	; 0x03
    3292:	81 ff       	sbrs	r24, 1
    3294:	bd c1       	rjmp	.+890    	; 0x3610 <vfprintf+0x398>
    3296:	ce 01       	movw	r24, r28
    3298:	01 96       	adiw	r24, 0x01	; 1
    329a:	4c 01       	movw	r8, r24
    329c:	f7 01       	movw	r30, r14
    329e:	93 81       	ldd	r25, Z+3	; 0x03
    32a0:	f6 01       	movw	r30, r12
    32a2:	93 fd       	sbrc	r25, 3
    32a4:	85 91       	lpm	r24, Z+
    32a6:	93 ff       	sbrs	r25, 3
    32a8:	81 91       	ld	r24, Z+
    32aa:	6f 01       	movw	r12, r30
    32ac:	88 23       	and	r24, r24
    32ae:	09 f4       	brne	.+2      	; 0x32b2 <vfprintf+0x3a>
    32b0:	ab c1       	rjmp	.+854    	; 0x3608 <vfprintf+0x390>
    32b2:	85 32       	cpi	r24, 0x25	; 37
    32b4:	39 f4       	brne	.+14     	; 0x32c4 <vfprintf+0x4c>
    32b6:	93 fd       	sbrc	r25, 3
    32b8:	85 91       	lpm	r24, Z+
    32ba:	93 ff       	sbrs	r25, 3
    32bc:	81 91       	ld	r24, Z+
    32be:	6f 01       	movw	r12, r30
    32c0:	85 32       	cpi	r24, 0x25	; 37
    32c2:	29 f4       	brne	.+10     	; 0x32ce <vfprintf+0x56>
    32c4:	b7 01       	movw	r22, r14
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    32cc:	e7 cf       	rjmp	.-50     	; 0x329c <vfprintf+0x24>
    32ce:	51 2c       	mov	r5, r1
    32d0:	31 2c       	mov	r3, r1
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	20 32       	cpi	r18, 0x20	; 32
    32d6:	a0 f4       	brcc	.+40     	; 0x3300 <vfprintf+0x88>
    32d8:	8b 32       	cpi	r24, 0x2B	; 43
    32da:	69 f0       	breq	.+26     	; 0x32f6 <vfprintf+0x7e>
    32dc:	30 f4       	brcc	.+12     	; 0x32ea <vfprintf+0x72>
    32de:	80 32       	cpi	r24, 0x20	; 32
    32e0:	59 f0       	breq	.+22     	; 0x32f8 <vfprintf+0x80>
    32e2:	83 32       	cpi	r24, 0x23	; 35
    32e4:	69 f4       	brne	.+26     	; 0x3300 <vfprintf+0x88>
    32e6:	20 61       	ori	r18, 0x10	; 16
    32e8:	2c c0       	rjmp	.+88     	; 0x3342 <vfprintf+0xca>
    32ea:	8d 32       	cpi	r24, 0x2D	; 45
    32ec:	39 f0       	breq	.+14     	; 0x32fc <vfprintf+0x84>
    32ee:	80 33       	cpi	r24, 0x30	; 48
    32f0:	39 f4       	brne	.+14     	; 0x3300 <vfprintf+0x88>
    32f2:	21 60       	ori	r18, 0x01	; 1
    32f4:	26 c0       	rjmp	.+76     	; 0x3342 <vfprintf+0xca>
    32f6:	22 60       	ori	r18, 0x02	; 2
    32f8:	24 60       	ori	r18, 0x04	; 4
    32fa:	23 c0       	rjmp	.+70     	; 0x3342 <vfprintf+0xca>
    32fc:	28 60       	ori	r18, 0x08	; 8
    32fe:	21 c0       	rjmp	.+66     	; 0x3342 <vfprintf+0xca>
    3300:	27 fd       	sbrc	r18, 7
    3302:	27 c0       	rjmp	.+78     	; 0x3352 <vfprintf+0xda>
    3304:	30 ed       	ldi	r19, 0xD0	; 208
    3306:	38 0f       	add	r19, r24
    3308:	3a 30       	cpi	r19, 0x0A	; 10
    330a:	78 f4       	brcc	.+30     	; 0x332a <vfprintf+0xb2>
    330c:	26 ff       	sbrs	r18, 6
    330e:	06 c0       	rjmp	.+12     	; 0x331c <vfprintf+0xa4>
    3310:	fa e0       	ldi	r31, 0x0A	; 10
    3312:	5f 9e       	mul	r5, r31
    3314:	30 0d       	add	r19, r0
    3316:	11 24       	eor	r1, r1
    3318:	53 2e       	mov	r5, r19
    331a:	13 c0       	rjmp	.+38     	; 0x3342 <vfprintf+0xca>
    331c:	8a e0       	ldi	r24, 0x0A	; 10
    331e:	38 9e       	mul	r3, r24
    3320:	30 0d       	add	r19, r0
    3322:	11 24       	eor	r1, r1
    3324:	33 2e       	mov	r3, r19
    3326:	20 62       	ori	r18, 0x20	; 32
    3328:	0c c0       	rjmp	.+24     	; 0x3342 <vfprintf+0xca>
    332a:	8e 32       	cpi	r24, 0x2E	; 46
    332c:	21 f4       	brne	.+8      	; 0x3336 <vfprintf+0xbe>
    332e:	26 fd       	sbrc	r18, 6
    3330:	6b c1       	rjmp	.+726    	; 0x3608 <vfprintf+0x390>
    3332:	20 64       	ori	r18, 0x40	; 64
    3334:	06 c0       	rjmp	.+12     	; 0x3342 <vfprintf+0xca>
    3336:	8c 36       	cpi	r24, 0x6C	; 108
    3338:	11 f4       	brne	.+4      	; 0x333e <vfprintf+0xc6>
    333a:	20 68       	ori	r18, 0x80	; 128
    333c:	02 c0       	rjmp	.+4      	; 0x3342 <vfprintf+0xca>
    333e:	88 36       	cpi	r24, 0x68	; 104
    3340:	41 f4       	brne	.+16     	; 0x3352 <vfprintf+0xda>
    3342:	f6 01       	movw	r30, r12
    3344:	93 fd       	sbrc	r25, 3
    3346:	85 91       	lpm	r24, Z+
    3348:	93 ff       	sbrs	r25, 3
    334a:	81 91       	ld	r24, Z+
    334c:	6f 01       	movw	r12, r30
    334e:	81 11       	cpse	r24, r1
    3350:	c1 cf       	rjmp	.-126    	; 0x32d4 <vfprintf+0x5c>
    3352:	98 2f       	mov	r25, r24
    3354:	9f 7d       	andi	r25, 0xDF	; 223
    3356:	95 54       	subi	r25, 0x45	; 69
    3358:	93 30       	cpi	r25, 0x03	; 3
    335a:	28 f4       	brcc	.+10     	; 0x3366 <vfprintf+0xee>
    335c:	0c 5f       	subi	r16, 0xFC	; 252
    335e:	1f 4f       	sbci	r17, 0xFF	; 255
    3360:	ff e3       	ldi	r31, 0x3F	; 63
    3362:	f9 83       	std	Y+1, r31	; 0x01
    3364:	0d c0       	rjmp	.+26     	; 0x3380 <vfprintf+0x108>
    3366:	83 36       	cpi	r24, 0x63	; 99
    3368:	31 f0       	breq	.+12     	; 0x3376 <vfprintf+0xfe>
    336a:	83 37       	cpi	r24, 0x73	; 115
    336c:	71 f0       	breq	.+28     	; 0x338a <vfprintf+0x112>
    336e:	83 35       	cpi	r24, 0x53	; 83
    3370:	09 f0       	breq	.+2      	; 0x3374 <vfprintf+0xfc>
    3372:	5b c0       	rjmp	.+182    	; 0x342a <vfprintf+0x1b2>
    3374:	22 c0       	rjmp	.+68     	; 0x33ba <vfprintf+0x142>
    3376:	f8 01       	movw	r30, r16
    3378:	80 81       	ld	r24, Z
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	0e 5f       	subi	r16, 0xFE	; 254
    337e:	1f 4f       	sbci	r17, 0xFF	; 255
    3380:	44 24       	eor	r4, r4
    3382:	43 94       	inc	r4
    3384:	51 2c       	mov	r5, r1
    3386:	54 01       	movw	r10, r8
    3388:	15 c0       	rjmp	.+42     	; 0x33b4 <vfprintf+0x13c>
    338a:	38 01       	movw	r6, r16
    338c:	f2 e0       	ldi	r31, 0x02	; 2
    338e:	6f 0e       	add	r6, r31
    3390:	71 1c       	adc	r7, r1
    3392:	f8 01       	movw	r30, r16
    3394:	a0 80       	ld	r10, Z
    3396:	b1 80       	ldd	r11, Z+1	; 0x01
    3398:	26 ff       	sbrs	r18, 6
    339a:	03 c0       	rjmp	.+6      	; 0x33a2 <vfprintf+0x12a>
    339c:	65 2d       	mov	r22, r5
    339e:	70 e0       	ldi	r23, 0x00	; 0
    33a0:	02 c0       	rjmp	.+4      	; 0x33a6 <vfprintf+0x12e>
    33a2:	6f ef       	ldi	r22, 0xFF	; 255
    33a4:	7f ef       	ldi	r23, 0xFF	; 255
    33a6:	c5 01       	movw	r24, r10
    33a8:	2c 87       	std	Y+12, r18	; 0x0c
    33aa:	0e 94 3c 1b 	call	0x3678	; 0x3678 <strnlen>
    33ae:	2c 01       	movw	r4, r24
    33b0:	83 01       	movw	r16, r6
    33b2:	2c 85       	ldd	r18, Y+12	; 0x0c
    33b4:	2f 77       	andi	r18, 0x7F	; 127
    33b6:	22 2e       	mov	r2, r18
    33b8:	17 c0       	rjmp	.+46     	; 0x33e8 <vfprintf+0x170>
    33ba:	38 01       	movw	r6, r16
    33bc:	f2 e0       	ldi	r31, 0x02	; 2
    33be:	6f 0e       	add	r6, r31
    33c0:	71 1c       	adc	r7, r1
    33c2:	f8 01       	movw	r30, r16
    33c4:	a0 80       	ld	r10, Z
    33c6:	b1 80       	ldd	r11, Z+1	; 0x01
    33c8:	26 ff       	sbrs	r18, 6
    33ca:	03 c0       	rjmp	.+6      	; 0x33d2 <vfprintf+0x15a>
    33cc:	65 2d       	mov	r22, r5
    33ce:	70 e0       	ldi	r23, 0x00	; 0
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <vfprintf+0x15e>
    33d2:	6f ef       	ldi	r22, 0xFF	; 255
    33d4:	7f ef       	ldi	r23, 0xFF	; 255
    33d6:	c5 01       	movw	r24, r10
    33d8:	2c 87       	std	Y+12, r18	; 0x0c
    33da:	0e 94 2a 1b 	call	0x3654	; 0x3654 <strnlen_P>
    33de:	2c 01       	movw	r4, r24
    33e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    33e2:	20 68       	ori	r18, 0x80	; 128
    33e4:	22 2e       	mov	r2, r18
    33e6:	83 01       	movw	r16, r6
    33e8:	23 fc       	sbrc	r2, 3
    33ea:	1b c0       	rjmp	.+54     	; 0x3422 <vfprintf+0x1aa>
    33ec:	83 2d       	mov	r24, r3
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	48 16       	cp	r4, r24
    33f2:	59 06       	cpc	r5, r25
    33f4:	b0 f4       	brcc	.+44     	; 0x3422 <vfprintf+0x1aa>
    33f6:	b7 01       	movw	r22, r14
    33f8:	80 e2       	ldi	r24, 0x20	; 32
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    3400:	3a 94       	dec	r3
    3402:	f4 cf       	rjmp	.-24     	; 0x33ec <vfprintf+0x174>
    3404:	f5 01       	movw	r30, r10
    3406:	27 fc       	sbrc	r2, 7
    3408:	85 91       	lpm	r24, Z+
    340a:	27 fe       	sbrs	r2, 7
    340c:	81 91       	ld	r24, Z+
    340e:	5f 01       	movw	r10, r30
    3410:	b7 01       	movw	r22, r14
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    3418:	31 10       	cpse	r3, r1
    341a:	3a 94       	dec	r3
    341c:	f1 e0       	ldi	r31, 0x01	; 1
    341e:	4f 1a       	sub	r4, r31
    3420:	51 08       	sbc	r5, r1
    3422:	41 14       	cp	r4, r1
    3424:	51 04       	cpc	r5, r1
    3426:	71 f7       	brne	.-36     	; 0x3404 <vfprintf+0x18c>
    3428:	e5 c0       	rjmp	.+458    	; 0x35f4 <vfprintf+0x37c>
    342a:	84 36       	cpi	r24, 0x64	; 100
    342c:	11 f0       	breq	.+4      	; 0x3432 <vfprintf+0x1ba>
    342e:	89 36       	cpi	r24, 0x69	; 105
    3430:	39 f5       	brne	.+78     	; 0x3480 <vfprintf+0x208>
    3432:	f8 01       	movw	r30, r16
    3434:	27 ff       	sbrs	r18, 7
    3436:	07 c0       	rjmp	.+14     	; 0x3446 <vfprintf+0x1ce>
    3438:	60 81       	ld	r22, Z
    343a:	71 81       	ldd	r23, Z+1	; 0x01
    343c:	82 81       	ldd	r24, Z+2	; 0x02
    343e:	93 81       	ldd	r25, Z+3	; 0x03
    3440:	0c 5f       	subi	r16, 0xFC	; 252
    3442:	1f 4f       	sbci	r17, 0xFF	; 255
    3444:	08 c0       	rjmp	.+16     	; 0x3456 <vfprintf+0x1de>
    3446:	60 81       	ld	r22, Z
    3448:	71 81       	ldd	r23, Z+1	; 0x01
    344a:	88 27       	eor	r24, r24
    344c:	77 fd       	sbrc	r23, 7
    344e:	80 95       	com	r24
    3450:	98 2f       	mov	r25, r24
    3452:	0e 5f       	subi	r16, 0xFE	; 254
    3454:	1f 4f       	sbci	r17, 0xFF	; 255
    3456:	2f 76       	andi	r18, 0x6F	; 111
    3458:	b2 2e       	mov	r11, r18
    345a:	97 ff       	sbrs	r25, 7
    345c:	09 c0       	rjmp	.+18     	; 0x3470 <vfprintf+0x1f8>
    345e:	90 95       	com	r25
    3460:	80 95       	com	r24
    3462:	70 95       	com	r23
    3464:	61 95       	neg	r22
    3466:	7f 4f       	sbci	r23, 0xFF	; 255
    3468:	8f 4f       	sbci	r24, 0xFF	; 255
    346a:	9f 4f       	sbci	r25, 0xFF	; 255
    346c:	20 68       	ori	r18, 0x80	; 128
    346e:	b2 2e       	mov	r11, r18
    3470:	2a e0       	ldi	r18, 0x0A	; 10
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	a4 01       	movw	r20, r8
    3476:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__ultoa_invert>
    347a:	a8 2e       	mov	r10, r24
    347c:	a8 18       	sub	r10, r8
    347e:	44 c0       	rjmp	.+136    	; 0x3508 <vfprintf+0x290>
    3480:	85 37       	cpi	r24, 0x75	; 117
    3482:	29 f4       	brne	.+10     	; 0x348e <vfprintf+0x216>
    3484:	2f 7e       	andi	r18, 0xEF	; 239
    3486:	b2 2e       	mov	r11, r18
    3488:	2a e0       	ldi	r18, 0x0A	; 10
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	25 c0       	rjmp	.+74     	; 0x34d8 <vfprintf+0x260>
    348e:	f2 2f       	mov	r31, r18
    3490:	f9 7f       	andi	r31, 0xF9	; 249
    3492:	bf 2e       	mov	r11, r31
    3494:	8f 36       	cpi	r24, 0x6F	; 111
    3496:	c1 f0       	breq	.+48     	; 0x34c8 <vfprintf+0x250>
    3498:	18 f4       	brcc	.+6      	; 0x34a0 <vfprintf+0x228>
    349a:	88 35       	cpi	r24, 0x58	; 88
    349c:	79 f0       	breq	.+30     	; 0x34bc <vfprintf+0x244>
    349e:	b4 c0       	rjmp	.+360    	; 0x3608 <vfprintf+0x390>
    34a0:	80 37       	cpi	r24, 0x70	; 112
    34a2:	19 f0       	breq	.+6      	; 0x34aa <vfprintf+0x232>
    34a4:	88 37       	cpi	r24, 0x78	; 120
    34a6:	21 f0       	breq	.+8      	; 0x34b0 <vfprintf+0x238>
    34a8:	af c0       	rjmp	.+350    	; 0x3608 <vfprintf+0x390>
    34aa:	2f 2f       	mov	r18, r31
    34ac:	20 61       	ori	r18, 0x10	; 16
    34ae:	b2 2e       	mov	r11, r18
    34b0:	b4 fe       	sbrs	r11, 4
    34b2:	0d c0       	rjmp	.+26     	; 0x34ce <vfprintf+0x256>
    34b4:	8b 2d       	mov	r24, r11
    34b6:	84 60       	ori	r24, 0x04	; 4
    34b8:	b8 2e       	mov	r11, r24
    34ba:	09 c0       	rjmp	.+18     	; 0x34ce <vfprintf+0x256>
    34bc:	24 ff       	sbrs	r18, 4
    34be:	0a c0       	rjmp	.+20     	; 0x34d4 <vfprintf+0x25c>
    34c0:	9f 2f       	mov	r25, r31
    34c2:	96 60       	ori	r25, 0x06	; 6
    34c4:	b9 2e       	mov	r11, r25
    34c6:	06 c0       	rjmp	.+12     	; 0x34d4 <vfprintf+0x25c>
    34c8:	28 e0       	ldi	r18, 0x08	; 8
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	05 c0       	rjmp	.+10     	; 0x34d8 <vfprintf+0x260>
    34ce:	20 e1       	ldi	r18, 0x10	; 16
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <vfprintf+0x260>
    34d4:	20 e1       	ldi	r18, 0x10	; 16
    34d6:	32 e0       	ldi	r19, 0x02	; 2
    34d8:	f8 01       	movw	r30, r16
    34da:	b7 fe       	sbrs	r11, 7
    34dc:	07 c0       	rjmp	.+14     	; 0x34ec <vfprintf+0x274>
    34de:	60 81       	ld	r22, Z
    34e0:	71 81       	ldd	r23, Z+1	; 0x01
    34e2:	82 81       	ldd	r24, Z+2	; 0x02
    34e4:	93 81       	ldd	r25, Z+3	; 0x03
    34e6:	0c 5f       	subi	r16, 0xFC	; 252
    34e8:	1f 4f       	sbci	r17, 0xFF	; 255
    34ea:	06 c0       	rjmp	.+12     	; 0x34f8 <vfprintf+0x280>
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	0e 5f       	subi	r16, 0xFE	; 254
    34f6:	1f 4f       	sbci	r17, 0xFF	; 255
    34f8:	a4 01       	movw	r20, r8
    34fa:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__ultoa_invert>
    34fe:	a8 2e       	mov	r10, r24
    3500:	a8 18       	sub	r10, r8
    3502:	fb 2d       	mov	r31, r11
    3504:	ff 77       	andi	r31, 0x7F	; 127
    3506:	bf 2e       	mov	r11, r31
    3508:	b6 fe       	sbrs	r11, 6
    350a:	0b c0       	rjmp	.+22     	; 0x3522 <vfprintf+0x2aa>
    350c:	2b 2d       	mov	r18, r11
    350e:	2e 7f       	andi	r18, 0xFE	; 254
    3510:	a5 14       	cp	r10, r5
    3512:	50 f4       	brcc	.+20     	; 0x3528 <vfprintf+0x2b0>
    3514:	b4 fe       	sbrs	r11, 4
    3516:	0a c0       	rjmp	.+20     	; 0x352c <vfprintf+0x2b4>
    3518:	b2 fc       	sbrc	r11, 2
    351a:	08 c0       	rjmp	.+16     	; 0x352c <vfprintf+0x2b4>
    351c:	2b 2d       	mov	r18, r11
    351e:	2e 7e       	andi	r18, 0xEE	; 238
    3520:	05 c0       	rjmp	.+10     	; 0x352c <vfprintf+0x2b4>
    3522:	7a 2c       	mov	r7, r10
    3524:	2b 2d       	mov	r18, r11
    3526:	03 c0       	rjmp	.+6      	; 0x352e <vfprintf+0x2b6>
    3528:	7a 2c       	mov	r7, r10
    352a:	01 c0       	rjmp	.+2      	; 0x352e <vfprintf+0x2b6>
    352c:	75 2c       	mov	r7, r5
    352e:	24 ff       	sbrs	r18, 4
    3530:	0d c0       	rjmp	.+26     	; 0x354c <vfprintf+0x2d4>
    3532:	fe 01       	movw	r30, r28
    3534:	ea 0d       	add	r30, r10
    3536:	f1 1d       	adc	r31, r1
    3538:	80 81       	ld	r24, Z
    353a:	80 33       	cpi	r24, 0x30	; 48
    353c:	11 f4       	brne	.+4      	; 0x3542 <vfprintf+0x2ca>
    353e:	29 7e       	andi	r18, 0xE9	; 233
    3540:	09 c0       	rjmp	.+18     	; 0x3554 <vfprintf+0x2dc>
    3542:	22 ff       	sbrs	r18, 2
    3544:	06 c0       	rjmp	.+12     	; 0x3552 <vfprintf+0x2da>
    3546:	73 94       	inc	r7
    3548:	73 94       	inc	r7
    354a:	04 c0       	rjmp	.+8      	; 0x3554 <vfprintf+0x2dc>
    354c:	82 2f       	mov	r24, r18
    354e:	86 78       	andi	r24, 0x86	; 134
    3550:	09 f0       	breq	.+2      	; 0x3554 <vfprintf+0x2dc>
    3552:	73 94       	inc	r7
    3554:	23 fd       	sbrc	r18, 3
    3556:	13 c0       	rjmp	.+38     	; 0x357e <vfprintf+0x306>
    3558:	20 ff       	sbrs	r18, 0
    355a:	06 c0       	rjmp	.+12     	; 0x3568 <vfprintf+0x2f0>
    355c:	5a 2c       	mov	r5, r10
    355e:	73 14       	cp	r7, r3
    3560:	18 f4       	brcc	.+6      	; 0x3568 <vfprintf+0x2f0>
    3562:	53 0c       	add	r5, r3
    3564:	57 18       	sub	r5, r7
    3566:	73 2c       	mov	r7, r3
    3568:	73 14       	cp	r7, r3
    356a:	68 f4       	brcc	.+26     	; 0x3586 <vfprintf+0x30e>
    356c:	b7 01       	movw	r22, r14
    356e:	80 e2       	ldi	r24, 0x20	; 32
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	2c 87       	std	Y+12, r18	; 0x0c
    3574:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    3578:	73 94       	inc	r7
    357a:	2c 85       	ldd	r18, Y+12	; 0x0c
    357c:	f5 cf       	rjmp	.-22     	; 0x3568 <vfprintf+0x2f0>
    357e:	73 14       	cp	r7, r3
    3580:	10 f4       	brcc	.+4      	; 0x3586 <vfprintf+0x30e>
    3582:	37 18       	sub	r3, r7
    3584:	01 c0       	rjmp	.+2      	; 0x3588 <vfprintf+0x310>
    3586:	31 2c       	mov	r3, r1
    3588:	24 ff       	sbrs	r18, 4
    358a:	12 c0       	rjmp	.+36     	; 0x35b0 <vfprintf+0x338>
    358c:	b7 01       	movw	r22, r14
    358e:	80 e3       	ldi	r24, 0x30	; 48
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	2c 87       	std	Y+12, r18	; 0x0c
    3594:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    3598:	2c 85       	ldd	r18, Y+12	; 0x0c
    359a:	22 ff       	sbrs	r18, 2
    359c:	17 c0       	rjmp	.+46     	; 0x35cc <vfprintf+0x354>
    359e:	21 ff       	sbrs	r18, 1
    35a0:	03 c0       	rjmp	.+6      	; 0x35a8 <vfprintf+0x330>
    35a2:	88 e5       	ldi	r24, 0x58	; 88
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	02 c0       	rjmp	.+4      	; 0x35ac <vfprintf+0x334>
    35a8:	88 e7       	ldi	r24, 0x78	; 120
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	b7 01       	movw	r22, r14
    35ae:	0c c0       	rjmp	.+24     	; 0x35c8 <vfprintf+0x350>
    35b0:	82 2f       	mov	r24, r18
    35b2:	86 78       	andi	r24, 0x86	; 134
    35b4:	59 f0       	breq	.+22     	; 0x35cc <vfprintf+0x354>
    35b6:	21 fd       	sbrc	r18, 1
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <vfprintf+0x346>
    35ba:	80 e2       	ldi	r24, 0x20	; 32
    35bc:	01 c0       	rjmp	.+2      	; 0x35c0 <vfprintf+0x348>
    35be:	8b e2       	ldi	r24, 0x2B	; 43
    35c0:	27 fd       	sbrc	r18, 7
    35c2:	8d e2       	ldi	r24, 0x2D	; 45
    35c4:	b7 01       	movw	r22, r14
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    35cc:	a5 14       	cp	r10, r5
    35ce:	38 f4       	brcc	.+14     	; 0x35de <vfprintf+0x366>
    35d0:	b7 01       	movw	r22, r14
    35d2:	80 e3       	ldi	r24, 0x30	; 48
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    35da:	5a 94       	dec	r5
    35dc:	f7 cf       	rjmp	.-18     	; 0x35cc <vfprintf+0x354>
    35de:	aa 94       	dec	r10
    35e0:	f4 01       	movw	r30, r8
    35e2:	ea 0d       	add	r30, r10
    35e4:	f1 1d       	adc	r31, r1
    35e6:	80 81       	ld	r24, Z
    35e8:	b7 01       	movw	r22, r14
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    35f0:	a1 10       	cpse	r10, r1
    35f2:	f5 cf       	rjmp	.-22     	; 0x35de <vfprintf+0x366>
    35f4:	33 20       	and	r3, r3
    35f6:	09 f4       	brne	.+2      	; 0x35fa <vfprintf+0x382>
    35f8:	51 ce       	rjmp	.-862    	; 0x329c <vfprintf+0x24>
    35fa:	b7 01       	movw	r22, r14
    35fc:	80 e2       	ldi	r24, 0x20	; 32
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	0e 94 47 1b 	call	0x368e	; 0x368e <fputc>
    3604:	3a 94       	dec	r3
    3606:	f6 cf       	rjmp	.-20     	; 0x35f4 <vfprintf+0x37c>
    3608:	f7 01       	movw	r30, r14
    360a:	86 81       	ldd	r24, Z+6	; 0x06
    360c:	97 81       	ldd	r25, Z+7	; 0x07
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <vfprintf+0x39c>
    3610:	8f ef       	ldi	r24, 0xFF	; 255
    3612:	9f ef       	ldi	r25, 0xFF	; 255
    3614:	2c 96       	adiw	r28, 0x0c	; 12
    3616:	e2 e1       	ldi	r30, 0x12	; 18
    3618:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__epilogue_restores__>

0000361c <calloc>:
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
    3620:	cf 93       	push	r28
    3622:	df 93       	push	r29
    3624:	86 9f       	mul	r24, r22
    3626:	80 01       	movw	r16, r0
    3628:	87 9f       	mul	r24, r23
    362a:	10 0d       	add	r17, r0
    362c:	96 9f       	mul	r25, r22
    362e:	10 0d       	add	r17, r0
    3630:	11 24       	eor	r1, r1
    3632:	c8 01       	movw	r24, r16
    3634:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <malloc>
    3638:	ec 01       	movw	r28, r24
    363a:	00 97       	sbiw	r24, 0x00	; 0
    363c:	29 f0       	breq	.+10     	; 0x3648 <calloc+0x2c>
    363e:	a8 01       	movw	r20, r16
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	70 e0       	ldi	r23, 0x00	; 0
    3644:	0e 94 35 1b 	call	0x366a	; 0x366a <memset>
    3648:	ce 01       	movw	r24, r28
    364a:	df 91       	pop	r29
    364c:	cf 91       	pop	r28
    364e:	1f 91       	pop	r17
    3650:	0f 91       	pop	r16
    3652:	08 95       	ret

00003654 <strnlen_P>:
    3654:	fc 01       	movw	r30, r24
    3656:	05 90       	lpm	r0, Z+
    3658:	61 50       	subi	r22, 0x01	; 1
    365a:	70 40       	sbci	r23, 0x00	; 0
    365c:	01 10       	cpse	r0, r1
    365e:	d8 f7       	brcc	.-10     	; 0x3656 <strnlen_P+0x2>
    3660:	80 95       	com	r24
    3662:	90 95       	com	r25
    3664:	8e 0f       	add	r24, r30
    3666:	9f 1f       	adc	r25, r31
    3668:	08 95       	ret

0000366a <memset>:
    366a:	dc 01       	movw	r26, r24
    366c:	01 c0       	rjmp	.+2      	; 0x3670 <memset+0x6>
    366e:	6d 93       	st	X+, r22
    3670:	41 50       	subi	r20, 0x01	; 1
    3672:	50 40       	sbci	r21, 0x00	; 0
    3674:	e0 f7       	brcc	.-8      	; 0x366e <memset+0x4>
    3676:	08 95       	ret

00003678 <strnlen>:
    3678:	fc 01       	movw	r30, r24
    367a:	61 50       	subi	r22, 0x01	; 1
    367c:	70 40       	sbci	r23, 0x00	; 0
    367e:	01 90       	ld	r0, Z+
    3680:	01 10       	cpse	r0, r1
    3682:	d8 f7       	brcc	.-10     	; 0x367a <strnlen+0x2>
    3684:	80 95       	com	r24
    3686:	90 95       	com	r25
    3688:	8e 0f       	add	r24, r30
    368a:	9f 1f       	adc	r25, r31
    368c:	08 95       	ret

0000368e <fputc>:
    368e:	0f 93       	push	r16
    3690:	1f 93       	push	r17
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	18 2f       	mov	r17, r24
    3698:	09 2f       	mov	r16, r25
    369a:	eb 01       	movw	r28, r22
    369c:	8b 81       	ldd	r24, Y+3	; 0x03
    369e:	81 fd       	sbrc	r24, 1
    36a0:	03 c0       	rjmp	.+6      	; 0x36a8 <fputc+0x1a>
    36a2:	8f ef       	ldi	r24, 0xFF	; 255
    36a4:	9f ef       	ldi	r25, 0xFF	; 255
    36a6:	20 c0       	rjmp	.+64     	; 0x36e8 <fputc+0x5a>
    36a8:	82 ff       	sbrs	r24, 2
    36aa:	10 c0       	rjmp	.+32     	; 0x36cc <fputc+0x3e>
    36ac:	4e 81       	ldd	r20, Y+6	; 0x06
    36ae:	5f 81       	ldd	r21, Y+7	; 0x07
    36b0:	2c 81       	ldd	r18, Y+4	; 0x04
    36b2:	3d 81       	ldd	r19, Y+5	; 0x05
    36b4:	42 17       	cp	r20, r18
    36b6:	53 07       	cpc	r21, r19
    36b8:	7c f4       	brge	.+30     	; 0x36d8 <fputc+0x4a>
    36ba:	e8 81       	ld	r30, Y
    36bc:	f9 81       	ldd	r31, Y+1	; 0x01
    36be:	9f 01       	movw	r18, r30
    36c0:	2f 5f       	subi	r18, 0xFF	; 255
    36c2:	3f 4f       	sbci	r19, 0xFF	; 255
    36c4:	39 83       	std	Y+1, r19	; 0x01
    36c6:	28 83       	st	Y, r18
    36c8:	10 83       	st	Z, r17
    36ca:	06 c0       	rjmp	.+12     	; 0x36d8 <fputc+0x4a>
    36cc:	e8 85       	ldd	r30, Y+8	; 0x08
    36ce:	f9 85       	ldd	r31, Y+9	; 0x09
    36d0:	81 2f       	mov	r24, r17
    36d2:	09 95       	icall
    36d4:	89 2b       	or	r24, r25
    36d6:	29 f7       	brne	.-54     	; 0x36a2 <fputc+0x14>
    36d8:	2e 81       	ldd	r18, Y+6	; 0x06
    36da:	3f 81       	ldd	r19, Y+7	; 0x07
    36dc:	2f 5f       	subi	r18, 0xFF	; 255
    36de:	3f 4f       	sbci	r19, 0xFF	; 255
    36e0:	3f 83       	std	Y+7, r19	; 0x07
    36e2:	2e 83       	std	Y+6, r18	; 0x06
    36e4:	81 2f       	mov	r24, r17
    36e6:	90 2f       	mov	r25, r16
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
    36ec:	1f 91       	pop	r17
    36ee:	0f 91       	pop	r16
    36f0:	08 95       	ret

000036f2 <__ultoa_invert>:
    36f2:	fa 01       	movw	r30, r20
    36f4:	aa 27       	eor	r26, r26
    36f6:	28 30       	cpi	r18, 0x08	; 8
    36f8:	51 f1       	breq	.+84     	; 0x374e <__ultoa_invert+0x5c>
    36fa:	20 31       	cpi	r18, 0x10	; 16
    36fc:	81 f1       	breq	.+96     	; 0x375e <__ultoa_invert+0x6c>
    36fe:	e8 94       	clt
    3700:	6f 93       	push	r22
    3702:	6e 7f       	andi	r22, 0xFE	; 254
    3704:	6e 5f       	subi	r22, 0xFE	; 254
    3706:	7f 4f       	sbci	r23, 0xFF	; 255
    3708:	8f 4f       	sbci	r24, 0xFF	; 255
    370a:	9f 4f       	sbci	r25, 0xFF	; 255
    370c:	af 4f       	sbci	r26, 0xFF	; 255
    370e:	b1 e0       	ldi	r27, 0x01	; 1
    3710:	3e d0       	rcall	.+124    	; 0x378e <__ultoa_invert+0x9c>
    3712:	b4 e0       	ldi	r27, 0x04	; 4
    3714:	3c d0       	rcall	.+120    	; 0x378e <__ultoa_invert+0x9c>
    3716:	67 0f       	add	r22, r23
    3718:	78 1f       	adc	r23, r24
    371a:	89 1f       	adc	r24, r25
    371c:	9a 1f       	adc	r25, r26
    371e:	a1 1d       	adc	r26, r1
    3720:	68 0f       	add	r22, r24
    3722:	79 1f       	adc	r23, r25
    3724:	8a 1f       	adc	r24, r26
    3726:	91 1d       	adc	r25, r1
    3728:	a1 1d       	adc	r26, r1
    372a:	6a 0f       	add	r22, r26
    372c:	71 1d       	adc	r23, r1
    372e:	81 1d       	adc	r24, r1
    3730:	91 1d       	adc	r25, r1
    3732:	a1 1d       	adc	r26, r1
    3734:	20 d0       	rcall	.+64     	; 0x3776 <__ultoa_invert+0x84>
    3736:	09 f4       	brne	.+2      	; 0x373a <__ultoa_invert+0x48>
    3738:	68 94       	set
    373a:	3f 91       	pop	r19
    373c:	2a e0       	ldi	r18, 0x0A	; 10
    373e:	26 9f       	mul	r18, r22
    3740:	11 24       	eor	r1, r1
    3742:	30 19       	sub	r19, r0
    3744:	30 5d       	subi	r19, 0xD0	; 208
    3746:	31 93       	st	Z+, r19
    3748:	de f6       	brtc	.-74     	; 0x3700 <__ultoa_invert+0xe>
    374a:	cf 01       	movw	r24, r30
    374c:	08 95       	ret
    374e:	46 2f       	mov	r20, r22
    3750:	47 70       	andi	r20, 0x07	; 7
    3752:	40 5d       	subi	r20, 0xD0	; 208
    3754:	41 93       	st	Z+, r20
    3756:	b3 e0       	ldi	r27, 0x03	; 3
    3758:	0f d0       	rcall	.+30     	; 0x3778 <__ultoa_invert+0x86>
    375a:	c9 f7       	brne	.-14     	; 0x374e <__ultoa_invert+0x5c>
    375c:	f6 cf       	rjmp	.-20     	; 0x374a <__ultoa_invert+0x58>
    375e:	46 2f       	mov	r20, r22
    3760:	4f 70       	andi	r20, 0x0F	; 15
    3762:	40 5d       	subi	r20, 0xD0	; 208
    3764:	4a 33       	cpi	r20, 0x3A	; 58
    3766:	18 f0       	brcs	.+6      	; 0x376e <__ultoa_invert+0x7c>
    3768:	49 5d       	subi	r20, 0xD9	; 217
    376a:	31 fd       	sbrc	r19, 1
    376c:	40 52       	subi	r20, 0x20	; 32
    376e:	41 93       	st	Z+, r20
    3770:	02 d0       	rcall	.+4      	; 0x3776 <__ultoa_invert+0x84>
    3772:	a9 f7       	brne	.-22     	; 0x375e <__ultoa_invert+0x6c>
    3774:	ea cf       	rjmp	.-44     	; 0x374a <__ultoa_invert+0x58>
    3776:	b4 e0       	ldi	r27, 0x04	; 4
    3778:	a6 95       	lsr	r26
    377a:	97 95       	ror	r25
    377c:	87 95       	ror	r24
    377e:	77 95       	ror	r23
    3780:	67 95       	ror	r22
    3782:	ba 95       	dec	r27
    3784:	c9 f7       	brne	.-14     	; 0x3778 <__ultoa_invert+0x86>
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	61 05       	cpc	r22, r1
    378a:	71 05       	cpc	r23, r1
    378c:	08 95       	ret
    378e:	9b 01       	movw	r18, r22
    3790:	ac 01       	movw	r20, r24
    3792:	0a 2e       	mov	r0, r26
    3794:	06 94       	lsr	r0
    3796:	57 95       	ror	r21
    3798:	47 95       	ror	r20
    379a:	37 95       	ror	r19
    379c:	27 95       	ror	r18
    379e:	ba 95       	dec	r27
    37a0:	c9 f7       	brne	.-14     	; 0x3794 <__ultoa_invert+0xa2>
    37a2:	62 0f       	add	r22, r18
    37a4:	73 1f       	adc	r23, r19
    37a6:	84 1f       	adc	r24, r20
    37a8:	95 1f       	adc	r25, r21
    37aa:	a0 1d       	adc	r26, r0
    37ac:	08 95       	ret

000037ae <__muluhisi3>:
    37ae:	0e 94 21 1c 	call	0x3842	; 0x3842 <__umulhisi3>
    37b2:	a5 9f       	mul	r26, r21
    37b4:	90 0d       	add	r25, r0
    37b6:	b4 9f       	mul	r27, r20
    37b8:	90 0d       	add	r25, r0
    37ba:	a4 9f       	mul	r26, r20
    37bc:	80 0d       	add	r24, r0
    37be:	91 1d       	adc	r25, r1
    37c0:	11 24       	eor	r1, r1
    37c2:	08 95       	ret

000037c4 <__mulshisi3>:
    37c4:	b7 ff       	sbrs	r27, 7
    37c6:	0c 94 d7 1b 	jmp	0x37ae	; 0x37ae <__muluhisi3>

000037ca <__mulohisi3>:
    37ca:	0e 94 d7 1b 	call	0x37ae	; 0x37ae <__muluhisi3>
    37ce:	82 1b       	sub	r24, r18
    37d0:	93 0b       	sbc	r25, r19
    37d2:	08 95       	ret

000037d4 <__prologue_saves__>:
    37d4:	2f 92       	push	r2
    37d6:	3f 92       	push	r3
    37d8:	4f 92       	push	r4
    37da:	5f 92       	push	r5
    37dc:	6f 92       	push	r6
    37de:	7f 92       	push	r7
    37e0:	8f 92       	push	r8
    37e2:	9f 92       	push	r9
    37e4:	af 92       	push	r10
    37e6:	bf 92       	push	r11
    37e8:	cf 92       	push	r12
    37ea:	df 92       	push	r13
    37ec:	ef 92       	push	r14
    37ee:	ff 92       	push	r15
    37f0:	0f 93       	push	r16
    37f2:	1f 93       	push	r17
    37f4:	cf 93       	push	r28
    37f6:	df 93       	push	r29
    37f8:	cd b7       	in	r28, 0x3d	; 61
    37fa:	de b7       	in	r29, 0x3e	; 62
    37fc:	ca 1b       	sub	r28, r26
    37fe:	db 0b       	sbc	r29, r27
    3800:	0f b6       	in	r0, 0x3f	; 63
    3802:	f8 94       	cli
    3804:	de bf       	out	0x3e, r29	; 62
    3806:	0f be       	out	0x3f, r0	; 63
    3808:	cd bf       	out	0x3d, r28	; 61
    380a:	09 94       	ijmp

0000380c <__epilogue_restores__>:
    380c:	2a 88       	ldd	r2, Y+18	; 0x12
    380e:	39 88       	ldd	r3, Y+17	; 0x11
    3810:	48 88       	ldd	r4, Y+16	; 0x10
    3812:	5f 84       	ldd	r5, Y+15	; 0x0f
    3814:	6e 84       	ldd	r6, Y+14	; 0x0e
    3816:	7d 84       	ldd	r7, Y+13	; 0x0d
    3818:	8c 84       	ldd	r8, Y+12	; 0x0c
    381a:	9b 84       	ldd	r9, Y+11	; 0x0b
    381c:	aa 84       	ldd	r10, Y+10	; 0x0a
    381e:	b9 84       	ldd	r11, Y+9	; 0x09
    3820:	c8 84       	ldd	r12, Y+8	; 0x08
    3822:	df 80       	ldd	r13, Y+7	; 0x07
    3824:	ee 80       	ldd	r14, Y+6	; 0x06
    3826:	fd 80       	ldd	r15, Y+5	; 0x05
    3828:	0c 81       	ldd	r16, Y+4	; 0x04
    382a:	1b 81       	ldd	r17, Y+3	; 0x03
    382c:	aa 81       	ldd	r26, Y+2	; 0x02
    382e:	b9 81       	ldd	r27, Y+1	; 0x01
    3830:	ce 0f       	add	r28, r30
    3832:	d1 1d       	adc	r29, r1
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	ed 01       	movw	r28, r26
    3840:	08 95       	ret

00003842 <__umulhisi3>:
    3842:	a2 9f       	mul	r26, r18
    3844:	b0 01       	movw	r22, r0
    3846:	b3 9f       	mul	r27, r19
    3848:	c0 01       	movw	r24, r0
    384a:	a3 9f       	mul	r26, r19
    384c:	70 0d       	add	r23, r0
    384e:	81 1d       	adc	r24, r1
    3850:	11 24       	eor	r1, r1
    3852:	91 1d       	adc	r25, r1
    3854:	b2 9f       	mul	r27, r18
    3856:	70 0d       	add	r23, r0
    3858:	81 1d       	adc	r24, r1
    385a:	11 24       	eor	r1, r1
    385c:	91 1d       	adc	r25, r1
    385e:	08 95       	ret

00003860 <_exit>:
    3860:	f8 94       	cli

00003862 <__stop_program>:
    3862:	ff cf       	rjmp	.-2      	; 0x3862 <__stop_program>
